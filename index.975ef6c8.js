// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        globalObject
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"9mu7C":[function(require,module,exports,__globalThis) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "890e741a975ef6c8";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , disposedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && ![
        'localhost',
        '127.0.0.1',
        '0.0.0.0'
    ].includes(hostname) ? 'wss' : 'ws';
    var ws;
    if (HMR_USE_SSE) ws = new EventSource('/__parcel_hmr');
    else try {
        ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes('test.js');
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        disposedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === 'reload') fullReload();
        else if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') window.dispatchEvent(new CustomEvent('parcelhmraccept'));
                await hmrApplyUpdates(assets);
                hmrDisposeQueue();
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                let processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, '') : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + '</div>').join('')}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ''}
      </div>
    `;
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ('reload' in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute('href');
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', // $FlowFixMe
    href.split('?')[0] + '?' + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === 'js') {
        if (typeof document !== 'undefined') {
            let script = document.createElement('script');
            script.src = asset.url + '?t=' + Date.now();
            if (asset.outputFormat === 'esmodule') script.type = 'module';
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === 'function') {
            // Worker scripts
            if (asset.outputFormat === 'esmodule') return import(asset.url + '?t=' + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + '?t=' + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        }
        // Always traverse to the parent bundle, even if we already replaced the asset in this bundle.
        // This is required in case modules are duplicated. We need to ensure all instances have the updated code.
        if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDisposeQueue() {
    // Dispose all old assets.
    for(let i = 0; i < assetsToDispose.length; i++){
        let id = assetsToDispose[i][1];
        if (!disposedAssets[id]) {
            hmrDispose(assetsToDispose[i][0], id);
            disposedAssets[id] = true;
        }
    }
    assetsToDispose = [];
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
        let assetsToAlsoAccept = [];
        cached.hot._acceptCallbacks.forEach(function(cb) {
            let additionalAssets = cb(function() {
                return getParents(module.bundle.root, id);
            });
            if (Array.isArray(additionalAssets) && additionalAssets.length) assetsToAlsoAccept.push(...additionalAssets);
        });
        if (assetsToAlsoAccept.length) {
            let handled = assetsToAlsoAccept.every(function(a) {
                return hmrAcceptCheck(a[0], a[1]);
            });
            if (!handled) return fullReload();
            hmrDisposeQueue();
        }
    }
}

},{}],"8lqZg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _dialog = require("./dialog");
var _debug = require("./components/debug");
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _puzzle = require("./components/puzzle");
var _offset = require("./components/coordinates/offset");
var _util = require("./components/util");
const puzzle = new (0, _puzzle.Puzzle)();
const beaming = {
    debug: (0, _debug.debug),
    puzzle
};
// Used by functional tests
beaming.centerOnTile = function(r, c) {
    return puzzle.centerOnTile(new (0, _offset.OffsetCoordinates)(r, c));
};
beaming.clearDebugPoints = puzzle.clearDebugPoints.bind(puzzle);
beaming.drawDebugPoint = function(x, y, style) {
    return puzzle.drawDebugPoint(new (0, _paper.Point)(x, y), style);
};
// Export
window.beaming = beaming;
window.paper = (0, _paperDefault.default);
window.util = {
    base64decode: (0, _util.base64decode)
};

},{"./dialog":"4NICb","./components/debug":"7Nkch","paper":"agkns","./components/puzzle":"jIcx0","./components/coordinates/offset":"3z9Dj","./components/util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NICb":[function(require,module,exports,__globalThis) {
document.querySelectorAll('.dialog').forEach((element)=>{
    const dialog = document.getElementById(`dialog-${element.id}`);
    element.addEventListener('click', ()=>{
        if (!dialog.open) {
            dialog.showModal();
            dialog.dispatchEvent(new CustomEvent('open'));
        }
    });
});

},{}],"7Nkch":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "debug", ()=>debug);
var _util = require("./util");
const console = window.console = window.console || {
    debug: function() {}
};
const consoleDebug = console.debug;
const enabled = (0, _util.params).has('debug');
if (enabled) document.body.classList.add('debug');
function debug(debug) {
    console.debug = debug ? consoleDebug : function() {};
}
debug.enabled = enabled;
debug(enabled);

},{"./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92uDI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "params", ()=>params);
parcelHelpers.export(exports, "sqrt3", ()=>sqrt3);
parcelHelpers.export(exports, "url", ()=>url);
parcelHelpers.export(exports, "jsonDiffPatch", ()=>jsonDiffPatch);
parcelHelpers.export(exports, "addClass", ()=>addClass);
parcelHelpers.export(exports, "addDegrees", ()=>addDegrees);
parcelHelpers.export(exports, "addDirection", ()=>addDirection);
parcelHelpers.export(exports, "base64decode", ()=>base64decode);
parcelHelpers.export(exports, "base64encode", ()=>base64encode);
parcelHelpers.export(exports, "capitalize", ()=>capitalize);
parcelHelpers.export(exports, "coalesce", ()=>coalesce);
/**
 * Calls the given function one time after a task has finished for the given amount of time.
 * @param func the function to call
 * @param delay the time to wait after the task has completed
 * @returns {(function(...[*]): void)|*}
 */ parcelHelpers.export(exports, "debounce", ()=>debounce);
parcelHelpers.export(exports, "deepEqual", ()=>deepEqual);
parcelHelpers.export(exports, "emitEvent", ()=>emitEvent);
parcelHelpers.export(exports, "fuzzyEquals", ()=>fuzzyEquals);
parcelHelpers.export(exports, "getColorElement", ()=>getColorElement);
parcelHelpers.export(exports, "getColorElements", ()=>getColorElements);
parcelHelpers.export(exports, "getDistance", ()=>getDistance);
parcelHelpers.export(exports, "getIconElement", ()=>getIconElement);
parcelHelpers.export(exports, "getKey", ()=>getKey);
parcelHelpers.export(exports, "getKeyFactory", ()=>getKeyFactory);
parcelHelpers.export(exports, "getPointBetween", ()=>getPointBetween);
parcelHelpers.export(exports, "getPointFrom", ()=>getPointFrom);
parcelHelpers.export(exports, "getOppositeDirection", ()=>getOppositeDirection);
// Normalize the direction. Currently, directions correspond to points in the hexagon as PaperJS draws it, with the
// first point (direction zero) corresponding to direction 4 in the cube system. May want to revisit this at some
// point when standardizing directions across everything.
// See: http://paperjs.org/tutorials/geometry/vector-geometry/
// TODO: may want to consider updating directions across this project to something more uniform
parcelHelpers.export(exports, "getConvertedDirection", ()=>getConvertedDirection);
// Gets the position of the point relative to the line.
// Returns 0 if point is on the line, +1 on one side of the line and -1 on the other.
parcelHelpers.export(exports, "getPosition", ()=>getPosition);
parcelHelpers.export(exports, "getReflectedDirection", ()=>getReflectedDirection);
parcelHelpers.export(exports, "getTextElement", ()=>getTextElement);
parcelHelpers.export(exports, "merge", ()=>merge);
parcelHelpers.export(exports, "noop", ()=>noop);
parcelHelpers.export(exports, "pointToString", ()=>pointToString);
parcelHelpers.export(exports, "removeClass", ()=>removeClass);
parcelHelpers.export(exports, "sizeToString", ()=>sizeToString);
parcelHelpers.export(exports, "stringToPoint", ()=>stringToPoint);
parcelHelpers.export(exports, "stringToSize", ()=>stringToSize);
parcelHelpers.export(exports, "subtractDirection", ()=>subtractDirection);
parcelHelpers.export(exports, "uniqueBy", ()=>uniqueBy);
parcelHelpers.export(exports, "uniqueId", ()=>uniqueId);
parcelHelpers.export(exports, "writeToClipboard", ()=>writeToClipboard);
var _jsondiffpatch = require("jsondiffpatch");
var _deepmerge = require("deepmerge");
var _deepmergeDefault = parcelHelpers.interopDefault(_deepmerge);
var _pako = require("pako");
var _pakoDefault = parcelHelpers.interopDefault(_pako);
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _paper = require("paper");
const location = window.location;
const params = new URLSearchParams(location.search);
const sqrt3 = Math.sqrt(3);
const url = new URL(location);
const jsonDiffPatch = _jsondiffpatch.create({
    objectHash: deepEqual
});
function addClass(className, ...elements) {
    elements.forEach((element)=>element.classList.add(className));
}
function addDegrees(original, degrees) {
    const result = original + degrees;
    if (result < 0) return 360 + result;
    else if (result > 360) return result - 360;
    return result;
}
function addDirection(direction, amount) {
    return (direction + amount + 6) % 6;
}
function base64decode(string) {
    const binString = window.atob(base64unescape(string));
    // noinspection JSCheckFunctionSignatures
    return new TextDecoder().decode((0, _pakoDefault.default).inflate(Uint8Array.from(binString, (c)=>c.codePointAt(0))));
}
window.base64decode = base64decode;
function base64encode(string) {
    return base64escape(window.btoa(String.fromCodePoint(...(0, _pakoDefault.default).deflate(new TextEncoder().encode(string)))));
}
window.base64encode = base64encode;
function base64escape(string) {
    // https://en.wikipedia.org/wiki/Base64#URL_applications
    return string.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}
function base64unescape(string) {
    return (string + '==='.slice((string.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/');
}
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function coalesce(...args) {
    return args.findLast((arg)=>arg !== undefined);
}
function debounce(func, delay = 500) {
    let timeout;
    return (...args)=>{
        clearTimeout(timeout);
        timeout = setTimeout(()=>{
            func(...args);
        }, delay);
    };
}
function deepEqual(x, y) {
    return typeof x === 'object' && typeof y === 'object' ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).every((key)=>{
        const xv = x[key];
        const yv = y[key];
        return Object.hasOwn(y, key) && (typeof xv?.equals === 'function' ? xv.equals(yv) : deepEqual(xv, yv));
    }) : x === y;
}
function emitEvent(type, detail = null) {
    document.dispatchEvent(new CustomEvent(type, {
        detail
    }));
}
function fuzzyEquals(pointA, pointB, maxDiff = 0) {
    return pointA && pointB && pointA.round().subtract(pointB.round()).length <= maxDiff;
}
function getColorElement(color) {
    const span = document.createElement('span');
    span.classList.add('color');
    span.style.backgroundColor = color;
    span.title = color;
    return span;
}
function getColorElements(colors) {
    if (!colors.length) return [];
    const color = (0, _chromaJsDefault.default).average(colors).hex();
    const elements = [];
    if (colors.some((other)=>other !== color)) {
        const maxColorIndex = colors.length - 1;
        colors.forEach((color, index)=>{
            elements.push(getColorElement(color));
            if (index < maxColorIndex) {
                const plus = document.createElement('span');
                plus.classList.add('text');
                plus.textContent = '+';
                elements.push(plus);
            }
        });
        const equals = document.createElement('span');
        equals.classList.add('text');
        equals.textContent = '=';
        elements.push(equals);
    }
    elements.push(getColorElement(color));
    return elements;
}
function getDistance(point) {
    return (a, b)=>a.subtract(point).length - b.subtract(point).length;
}
function getIconElement(name, title) {
    const span = document.createElement('span');
    span.classList.add('icon');
    span.textContent = name;
    span.title = title ?? capitalize(name);
    return span;
}
function getKey() {
    return Array.from(arguments).join(':');
}
function getKeyFactory() {
    const base = Array.from(arguments).flat();
    return function() {
        return getKey(...base, ...arguments);
    };
}
function getPointBetween(pointA, pointB, length = (length)=>length / 2) {
    const vector = pointA.subtract(pointB);
    vector.length = typeof length === 'function' ? length(vector.length) : length;
    return pointA.subtract(vector);
}
function getPointFrom(point, length, direction) {
    const vector = new (0, _paper.Point)(0, 0);
    vector.length = length;
    vector.angle = getConvertedDirection(direction) * 60;
    return point.add(vector);
}
function getOppositeDirection(direction) {
    return direction + (direction >= 3 ? -3 : 3);
}
function getConvertedDirection(direction, toPaperJs = true) {
    direction = direction + (toPaperJs ? -1 : 1) * 2;
    if (direction < 0) return direction + 6;
    else if (direction > 5) return direction - 6;
    return direction;
}
function getPosition(line, point) {
    const [a, b] = line;
    const c = point;
    return Math.sign((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x));
}
function getReflectedDirection(beamDirection, reflectorDirection) {
    // Have to convert to PaperJS directions on the way in
    const beamAngle = getConvertedDirection(beamDirection, true) * 60;
    const reflectorAngle = reflectorDirection * 30;
    const reflectedBeamAngle = (reflectorAngle - beamAngle) * 2;
    // And convert back to our normal directions on the way out
    return getConvertedDirection(addDegrees(beamAngle, reflectedBeamAngle) / 60 % 6, false);
}
function getTextElement(text) {
    const span = document.createElement('span');
    span.classList.add('text');
    span.textContent = text.toString();
    return span;
}
function merge(a, b, options) {
    let args;
    if (Array.isArray(a)) {
        args = a;
        options = b;
    } else args = [
        a,
        b
    ];
    return (0, _deepmergeDefault.default).all(args, options);
}
function noop(value) {
    if (value) return value;
}
function pointToString(point) {
    return [
        point.x,
        point.y
    ].join(',');
}
function removeClass(className, ...elements) {
    elements.forEach((element)=>element.classList.remove(className));
}
function sizeToString(size) {
    return [
        size.width,
        size.height
    ].join(',');
}
function stringToPoint(string) {
    return new (0, _paper.Point)(string.split(','));
}
function stringToSize(string) {
    return new (0, _paper.Size)(string.split(','));
}
function subtractDirection(direction, amount) {
    return addDirection(direction, amount * -1);
}
function uniqueBy(key, array) {
    const values = array.map((value)=>value[key]);
    return array.filter((value, index)=>!values.includes(value[key], index + 1));
}
function uniqueId() {
    return crypto.randomUUID().split('-')[0];
}
async function writeToClipboard(string) {
    try {
        await navigator.clipboard.writeText(string);
    } catch (error) {
        console.error('Could not write to clipboard.', error.message);
    }
}

},{"jsondiffpatch":"7GjiV","deepmerge":"ck1Q2","pako":"afBDp","chroma-js":"bnCL0","paper":"agkns","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GjiV":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DiffPatcher", ()=>(0, _diffpatcherJsDefault.default));
parcelHelpers.export(exports, "dateReviver", ()=>(0, _dateReviverJsDefault.default));
parcelHelpers.export(exports, "create", ()=>create);
parcelHelpers.export(exports, "diff", ()=>diff);
parcelHelpers.export(exports, "patch", ()=>patch);
parcelHelpers.export(exports, "unpatch", ()=>unpatch);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "clone", ()=>clone);
var _diffpatcherJs = require("./diffpatcher.js");
var _diffpatcherJsDefault = parcelHelpers.interopDefault(_diffpatcherJs);
var _dateReviverJs = require("./date-reviver.js");
var _dateReviverJsDefault = parcelHelpers.interopDefault(_dateReviverJs);
function create(options) {
    return new (0, _diffpatcherJsDefault.default)(options);
}
let defaultInstance;
function diff(left, right) {
    if (!defaultInstance) defaultInstance = new (0, _diffpatcherJsDefault.default)();
    return defaultInstance.diff(left, right);
}
function patch(left, delta) {
    if (!defaultInstance) defaultInstance = new (0, _diffpatcherJsDefault.default)();
    return defaultInstance.patch(left, delta);
}
function unpatch(right, delta) {
    if (!defaultInstance) defaultInstance = new (0, _diffpatcherJsDefault.default)();
    return defaultInstance.unpatch(right, delta);
}
function reverse(delta) {
    if (!defaultInstance) defaultInstance = new (0, _diffpatcherJsDefault.default)();
    return defaultInstance.reverse(delta);
}
function clone(value) {
    if (!defaultInstance) defaultInstance = new (0, _diffpatcherJsDefault.default)();
    return defaultInstance.clone(value);
}

},{"./diffpatcher.js":"cyGwn","./date-reviver.js":"5X5xD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyGwn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _processorJs = require("./processor.js");
var _processorJsDefault = parcelHelpers.interopDefault(_processorJs);
var _pipeJs = require("./pipe.js");
var _pipeJsDefault = parcelHelpers.interopDefault(_pipeJs);
var _diffJs = require("./contexts/diff.js");
var _diffJsDefault = parcelHelpers.interopDefault(_diffJs);
var _patchJs = require("./contexts/patch.js");
var _patchJsDefault = parcelHelpers.interopDefault(_patchJs);
var _reverseJs = require("./contexts/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _trivialJs = require("./filters/trivial.js");
var _nestedJs = require("./filters/nested.js");
var _arraysJs = require("./filters/arrays.js");
var _datesJs = require("./filters/dates.js");
var _textsJs = require("./filters/texts.js");
class DiffPatcher {
    constructor(options){
        this.processor = new (0, _processorJsDefault.default)(options);
        this.processor.pipe(new (0, _pipeJsDefault.default)('diff').append(_nestedJs.collectChildrenDiffFilter, _trivialJs.diffFilter, _datesJs.diffFilter, _textsJs.diffFilter, _nestedJs.objectsDiffFilter, _arraysJs.diffFilter).shouldHaveResult());
        this.processor.pipe(new (0, _pipeJsDefault.default)('patch').append(_nestedJs.collectChildrenPatchFilter, _arraysJs.collectChildrenPatchFilter, _trivialJs.patchFilter, _textsJs.patchFilter, _nestedJs.patchFilter, _arraysJs.patchFilter).shouldHaveResult());
        this.processor.pipe(new (0, _pipeJsDefault.default)('reverse').append(_nestedJs.collectChildrenReverseFilter, _arraysJs.collectChildrenReverseFilter, _trivialJs.reverseFilter, _textsJs.reverseFilter, _nestedJs.reverseFilter, _arraysJs.reverseFilter).shouldHaveResult());
    }
    options(options) {
        return this.processor.options(options);
    }
    diff(left, right) {
        return this.processor.process(new (0, _diffJsDefault.default)(left, right));
    }
    patch(left, delta) {
        return this.processor.process(new (0, _patchJsDefault.default)(left, delta));
    }
    reverse(delta) {
        return this.processor.process(new (0, _reverseJsDefault.default)(delta));
    }
    unpatch(right, delta) {
        return this.patch(right, this.reverse(delta));
    }
    clone(value) {
        return (0, _cloneJsDefault.default)(value);
    }
}
exports.default = DiffPatcher;

},{"./processor.js":"ATnq1","./pipe.js":"eCYHz","./contexts/diff.js":"7wKW2","./contexts/patch.js":"bIjuC","./contexts/reverse.js":"iQssp","./clone.js":"159em","./filters/trivial.js":"dvvVR","./filters/nested.js":"cl1JI","./filters/arrays.js":"1WTTr","./filters/dates.js":"gOmCY","./filters/texts.js":"egmfj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ATnq1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Processor {
    constructor(options){
        this.selfOptions = options || {};
        this.pipes = {};
    }
    options(options) {
        if (options) this.selfOptions = options;
        return this.selfOptions;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    pipe(name, pipeArg) {
        let pipe = pipeArg;
        if (typeof name === 'string') {
            if (typeof pipe === 'undefined') return this.pipes[name];
            else this.pipes[name] = pipe;
        }
        if (name && name.name) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            pipe = name;
            if (pipe.processor === this) return pipe;
            this.pipes[pipe.name] = pipe;
        }
        pipe.processor = this;
        return pipe;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    process(input, pipe) {
        let context = input;
        context.options = this.options();
        let nextPipe = pipe || input.pipe || 'default';
        let lastPipe;
        while(nextPipe){
            if (typeof context.nextAfterChildren !== 'undefined') {
                // children processed and coming back to parent
                context.next = context.nextAfterChildren;
                context.nextAfterChildren = null;
            }
            if (typeof nextPipe === 'string') nextPipe = this.pipe(nextPipe);
            nextPipe.process(context);
            lastPipe = nextPipe;
            nextPipe = null;
            if (context) {
                if (context.next) {
                    context = context.next;
                    nextPipe = context.pipe || lastPipe;
                }
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return
        return context.hasResult ? context.result : undefined;
    }
}
exports.default = Processor;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports,__globalThis) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"eCYHz":[function(require,module,exports,__globalThis) {
// eslint-disable-next-line @typescript-eslint/no-explicit-any
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Pipe {
    constructor(name){
        this.name = name;
        this.filters = [];
    }
    process(input) {
        if (!this.processor) throw new Error('add this pipe to a processor before using it');
        const debug = this.debug;
        const length = this.filters.length;
        const context = input;
        for(let index = 0; index < length; index++){
            const filter = this.filters[index];
            if (debug) this.log(`filter: ${filter.filterName}`);
            filter(context);
            if (typeof context === 'object' && context.exiting) {
                context.exiting = false;
                break;
            }
        }
        if (!context.next && this.resultCheck) this.resultCheck(context);
    }
    log(msg) {
        console.log(`[jsondiffpatch] ${this.name} pipe, ${msg}`);
    }
    append(...args) {
        this.filters.push(...args);
        return this;
    }
    prepend(...args) {
        this.filters.unshift(...args);
        return this;
    }
    indexOf(filterName) {
        if (!filterName) throw new Error('a filter name is required');
        for(let index = 0; index < this.filters.length; index++){
            const filter = this.filters[index];
            if (filter.filterName === filterName) return index;
        }
        throw new Error(`filter not found: ${filterName}`);
    }
    list() {
        return this.filters.map((f)=>f.filterName);
    }
    after(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index + 1, 0, ...params);
        return this;
    }
    before(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 0, ...params);
        return this;
    }
    replace(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 1, ...params);
        return this;
    }
    remove(filterName) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 1);
        return this;
    }
    clear() {
        this.filters.length = 0;
        return this;
    }
    shouldHaveResult(should) {
        if (should === false) {
            this.resultCheck = null;
            return;
        }
        if (this.resultCheck) return;
        this.resultCheck = (context)=>{
            if (!context.hasResult) {
                console.log(context);
                const error = new Error(`${this.name} failed`);
                error.noResult = true;
                throw error;
            }
        };
        return this;
    }
}
exports.default = Pipe;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7wKW2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
var _cloneJs = require("../clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
class DiffContext extends (0, _contextJsDefault.default) {
    constructor(left, right){
        super();
        this.left = left;
        this.right = right;
        this.pipe = 'diff';
    }
    setResult(result) {
        if (this.options.cloneDiffValues && typeof result === 'object') {
            const clone = typeof this.options.cloneDiffValues === 'function' ? this.options.cloneDiffValues : (0, _cloneJsDefault.default);
            if (typeof result[0] === 'object') result[0] = clone(result[0]);
            if (typeof result[1] === 'object') result[1] = clone(result[1]);
        }
        return super.setResult(result);
    }
}
exports.default = DiffContext;

},{"./context.js":"boVvL","../clone.js":"159em","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"boVvL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Context {
    setResult(result) {
        this.result = result;
        this.hasResult = true;
        return this;
    }
    exit() {
        this.exiting = true;
        return this;
    }
    push(child, name) {
        child.parent = this;
        if (typeof name !== 'undefined') child.childName = name;
        child.root = this.root || this;
        child.options = child.options || this.options;
        if (!this.children) {
            this.children = [
                child
            ];
            this.nextAfterChildren = this.next || null;
            this.next = child;
        } else {
            this.children[this.children.length - 1].next = child;
            this.children.push(child);
        }
        child.next = this;
        return this;
    }
}
exports.default = Context;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"159em":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>clone);
function cloneRegExp(re) {
    const regexMatch = /^\/(.*)\/([gimyu]*)$/.exec(re.toString());
    return new RegExp(regexMatch[1], regexMatch[2]);
}
function clone(arg) {
    if (typeof arg !== 'object') return arg;
    if (arg === null) return null;
    if (Array.isArray(arg)) return arg.map(clone);
    if (arg instanceof Date) return new Date(arg.getTime());
    if (arg instanceof RegExp) return cloneRegExp(arg);
    const cloned = {};
    for(const name in arg)if (Object.prototype.hasOwnProperty.call(arg, name)) cloned[name] = clone(arg[name]);
    return cloned;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIjuC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
class PatchContext extends (0, _contextJsDefault.default) {
    constructor(left, delta){
        super();
        this.left = left;
        this.delta = delta;
        this.pipe = 'patch';
    }
}
exports.default = PatchContext;

},{"./context.js":"boVvL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQssp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
class ReverseContext extends (0, _contextJsDefault.default) {
    constructor(delta){
        super();
        this.delta = delta;
        this.pipe = 'reverse';
    }
}
exports.default = ReverseContext;

},{"./context.js":"boVvL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dvvVR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffFilter", ()=>diffFilter);
parcelHelpers.export(exports, "patchFilter", ()=>patchFilter);
parcelHelpers.export(exports, "reverseFilter", ()=>reverseFilter);
const diffFilter = function trivialMatchesDiffFilter(context) {
    if (context.left === context.right) {
        context.setResult(undefined).exit();
        return;
    }
    if (typeof context.left === 'undefined') {
        if (typeof context.right === 'function') throw new Error('functions are not supported');
        context.setResult([
            context.right
        ]).exit();
        return;
    }
    if (typeof context.right === 'undefined') {
        context.setResult([
            context.left,
            0,
            0
        ]).exit();
        return;
    }
    if (typeof context.left === 'function' || typeof context.right === 'function') throw new Error('functions are not supported');
    context.leftType = context.left === null ? 'null' : typeof context.left;
    context.rightType = context.right === null ? 'null' : typeof context.right;
    if (context.leftType !== context.rightType) {
        context.setResult([
            context.left,
            context.right
        ]).exit();
        return;
    }
    if (context.leftType === 'boolean' || context.leftType === 'number') {
        context.setResult([
            context.left,
            context.right
        ]).exit();
        return;
    }
    if (context.leftType === 'object') context.leftIsArray = Array.isArray(context.left);
    if (context.rightType === 'object') context.rightIsArray = Array.isArray(context.right);
    if (context.leftIsArray !== context.rightIsArray) {
        context.setResult([
            context.left,
            context.right
        ]).exit();
        return;
    }
    if (context.left instanceof RegExp) {
        if (context.right instanceof RegExp) context.setResult([
            context.left.toString(),
            context.right.toString()
        ]).exit();
        else context.setResult([
            context.left,
            context.right
        ]).exit();
    }
};
diffFilter.filterName = 'trivial';
const patchFilter = function trivialMatchesPatchFilter(context) {
    if (typeof context.delta === 'undefined') {
        context.setResult(context.left).exit();
        return;
    }
    context.nested = !Array.isArray(context.delta);
    if (context.nested) return;
    const nonNestedDelta = context.delta;
    if (nonNestedDelta.length === 1) {
        context.setResult(nonNestedDelta[0]).exit();
        return;
    }
    if (nonNestedDelta.length === 2) {
        if (context.left instanceof RegExp) {
            const regexArgs = /^\/(.*)\/([gimyu]+)$/.exec(nonNestedDelta[1]);
            if (regexArgs) {
                context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();
                return;
            }
        }
        context.setResult(nonNestedDelta[1]).exit();
        return;
    }
    if (nonNestedDelta.length === 3 && nonNestedDelta[2] === 0) context.setResult(undefined).exit();
};
patchFilter.filterName = 'trivial';
const reverseFilter = function trivialReferseFilter(context) {
    if (typeof context.delta === 'undefined') {
        context.setResult(context.delta).exit();
        return;
    }
    context.nested = !Array.isArray(context.delta);
    if (context.nested) return;
    const nonNestedDelta = context.delta;
    if (nonNestedDelta.length === 1) {
        context.setResult([
            nonNestedDelta[0],
            0,
            0
        ]).exit();
        return;
    }
    if (nonNestedDelta.length === 2) {
        context.setResult([
            nonNestedDelta[1],
            nonNestedDelta[0]
        ]).exit();
        return;
    }
    if (nonNestedDelta.length === 3 && nonNestedDelta[2] === 0) context.setResult([
        nonNestedDelta[0]
    ]).exit();
};
reverseFilter.filterName = 'trivial';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cl1JI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "collectChildrenDiffFilter", ()=>collectChildrenDiffFilter);
parcelHelpers.export(exports, "objectsDiffFilter", ()=>objectsDiffFilter);
parcelHelpers.export(exports, "patchFilter", ()=>patchFilter);
parcelHelpers.export(exports, "collectChildrenPatchFilter", ()=>collectChildrenPatchFilter);
parcelHelpers.export(exports, "reverseFilter", ()=>reverseFilter);
parcelHelpers.export(exports, "collectChildrenReverseFilter", ()=>collectChildrenReverseFilter);
var _diffJs = require("../contexts/diff.js");
var _diffJsDefault = parcelHelpers.interopDefault(_diffJs);
var _patchJs = require("../contexts/patch.js");
var _patchJsDefault = parcelHelpers.interopDefault(_patchJs);
var _reverseJs = require("../contexts/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
const collectChildrenDiffFilter = (context)=>{
    if (!context || !context.children) return;
    const length = context.children.length;
    let child;
    let result = context.result;
    for(let index = 0; index < length; index++){
        child = context.children[index];
        if (typeof child.result === 'undefined') continue;
        result = result || {};
        result[child.childName] = child.result;
    }
    if (result && context.leftIsArray) result._t = 'a';
    context.setResult(result).exit();
};
collectChildrenDiffFilter.filterName = 'collectChildren';
const objectsDiffFilter = (context)=>{
    if (context.leftIsArray || context.leftType !== 'object') return;
    const left = context.left;
    const right = context.right;
    let name;
    let child;
    const propertyFilter = context.options.propertyFilter;
    for(name in left){
        if (!Object.prototype.hasOwnProperty.call(left, name)) continue;
        if (propertyFilter && !propertyFilter(name, context)) continue;
        child = new (0, _diffJsDefault.default)(left[name], right[name]);
        context.push(child, name);
    }
    for(name in right){
        if (!Object.prototype.hasOwnProperty.call(right, name)) continue;
        if (propertyFilter && !propertyFilter(name, context)) continue;
        if (typeof left[name] === 'undefined') {
            child = new (0, _diffJsDefault.default)(undefined, right[name]);
            context.push(child, name);
        }
    }
    if (!context.children || context.children.length === 0) {
        context.setResult(undefined).exit();
        return;
    }
    context.exit();
};
objectsDiffFilter.filterName = 'objects';
const patchFilter = function nestedPatchFilter(context) {
    if (!context.nested) return;
    const nestedDelta = context.delta;
    if (nestedDelta._t) return;
    const objectDelta = nestedDelta;
    let name;
    let child;
    for(name in objectDelta){
        child = new (0, _patchJsDefault.default)(context.left[name], objectDelta[name]);
        context.push(child, name);
    }
    context.exit();
};
patchFilter.filterName = 'objects';
const collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {
    if (!context || !context.children) return;
    const deltaWithChildren = context.delta;
    if (deltaWithChildren._t) return;
    const object = context.left;
    const length = context.children.length;
    let child;
    for(let index = 0; index < length; index++){
        child = context.children[index];
        const property = child.childName;
        if (Object.prototype.hasOwnProperty.call(context.left, property) && child.result === undefined) delete object[property];
        else if (object[property] !== child.result) object[property] = child.result;
    }
    context.setResult(object).exit();
};
collectChildrenPatchFilter.filterName = 'collectChildren';
const reverseFilter = function nestedReverseFilter(context) {
    if (!context.nested) return;
    const nestedDelta = context.delta;
    if (nestedDelta._t) return;
    const objectDelta = context.delta;
    let name;
    let child;
    for(name in objectDelta){
        child = new (0, _reverseJsDefault.default)(objectDelta[name]);
        context.push(child, name);
    }
    context.exit();
};
reverseFilter.filterName = 'objects';
const collectChildrenReverseFilter = (context)=>{
    if (!context || !context.children) return;
    const deltaWithChildren = context.delta;
    if (deltaWithChildren._t) return;
    const length = context.children.length;
    let child;
    const delta = {};
    for(let index = 0; index < length; index++){
        child = context.children[index];
        const property = child.childName;
        if (delta[property] !== child.result) delta[property] = child.result;
    }
    context.setResult(delta).exit();
};
collectChildrenReverseFilter.filterName = 'collectChildren';

},{"../contexts/diff.js":"7wKW2","../contexts/patch.js":"bIjuC","../contexts/reverse.js":"iQssp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WTTr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffFilter", ()=>diffFilter);
parcelHelpers.export(exports, "patchFilter", ()=>patchFilter);
parcelHelpers.export(exports, "collectChildrenPatchFilter", ()=>collectChildrenPatchFilter);
parcelHelpers.export(exports, "reverseFilter", ()=>reverseFilter);
parcelHelpers.export(exports, "collectChildrenReverseFilter", ()=>collectChildrenReverseFilter);
var _diffJs = require("../contexts/diff.js");
var _diffJsDefault = parcelHelpers.interopDefault(_diffJs);
var _patchJs = require("../contexts/patch.js");
var _patchJsDefault = parcelHelpers.interopDefault(_patchJs);
var _reverseJs = require("../contexts/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _lcsJs = require("./lcs.js");
var _lcsJsDefault = parcelHelpers.interopDefault(_lcsJs);
const ARRAY_MOVE = 3;
function arraysHaveMatchByRef(array1, array2, len1, len2) {
    for(let index1 = 0; index1 < len1; index1++){
        const val1 = array1[index1];
        for(let index2 = 0; index2 < len2; index2++){
            const val2 = array2[index2];
            if (index1 !== index2 && val1 === val2) return true;
        }
    }
}
function matchItems(array1, array2, index1, index2, context) {
    const value1 = array1[index1];
    const value2 = array2[index2];
    if (value1 === value2) return true;
    if (typeof value1 !== 'object' || typeof value2 !== 'object') return false;
    const objectHash = context.objectHash;
    if (!objectHash) // no way to match objects was provided, try match by position
    return context.matchByPosition && index1 === index2;
    context.hashCache1 = context.hashCache1 || [];
    let hash1 = context.hashCache1[index1];
    if (typeof hash1 === 'undefined') context.hashCache1[index1] = hash1 = objectHash(value1, index1);
    if (typeof hash1 === 'undefined') return false;
    context.hashCache2 = context.hashCache2 || [];
    let hash2 = context.hashCache2[index2];
    if (typeof hash2 === 'undefined') context.hashCache2[index2] = hash2 = objectHash(value2, index2);
    if (typeof hash2 === 'undefined') return false;
    return hash1 === hash2;
}
const diffFilter = function arraysDiffFilter(context) {
    if (!context.leftIsArray) return;
    const matchContext = {
        objectHash: context.options && context.options.objectHash,
        matchByPosition: context.options && context.options.matchByPosition
    };
    let commonHead = 0;
    let commonTail = 0;
    let index;
    let index1;
    let index2;
    const array1 = context.left;
    const array2 = context.right;
    const len1 = array1.length;
    const len2 = array2.length;
    let child;
    if (len1 > 0 && len2 > 0 && !matchContext.objectHash && typeof matchContext.matchByPosition !== 'boolean') matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);
    // separate common head
    while(commonHead < len1 && commonHead < len2 && matchItems(array1, array2, commonHead, commonHead, matchContext)){
        index = commonHead;
        child = new (0, _diffJsDefault.default)(array1[index], array2[index]);
        context.push(child, index);
        commonHead++;
    }
    // separate common tail
    while(commonTail + commonHead < len1 && commonTail + commonHead < len2 && matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)){
        index1 = len1 - 1 - commonTail;
        index2 = len2 - 1 - commonTail;
        child = new (0, _diffJsDefault.default)(array1[index1], array2[index2]);
        context.push(child, index2);
        commonTail++;
    }
    let result;
    if (commonHead + commonTail === len1) {
        if (len1 === len2) {
            // arrays are identical
            context.setResult(undefined).exit();
            return;
        }
        // trivial case, a block (1 or more consecutive items) was added
        result = result || {
            _t: 'a'
        };
        for(index = commonHead; index < len2 - commonTail; index++)result[index] = [
            array2[index]
        ];
        context.setResult(result).exit();
        return;
    }
    if (commonHead + commonTail === len2) {
        // trivial case, a block (1 or more consecutive items) was removed
        result = result || {
            _t: 'a'
        };
        for(index = commonHead; index < len1 - commonTail; index++)result[`_${index}`] = [
            array1[index],
            0,
            0
        ];
        context.setResult(result).exit();
        return;
    }
    // reset hash cache
    delete matchContext.hashCache1;
    delete matchContext.hashCache2;
    // diff is not trivial, find the LCS (Longest Common Subsequence)
    const trimmed1 = array1.slice(commonHead, len1 - commonTail);
    const trimmed2 = array2.slice(commonHead, len2 - commonTail);
    const seq = (0, _lcsJsDefault.default).get(trimmed1, trimmed2, matchItems, matchContext);
    const removedItems = [];
    result = result || {
        _t: 'a'
    };
    for(index = commonHead; index < len1 - commonTail; index++)if (seq.indices1.indexOf(index - commonHead) < 0) {
        // removed
        result[`_${index}`] = [
            array1[index],
            0,
            0
        ];
        removedItems.push(index);
    }
    let detectMove = true;
    if (context.options && context.options.arrays && context.options.arrays.detectMove === false) detectMove = false;
    let includeValueOnMove = false;
    if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) includeValueOnMove = true;
    const removedItemsLength = removedItems.length;
    for(index = commonHead; index < len2 - commonTail; index++){
        const indexOnArray2 = seq.indices2.indexOf(index - commonHead);
        if (indexOnArray2 < 0) {
            // added, try to match with a removed item and register as position move
            let isMove = false;
            if (detectMove && removedItemsLength > 0) for(let removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++){
                index1 = removedItems[removeItemIndex1];
                if (matchItems(trimmed1, trimmed2, index1 - commonHead, index - commonHead, matchContext)) {
                    // store position move as: [originalValue, newPosition, ARRAY_MOVE]
                    result[`_${index1}`].splice(1, 2, index, ARRAY_MOVE);
                    if (!includeValueOnMove) // don't include moved value on diff, to save bytes
                    result[`_${index1}`][0] = '';
                    index2 = index;
                    child = new (0, _diffJsDefault.default)(array1[index1], array2[index2]);
                    context.push(child, index2);
                    removedItems.splice(removeItemIndex1, 1);
                    isMove = true;
                    break;
                }
            }
            if (!isMove) // added
            result[index] = [
                array2[index]
            ];
        } else {
            // match, do inner diff
            index1 = seq.indices1[indexOnArray2] + commonHead;
            index2 = seq.indices2[indexOnArray2] + commonHead;
            child = new (0, _diffJsDefault.default)(array1[index1], array2[index2]);
            context.push(child, index2);
        }
    }
    context.setResult(result).exit();
};
diffFilter.filterName = 'arrays';
const compare = {
    numerically (a, b) {
        return a - b;
    },
    numericallyBy (name) {
        return (a, b)=>a[name] - b[name];
    }
};
const patchFilter = function nestedPatchFilter(context) {
    if (!context.nested) return;
    const nestedDelta = context.delta;
    if (nestedDelta._t !== 'a') return;
    let index;
    let index1;
    const delta = nestedDelta;
    const array = context.left;
    // first, separate removals, insertions and modifications
    let toRemove = [];
    let toInsert = [];
    const toModify = [];
    for(index in delta)if (index !== '_t') {
        if (index[0] === '_') {
            const removedOrMovedIndex = index;
            // removed item from original array
            if (delta[removedOrMovedIndex][2] === 0 || delta[removedOrMovedIndex][2] === ARRAY_MOVE) toRemove.push(parseInt(index.slice(1), 10));
            else throw new Error('only removal or move can be applied at original array indices,' + ` invalid diff type: ${delta[removedOrMovedIndex][2]}`);
        } else {
            const numberIndex = index;
            if (delta[numberIndex].length === 1) // added item at new array
            toInsert.push({
                index: parseInt(numberIndex, 10),
                value: delta[numberIndex][0]
            });
            else // modified item at new array
            toModify.push({
                index: parseInt(numberIndex, 10),
                delta: delta[numberIndex]
            });
        }
    }
    // remove items, in reverse order to avoid sawing our own floor
    toRemove = toRemove.sort(compare.numerically);
    for(index = toRemove.length - 1; index >= 0; index--){
        index1 = toRemove[index];
        const indexDiff = delta[`_${index1}`];
        const removedValue = array.splice(index1, 1)[0];
        if (indexDiff[2] === ARRAY_MOVE) // reinsert later
        toInsert.push({
            index: indexDiff[1],
            value: removedValue
        });
    }
    // insert items, in reverse order to avoid moving our own floor
    toInsert = toInsert.sort(compare.numericallyBy('index'));
    const toInsertLength = toInsert.length;
    for(index = 0; index < toInsertLength; index++){
        const insertion = toInsert[index];
        array.splice(insertion.index, 0, insertion.value);
    }
    // apply modifications
    const toModifyLength = toModify.length;
    let child;
    if (toModifyLength > 0) for(index = 0; index < toModifyLength; index++){
        const modification = toModify[index];
        child = new (0, _patchJsDefault.default)(array[modification.index], modification.delta);
        context.push(child, modification.index);
    }
    if (!context.children) {
        context.setResult(array).exit();
        return;
    }
    context.exit();
};
patchFilter.filterName = 'arrays';
const collectChildrenPatchFilter = function collectChildrenPatchFilter(context) {
    if (!context || !context.children) return;
    const deltaWithChildren = context.delta;
    if (deltaWithChildren._t !== 'a') return;
    const array = context.left;
    const length = context.children.length;
    let child;
    for(let index = 0; index < length; index++){
        child = context.children[index];
        const arrayIndex = child.childName;
        array[arrayIndex] = child.result;
    }
    context.setResult(array).exit();
};
collectChildrenPatchFilter.filterName = 'arraysCollectChildren';
const reverseFilter = function arraysReverseFilter(context) {
    if (!context.nested) {
        const nonNestedDelta = context.delta;
        if (nonNestedDelta[2] === ARRAY_MOVE) {
            const arrayMoveDelta = nonNestedDelta;
            context.newName = `_${arrayMoveDelta[1]}`;
            context.setResult([
                arrayMoveDelta[0],
                parseInt(context.childName.substring(1), 10),
                ARRAY_MOVE
            ]).exit();
        }
        return;
    }
    const nestedDelta = context.delta;
    if (nestedDelta._t !== 'a') return;
    const arrayDelta = nestedDelta;
    let name;
    let child;
    for(name in arrayDelta){
        if (name === '_t') continue;
        child = new (0, _reverseJsDefault.default)(arrayDelta[name]);
        context.push(child, name);
    }
    context.exit();
};
reverseFilter.filterName = 'arrays';
const reverseArrayDeltaIndex = (delta, index, itemDelta)=>{
    if (typeof index === 'string' && index[0] === '_') return parseInt(index.substring(1), 10);
    else if (Array.isArray(itemDelta) && itemDelta[2] === 0) return `_${index}`;
    let reverseIndex = +index;
    for(const deltaIndex in delta){
        const deltaItem = delta[deltaIndex];
        if (Array.isArray(deltaItem)) {
            if (deltaItem[2] === ARRAY_MOVE) {
                const moveFromIndex = parseInt(deltaIndex.substring(1), 10);
                const moveToIndex = deltaItem[1];
                if (moveToIndex === +index) return moveFromIndex;
                if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) reverseIndex++;
                else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) reverseIndex--;
            } else if (deltaItem[2] === 0) {
                const deleteIndex = parseInt(deltaIndex.substring(1), 10);
                if (deleteIndex <= reverseIndex) reverseIndex++;
            } else if (deltaItem.length === 1 && parseInt(deltaIndex, 10) <= reverseIndex) reverseIndex--;
        }
    }
    return reverseIndex;
};
const collectChildrenReverseFilter = (context)=>{
    if (!context || !context.children) return;
    const deltaWithChildren = context.delta;
    if (deltaWithChildren._t !== 'a') return;
    const arrayDelta = deltaWithChildren;
    const length = context.children.length;
    let child;
    const delta = {
        _t: 'a'
    };
    for(let index = 0; index < length; index++){
        child = context.children[index];
        let name = child.newName;
        if (typeof name === 'undefined') name = reverseArrayDeltaIndex(arrayDelta, child.childName, child.result);
        if (delta[name] !== child.result) // There's no way to type this well.
        delta[name] = child.result;
    }
    context.setResult(delta).exit();
};
collectChildrenReverseFilter.filterName = 'arraysCollectChildren';

},{"../contexts/diff.js":"7wKW2","../contexts/patch.js":"bIjuC","../contexts/reverse.js":"iQssp","./lcs.js":"3TZkH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TZkH":[function(require,module,exports,__globalThis) {
/*

LCS implementation that supports arrays or strings

reference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem

*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const defaultMatch = function(array1, array2, index1, index2) {
    return array1[index1] === array2[index2];
};
const lengthMatrix = function(array1, array2, match, context) {
    const len1 = array1.length;
    const len2 = array2.length;
    let x, y;
    // initialize empty matrix of len1+1 x len2+1
    const matrix = new Array(len1 + 1);
    for(x = 0; x < len1 + 1; x++){
        matrix[x] = new Array(len2 + 1);
        for(y = 0; y < len2 + 1; y++)matrix[x][y] = 0;
    }
    matrix.match = match;
    // save sequence lengths for each coordinate
    for(x = 1; x < len1 + 1; x++){
        for(y = 1; y < len2 + 1; y++)if (match(array1, array2, x - 1, y - 1, context)) matrix[x][y] = matrix[x - 1][y - 1] + 1;
        else matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);
    }
    return matrix;
};
const backtrack = function(matrix, array1, array2, context) {
    let index1 = array1.length;
    let index2 = array2.length;
    const subsequence = {
        sequence: [],
        indices1: [],
        indices2: []
    };
    while(index1 !== 0 && index2 !== 0){
        const sameLetter = matrix.match(array1, array2, index1 - 1, index2 - 1, context);
        if (sameLetter) {
            subsequence.sequence.unshift(array1[index1 - 1]);
            subsequence.indices1.unshift(index1 - 1);
            subsequence.indices2.unshift(index2 - 1);
            --index1;
            --index2;
        } else {
            const valueAtMatrixAbove = matrix[index1][index2 - 1];
            const valueAtMatrixLeft = matrix[index1 - 1][index2];
            if (valueAtMatrixAbove > valueAtMatrixLeft) --index2;
            else --index1;
        }
    }
    return subsequence;
};
const get = function(array1, array2, match, context) {
    const innerContext = context || {};
    const matrix = lengthMatrix(array1, array2, match || defaultMatch, innerContext);
    return backtrack(matrix, array1, array2, innerContext);
};
exports.default = {
    get
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gOmCY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffFilter", ()=>diffFilter);
const diffFilter = function datesDiffFilter(context) {
    if (context.left instanceof Date) {
        if (context.right instanceof Date) {
            if (context.left.getTime() !== context.right.getTime()) context.setResult([
                context.left,
                context.right
            ]);
            else context.setResult(undefined);
        } else context.setResult([
            context.left,
            context.right
        ]);
        context.exit();
    } else if (context.right instanceof Date) context.setResult([
        context.left,
        context.right
    ]).exit();
};
diffFilter.filterName = 'dates';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egmfj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "diffFilter", ()=>diffFilter);
parcelHelpers.export(exports, "patchFilter", ()=>patchFilter);
parcelHelpers.export(exports, "reverseFilter", ()=>reverseFilter);
const TEXT_DIFF = 2;
const DEFAULT_MIN_LENGTH = 60;
let cachedDiffPatch = null;
function getDiffMatchPatch(options, required) {
    var _a;
    if (!cachedDiffPatch) {
        let instance;
        if ((_a = options === null || options === void 0 ? void 0 : options.textDiff) === null || _a === void 0 ? void 0 : _a.diffMatchPatch) instance = new options.textDiff.diffMatchPatch();
        else {
            if (!required) return null;
            const error = new Error('The diff-match-patch library was not provided. Pass the library in through the options or use the `jsondiffpatch/with-text-diffs` entry-point.');
            // eslint-disable-next-line camelcase
            error.diff_match_patch_not_found = true;
            throw error;
        }
        cachedDiffPatch = {
            diff: function(txt1, txt2) {
                return instance.patch_toText(instance.patch_make(txt1, txt2));
            },
            patch: function(txt1, patch) {
                const results = instance.patch_apply(instance.patch_fromText(patch), txt1);
                for(let i = 0; i < results[1].length; i++)if (!results[1][i]) {
                    const error = new Error('text patch failed');
                    error.textPatchFailed = true;
                }
                return results[0];
            }
        };
    }
    return cachedDiffPatch;
}
const diffFilter = function textsDiffFilter(context) {
    if (context.leftType !== 'string') return;
    const left = context.left;
    const right = context.right;
    const minLength = context.options && context.options.textDiff && context.options.textDiff.minLength || DEFAULT_MIN_LENGTH;
    if (left.length < minLength || right.length < minLength) {
        context.setResult([
            left,
            right
        ]).exit();
        return;
    }
    // large text, try to use a text-diff algorithm
    const diffMatchPatch = getDiffMatchPatch(context.options);
    if (!diffMatchPatch) {
        // diff-match-patch library not available,
        // fallback to regular string replace
        context.setResult([
            left,
            right
        ]).exit();
        return;
    }
    const diff = diffMatchPatch.diff;
    context.setResult([
        diff(left, right),
        0,
        TEXT_DIFF
    ]).exit();
};
diffFilter.filterName = 'texts';
const patchFilter = function textsPatchFilter(context) {
    if (context.nested) return;
    const nonNestedDelta = context.delta;
    if (nonNestedDelta[2] !== TEXT_DIFF) return;
    const textDiffDelta = nonNestedDelta;
    // text-diff, use a text-patch algorithm
    const patch = getDiffMatchPatch(context.options, true).patch;
    context.setResult(patch(context.left, textDiffDelta[0])).exit();
};
patchFilter.filterName = 'texts';
const textDeltaReverse = function(delta) {
    let i;
    let l;
    let line;
    let lineTmp;
    let header = null;
    const headerRegex = /^@@ +-(\d+),(\d+) +\+(\d+),(\d+) +@@$/;
    let lineHeader;
    const lines = delta.split('\n');
    for(i = 0, l = lines.length; i < l; i++){
        line = lines[i];
        const lineStart = line.slice(0, 1);
        if (lineStart === '@') {
            header = headerRegex.exec(line);
            lineHeader = i;
            // fix header
            lines[lineHeader] = '@@ -' + header[3] + ',' + header[4] + ' +' + header[1] + ',' + header[2] + ' @@';
        } else if (lineStart === '+') {
            lines[i] = '-' + lines[i].slice(1);
            if (lines[i - 1].slice(0, 1) === '+') {
                // swap lines to keep default order (-+)
                lineTmp = lines[i];
                lines[i] = lines[i - 1];
                lines[i - 1] = lineTmp;
            }
        } else if (lineStart === '-') lines[i] = '+' + lines[i].slice(1);
    }
    return lines.join('\n');
};
const reverseFilter = function textsReverseFilter(context) {
    if (context.nested) return;
    const nonNestedDelta = context.delta;
    if (nonNestedDelta[2] !== TEXT_DIFF) return;
    const textDiffDelta = nonNestedDelta;
    // text-diff, use a text-diff algorithm
    context.setResult([
        textDeltaReverse(textDiffDelta[0]),
        0,
        TEXT_DIFF
    ]).exit();
};
reverseFilter.filterName = 'texts';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5X5xD":[function(require,module,exports,__globalThis) {
// use as 2nd parameter for JSON.parse to revive Date instances
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>dateReviver);
function dateReviver(key, value) {
    let parts;
    if (typeof value === 'string') {
        parts = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d*))?(Z|([+-])(\d{2}):(\d{2}))$/.exec(value);
        if (parts) return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4], +parts[5], +parts[6], +(parts[7] || 0)));
    }
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ck1Q2":[function(require,module,exports,__globalThis) {
'use strict';
var isMergeableObject = function isMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
};
function isNonNullObject(value) {
    return !!value && typeof value === 'object';
}
function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
}
// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
    });
}
function getMergeFunction(key, options) {
    if (!options.customMerge) return deepmerge;
    var customMerge = options.customMerge(key);
    return typeof customMerge === 'function' ? customMerge : deepmerge;
}
function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
        return Object.propertyIsEnumerable.call(target, symbol);
    }) : [];
}
function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
}
function propertyIsOnObject(object, property) {
    try {
        return property in object;
    } catch (_) {
        return false;
    }
}
// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
    return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
     && !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
     && Object.propertyIsEnumerable.call(target, key) // and also unsafe if they're nonenumerable.
    );
}
function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) getKeys(target).forEach(function(key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
    getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) return;
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        else destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    });
    return destination;
}
function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    // implementations can use it. The caller may not replace it.
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) return cloneUnlessOtherwiseSpecified(source, options);
    else if (sourceIsArray) return options.arrayMerge(target, source, options);
    else return mergeObject(target, source, options);
}
deepmerge.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) throw new Error('first argument should be an array');
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
    }, {});
};
var deepmerge_1 = deepmerge;
module.exports = deepmerge_1;

},{}],"afBDp":[function(require,module,exports,__globalThis) {
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */ // (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
/* eslint-disable space-unary-ops */ /* Public constants ==========================================================*/ /* ===========================================================================*/ //const Z_FILTERED          = 1;
//const Z_HUFFMAN_ONLY      = 2;
//const Z_RLE               = 3;
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Deflate", ()=>Deflate_1);
parcelHelpers.export(exports, "Inflate", ()=>Inflate_1);
parcelHelpers.export(exports, "constants", ()=>constants_1);
parcelHelpers.export(exports, "default", ()=>pako);
parcelHelpers.export(exports, "deflate", ()=>deflate_1);
parcelHelpers.export(exports, "deflateRaw", ()=>deflateRaw_1);
parcelHelpers.export(exports, "gzip", ()=>gzip_1);
parcelHelpers.export(exports, "inflate", ()=>inflate_1);
parcelHelpers.export(exports, "inflateRaw", ()=>inflateRaw_1);
parcelHelpers.export(exports, "ungzip", ()=>ungzip_1);
const Z_FIXED$1 = 4;
//const Z_DEFAULT_STRATEGY  = 0;
/* Possible values of the data_type field (though see inflate()) */ const Z_BINARY = 0;
const Z_TEXT = 1;
//const Z_ASCII             = 1; // = Z_TEXT
const Z_UNKNOWN$1 = 2;
/*============================================================================*/ function zero$1(buf) {
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
}
// From zutil.h
const STORED_BLOCK = 0;
const STATIC_TREES = 1;
const DYN_TREES = 2;
/* The three kinds of block type */ const MIN_MATCH$1 = 3;
const MAX_MATCH$1 = 258;
/* The minimum and maximum match lengths */ // From deflate.h
/* ===========================================================================
 * Internal compression state.
 */ const LENGTH_CODES$1 = 29;
/* number of length codes, not counting the special END_BLOCK code */ const LITERALS$1 = 256;
/* number of literal bytes 0..255 */ const L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
/* number of Literal or Length codes, including the END_BLOCK code */ const D_CODES$1 = 30;
/* number of distance codes */ const BL_CODES$1 = 19;
/* number of codes used to transfer the bit lengths */ const HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
/* maximum heap size */ const MAX_BITS$1 = 15;
/* All codes must not exceed MAX_BITS bits */ const Buf_size = 16;
/* size of bit buffer in bi_buf */ /* ===========================================================================
 * Constants
 */ const MAX_BL_BITS = 7;
/* Bit length codes must not exceed MAX_BL_BITS bits */ const END_BLOCK = 256;
/* end of block literal code */ const REP_3_6 = 16;
/* repeat previous bit length 3-6 times (2 bits of repeat count) */ const REPZ_3_10 = 17;
/* repeat a zero length 3-10 times  (3 bits of repeat count) */ const REPZ_11_138 = 18;
/* repeat a zero length 11-138 times  (7 bits of repeat count) */ /* eslint-disable comma-spacing,array-bracket-spacing */ const extra_lbits = /* extra bits for each length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
]);
const extra_dbits = /* extra bits for each distance code */ new Uint8Array([
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
]);
const extra_blbits = /* extra bits for each bit length code */ new Uint8Array([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
]);
const bl_order = new Uint8Array([
    16,
    17,
    18,
    0,
    8,
    7,
    9,
    6,
    10,
    5,
    11,
    4,
    12,
    3,
    13,
    2,
    14,
    1,
    15
]);
/* eslint-enable comma-spacing,array-bracket-spacing */ /* The lengths of the bit length codes are sent in order of decreasing
 * probability, to avoid transmitting the lengths for unused bit length codes.
 */ /* ===========================================================================
 * Local data. These are initialized only once.
 */ // We pre-fill arrays with 0 to avoid uninitialized gaps
const DIST_CODE_LEN = 512; /* see definition of array dist_code below */ 
// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
const static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
/* The static literal tree. Since the bit lengths are imposed, there is no
 * need for the L_CODES extra codes used during heap construction. However
 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
 * below).
 */ const static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
/* The static distance tree. (Actually a trivial tree since all codes use
 * 5 bits.)
 */ const _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
/* Distance codes. The first 256 values correspond to the distances
 * 3 .. 258, the last 256 values correspond to the top 8 bits of
 * the 15 bit distances.
 */ const _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
/* length code for each normalized match length (0 == MIN_MATCH) */ const base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
/* First normalized length for each code (0 = MIN_MATCH) */ const base_dist = new Array(D_CODES$1);
zero$1(base_dist);
/* First normalized distance for each code (0 = distance of 1) */ function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
    this.static_tree = static_tree; /* static tree or NULL */ 
    this.extra_bits = extra_bits; /* extra bits for each code or NULL */ 
    this.extra_base = extra_base; /* base index for extra_bits */ 
    this.elems = elems; /* max number of elements in the tree */ 
    this.max_length = max_length; /* max bit length for the codes */ 
    // show if `static_tree` has data or dummy - needed for monomorphic objects
    this.has_stree = static_tree && static_tree.length;
}
let static_l_desc;
let static_d_desc;
let static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
    this.dyn_tree = dyn_tree; /* the dynamic tree */ 
    this.max_code = 0; /* largest code with non zero frequency */ 
    this.stat_desc = stat_desc; /* the corresponding static tree */ 
}
const d_code = (dist)=>{
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
/* ===========================================================================
 * Output a short LSB first on the stream.
 * IN assertion: there is enough room in pendingBuf.
 */ const put_short = (s, w)=>{
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
    s.pending_buf[s.pending++] = w & 0xff;
    s.pending_buf[s.pending++] = w >>> 8 & 0xff;
};
/* ===========================================================================
 * Send a value on a given number of bits.
 * IN assertion: length <= 16 and value fits in length bits.
 */ const send_bits = (s, value, length)=>{
    if (s.bi_valid > Buf_size - length) {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> Buf_size - s.bi_valid;
        s.bi_valid += length - Buf_size;
    } else {
        s.bi_buf |= value << s.bi_valid & 0xffff;
        s.bi_valid += length;
    }
};
const send_code = (s, c, tree)=>{
    send_bits(s, tree[c * 2], tree[c * 2 + 1]);
};
/* ===========================================================================
 * Reverse the first len bits of a code, using straightforward code (a faster
 * method would use a table)
 * IN assertion: 1 <= len <= 15
 */ const bi_reverse = (code, len)=>{
    let res = 0;
    do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
    }while (--len > 0);
    return res >>> 1;
};
/* ===========================================================================
 * Flush the bit buffer, keeping at most 7 bits in it.
 */ const bi_flush = (s)=>{
    if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;
    } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
    }
};
/* ===========================================================================
 * Compute the optimal bit lengths for a tree and update the total bit length
 * for the current block.
 * IN assertion: the fields freq and dad are set, heap[heap_max] and
 *    above are the tree nodes sorted by increasing frequency.
 * OUT assertions: the field len is set to the optimal bit length, the
 *     array bl_count contains the frequencies for each bit length.
 *     The length opt_len is updated; static_len is also updated if stree is
 *     not null.
 */ const gen_bitlen = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */
    const tree = desc.dyn_tree;
    const max_code = desc.max_code;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const extra = desc.stat_desc.extra_bits;
    const base = desc.stat_desc.extra_base;
    const max_length = desc.stat_desc.max_length;
    let h; /* heap index */ 
    let n, m; /* iterate over the tree elements */ 
    let bits; /* bit length */ 
    let xbits; /* extra bits */ 
    let f; /* frequency */ 
    let overflow = 0; /* number of elements with bit length too large */ 
    for(bits = 0; bits <= MAX_BITS$1; bits++)s.bl_count[bits] = 0;
    /* In a first pass, compute the optimal bit lengths (which may
   * overflow in the case of the bit length tree).
   */ tree[s.heap[s.heap_max] * 2 + 1] = 0; /* root of the heap */ 
    for(h = s.heap_max + 1; h < HEAP_SIZE$1; h++){
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
        if (bits > max_length) {
            bits = max_length;
            overflow++;
        }
        tree[n * 2 + 1] = bits;
        /* We overwrite tree[n].Dad which is no longer needed */ if (n > max_code) continue;
         /* not a leaf node */ 
        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) xbits = extra[n - base];
        f = tree[n * 2] /*.Freq*/ ;
        s.opt_len += f * (bits + xbits);
        if (has_stree) s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
    if (overflow === 0) return;
    // Tracev((stderr,"\nbit length overflow\n"));
    /* This happens for example on obj2 and pic of the Calgary corpus */ /* Find the first bit length which could increase: */ do {
        bits = max_length - 1;
        while(s.bl_count[bits] === 0)bits--;
        s.bl_count[bits]--; /* move one leaf down the tree */ 
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */ 
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
     * but this does not affect bl_count[max_length]
     */ overflow -= 2;
    }while (overflow > 0);
    /* Now recompute all bit lengths, scanning in increasing frequency.
   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
   * lengths instead of fixing only the wrong ones. This idea is taken
   * from 'ar' written by Haruhiko Okumura.)
   */ for(bits = max_length; bits !== 0; bits--){
        n = s.bl_count[bits];
        while(n !== 0){
            m = s.heap[--h];
            if (m > max_code) continue;
            if (tree[m * 2 + 1] !== bits) {
                // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
                s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2] /*.Freq*/ ;
                tree[m * 2 + 1] = bits;
            }
            n--;
        }
    }
};
/* ===========================================================================
 * Generate the codes for a given tree and bit counts (which need not be
 * optimal).
 * IN assertion: the array bl_count contains the bit length statistics for
 * the given tree and the field len is set for all tree elements.
 * OUT assertion: the field code is set for all tree elements of non
 *     zero code length.
 */ const gen_codes = (tree, max_code, bl_count)=>{
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */
    const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */ 
    let code = 0; /* running code value */ 
    let bits; /* bit index */ 
    let n; /* code index */ 
    /* The distribution counts are first used to generate the code values
   * without bit reversal.
   */ for(bits = 1; bits <= MAX_BITS$1; bits++){
        code = code + bl_count[bits - 1] << 1;
        next_code[bits] = code;
    }
    /* Check that the bit counts in bl_count are consistent. The last code
   * must be all ones.
   */ //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
    //        "inconsistent bit counts");
    //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
    for(n = 0; n <= max_code; n++){
        let len = tree[n * 2 + 1] /*.Len*/ ;
        if (len === 0) continue;
        /* Now reverse the bits */ tree[n * 2] = bi_reverse(next_code[len]++, len);
    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
    }
};
/* ===========================================================================
 * Initialize the various 'constant' tables.
 */ const tr_static_init = ()=>{
    let n; /* iterates over tree elements */ 
    let bits; /* bit counter */ 
    let length; /* length value */ 
    let code; /* code value */ 
    let dist; /* distance index */ 
    const bl_count = new Array(MAX_BITS$1 + 1);
    /* number of codes at each bit length for an optimal tree */ // do check in _tr_init()
    //if (static_init_done) return;
    /* For some embedded targets, global variables are not initialized: */ /*#ifdef NO_INIT_GLOBAL_POINTERS
  static_l_desc.static_tree = static_ltree;
  static_l_desc.extra_bits = extra_lbits;
  static_d_desc.static_tree = static_dtree;
  static_d_desc.extra_bits = extra_dbits;
  static_bl_desc.extra_bits = extra_blbits;
#endif*/ /* Initialize the mapping length (0..255) -> length code (0..28) */ length = 0;
    for(code = 0; code < LENGTH_CODES$1 - 1; code++){
        base_length[code] = length;
        for(n = 0; n < 1 << extra_lbits[code]; n++)_length_code[length++] = code;
    }
    //Assert (length == 256, "tr_static_init: length != 256");
    /* Note that the length 255 (match length 258) can be represented
   * in two different ways: code 284 + 5 bits or code 285, so we
   * overwrite length_code[255] to use the best encoding:
   */ _length_code[length - 1] = code;
    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */ dist = 0;
    for(code = 0; code < 16; code++){
        base_dist[code] = dist;
        for(n = 0; n < 1 << extra_dbits[code]; n++)_dist_code[dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: dist != 256");
    dist >>= 7; /* from now on, all distances are divided by 128 */ 
    for(; code < D_CODES$1; code++){
        base_dist[code] = dist << 7;
        for(n = 0; n < 1 << extra_dbits[code] - 7; n++)_dist_code[256 + dist++] = code;
    }
    //Assert (dist == 256, "tr_static_init: 256+dist != 512");
    /* Construct the codes of the static literal tree */ for(bits = 0; bits <= MAX_BITS$1; bits++)bl_count[bits] = 0;
    n = 0;
    while(n <= 143){
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    while(n <= 255){
        static_ltree[n * 2 + 1] = 9;
        n++;
        bl_count[9]++;
    }
    while(n <= 279){
        static_ltree[n * 2 + 1] = 7;
        n++;
        bl_count[7]++;
    }
    while(n <= 287){
        static_ltree[n * 2 + 1] = 8;
        n++;
        bl_count[8]++;
    }
    /* Codes 286 and 287 do not exist, but we must include them in the
   * tree construction to get a canonical Huffman tree (longest code
   * all ones)
   */ gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
    /* The static distance tree is trivial: */ for(n = 0; n < D_CODES$1; n++){
        static_dtree[n * 2 + 1] = 5;
        static_dtree[n * 2] = bi_reverse(n, 5);
    }
    // Now data ready and we can init static trees
    static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
    static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
    static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
//static_init_done = true;
};
/* ===========================================================================
 * Initialize a new block.
 */ const init_block = (s)=>{
    let n; /* iterates over tree elements */ 
    /* Initialize the trees. */ for(n = 0; n < L_CODES$1; n++)s.dyn_ltree[n * 2] = 0;
    for(n = 0; n < D_CODES$1; n++)s.dyn_dtree[n * 2] = 0;
    for(n = 0; n < BL_CODES$1; n++)s.bl_tree[n * 2] = 0;
    s.dyn_ltree[END_BLOCK * 2] = 1;
    s.opt_len = s.static_len = 0;
    s.sym_next = s.matches = 0;
};
/* ===========================================================================
 * Flush the bit buffer and align the output on a byte boundary
 */ const bi_windup = (s)=>{
    if (s.bi_valid > 8) put_short(s, s.bi_buf);
    else if (s.bi_valid > 0) //put_byte(s, (Byte)s->bi_buf);
    s.pending_buf[s.pending++] = s.bi_buf;
    s.bi_buf = 0;
    s.bi_valid = 0;
};
/* ===========================================================================
 * Compares to subtrees, using the tree depth as tie breaker when
 * the subtrees have equal frequency. This minimizes the worst case length.
 */ const smaller = (tree, n, m, depth)=>{
    const _n2 = n * 2;
    const _m2 = m * 2;
    return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
};
/* ===========================================================================
 * Restore the heap property by moving down the tree starting at node k,
 * exchanging a node with the smallest of its two sons if necessary, stopping
 * when the heap property is re-established (each father smaller than its
 * two sons).
 */ const pqdownheap = (s, tree, k)=>{
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */
    const v = s.heap[k];
    let j = k << 1; /* left son of k */ 
    while(j <= s.heap_len){
        /* Set j to the smallest of the two sons: */ if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) j++;
        /* Exit if v is smaller than both sons */ if (smaller(tree, v, s.heap[j], s.depth)) break;
        /* Exchange v with the smallest son */ s.heap[k] = s.heap[j];
        k = j;
        /* And continue down the tree, setting j to the left son of k */ j <<= 1;
    }
    s.heap[k] = v;
};
// inlined manually
// const SMALLEST = 1;
/* ===========================================================================
 * Send the block data compressed using the given Huffman trees
 */ const compress_block = (s, ltree, dtree)=>{
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */
    let dist; /* distance of matched string */ 
    let lc; /* match length or unmatched char (if dist == 0) */ 
    let sx = 0; /* running index in sym_buf */ 
    let code; /* the code to send */ 
    let extra; /* number of extra bits to send */ 
    if (s.sym_next !== 0) do {
        dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
        dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
        lc = s.pending_buf[s.sym_buf + sx++];
        if (dist === 0) send_code(s, lc, ltree); /* send a literal byte */ 
        else {
            /* Here, lc is the match length - MIN_MATCH */ code = _length_code[lc];
            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */ 
            extra = extra_lbits[code];
            if (extra !== 0) {
                lc -= base_length[code];
                send_bits(s, lc, extra); /* send the extra length bits */ 
            }
            dist--; /* dist is now the match distance - 1 */ 
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");
            send_code(s, code, dtree); /* send the distance code */ 
            extra = extra_dbits[code];
            if (extra !== 0) {
                dist -= base_dist[code];
                send_bits(s, dist, extra); /* send the extra distance bits */ 
            }
        } /* literal or match pair ? */ 
    /* Check that the overlay between pending_buf and sym_buf is ok: */ //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");
    }while (sx < s.sym_next);
    send_code(s, END_BLOCK, ltree);
};
/* ===========================================================================
 * Construct one Huffman tree and assigns the code bit strings and lengths.
 * Update the total bit length for the current block.
 * IN assertion: the field freq is set for all tree elements.
 * OUT assertions: the fields len and code are set to the optimal bit length
 *     and corresponding code. The length opt_len is updated; static_len is
 *     also updated if stree is not null. The field max_code is set.
 */ const build_tree = (s, desc)=>{
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */
    const tree = desc.dyn_tree;
    const stree = desc.stat_desc.static_tree;
    const has_stree = desc.stat_desc.has_stree;
    const elems = desc.stat_desc.elems;
    let n, m; /* iterate over heap elements */ 
    let max_code = -1; /* largest code with non zero frequency */ 
    let node; /* new node being created */ 
    /* Construct the initial heap, with least frequent element in
   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
   * heap[0] is not used.
   */ s.heap_len = 0;
    s.heap_max = HEAP_SIZE$1;
    for(n = 0; n < elems; n++)if (tree[n * 2] !== 0) {
        s.heap[++s.heap_len] = max_code = n;
        s.depth[n] = 0;
    } else tree[n * 2 + 1] = 0;
    /* The pkzip format requires that at least one distance code exists,
   * and that at least one bit should be sent even if there is only one
   * possible code. So to avoid special checks later on we force at least
   * two codes of non zero frequency.
   */ while(s.heap_len < 2){
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (has_stree) s.static_len -= stree[node * 2 + 1] /*.Len*/ ;
    /* node is 0 or 1 so it does not have extra bits */ }
    desc.max_code = max_code;
    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
   * establish sub-heaps of increasing lengths:
   */ for(n = s.heap_len >> 1 /*int /2*/ ; n >= 1; n--)pqdownheap(s, tree, n);
    /* Construct the Huffman tree by repeatedly combining the least two
   * frequent nodes.
   */ node = elems; /* next internal node of the tree */ 
    do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/ n = s.heap[1 /*SMALLEST*/ ];
        s.heap[1 /*SMALLEST*/ ] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1 /*SMALLEST*/ );
        /***/ m = s.heap[1 /*SMALLEST*/ ]; /* m = node of next least frequency */ 
        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */ 
        s.heap[--s.heap_max] = m;
        /* Create a new node father of n and m */ tree[node * 2] = tree[n * 2] + tree[m * 2] /*.Freq*/ ;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node;
        /* and insert the new node in the heap */ s.heap[1 /*SMALLEST*/ ] = node++;
        pqdownheap(s, tree, 1 /*SMALLEST*/ );
    }while (s.heap_len >= 2);
    s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/ ];
    /* At this point, the fields freq and dad are set. We can now
   * generate the bit lengths.
   */ gen_bitlen(s, desc);
    /* The field len is now set, we can generate the bit codes */ gen_codes(tree, max_code, s.bl_count);
};
/* ===========================================================================
 * Scan a literal or distance tree to determine the frequencies of the codes
 * in the bit length tree.
 */ const scan_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    tree[(max_code + 1) * 2 + 1] = 0xffff; /* guard */ 
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) s.bl_tree[curlen * 2] += count;
        else if (curlen !== 0) {
            if (curlen !== prevlen) s.bl_tree[curlen * 2]++;
            s.bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) s.bl_tree[REPZ_3_10 * 2]++;
        else s.bl_tree[REPZ_11_138 * 2]++;
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Send a literal or distance tree in compressed form, using the codes in
 * bl_tree.
 */ const send_tree = (s, tree, max_code)=>{
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */
    let n; /* iterates over all tree elements */ 
    let prevlen = -1; /* last emitted length */ 
    let curlen; /* length of current code */ 
    let nextlen = tree[1] /*.Len*/ ; /* length of next code */ 
    let count = 0; /* repeat count of the current code */ 
    let max_count = 7; /* max repeat count */ 
    let min_count = 4; /* min repeat count */ 
    /* tree[max_code+1].Len = -1; */ /* guard already set */ if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
    }
    for(n = 0; n <= max_code; n++){
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1] /*.Len*/ ;
        if (++count < max_count && curlen === nextlen) continue;
        else if (count < min_count) do send_code(s, curlen, s.bl_tree);
        while (--count !== 0);
        else if (curlen !== 0) {
            if (curlen !== prevlen) {
                send_code(s, curlen, s.bl_tree);
                count--;
            }
            //Assert(count >= 3 && count <= 6, " 3_6?");
            send_code(s, REP_3_6, s.bl_tree);
            send_bits(s, count - 3, 2);
        } else if (count <= 10) {
            send_code(s, REPZ_3_10, s.bl_tree);
            send_bits(s, count - 3, 3);
        } else {
            send_code(s, REPZ_11_138, s.bl_tree);
            send_bits(s, count - 11, 7);
        }
        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
            max_count = 138;
            min_count = 3;
        } else if (curlen === nextlen) {
            max_count = 6;
            min_count = 3;
        } else {
            max_count = 7;
            min_count = 4;
        }
    }
};
/* ===========================================================================
 * Construct the Huffman tree for the bit lengths and return the index in
 * bl_order of the last bit length code to send.
 */ const build_bl_tree = (s)=>{
    let max_blindex; /* index of last bit length code of non zero freq */ 
    /* Determine the bit length frequencies for literal and distance trees */ scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
    scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
    /* Build the bit length tree: */ build_tree(s, s.bl_desc);
    /* opt_len now includes the length of the tree representations, except
   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
   */ /* Determine the number of bit length codes to send. The pkzip format
   * requires that at least 4 bit length codes be sent. (appnote.txt says
   * 3 but the actual value used is 4.)
   */ for(max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--){
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) break;
    }
    /* Update opt_len to include the bit length tree and counts */ s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
    //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
    //        s->opt_len, s->static_len));
    return max_blindex;
};
/* ===========================================================================
 * Send the header for a block using dynamic Huffman trees: the counts, the
 * lengths of the bit length codes, the literal tree and the distance tree.
 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
 */ const send_all_trees = (s, lcodes, dcodes, blcodes)=>{
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */
    let rank; /* index in bl_order */ 
    //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
    //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
    //        "too many codes");
    //Tracev((stderr, "\nbl counts: "));
    send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */ 
    send_bits(s, dcodes - 1, 5);
    send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */ 
    for(rank = 0; rank < blcodes; rank++)//Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1], 3);
    //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
    send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */ 
    //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
    send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */ 
//Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
};
/* ===========================================================================
 * Check if the data type is TEXT or BINARY, using the following algorithm:
 * - TEXT if the two conditions below are satisfied:
 *    a) There are no non-portable control characters belonging to the
 *       "block list" (0..6, 14..25, 28..31).
 *    b) There is at least one printable character belonging to the
 *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
 * - BINARY otherwise.
 * - The following partially-portable control characters form a
 *   "gray list" that is ignored in this detection algorithm:
 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
 * IN assertion: the fields Freq of dyn_ltree are set.
 */ const detect_data_type = (s)=>{
    /* block_mask is the bit mask of block-listed bytes
   * set bits 0..6, 14..25, and 28..31
   * 0xf3ffc07f = binary 11110011111111111100000001111111
   */ let block_mask = 0xf3ffc07f;
    let n;
    /* Check for non-textual ("block-listed") bytes. */ for(n = 0; n <= 31; n++, block_mask >>>= 1){
        if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) return Z_BINARY;
    }
    /* Check for textual ("allow-listed") bytes. */ if (s.dyn_ltree[18] !== 0 || s.dyn_ltree[20] !== 0 || s.dyn_ltree[26] !== 0) return Z_TEXT;
    for(n = 32; n < LITERALS$1; n++){
        if (s.dyn_ltree[n * 2] !== 0) return Z_TEXT;
    }
    /* There are no "block-listed" or "allow-listed" bytes:
   * this stream either is empty or has tolerated ("gray-listed") bytes only.
   */ return Z_BINARY;
};
let static_init_done = false;
/* ===========================================================================
 * Initialize the tree data structures for a new zlib stream.
 */ const _tr_init$1 = (s)=>{
    if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
    }
    s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
    s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
    s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
    s.bi_buf = 0;
    s.bi_valid = 0;
    /* Initialize the first block of the first file: */ init_block(s);
};
/* ===========================================================================
 * Send a stored block
 */ const _tr_stored_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */ 
    bi_windup(s); /* align on byte boundary */ 
    put_short(s, stored_len);
    put_short(s, ~stored_len);
    if (stored_len) s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
    s.pending += stored_len;
};
/* ===========================================================================
 * Send one empty static block to give enough lookahead for inflate.
 * This takes 10 bits, of which 7 may remain in the bit buffer.
 */ const _tr_align$1 = (s)=>{
    send_bits(s, STATIC_TREES << 1, 3);
    send_code(s, END_BLOCK, static_ltree);
    bi_flush(s);
};
/* ===========================================================================
 * Determine the best encoding for the current block: dynamic trees, static
 * trees or store, and write out the encoded block.
 */ const _tr_flush_block$1 = (s, buf, stored_len, last)=>{
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */
    let opt_lenb, static_lenb; /* opt_len and static_len in bytes */ 
    let max_blindex = 0; /* index of last bit length code of non zero freq */ 
    /* Build the Huffman trees unless a stored block is forced */ if (s.level > 0) {
        /* Check if the file is binary or text */ if (s.strm.data_type === Z_UNKNOWN$1) s.strm.data_type = detect_data_type(s);
        /* Construct the literal and distance trees */ build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
     * the compressed block data, excluding the tree representations.
     */ /* Build the bit length tree for the above two trees, and get the index
     * in bl_order of the last bit length code to send.
     */ max_blindex = build_bl_tree(s);
        /* Determine the best encoding. Compute the block lengths in bytes. */ opt_lenb = s.opt_len + 3 + 7 >>> 3;
        static_lenb = s.static_len + 3 + 7 >>> 3;
        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->sym_next / 3));
        if (static_lenb <= opt_lenb) opt_lenb = static_lenb;
    } else // Assert(buf != (char*)0, "lost buf");
    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */ 
    if (stored_len + 4 <= opt_lenb && buf !== -1) /* 4: two words for the lengths */ /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
     * Otherwise we can't have processed more than WSIZE input bytes since
     * the last block flush, because compression would have been
     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
     * transform a block into a stored block.
     */ _tr_stored_block$1(s, buf, stored_len, last);
    else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);
    } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
    }
    // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
    /* The above check is made mod 2^32, for files larger than 512 MB
   * and uLong implemented on 32 bits.
   */ init_block(s);
    if (last) bi_windup(s);
// Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
//       s->compressed_len-7*last));
};
/* ===========================================================================
 * Save the match info and tally the frequency counts. Return true if
 * the current block must be flushed.
 */ const _tr_tally$1 = (s, dist, lc)=>{
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
    s.pending_buf[s.sym_buf + s.sym_next++] = dist;
    s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
    s.pending_buf[s.sym_buf + s.sym_next++] = lc;
    if (dist === 0) /* lc is the unmatched char */ s.dyn_ltree[lc * 2]++;
    else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */ dist--; /* dist = match distance - 1 */ 
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
        s.dyn_dtree[d_code(dist) * 2]++;
    }
    return s.sym_next === s.sym_end;
};
var _tr_init_1 = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1 = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;
var trees = {
    _tr_init: _tr_init_1,
    _tr_stored_block: _tr_stored_block_1,
    _tr_flush_block: _tr_flush_block_1,
    _tr_tally: _tr_tally_1,
    _tr_align: _tr_align_1
};
// Note: adler32 takes 12% for level 0 and 2% for level 6.
// It isn't worth it to make additional optimizations as in original.
// Small size is preferable.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const adler32 = (adler, buf, len, pos)=>{
    let s1 = adler & 0xffff | 0, s2 = adler >>> 16 & 0xffff | 0, n = 0;
    while(len !== 0){
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;
        do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
        }while (--n);
        s1 %= 65521;
        s2 %= 65521;
    }
    return s1 | s2 << 16 | 0;
};
var adler32_1 = adler32;
// Note: we can't get significant speed boost here.
// So write code to minimize size - no pregenerated tables
// and array tools dependencies.
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// Use ordinary array, since untyped makes no boost here
const makeTable = ()=>{
    let c, table = [];
    for(var n = 0; n < 256; n++){
        c = n;
        for(var k = 0; k < 8; k++)c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
        table[n] = c;
    }
    return table;
};
// Create table on load. Just 255 signed longs. Not a problem.
const crcTable = new Uint32Array(makeTable());
const crc32 = (crc, buf, len, pos)=>{
    const t = crcTable;
    const end = pos + len;
    crc ^= -1;
    for(let i = pos; i < end; i++)crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
    return crc ^ -1; // >>> 0;
};
var crc32_1 = crc32;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var messages = {
    2: 'need dictionary',
    /* Z_NEED_DICT       2  */ 1: 'stream end',
    /* Z_STREAM_END      1  */ 0: '',
    /* Z_OK              0  */ '-1': 'file error',
    /* Z_ERRNO         (-1) */ '-2': 'stream error',
    /* Z_STREAM_ERROR  (-2) */ '-3': 'data error',
    /* Z_DATA_ERROR    (-3) */ '-4': 'insufficient memory',
    /* Z_MEM_ERROR     (-4) */ '-5': 'buffer error',
    /* Z_BUF_ERROR     (-5) */ '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */ 
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
var constants$2 = {
    /* Allowed flush values; see deflate() and inflate() below for details */ Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_TREES: 6,
    /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */ Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    //Z_VERSION_ERROR: -6,
    /* compression levels */ Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    /* Possible values of the data_type field (though see inflate()) */ Z_BINARY: 0,
    Z_TEXT: 1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN: 2,
    /* The deflate compression method */ Z_DEFLATED: 8
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1, Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1, Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1, Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1, Z_UNKNOWN, Z_DEFLATED: Z_DEFLATED$2 } = constants$2;
/*============================================================================*/ const MAX_MEM_LEVEL = 9;
/* Maximum value for memLevel in deflateInit2 */ const MAX_WBITS$1 = 15;
/* 32K LZ77 window */ const DEF_MEM_LEVEL = 8;
const LENGTH_CODES = 29;
/* number of length codes, not counting the special END_BLOCK code */ const LITERALS = 256;
/* number of literal bytes 0..255 */ const L_CODES = LITERALS + 1 + LENGTH_CODES;
/* number of Literal or Length codes, including the END_BLOCK code */ const D_CODES = 30;
/* number of distance codes */ const BL_CODES = 19;
/* number of codes used to transfer the bit lengths */ const HEAP_SIZE = 2 * L_CODES + 1;
/* maximum heap size */ const MAX_BITS = 15;
/* All codes must not exceed MAX_BITS bits */ const MIN_MATCH = 3;
const MAX_MATCH = 258;
const MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
const PRESET_DICT = 0x20;
const INIT_STATE = 42; /* zlib header -> BUSY_STATE */ 
//#ifdef GZIP
const GZIP_STATE = 57; /* gzip header -> BUSY_STATE | EXTRA_STATE */ 
//#endif
const EXTRA_STATE = 69; /* gzip extra block -> NAME_STATE */ 
const NAME_STATE = 73; /* gzip file name -> COMMENT_STATE */ 
const COMMENT_STATE = 91; /* gzip comment -> HCRC_STATE */ 
const HCRC_STATE = 103; /* gzip header CRC -> BUSY_STATE */ 
const BUSY_STATE = 113; /* deflate -> FINISH_STATE */ 
const FINISH_STATE = 666; /* stream complete */ 
const BS_NEED_MORE = 1; /* block not completed, need more input or more output */ 
const BS_BLOCK_DONE = 2; /* block flush performed */ 
const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */ 
const BS_FINISH_DONE = 4; /* finish done, accept no more input or output */ 
const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
const err = (strm, errorCode)=>{
    strm.msg = messages[errorCode];
    return errorCode;
};
const rank = (f)=>{
    return f * 2 - (f > 4 ? 9 : 0);
};
const zero = (buf)=>{
    let len = buf.length;
    while(--len >= 0)buf[len] = 0;
};
/* ===========================================================================
 * Slide the hash table when sliding the window down (could be avoided with 32
 * bit values at the expense of memory usage). We slide even when level == 0 to
 * keep the hash table consistent if we switch back to level > 0 later.
 */ const slide_hash = (s)=>{
    let n, m;
    let p;
    let wsize = s.w_size;
    n = s.hash_size;
    p = n;
    do {
        m = s.head[--p];
        s.head[p] = m >= wsize ? m - wsize : 0;
    }while (--n);
    n = wsize;
    //#ifndef FASTEST
    p = n;
    do {
        m = s.prev[--p];
        s.prev[p] = m >= wsize ? m - wsize : 0;
    /* If n is not on any hash chain, prev[n] is garbage but
     * its value will never be used.
     */ }while (--n);
//#endif
};
/* eslint-disable new-cap */ let HASH_ZLIB = (s, prev, data)=>(prev << s.hash_shift ^ data) & s.hash_mask;
// This hash causes less collisions, https://github.com/nodeca/pako/issues/135
// But breaks binary compatibility
//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
let HASH = HASH_ZLIB;
/* =========================================================================
 * Flush as much pending output as possible. All deflate() output, except for
 * some deflate_stored() output, goes through this function so some
 * applications may wish to modify it to avoid allocating a large
 * strm->next_out buffer and copying into it. (See also read_buf()).
 */ const flush_pending = (strm)=>{
    const s = strm.state;
    //_tr_flush_bits(s);
    let len = s.pending;
    if (len > strm.avail_out) len = strm.avail_out;
    if (len === 0) return;
    strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
    strm.next_out += len;
    s.pending_out += len;
    strm.total_out += len;
    strm.avail_out -= len;
    s.pending -= len;
    if (s.pending === 0) s.pending_out = 0;
};
const flush_block_only = (s, last)=>{
    _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
    s.block_start = s.strstart;
    flush_pending(s.strm);
};
const put_byte = (s, b)=>{
    s.pending_buf[s.pending++] = b;
};
/* =========================================================================
 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
 * IN assertion: the stream state is correct and there is enough room in
 * pending_buf.
 */ const putShortMSB = (s, b)=>{
    //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
    s.pending_buf[s.pending++] = b >>> 8 & 0xff;
    s.pending_buf[s.pending++] = b & 0xff;
};
/* ===========================================================================
 * Read a new buffer from the current input stream, update the adler32
 * and total number of bytes read.  All deflate() input goes through
 * this function so some applications may wish to modify it to avoid
 * allocating a large strm->input buffer and copying from it.
 * (See also flush_pending()).
 */ const read_buf = (strm, buf, start, size)=>{
    let len = strm.avail_in;
    if (len > size) len = size;
    if (len === 0) return 0;
    strm.avail_in -= len;
    // zmemcpy(buf, strm->next_in, len);
    buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
    if (strm.state.wrap === 1) strm.adler = adler32_1(strm.adler, buf, len, start);
    else if (strm.state.wrap === 2) strm.adler = crc32_1(strm.adler, buf, len, start);
    strm.next_in += len;
    strm.total_in += len;
    return len;
};
/* ===========================================================================
 * Set match_start to the longest match starting at the given string and
 * return its length. Matches shorter or equal to prev_length are discarded,
 * in which case the result is equal to prev_length and match_start is
 * garbage.
 * IN assertions: cur_match is the head of the hash chain for the current
 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
 * OUT assertion: the match length is not greater than s->lookahead.
 */ const longest_match = (s, cur_match)=>{
    let chain_length = s.max_chain_length; /* max hash chain length */ 
    let scan = s.strstart; /* current string */ 
    let match; /* matched string */ 
    let len; /* length of current match */ 
    let best_len = s.prev_length; /* best match length so far */ 
    let nice_match = s.nice_match; /* stop if match long enough */ 
    const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/ ;
    const _win = s.window; // shortcut
    const wmask = s.w_mask;
    const prev = s.prev;
    /* Stop when cur_match becomes <= limit. To simplify the code,
   * we prevent matches with the string of window index 0.
   */ const strend = s.strstart + MAX_MATCH;
    let scan_end1 = _win[scan + best_len - 1];
    let scan_end = _win[scan + best_len];
    /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
   * It is easy to get rid of this optimization if necessary.
   */ // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
    /* Do not waste too much time if we already have a good match: */ if (s.prev_length >= s.good_match) chain_length >>= 2;
    /* Do not look for matches beyond the end of the input. This is necessary
   * to make deflate deterministic.
   */ if (nice_match > s.lookahead) nice_match = s.lookahead;
    // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
    do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;
        /* Skip to next match if the match length cannot increase
     * or if the match length is less than 2.  Note that the checks below
     * for insufficient lookahead only occur occasionally for performance
     * reasons.  Therefore uninitialized memory will be accessed, and
     * conditional jumps will be made that depend on those values.
     * However the length of the match is limited to the lookahead, so
     * the output of deflate is not affected by the uninitialized values.
     */ if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) continue;
        /* The check at best_len-1 can be removed because it will be made
     * again later. (This heuristic is not always a win.)
     * It is not necessary to compare scan[2] and match[2] since they
     * are always equal when the other bytes match, given that
     * the hash keys are equal and that HASH_BITS >= 8.
     */ scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");
        /* We check for insufficient lookahead only every 8th comparison;
     * the 256th check will be made at strstart+258.
     */ do ;
        while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;
        if (len > best_len) {
            s.match_start = cur_match;
            best_len = len;
            if (len >= nice_match) break;
            scan_end1 = _win[scan + best_len - 1];
            scan_end = _win[scan + best_len];
        }
    }while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
    if (best_len <= s.lookahead) return best_len;
    return s.lookahead;
};
/* ===========================================================================
 * Fill the window when the lookahead becomes insufficient.
 * Updates strstart and lookahead.
 *
 * IN assertion: lookahead < MIN_LOOKAHEAD
 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
 *    At least one byte has been read, or avail_in == 0; reads are
 *    performed for at least two bytes (required for the zip translate_eol
 *    option -- not supported here).
 */ const fill_window = (s)=>{
    const _w_size = s.w_size;
    let n, more, str;
    //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
    do {
        more = s.window_size - s.lookahead - s.strstart;
        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */ //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}
        /* If the window is almost full and there is insufficient lookahead,
     * move the upper half to the lower one to make room in the upper half.
     */ if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
            s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
            s.match_start -= _w_size;
            s.strstart -= _w_size;
            /* we now have strstart >= MAX_DIST */ s.block_start -= _w_size;
            if (s.insert > s.strstart) s.insert = s.strstart;
            slide_hash(s);
            more += _w_size;
        }
        if (s.strm.avail_in === 0) break;
        /* If there was no sliding:
     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
     *    more == window_size - lookahead - strstart
     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
     * => more >= window_size - 2*WSIZE + 2
     * In the BIG_MEM or MMAP case (not yet supported),
     *   window_size == input_size + MIN_LOOKAHEAD  &&
     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
     * Otherwise, window_size == 2*WSIZE so more >= 2.
     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
     */ //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;
        /* Initialize the hash value now that we have some input: */ if (s.lookahead + s.insert >= MIN_MATCH) {
            str = s.strstart - s.insert;
            s.ins_h = s.window[str];
            /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
            //#if MIN_MATCH != 3
            //        Call update_hash() MIN_MATCH-3 more times
            //#endif
            while(s.insert){
                /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
                s.prev[str & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = str;
                str++;
                s.insert--;
                if (s.lookahead + s.insert < MIN_MATCH) break;
            }
        }
    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
     * but this is not important since only literal bytes will be emitted.
     */ }while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
/* If the WIN_INIT bytes after the end of the current data have never been
   * written, then zero those bytes in order to avoid memory check reports of
   * the use of uninitialized (or uninitialised as Julian writes) bytes by
   * the longest match routines.  Update the high water mark for the next
   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
   */ //  if (s.high_water < s.window_size) {
//    const curr = s.strstart + s.lookahead;
//    let init = 0;
//
//    if (s.high_water < curr) {
//      /* Previous high water mark below current data -- zero WIN_INIT
//       * bytes or up to end of window, whichever is less.
//       */
//      init = s.window_size - curr;
//      if (init > WIN_INIT)
//        init = WIN_INIT;
//      zmemzero(s->window + curr, (unsigned)init);
//      s->high_water = curr + init;
//    }
//    else if (s->high_water < (ulg)curr + WIN_INIT) {
//      /* High water mark at or above current data, but below current data
//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
//       * to end of window, whichever is less.
//       */
//      init = (ulg)curr + WIN_INIT - s->high_water;
//      if (init > s->window_size - s->high_water)
//        init = s->window_size - s->high_water;
//      zmemzero(s->window + s->high_water, (unsigned)init);
//      s->high_water += init;
//    }
//  }
//
//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
//    "not enough room for search");
};
/* ===========================================================================
 * Copy without compression as much as possible from the input stream, return
 * the current block state.
 *
 * In case deflateParams() is used to later switch to a non-zero compression
 * level, s->matches (otherwise unused when storing) keeps track of the number
 * of hash table slides to perform. If s->matches is 1, then one hash table
 * slide will be done when switching. If s->matches is 2, the maximum value
 * allowed here, then the hash table will be cleared, since two or more slides
 * is the same as a clear.
 *
 * deflate_stored() is written to minimize the number of times an input byte is
 * copied. It is most efficient with large input and output buffers, which
 * maximizes the opportunites to have a single copy from next_in to next_out.
 */ const deflate_stored = (s, flush)=>{
    /* Smallest worthy block size when not flushing or finishing. By default
   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
   * large input and output buffers, the stored block size will be larger.
   */ let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
    /* Copy as many min_block or larger stored blocks directly to next_out as
   * possible. If flushing, copy the remaining available input to next_out as
   * stored blocks, if there is enough space.
   */ let len, left, have, last = 0;
    let used = s.strm.avail_in;
    do {
        /* Set len to the maximum size block that we can copy directly with the
     * available input data and output space. Set left to how much of that
     * would be copied from what's left in the window.
     */ len = 65535 /* MAX_STORED */ ; /* maximum deflate stored block length */ 
        have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
        if (s.strm.avail_out < have) break;
        /* maximum stored block length that will fit in avail_out: */ have = s.strm.avail_out - have;
        left = s.strstart - s.block_start; /* bytes left in window */ 
        if (len > left + s.strm.avail_in) len = left + s.strm.avail_in; /* limit len to the input */ 
        if (len > have) len = have; /* limit len to the output */ 
        /* If the stored block would be less than min_block in length, or if
     * unable to copy all of the available input when flushing, then try
     * copying to the window and the pending buffer instead. Also don't
     * write an empty block when flushing -- deflate() does that.
     */ if (len < min_block && (len === 0 && flush !== Z_FINISH$3 || flush === Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) break;
        /* Make a dummy stored block in pending to get the header bytes,
     * including any pending bits. This also updates the debugging counts.
     */ last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
        _tr_stored_block(s, 0, 0, last);
        /* Replace the lengths in the dummy stored block with len. */ s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;
        /* Write the stored block header bytes. */ flush_pending(s.strm);
        //#ifdef ZLIB_DEBUG
        //    /* Update debugging counts for the data about to be copied. */
        //    s->compressed_len += len << 3;
        //    s->bits_sent += len << 3;
        //#endif
        /* Copy uncompressed bytes from the window to next_out. */ if (left) {
            if (left > len) left = len;
            //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
            s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
            s.strm.next_out += left;
            s.strm.avail_out -= left;
            s.strm.total_out += left;
            s.block_start += left;
            len -= left;
        }
        /* Copy uncompressed bytes directly from next_in to next_out, updating
     * the check value.
     */ if (len) {
            read_buf(s.strm, s.strm.output, s.strm.next_out, len);
            s.strm.next_out += len;
            s.strm.avail_out -= len;
            s.strm.total_out += len;
        }
    }while (last === 0);
    /* Update the sliding window with the last s->w_size bytes of the copied
   * data, or append all of the copied data to the existing window if less
   * than s->w_size bytes were copied. Also update the number of bytes to
   * insert in the hash tables, in the event that deflateParams() switches to
   * a non-zero compression level.
   */ used -= s.strm.avail_in; /* number of input bytes directly copied */ 
    if (used) {
        /* If any input was used, then no unused input remains in the window,
     * therefore s->block_start == s->strstart.
     */ if (used >= s.w_size) {
            s.matches = 2; /* clear hash */ 
            //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
            s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
            s.strstart = s.w_size;
            s.insert = s.strstart;
        } else {
            if (s.window_size - s.strstart <= used) {
                /* Slide the window down. */ s.strstart -= s.w_size;
                //zmemcpy(s->window, s->window + s->w_size, s->strstart);
                s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
                if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
                if (s.insert > s.strstart) s.insert = s.strstart;
            }
            //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
            s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
            s.strstart += used;
            s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* If the last block was written to next_out, then done. */ if (last) return BS_FINISH_DONE;
    /* If flushing and all input has been consumed, then done. */ if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) return BS_BLOCK_DONE;
    /* Fill the window with any remaining input. */ have = s.window_size - s.strstart;
    if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        /* Slide the window down. */ s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) s.matches++; /* add a pending slide_hash() */ 
        have += s.w_size; /* more space now */ 
        if (s.insert > s.strstart) s.insert = s.strstart;
    }
    if (have > s.strm.avail_in) have = s.strm.avail_in;
    if (have) {
        read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
    }
    if (s.high_water < s.strstart) s.high_water = s.strstart;
    /* There was not enough avail_out to write a complete worthy or flushed
   * stored block to next_out. Write a stored block to pending instead, if we
   * have enough input for a worthy block, or if flushing and there is enough
   * room for the remaining input as a stored block in the pending buffer.
   */ have = s.bi_valid + 42 >> 3; /* number of header bytes */ 
    /* maximum stored block length that will fit in pending: */ have = s.pending_buf_size - have > 65535 /* MAX_STORED */  ? 65535 /* MAX_STORED */  : s.pending_buf_size - have;
    min_block = have > s.w_size ? s.w_size : have;
    left = s.strstart - s.block_start;
    if (left >= min_block || (left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
        len = left > have ? have : left;
        last = flush === Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
        _tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        flush_pending(s.strm);
    }
    /* We've done all we can with the available input and output. */ return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};
/* ===========================================================================
 * Compress as much as possible from the input stream, return the current
 * block state.
 * This function does not perform lazy evaluation of matches and inserts
 * new strings in the dictionary only for unmatched strings or for short
 * matches. It is used only for the fast compression options.
 */ const deflate_fast = (s, flush)=>{
    let hash_head; /* head of the hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);
            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) return BS_NEED_MORE;
            if (s.lookahead === 0) break; /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     * At this point we have always match_length < MIN_MATCH
     */ if (hash_head !== 0 /*NIL*/  && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = longest_match(s, hash_head);
        if (s.match_length >= MIN_MATCH) {
            // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
            /*** _tr_tally_dist(s, s.strstart - s.match_start,
                     s.match_length - MIN_MATCH, bflush); ***/ bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            /* Insert new strings in the hash table only if the match length
       * is not too large. This saves time but degrades compression.
       */ if (s.match_length <= s.max_lazy_match /*max_insert_length*/  && s.lookahead >= MIN_MATCH) {
                s.match_length--; /* string at strstart already in table */ 
                do {
                    s.strstart++;
                    /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
                    hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                    s.head[s.ins_h] = s.strstart;
                /***/ /* strstart never exceeds WSIZE-MAX_MATCH, so there are
           * always MIN_MATCH bytes ahead.
           */ }while (--s.match_length !== 0);
                s.strstart++;
            } else {
                s.strstart += s.match_length;
                s.match_length = 0;
                s.ins_h = s.window[s.strstart];
                /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
            //#if MIN_MATCH != 3
            //                Call UPDATE_HASH() MIN_MATCH-3 more times
            //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
         * matter since it will be recomputed at next deflate call.
         */ }
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s.window[s.strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
            if (s.strm.avail_out === 0) return BS_NEED_MORE;
        /***/ }
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);
        if (s.strm.avail_out === 0) return BS_FINISH_STARTED;
        /***/ return BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
        if (s.strm.avail_out === 0) return BS_NEED_MORE;
    /***/ }
    return BS_BLOCK_DONE;
};
/* ===========================================================================
 * Same as above, but achieves better compression. We use a lazy
 * evaluation for matches: a match is finally adopted only if there is
 * no better match at the next window position.
 */ const deflate_slow = (s, flush)=>{
    let hash_head; /* head of hash chain */ 
    let bflush; /* set if current block must be flushed */ 
    let max_insert;
    /* Process the input block. */ for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the next match, plus MIN_MATCH bytes to insert the
     * string following the next match.
     */ if (s.lookahead < MIN_LOOKAHEAD) {
            fill_window(s);
            if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) return BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* Insert the string window[strstart .. strstart+2] in the
     * dictionary, and set hash_head to the head of the hash chain:
     */ hash_head = 0 /*NIL*/ ;
        if (s.lookahead >= MIN_MATCH) {
            /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
            hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = s.strstart;
        /***/ }
        /* Find the longest match, discarding those <= prev_length.
     */ s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;
        if (hash_head !== 0 /*NIL*/  && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
            /* To simplify the code, we prevent matches with the string
       * of window index 0 (in particular we have to avoid a match
       * of the string with itself at the start of the input file).
       */ s.match_length = longest_match(s, hash_head);
            /* longest_match() sets match_start */ if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/ )) /* If prev_match is also MIN_MATCH, match_start is garbage
         * but we will ignore the current match anyway.
         */ s.match_length = MIN_MATCH - 1;
        }
        /* If there was a match at the previous step and the current
     * match is not better, output the previous match:
     */ if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
            max_insert = s.strstart + s.lookahead - MIN_MATCH;
            /* Do not insert strings in hash table beyond this. */ //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
            /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                     s.prev_length - MIN_MATCH, bflush);***/ bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
            /* Insert in hash table all strings up to the end of the match.
       * strstart-1 and strstart are already inserted. If there is not
       * enough lookahead, the last two strings are not inserted in
       * the hash table.
       */ s.lookahead -= s.prev_length - 1;
            s.prev_length -= 2;
            do if (++s.strstart <= max_insert) {
                /*** INSERT_STRING(s, s.strstart, hash_head); ***/ s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
                hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
                s.head[s.ins_h] = s.strstart;
            /***/ }
            while (--s.prev_length !== 0);
            s.match_available = 0;
            s.match_length = MIN_MATCH - 1;
            s.strstart++;
            if (bflush) {
                /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
                if (s.strm.avail_out === 0) return BS_NEED_MORE;
            /***/ }
        } else if (s.match_available) {
            /* If there was no match at the previous position, output a
       * single literal. If there was a match but the current match
       * is longer, truncate the previous match to a single literal.
       */ //Tracevv((stderr,"%c", s->window[s->strstart-1]));
            /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
            if (bflush) /*** FLUSH_BLOCK_ONLY(s, 0) ***/ flush_block_only(s, false);
            s.strstart++;
            s.lookahead--;
            if (s.strm.avail_out === 0) return BS_NEED_MORE;
        } else {
            /* There is no previous match to compare with, wait for
       * the next step to decide.
       */ s.match_available = 1;
            s.strstart++;
            s.lookahead--;
        }
    }
    //Assert (flush != Z_NO_FLUSH, "no flush?");
    if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
        s.match_available = 0;
    }
    s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
    if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);
        if (s.strm.avail_out === 0) return BS_FINISH_STARTED;
        /***/ return BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
        if (s.strm.avail_out === 0) return BS_NEED_MORE;
    /***/ }
    return BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
 * deflate switches away from Z_RLE.)
 */ const deflate_rle = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    let prev; /* byte at distance one to match */ 
    let scan, strend; /* scan goes up to strend for length of run */ 
    const _win = s.window;
    for(;;){
        /* Make sure that we always have enough lookahead, except
     * at the end of the input file. We need MAX_MATCH bytes
     * for the longest run, plus one for the unrolled loop.
     */ if (s.lookahead <= MAX_MATCH) {
            fill_window(s);
            if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) return BS_NEED_MORE;
            if (s.lookahead === 0) break;
             /* flush the current block */ 
        }
        /* See how many times the previous byte repeats */ s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
            scan = s.strstart - 1;
            prev = _win[scan];
            if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
                strend = s.strstart + MAX_MATCH;
                do ;
                while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
                s.match_length = MAX_MATCH - (strend - scan);
                if (s.match_length > s.lookahead) s.match_length = s.lookahead;
            }
        //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }
        /* Emit match if have run of MIN_MATCH or longer, else emit literal */ if (s.match_length >= MIN_MATCH) {
            //check_match(s, s.strstart, s.strstart - 1, s.match_length);
            /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/ bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
            s.lookahead -= s.match_length;
            s.strstart += s.match_length;
            s.match_length = 0;
        } else {
            /* No match, output a literal byte */ //Tracevv((stderr,"%c", s->window[s->strstart]));
            /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);
            s.lookahead--;
            s.strstart++;
        }
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
            if (s.strm.avail_out === 0) return BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);
        if (s.strm.avail_out === 0) return BS_FINISH_STARTED;
        /***/ return BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
        if (s.strm.avail_out === 0) return BS_NEED_MORE;
    /***/ }
    return BS_BLOCK_DONE;
};
/* ===========================================================================
 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
 * (It will be regenerated if this run of deflate switches away from Huffman.)
 */ const deflate_huff = (s, flush)=>{
    let bflush; /* set if current block must be flushed */ 
    for(;;){
        /* Make sure that we have a literal to write. */ if (s.lookahead === 0) {
            fill_window(s);
            if (s.lookahead === 0) {
                if (flush === Z_NO_FLUSH$2) return BS_NEED_MORE;
                break; /* flush the current block */ 
            }
        }
        /* Output a literal byte */ s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/ bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
            if (s.strm.avail_out === 0) return BS_NEED_MORE;
        /***/ }
    }
    s.insert = 0;
    if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/ flush_block_only(s, true);
        if (s.strm.avail_out === 0) return BS_FINISH_STARTED;
        /***/ return BS_FINISH_DONE;
    }
    if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/ flush_block_only(s, false);
        if (s.strm.avail_out === 0) return BS_NEED_MORE;
    /***/ }
    return BS_BLOCK_DONE;
};
/* Values for max_lazy_match, good_match and max_chain_length, depending on
 * the desired pack level (0..9). The values given below have been tuned to
 * exclude worst case performance for pathological files. Better values may be
 * found for specific files.
 */ function Config(good_length, max_lazy, nice_length, max_chain, func) {
    this.good_length = good_length;
    this.max_lazy = max_lazy;
    this.nice_length = nice_length;
    this.max_chain = max_chain;
    this.func = func;
}
const configuration_table = [
    /*      good lazy nice chain */ new Config(0, 0, 0, 0, deflate_stored),
    /* 0 store only */ new Config(4, 4, 8, 4, deflate_fast),
    /* 1 max speed, no lazy matches */ new Config(4, 5, 16, 8, deflate_fast),
    /* 2 */ new Config(4, 6, 32, 32, deflate_fast),
    /* 3 */ new Config(4, 4, 16, 16, deflate_slow),
    /* 4 lazy matches */ new Config(8, 16, 32, 32, deflate_slow),
    /* 5 */ new Config(8, 16, 128, 128, deflate_slow),
    /* 6 */ new Config(8, 32, 128, 256, deflate_slow),
    /* 7 */ new Config(32, 128, 258, 1024, deflate_slow),
    /* 8 */ new Config(32, 258, 258, 4096, deflate_slow)
];
/* ===========================================================================
 * Initialize the "longest match" routines for a new zlib stream
 */ const lm_init = (s)=>{
    s.window_size = 2 * s.w_size;
    /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);
    /* Set the default configuration parameters:
   */ s.max_lazy_match = configuration_table[s.level].max_lazy;
    s.good_match = configuration_table[s.level].good_length;
    s.nice_match = configuration_table[s.level].nice_length;
    s.max_chain_length = configuration_table[s.level].max_chain;
    s.strstart = 0;
    s.block_start = 0;
    s.lookahead = 0;
    s.insert = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    s.ins_h = 0;
};
function DeflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.status = 0; /* as the name implies */ 
    this.pending_buf = null; /* output still pending */ 
    this.pending_buf_size = 0; /* size of pending_buf */ 
    this.pending_out = 0; /* next pending byte to output to the stream */ 
    this.pending = 0; /* nb of bytes in the pending buffer */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */ 
    this.gzhead = null; /* gzip header information to write */ 
    this.gzindex = 0; /* where in extra, name, or comment */ 
    this.method = Z_DEFLATED$2; /* can only be DEFLATED */ 
    this.last_flush = -1; /* value of flush param for previous deflate call */ 
    this.w_size = 0; /* LZ77 window size (32K by default) */ 
    this.w_bits = 0; /* log2(w_size)  (8..16) */ 
    this.w_mask = 0; /* w_size - 1 */ 
    this.window = null;
    /* Sliding window. Input bytes are read into the second half of the window,
   * and move to the first half later to keep a dictionary of at least wSize
   * bytes. With this organization, matches are limited to a distance of
   * wSize-MAX_MATCH bytes, but this ensures that IO is always
   * performed with a length multiple of the block size.
   */ this.window_size = 0;
    /* Actual size of window: 2*wSize, except when the user input buffer
   * is directly used as sliding window.
   */ this.prev = null;
    /* Link to older string with same hash index. To limit the size of this
   * array to 64K, this link is maintained only for the last 32K strings.
   * An index in this array is thus a window index modulo 32K.
   */ this.head = null; /* Heads of the hash chains or NIL. */ 
    this.ins_h = 0; /* hash index of string to be inserted */ 
    this.hash_size = 0; /* number of elements in hash table */ 
    this.hash_bits = 0; /* log2(hash_size) */ 
    this.hash_mask = 0; /* hash_size-1 */ 
    this.hash_shift = 0;
    /* Number of bits by which ins_h must be shifted at each input
   * step. It must be such that after MIN_MATCH steps, the oldest
   * byte no longer takes part in the hash key, that is:
   *   hash_shift * MIN_MATCH >= hash_bits
   */ this.block_start = 0;
    /* Window position at the beginning of the current output block. Gets
   * negative when the window is moved backwards.
   */ this.match_length = 0; /* length of best match */ 
    this.prev_match = 0; /* previous match */ 
    this.match_available = 0; /* set if previous match exists */ 
    this.strstart = 0; /* start of string to insert */ 
    this.match_start = 0; /* start of matching string */ 
    this.lookahead = 0; /* number of valid bytes ahead in window */ 
    this.prev_length = 0;
    /* Length of the best match at previous step. Matches not greater than this
   * are discarded. This is used in the lazy match evaluation.
   */ this.max_chain_length = 0;
    /* To speed up deflation, hash chains are never searched beyond this
   * length.  A higher limit improves compression ratio but degrades the
   * speed.
   */ this.max_lazy_match = 0;
    /* Attempt to find a better match only when the current match is strictly
   * smaller than this value. This mechanism is used only for compression
   * levels >= 4.
   */ // That's alias to max_lazy_match, don't use directly
    //this.max_insert_length = 0;
    /* Insert new strings in the hash table only if the match length is not
   * greater than this length. This saves time but degrades compression.
   * max_insert_length is used only for compression levels <= 3.
   */ this.level = 0; /* compression level (1..9) */ 
    this.strategy = 0; /* favor or force Huffman coding*/ 
    this.good_match = 0;
    /* Use a faster search when the previous match is longer than this */ this.nice_match = 0; /* Stop searching when current match exceeds this */ 
    /* used by trees.c: */ /* Didn't use ct_data typedef below to suppress compiler warning */ // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
    // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
    // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
    // Use flat array of DOUBLE size, with interleaved fata,
    // because JS does not support effective
    this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
    this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
    this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
    zero(this.dyn_ltree);
    zero(this.dyn_dtree);
    zero(this.bl_tree);
    this.l_desc = null; /* desc. for literal tree */ 
    this.d_desc = null; /* desc. for distance tree */ 
    this.bl_desc = null; /* desc. for bit length tree */ 
    //ush bl_count[MAX_BITS+1];
    this.bl_count = new Uint16Array(MAX_BITS + 1);
    /* number of codes at each bit length for an optimal tree */ //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
    this.heap = new Uint16Array(2 * L_CODES + 1); /* heap used to build the Huffman trees */ 
    zero(this.heap);
    this.heap_len = 0; /* number of elements in the heap */ 
    this.heap_max = 0; /* element of largest frequency */ 
    /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
   * The same heap array is used to build all trees.
   */ this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
    zero(this.depth);
    /* Depth of each subtree used as tie breaker for trees of equal frequency
   */ this.sym_buf = 0; /* buffer for distances and literals/lengths */ 
    this.lit_bufsize = 0;
    /* Size of match buffer for literals/lengths.  There are 4 reasons for
   * limiting lit_bufsize to 64K:
   *   - frequencies can be kept in 16 bit counters
   *   - if compression is not successful for the first block, all input
   *     data is still in the window so we can still emit a stored block even
   *     when input comes from standard input.  (This can also be done for
   *     all blocks if lit_bufsize is not greater than 32K.)
   *   - if compression is not successful for a file smaller than 64K, we can
   *     even emit a stored file instead of a stored block (saving 5 bytes).
   *     This is applicable only for zip (not gzip or zlib).
   *   - creating new Huffman trees less frequently may not provide fast
   *     adaptation to changes in the input data statistics. (Take for
   *     example a binary file with poorly compressible code followed by
   *     a highly compressible string table.) Smaller buffer sizes give
   *     fast adaptation but have of course the overhead of transmitting
   *     trees more frequently.
   *   - I can't count above 4
   */ this.sym_next = 0; /* running index in sym_buf */ 
    this.sym_end = 0; /* symbol table full when sym_next reaches this */ 
    this.opt_len = 0; /* bit length of current block with optimal trees */ 
    this.static_len = 0; /* bit length of current block with static trees */ 
    this.matches = 0; /* number of string matches in current block */ 
    this.insert = 0; /* bytes at end of window left to insert */ 
    this.bi_buf = 0;
    /* Output buffer. bits are inserted starting at the bottom (least
   * significant bits).
   */ this.bi_valid = 0;
/* Number of valid bits in bi_buf.  All bits above the last valid bit
   * are always zero.
   */ // Used for window memory init. We safely ignore it for JS. That makes
// sense only for pointers and memory check tools.
//this.high_water = 0;
/* High water mark offset in window for initialized bytes -- bytes above
   * this are set to zero in order to avoid memory check warnings when
   * longest match routines access bytes past the input.  This is then
   * updated to the new high water mark.
   */ }
/* =========================================================================
 * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
 */ const deflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const s = strm.state;
    if (!s || s.strm !== strm || s.status !== INIT_STATE && //#ifdef GZIP
    s.status !== GZIP_STATE && //#endif
    s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) return 1;
    return 0;
};
const deflateResetKeep = (strm)=>{
    if (deflateStateCheck(strm)) return err(strm, Z_STREAM_ERROR$2);
    strm.total_in = strm.total_out = 0;
    strm.data_type = Z_UNKNOWN;
    const s = strm.state;
    s.pending = 0;
    s.pending_out = 0;
    if (s.wrap < 0) s.wrap = -s.wrap;
    s.status = //#ifdef GZIP
    s.wrap === 2 ? GZIP_STATE : //#endif
    s.wrap ? INIT_STATE : BUSY_STATE;
    strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
     : 1; // adler32(0, Z_NULL, 0)
    s.last_flush = -2;
    _tr_init(s);
    return Z_OK$3;
};
const deflateReset = (strm)=>{
    const ret = deflateResetKeep(strm);
    if (ret === Z_OK$3) lm_init(strm.state);
    return ret;
};
const deflateSetHeader = (strm, head)=>{
    if (deflateStateCheck(strm) || strm.state.wrap !== 2) return Z_STREAM_ERROR$2;
    strm.state.gzhead = head;
    return Z_OK$3;
};
const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy)=>{
    if (!strm) return Z_STREAM_ERROR$2;
    let wrap = 1;
    if (level === Z_DEFAULT_COMPRESSION$1) level = 6;
    if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else if (windowBits > 15) {
        wrap = 2; /* write gzip wrapper instead */ 
        windowBits -= 16;
    }
    if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) return err(strm, Z_STREAM_ERROR$2);
    if (windowBits === 8) windowBits = 9;
    /* until 256-byte window bug fixed */ const s = new DeflateState();
    strm.state = s;
    s.strm = strm;
    s.status = INIT_STATE; /* to pass state test in deflateReset() */ 
    s.wrap = wrap;
    s.gzhead = null;
    s.w_bits = windowBits;
    s.w_size = 1 << s.w_bits;
    s.w_mask = s.w_size - 1;
    s.hash_bits = memLevel + 7;
    s.hash_size = 1 << s.hash_bits;
    s.hash_mask = s.hash_size - 1;
    s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
    s.window = new Uint8Array(s.w_size * 2);
    s.head = new Uint16Array(s.hash_size);
    s.prev = new Uint16Array(s.w_size);
    // Don't need mem init magic for JS.
    //s.high_water = 0;  /* nothing written to s->window yet */
    s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */ 
    /* We overlay pending_buf and sym_buf. This works since the average size
   * for length/distance pairs over any compressed block is assured to be 31
   * bits or less.
   *
   * Analysis: The longest fixed codes are a length code of 8 bits plus 5
   * extra bits, for lengths 131 to 257. The longest fixed distance codes are
   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
   * possible fixed-codes length/distance pair is then 31 bits total.
   *
   * sym_buf starts one-fourth of the way into pending_buf. So there are
   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
   * in sym_buf is three bytes -- two for the distance and one for the
   * literal/length. As each symbol is consumed, the pointer to the next
   * sym_buf value to read moves forward three bytes. From that symbol, up to
   * 31 bits are written to pending_buf. The closest the written pending_buf
   * bits gets to the next sym_buf symbol to read is just before the last
   * code is written. At that time, 31*(n-2) bits have been written, just
   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
   * symbols are written.) The closest the writing gets to what is unread is
   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
   * can range from 128 to 32768.
   *
   * Therefore, at a minimum, there are 142 bits of space between what is
   * written and what is read in the overlain buffers, so the symbols cannot
   * be overwritten by the compressed data. That space is actually 139 bits,
   * due to the three-bit fixed-code block header.
   *
   * That covers the case where either Z_FIXED is specified, forcing fixed
   * codes, or when the use of fixed codes is chosen, because that choice
   * results in a smaller compressed block than dynamic codes. That latter
   * condition then assures that the above analysis also covers all dynamic
   * blocks. A dynamic-code block will only be chosen to be emitted if it has
   * fewer bits than a fixed-code block would for the same set of symbols.
   * Therefore its average symbol length is assured to be less than 31. So
   * the compressed data for a dynamic block also cannot overwrite the
   * symbols from which it is being constructed.
   */ s.pending_buf_size = s.lit_bufsize * 4;
    s.pending_buf = new Uint8Array(s.pending_buf_size);
    // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
    //s->sym_buf = s->pending_buf + s->lit_bufsize;
    s.sym_buf = s.lit_bufsize;
    //s->sym_end = (s->lit_bufsize - 1) * 3;
    s.sym_end = (s.lit_bufsize - 1) * 3;
    /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
   * on 16 bit machines and because stored blocks are restricted to
   * 64K-1 bytes.
   */ s.level = level;
    s.strategy = strategy;
    s.method = method;
    return deflateReset(strm);
};
const deflateInit = (strm, level)=>{
    return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};
/* ========================================================================= */ const deflate$2 = (strm, flush)=>{
    if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
    const s = strm.state;
    if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH$3) return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
    const old_flush = s.last_flush;
    s.last_flush = flush;
    /* Flush as much pending output as possible */ if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
            /* Since avail_out is 0, deflate will be called again with
       * more output space, but possibly with both pending and
       * avail_in equal to zero. There won't be anything to do,
       * but this is not an error situation so make sure we
       * return OK instead of BUF_ERROR at next call of deflate:
       */ s.last_flush = -1;
            return Z_OK$3;
        }
    /* Make sure there is something to do and avoid duplicate consecutive
     * flushes. For repeated and useless calls with Z_FINISH, we keep
     * returning Z_STREAM_END instead of Z_BUF_ERROR.
     */ } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$3) return err(strm, Z_BUF_ERROR$1);
    /* User must not provide more input after the first FINISH: */ if (s.status === FINISH_STATE && strm.avail_in !== 0) return err(strm, Z_BUF_ERROR$1);
    /* Write the header */ if (s.status === INIT_STATE && s.wrap === 0) s.status = BUSY_STATE;
    if (s.status === INIT_STATE) {
        /* zlib header */ let header = Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
        let level_flags = -1;
        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) level_flags = 0;
        else if (s.level < 6) level_flags = 1;
        else if (s.level === 6) level_flags = 2;
        else level_flags = 3;
        header |= level_flags << 6;
        if (s.strstart !== 0) header |= PRESET_DICT;
        header += 31 - header % 31;
        putShortMSB(s, header);
        /* Save the adler32 of the preset dictionary: */ if (s.strstart !== 0) {
            putShortMSB(s, strm.adler >>> 16);
            putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;
        /* Compression must start with an empty pending buffer */ flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
        }
    }
    //#ifdef GZIP
    if (s.status === GZIP_STATE) {
        /* gzip header */ strm.adler = 0; //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) {
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, 0);
            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            put_byte(s, OS_CODE);
            s.status = BUSY_STATE;
            /* Compression must start with an empty pending buffer */ flush_pending(strm);
            if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK$3;
            }
        } else {
            put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
            put_byte(s, s.gzhead.time & 0xff);
            put_byte(s, s.gzhead.time >> 8 & 0xff);
            put_byte(s, s.gzhead.time >> 16 & 0xff);
            put_byte(s, s.gzhead.time >> 24 & 0xff);
            put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
            put_byte(s, s.gzhead.os & 0xff);
            if (s.gzhead.extra && s.gzhead.extra.length) {
                put_byte(s, s.gzhead.extra.length & 0xff);
                put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
            }
            if (s.gzhead.hcrc) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
            s.gzindex = 0;
            s.status = EXTRA_STATE;
        }
    }
    if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
            while(s.pending + left > s.pending_buf_size){
                let copy = s.pending_buf_size - s.pending;
                // zmemcpy(s.pending_buf + s.pending,
                //    s.gzhead.extra + s.gzindex, copy);
                s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
                s.pending = s.pending_buf_size;
                //--- HCRC_UPDATE(beg) ---//
                if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                //---//
                s.gzindex += copy;
                flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return Z_OK$3;
                }
                beg = 0;
                left -= copy;
            }
            // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
            //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
            let gzhead_extra = new Uint8Array(s.gzhead.extra);
            // zmemcpy(s->pending_buf + s->pending,
            //     s->gzhead->extra + s->gzindex, left);
            s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
            s.pending += left;
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = NAME_STATE;
    }
    if (s.status === NAME_STATE) {
        if (s.gzhead.name /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.name.length) val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            //---//
            s.gzindex = 0;
        }
        s.status = COMMENT_STATE;
    }
    if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment /* != Z_NULL*/ ) {
            let beg = s.pending; /* start of bytes to update crc */ 
            let val;
            do {
                if (s.pending === s.pending_buf_size) {
                    //--- HCRC_UPDATE(beg) ---//
                    if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
                    //---//
                    flush_pending(strm);
                    if (s.pending !== 0) {
                        s.last_flush = -1;
                        return Z_OK$3;
                    }
                    beg = 0;
                }
                // JS specific: little magic to add zero terminator to end of string
                if (s.gzindex < s.gzhead.comment.length) val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
                else val = 0;
                put_byte(s, val);
            }while (val !== 0);
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        //---//
        }
        s.status = HCRC_STATE;
    }
    if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
            if (s.pending + 2 > s.pending_buf_size) {
                flush_pending(strm);
                if (s.pending !== 0) {
                    s.last_flush = -1;
                    return Z_OK$3;
                }
            }
            put_byte(s, strm.adler & 0xff);
            put_byte(s, strm.adler >> 8 & 0xff);
            strm.adler = 0; //crc32(0L, Z_NULL, 0);
        }
        s.status = BUSY_STATE;
        /* Compression must start with an empty pending buffer */ flush_pending(strm);
        if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
        }
    }
    //#endif
    /* Start a new block or continue the current one.
   */ if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE) {
        let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) s.status = FINISH_STATE;
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
            if (strm.avail_out === 0) s.last_flush = -1;
            return Z_OK$3;
        /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
       * of deflate should use the same flush parameter to make sure
       * that the flush is complete. So we don't have to output an
       * empty block here, this will be done at next call. This also
       * ensures that for a very small output buffer, we emit at most
       * one empty block.
       */ }
        if (bstate === BS_BLOCK_DONE) {
            if (flush === Z_PARTIAL_FLUSH) _tr_align(s);
            else if (flush !== Z_BLOCK$1) {
                _tr_stored_block(s, 0, 0, false);
                /* For a full flush, this empty block will be recognized
         * as a special marker by inflate_sync().
         */ if (flush === Z_FULL_FLUSH$1) {
                    /*** CLEAR_HASH(s); ***/ /* forget history */ zero(s.head); // Fill with NIL (= 0);
                    if (s.lookahead === 0) {
                        s.strstart = 0;
                        s.block_start = 0;
                        s.insert = 0;
                    }
                }
            }
            flush_pending(strm);
            if (strm.avail_out === 0) {
                s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */ 
                return Z_OK$3;
            }
        }
    }
    if (flush !== Z_FINISH$3) return Z_OK$3;
    if (s.wrap <= 0) return Z_STREAM_END$3;
    /* Write the trailer */ if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, strm.adler >> 8 & 0xff);
        put_byte(s, strm.adler >> 16 & 0xff);
        put_byte(s, strm.adler >> 24 & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, strm.total_in >> 8 & 0xff);
        put_byte(s, strm.total_in >> 16 & 0xff);
        put_byte(s, strm.total_in >> 24 & 0xff);
    } else {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
    }
    flush_pending(strm);
    /* If avail_out is zero, the application will call deflate again
   * to flush the rest.
   */ if (s.wrap > 0) s.wrap = -s.wrap;
    /* write the trailer only once! */ return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};
const deflateEnd = (strm)=>{
    if (deflateStateCheck(strm)) return Z_STREAM_ERROR$2;
    const status = strm.state.status;
    strm.state = null;
    return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};
/* =========================================================================
 * Initializes the compression dictionary from the given byte
 * sequence without producing any compressed output.
 */ const deflateSetDictionary = (strm, dictionary)=>{
    let dictLength = dictionary.length;
    if (deflateStateCheck(strm)) return Z_STREAM_ERROR$2;
    const s = strm.state;
    const wrap = s.wrap;
    if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) return Z_STREAM_ERROR$2;
    /* when using zlib wrappers, compute Adler-32 for provided dictionary */ if (wrap === 1) /* adler32(strm->adler, dictionary, dictLength); */ strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
    s.wrap = 0; /* avoid computing Adler-32 in read_buf */ 
    /* if dictionary would fill window, just replace the history */ if (dictLength >= s.w_size) {
        if (wrap === 0) {
            /*** CLEAR_HASH(s); ***/ zero(s.head); // Fill with NIL (= 0);
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
        }
        /* use the tail */ // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
    }
    /* insert dictionary into window and hash */ const avail = strm.avail_in;
    const next = strm.next_in;
    const input = strm.input;
    strm.avail_in = dictLength;
    strm.next_in = 0;
    strm.input = dictionary;
    fill_window(s);
    while(s.lookahead >= MIN_MATCH){
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */ s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
        }while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
    }
    s.strstart += s.lookahead;
    s.block_start = s.strstart;
    s.insert = s.lookahead;
    s.lookahead = 0;
    s.match_length = s.prev_length = MIN_MATCH - 1;
    s.match_available = 0;
    strm.next_in = next;
    strm.input = input;
    strm.avail_in = avail;
    s.wrap = wrap;
    return Z_OK$3;
};
var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = 'pako deflate (from Nodeca project)';
/* Not implemented
module.exports.deflateBound = deflateBound;
module.exports.deflateCopy = deflateCopy;
module.exports.deflateGetDictionary = deflateGetDictionary;
module.exports.deflateParams = deflateParams;
module.exports.deflatePending = deflatePending;
module.exports.deflatePrime = deflatePrime;
module.exports.deflateTune = deflateTune;
*/ var deflate_1$2 = {
    deflateInit: deflateInit_1,
    deflateInit2: deflateInit2_1,
    deflateReset: deflateReset_1,
    deflateResetKeep: deflateResetKeep_1,
    deflateSetHeader: deflateSetHeader_1,
    deflate: deflate_2$1,
    deflateEnd: deflateEnd_1,
    deflateSetDictionary: deflateSetDictionary_1,
    deflateInfo: deflateInfo
};
const _has = (obj, key)=>{
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var assign = function(obj /*from1, from2, from3, ...*/ ) {
    const sources = Array.prototype.slice.call(arguments, 1);
    while(sources.length){
        const source = sources.shift();
        if (!source) continue;
        if (typeof source !== 'object') throw new TypeError(source + 'must be non-object');
        for(const p in source)if (_has(source, p)) obj[p] = source[p];
    }
    return obj;
};
// Join array of chunks to single array.
var flattenChunks = (chunks)=>{
    // calculate data length
    let len = 0;
    for(let i = 0, l = chunks.length; i < l; i++)len += chunks[i].length;
    // join chunks
    const result = new Uint8Array(len);
    for(let i = 0, pos = 0, l = chunks.length; i < l; i++){
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
    }
    return result;
};
var common = {
    assign: assign,
    flattenChunks: flattenChunks
};
// String encode/decode helpers
// Quick check if we can use fast array to bin string conversion
//
// - apply(Array) can fail on Android 2.2
// - apply(Uint8Array) can fail on iOS 5.1 Safari
//
let STR_APPLY_UIA_OK = true;
try {
    String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
    STR_APPLY_UIA_OK = false;
}
// Table with utf8 lengths (calculated by first byte of sequence)
// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
// because max possible codepoint is 0x10ffff
const _utf8len = new Uint8Array(256);
for(let q = 0; q < 256; q++)_utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
// convert string to array (typed, when possible)
var string2buf = (str)=>{
    if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) return new TextEncoder().encode(str);
    let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
    // count binary size
    for(m_pos = 0; m_pos < str_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
    }
    // allocate buffer
    buf = new Uint8Array(buf_len);
    // convert
    for(i = 0, m_pos = 0; i < buf_len; m_pos++){
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);
            if ((c2 & 0xfc00) === 0xdc00) {
                c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
                m_pos++;
            }
        }
        if (c < 0x80) /* one byte */ buf[i++] = c;
        else if (c < 0x800) {
            /* two bytes */ buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
        } else if (c < 0x10000) {
            /* three bytes */ buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        } else {
            /* four bytes */ buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
        }
    }
    return buf;
};
// Helper
const buf2binstring = (buf, len)=>{
    // On Chrome, the arguments in a function call that are allowed is `65534`.
    // If the length of the buffer is smaller than that, we can use this optimization,
    // otherwise we will take a slower path.
    if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
    let result = '';
    for(let i = 0; i < len; i++)result += String.fromCharCode(buf[i]);
    return result;
};
// convert array to string
var buf2string = (buf, max)=>{
    const len = max || buf.length;
    if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) return new TextDecoder().decode(buf.subarray(0, max));
    let i, out;
    // Reserve max possible length (2 words per char)
    // NB: by unknown reasons, Array is significantly faster for
    //     String.fromCharCode.apply than Uint16Array.
    const utf16buf = new Array(len * 2);
    for(out = 0, i = 0; i < len;){
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
        }
        let c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
        }
        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while(c_len > 1 && i < len){
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
        }
        // terminated by end of string?
        if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
        }
        if (c < 0x10000) utf16buf[out++] = c;
        else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
        }
    }
    return buf2binstring(utf16buf, out);
};
// Calculate max possible position in utf8 buffer,
// that will not break sequence. If that's not possible
// - (very small limits) return max size as is.
//
// buf[] - utf8 bytes array
// max   - length limit (mandatory);
var utf8border = (buf, max)=>{
    max = max || buf.length;
    if (max > buf.length) max = buf.length;
    // go back from last position, until start of sequence found
    let pos = max - 1;
    while(pos >= 0 && (buf[pos] & 0xC0) === 0x80)pos--;
    // Very small and broken sequence,
    // return max, because we should return something anyway.
    if (pos < 0) return max;
    // If we came to start of buffer - that means buffer is too small,
    // return max too.
    if (pos === 0) return max;
    return pos + _utf8len[buf[pos]] > max ? pos : max;
};
var strings = {
    string2buf: string2buf,
    buf2string: buf2string,
    utf8border: utf8border
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function ZStream() {
    /* next input byte */ this.input = null; // JS specific, because we have no pointers
    this.next_in = 0;
    /* number of bytes available at input */ this.avail_in = 0;
    /* total number of input bytes read so far */ this.total_in = 0;
    /* next output byte should be put there */ this.output = null; // JS specific, because we have no pointers
    this.next_out = 0;
    /* remaining free space at output */ this.avail_out = 0;
    /* total number of bytes output so far */ this.total_out = 0;
    /* last error message, NULL if no error */ this.msg = '' /*Z_NULL*/ ;
    /* not visible by applications */ this.state = null;
    /* best guess about the data type: binary or text */ this.data_type = 2 /*Z_UNKNOWN*/ ;
    /* adler32 value of the uncompressed data */ this.adler = 0;
}
var zstream = ZStream;
const toString$1 = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2, Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2, Z_DEFAULT_COMPRESSION, Z_DEFAULT_STRATEGY, Z_DEFLATED: Z_DEFLATED$1 } = constants$2;
/* ===========================================================================*/ /**
 * class Deflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[deflate]],
 * [[deflateRaw]] and [[gzip]].
 **/ /* internal
 * Deflate.chunks -> Array
 *
 * Chunks of output data, if [[Deflate#onData]] not overridden.
 **/ /**
 * Deflate.result -> Uint8Array
 *
 * Compressed result, generated by default [[Deflate#onData]]
 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Deflate.err -> Number
 *
 * Error code after deflate finished. 0 (Z_OK) on success.
 * You will not need it in real life, because deflate errors
 * are possible only on wrong options or bad `onData` / `onEnd`
 * custom handlers.
 **/ /**
 * Deflate.msg -> String
 *
 * Error message, if [[Deflate.err]] != 0
 **/ /**
 * new Deflate(options)
 * - options (Object): zlib deflate options.
 *
 * Creates new deflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `level`
 * - `windowBits`
 * - `memLevel`
 * - `strategy`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw deflate
 * - `gzip` (Boolean) - create gzip wrapper
 * - `header` (Object) - custom header for gzip
 *   - `text` (Boolean) - true if compressed data believed to be text
 *   - `time` (Number) - modification time, unix timestamp
 *   - `os` (Number) - operation system code
 *   - `extra` (Array) - array of bytes with extra data (max 65536)
 *   - `name` (String) - file name (binary string)
 *   - `comment` (String) - comment (binary string)
 *   - `hcrc` (Boolean) - true if header crc should be added
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const deflate = new pako.Deflate({ level: 3});
 *
 * deflate.push(chunk1, false);
 * deflate.push(chunk2, true);  // true -> last chunk
 *
 * if (deflate.err) { throw new Error(deflate.err); }
 *
 * console.log(deflate.result);
 * ```
 **/ function Deflate$1(options) {
    this.options = common.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
    }, options || {});
    let opt = this.options;
    if (opt.raw && opt.windowBits > 0) opt.windowBits = -opt.windowBits;
    else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) opt.windowBits += 16;
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ''; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new zstream();
    this.strm.avail_out = 0;
    let status = deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
    if (status !== Z_OK$2) throw new Error(messages[status]);
    if (opt.header) deflate_1$2.deflateSetHeader(this.strm, opt.header);
    if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === 'string') // If we need to compress text, change encoding to utf8.
        dict = strings.string2buf(opt.dictionary);
        else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') dict = new Uint8Array(opt.dictionary);
        else dict = opt.dictionary;
        status = deflate_1$2.deflateSetDictionary(this.strm, dict);
        if (status !== Z_OK$2) throw new Error(messages[status]);
        this._dict_set = true;
    }
}
/**
 * Deflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
 *   converted to utf8 byte sequence.
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
 *
 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
 * new compressed chunks. Returns `true` on success. The last data block must
 * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
 * buffers and call [[Deflate#onEnd]].
 *
 * On fail call [[Deflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ Deflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    let status, _flush_mode;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
    // Convert data if needed
    if (typeof data === 'string') // If we need to compress text, change encoding to utf8.
    strm.input = strings.string2buf(data);
    else if (toString$1.call(data) === '[object ArrayBuffer]') strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        status = deflate_1$2.deflate(strm, _flush_mode);
        // Ended => flush and finish
        if (status === Z_STREAM_END$2) {
            if (strm.next_out > 0) this.onData(strm.output.subarray(0, strm.next_out));
            status = deflate_1$2.deflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return status === Z_OK$2;
        }
        // Flush if out buffer full
        if (strm.avail_out === 0) {
            this.onData(strm.output);
            continue;
        }
        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
            strm.avail_out = 0;
            continue;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Deflate#onData(chunk) -> Void
 * - chunk (Uint8Array): output data.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ Deflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Deflate#onEnd(status) -> Void
 * - status (Number): deflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called once after you tell deflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ Deflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === Z_OK$2) this.result = common.flattenChunks(this.chunks);
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * deflate(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * Compress `data` with deflate algorithm and `options`.
 *
 * Supported options are:
 *
 * - level
 * - windowBits
 * - memLevel
 * - strategy
 * - dictionary
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
 *
 * console.log(pako.deflate(data));
 * ```
 **/ function deflate$1(input, options) {
    const deflator = new Deflate$1(options);
    deflator.push(input, true);
    // That will never happens, if you don't cheat with options :)
    if (deflator.err) throw deflator.msg || messages[deflator.err];
    return deflator.result;
}
/**
 * deflateRaw(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function deflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return deflate$1(input, options);
}
/**
 * gzip(data[, options]) -> Uint8Array
 * - data (Uint8Array|ArrayBuffer|String): input data to compress.
 * - options (Object): zlib deflate options.
 *
 * The same as [[deflate]], but create gzip wrapper instead of
 * deflate one.
 **/ function gzip$1(input, options) {
    options = options || {};
    options.gzip = true;
    return deflate$1(input, options);
}
var Deflate_1$1 = Deflate$1;
var deflate_2 = deflate$1;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var constants$1 = constants$2;
var deflate_1$1 = {
    Deflate: Deflate_1$1,
    deflate: deflate_2,
    deflateRaw: deflateRaw_1$1,
    gzip: gzip_1$1,
    constants: constants$1
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// See state defs from inflate.js
const BAD$1 = 16209; /* got a data error -- remain here until reset */ 
const TYPE$1 = 16191; /* i: waiting for type bits, including last-flag bit */ 
/*
   Decode literal, length, and distance codes and write out the resulting
   literal and match bytes until either not enough input or output is
   available, an end-of-block is encountered, or a data error is encountered.
   When large enough input and output buffers are supplied to inflate(), for
   example, a 16K input buffer and a 64K output buffer, more than 95% of the
   inflate execution time is spent in this routine.

   Entry assumptions:

        state.mode === LEN
        strm.avail_in >= 6
        strm.avail_out >= 258
        start >= strm.avail_out
        state.bits < 8

   On return, state.mode is one of:

        LEN -- ran out of enough output space or enough available input
        TYPE -- reached end of block code, inflate() to interpret next block
        BAD -- error in block data

   Notes:

    - The maximum input bits used by a length/distance pair is 15 bits for the
      length code, 5 bits for the length extra, 15 bits for the distance code,
      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
      Therefore if strm.avail_in >= 6, then there is enough input to avoid
      checking for available input while decoding.

    - The maximum bytes that a single length/distance pair can output is 258
      bytes, which is the maximum length that can be coded.  inflate_fast()
      requires strm.avail_out >= 258 for each loop to avoid checking for
      output space.
 */ var inffast = function inflate_fast(strm, start) {
    let _in; /* local strm.input */ 
    let last; /* have enough input while in < last */ 
    let _out; /* local strm.output */ 
    let beg; /* inflate()'s initial strm.output */ 
    let end; /* while out < end, enough space available */ 
    //#ifdef INFLATE_STRICT
    let dmax; /* maximum distance from zlib header */ 
    //#endif
    let wsize; /* window size or zero if not using window */ 
    let whave; /* valid bytes in the window */ 
    let wnext; /* window write index */ 
    // Use `s_window` instead `window`, avoid conflict with instrumentation tools
    let s_window; /* allocated sliding window, if wsize != 0 */ 
    let hold; /* local strm.hold */ 
    let bits; /* local strm.bits */ 
    let lcode; /* local strm.lencode */ 
    let dcode; /* local strm.distcode */ 
    let lmask; /* mask for first level of length codes */ 
    let dmask; /* mask for first level of distance codes */ 
    let here; /* retrieved table entry */ 
    let op; /* code bits, operation, extra bits, or */ 
    /*  window position, window bytes to copy */ let len; /* match length, unused bytes */ 
    let dist; /* match distance */ 
    let from; /* where to copy match from */ 
    let from_source;
    let input, output; // JS specific, because we have no pointers
    /* copy state to local variables */ const state = strm.state;
    //here = state.here;
    _in = strm.next_in;
    input = strm.input;
    last = _in + (strm.avail_in - 5);
    _out = strm.next_out;
    output = strm.output;
    beg = _out - (start - strm.avail_out);
    end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
    dmax = state.dmax;
    //#endif
    wsize = state.wsize;
    whave = state.whave;
    wnext = state.wnext;
    s_window = state.window;
    hold = state.hold;
    bits = state.bits;
    lcode = state.lencode;
    dcode = state.distcode;
    lmask = (1 << state.lenbits) - 1;
    dmask = (1 << state.distbits) - 1;
    /* decode literals and length/distances until end-of-block or not enough
     input data or output space */ top: do {
        if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
        }
        here = lcode[hold & lmask];
        dolen: for(;;){
            op = here >>> 24 /*here.bits*/ ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff /*here.op*/ ;
            if (op === 0) //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff /*here.val*/ ;
            else if (op & 16) {
                len = here & 0xffff /*here.val*/ ;
                op &= 15; /* number of extra bits */ 
                if (op) {
                    if (bits < op) {
                        hold += input[_in++] << bits;
                        bits += 8;
                    }
                    len += hold & (1 << op) - 1;
                    hold >>>= op;
                    bits -= op;
                }
                //Tracevv((stderr, "inflate:         length %u\n", len));
                if (bits < 15) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    hold += input[_in++] << bits;
                    bits += 8;
                }
                here = dcode[hold & dmask];
                dodist: for(;;){
                    op = here >>> 24 /*here.bits*/ ;
                    hold >>>= op;
                    bits -= op;
                    op = here >>> 16 & 0xff /*here.op*/ ;
                    if (op & 16) {
                        dist = here & 0xffff /*here.val*/ ;
                        op &= 15; /* number of extra bits */ 
                        if (bits < op) {
                            hold += input[_in++] << bits;
                            bits += 8;
                            if (bits < op) {
                                hold += input[_in++] << bits;
                                bits += 8;
                            }
                        }
                        dist += hold & (1 << op) - 1;
                        //#ifdef INFLATE_STRICT
                        if (dist > dmax) {
                            strm.msg = 'invalid distance too far back';
                            state.mode = BAD$1;
                            break top;
                        }
                        //#endif
                        hold >>>= op;
                        bits -= op;
                        //Tracevv((stderr, "inflate:         distance %u\n", dist));
                        op = _out - beg; /* max distance in output */ 
                        if (dist > op) {
                            op = dist - op; /* distance back in window */ 
                            if (op > whave) {
                                if (state.sane) {
                                    strm.msg = 'invalid distance too far back';
                                    state.mode = BAD$1;
                                    break top;
                                }
                            }
                            from = 0; // window index
                            from_source = s_window;
                            if (wnext === 0) {
                                from += wsize - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            } else if (wnext < op) {
                                from += wsize + wnext - op;
                                op -= wnext;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = 0;
                                    if (wnext < len) {
                                        op = wnext;
                                        len -= op;
                                        do output[_out++] = s_window[from++];
                                        while (--op);
                                        from = _out - dist; /* rest from output */ 
                                        from_source = output;
                                    }
                                }
                            } else {
                                from += wnext - op;
                                if (op < len) {
                                    len -= op;
                                    do output[_out++] = s_window[from++];
                                    while (--op);
                                    from = _out - dist; /* rest from output */ 
                                    from_source = output;
                                }
                            }
                            while(len > 2){
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                output[_out++] = from_source[from++];
                                len -= 3;
                            }
                            if (len) {
                                output[_out++] = from_source[from++];
                                if (len > 1) output[_out++] = from_source[from++];
                            }
                        } else {
                            from = _out - dist; /* copy direct from output */ 
                            do {
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                output[_out++] = output[from++];
                                len -= 3;
                            }while (len > 2);
                            if (len) {
                                output[_out++] = output[from++];
                                if (len > 1) output[_out++] = output[from++];
                            }
                        }
                    } else if ((op & 64) === 0) {
                        here = dcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                        continue dodist;
                    } else {
                        strm.msg = 'invalid distance code';
                        state.mode = BAD$1;
                        break top;
                    }
                    break; // need to emulate goto via "continue"
                }
            } else if ((op & 64) === 0) {
                here = lcode[(here & 0xffff) + (hold & (1 << op) - 1)];
                continue dolen;
            } else if (op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.mode = TYPE$1;
                break top;
            } else {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD$1;
                break top;
            }
            break; // need to emulate goto via "continue"
        }
    }while (_in < last && _out < end);
    /* return unused bytes (on entry, bits < 8, so in won't go too far back) */ len = bits >> 3;
    _in -= len;
    bits -= len << 3;
    hold &= (1 << bits) - 1;
    /* update state and return */ strm.next_in = _in;
    strm.next_out = _out;
    strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
    strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
    state.hold = hold;
    state.bits = bits;
    return;
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const MAXBITS = 15;
const ENOUGH_LENS$1 = 852;
const ENOUGH_DISTS$1 = 592;
//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
const CODES$1 = 0;
const LENS$1 = 1;
const DISTS$1 = 2;
const lbase = new Uint16Array([
    /* Length codes 257..285 base */ 3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
]);
const lext = new Uint8Array([
    /* Length codes 257..285 extra */ 16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    16,
    72,
    78
]);
const dbase = new Uint16Array([
    /* Distance codes 0..29 base */ 1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577,
    0,
    0
]);
const dext = new Uint8Array([
    /* Distance codes 0..29 extra */ 16,
    16,
    16,
    16,
    17,
    17,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    64,
    64
]);
const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts)=>{
    const bits = opts.bits;
    //here = opts.here; /* table entry for duplication */
    let len = 0; /* a code's length in bits */ 
    let sym = 0; /* index of code symbols */ 
    let min = 0, max = 0; /* minimum and maximum code lengths */ 
    let root = 0; /* number of index bits for root table */ 
    let curr = 0; /* number of index bits for current table */ 
    let drop = 0; /* code bits to drop for sub-table */ 
    let left = 0; /* number of prefix codes available */ 
    let used = 0; /* code entries in table used */ 
    let huff = 0; /* Huffman code */ 
    let incr; /* for incrementing code, index */ 
    let fill; /* index for replicating entries */ 
    let low; /* low bits for current root entry */ 
    let mask; /* mask for low root bits */ 
    let next; /* next available space in table */ 
    let base = null; /* base value table to use */ 
    //  let shoextra;    /* extra bits table to use */
    let match; /* use base and extra for symbol >= match */ 
    const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
    const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
    let extra = null;
    let here_bits, here_op, here_val;
    /*
   Process a set of code lengths to create a canonical Huffman code.  The
   code lengths are lens[0..codes-1].  Each length corresponds to the
   symbols 0..codes-1.  The Huffman code is generated by first sorting the
   symbols by length from short to long, and retaining the symbol order
   for codes with equal lengths.  Then the code starts with all zero bits
   for the first code of the shortest length, and the codes are integer
   increments for the same length, and zeros are appended as the length
   increases.  For the deflate format, these bits are stored backwards
   from their more natural integer increment ordering, and so when the
   decoding tables are built in the large loop below, the integer codes
   are incremented backwards.

   This routine assumes, but does not check, that all of the entries in
   lens[] are in the range 0..MAXBITS.  The caller must assure this.
   1..MAXBITS is interpreted as that code length.  zero means that that
   symbol does not occur in this code.

   The codes are sorted by computing a count of codes for each length,
   creating from that a table of starting indices for each length in the
   sorted table, and then entering the symbols in order in the sorted
   table.  The sorted table is work[], with that space being provided by
   the caller.

   The length counts are used for other purposes as well, i.e. finding
   the minimum and maximum length codes, determining if there are any
   codes at all, checking for a valid set of lengths, and looking ahead
   at length counts to determine sub-table sizes when building the
   decoding tables.
   */ /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */ for(len = 0; len <= MAXBITS; len++)count[len] = 0;
    for(sym = 0; sym < codes; sym++)count[lens[lens_index + sym]]++;
    /* bound code lengths, force root to be within code lengths */ root = bits;
    for(max = MAXBITS; max >= 1; max--){
        if (count[max] !== 0) break;
    }
    if (root > max) root = max;
    if (max === 0) {
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = 20971520;
        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = 20971520;
        opts.bits = 1;
        return 0; /* no symbols, but wait for decoding to report error */ 
    }
    for(min = 1; min < max; min++){
        if (count[min] !== 0) break;
    }
    if (root < min) root = min;
    /* check for an over-subscribed or incomplete set of lengths */ left = 1;
    for(len = 1; len <= MAXBITS; len++){
        left <<= 1;
        left -= count[len];
        if (left < 0) return -1;
         /* over-subscribed */ 
    }
    if (left > 0 && (type === CODES$1 || max !== 1)) return -1; /* incomplete set */ 
    /* generate offsets into symbol table for each length for sorting */ offs[1] = 0;
    for(len = 1; len < MAXBITS; len++)offs[len + 1] = offs[len] + count[len];
    /* sort symbols by length, by symbol order within each length */ for(sym = 0; sym < codes; sym++)if (lens[lens_index + sym] !== 0) work[offs[lens[lens_index + sym]]++] = sym;
    /*
   Create and fill in decoding tables.  In this loop, the table being
   filled is at next and has curr index bits.  The code being used is huff
   with length len.  That code is converted to an index by dropping drop
   bits off of the bottom.  For codes where len is less than drop + curr,
   those top drop + curr - len bits are incremented through all values to
   fill the table with replicated entries.

   root is the number of index bits for the root table.  When len exceeds
   root, sub-tables are created pointed to by the root entry with an index
   of the low root bits of huff.  This is saved in low to check for when a
   new sub-table should be started.  drop is zero when the root table is
   being filled, and drop is root when sub-tables are being filled.

   When a new sub-table is needed, it is necessary to look ahead in the
   code lengths to determine what size sub-table is needed.  The length
   counts are used for this, and so count[] is decremented as codes are
   entered in the tables.

   used keeps track of how many table entries have been allocated from the
   provided *table space.  It is checked for LENS and DIST tables against
   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
   the initial root table size constants.  See the comments in inftrees.h
   for more information.

   sym increments through all symbols, and the loop terminates when
   all codes of length max, i.e. all codes, have been processed.  This
   routine permits incomplete codes, so another loop after this one fills
   in the rest of the decoding tables with invalid code markers.
   */ /* set up for code type */ // poor man optimization - use if-else instead of switch,
    // to avoid deopts in old v8
    if (type === CODES$1) {
        base = extra = work; /* dummy value--not used */ 
        match = 20;
    } else if (type === LENS$1) {
        base = lbase;
        extra = lext;
        match = 257;
    } else {
        base = dbase;
        extra = dext;
        match = 0;
    }
    /* initialize opts for loop */ huff = 0; /* starting code */ 
    sym = 0; /* starting code symbol */ 
    len = min; /* starting code length */ 
    next = table_index; /* current table to fill in */ 
    curr = root; /* current table index bits */ 
    drop = 0; /* current bits to drop from code for index */ 
    low = -1; /* trigger new sub-table when len > root */ 
    used = 1 << root; /* use root table entries */ 
    mask = used - 1; /* mask for comparing low */ 
    /* check available table space */ if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) return 1;
    /* process all codes and make table entries */ for(;;){
        /* create table entry */ here_bits = len - drop;
        if (work[sym] + 1 < match) {
            here_op = 0;
            here_val = work[sym];
        } else if (work[sym] >= match) {
            here_op = extra[work[sym] - match];
            here_val = base[work[sym] - match];
        } else {
            here_op = 96; /* end of block */ 
            here_val = 0;
        }
        /* replicate for those indices with low len bits equal to huff */ incr = 1 << len - drop;
        fill = 1 << curr;
        min = fill; /* save offset to next table */ 
        do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
        }while (fill !== 0);
        /* backwards increment the len-bit code huff */ incr = 1 << len - 1;
        while(huff & incr)incr >>= 1;
        if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
        } else huff = 0;
        /* go to next symbol, update count, len */ sym++;
        if (--count[len] === 0) {
            if (len === max) break;
            len = lens[lens_index + work[sym]];
        }
        /* create new sub-table if needed */ if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */ if (drop === 0) drop = root;
            /* increment past last table */ next += min; /* here min is 1 << curr */ 
            /* determine length of next table */ curr = len - drop;
            left = 1 << curr;
            while(curr + drop < max){
                left -= count[curr + drop];
                if (left <= 0) break;
                curr++;
                left <<= 1;
            }
            /* check for enough space */ used += 1 << curr;
            if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) return 1;
            /* point entry in root table to sub-table */ low = huff & mask;
            /*table.op[low] = curr;
      table.bits[low] = root;
      table.val[low] = next - opts.table_index;*/ table[low] = root << 24 | curr << 16 | next - table_index | 0;
        }
    }
    /* fill in remaining table entry if code is incomplete (guaranteed to have
   at most one remaining entry, since if the code is incomplete, the
   maximum code length that was allowed to get this far is one bit) */ if (huff !== 0) //table.op[next + huff] = 64;            /* invalid code marker */
    //table.bits[next + huff] = len - drop;
    //table.val[next + huff] = 0;
    table[next + huff] = len - drop << 24 | 4194304;
    /* set return parameters */ //opts.table_index += used;
    opts.bits = root;
    return 0;
};
var inftrees = inflate_table;
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
const CODES = 0;
const LENS = 1;
const DISTS = 2;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES, Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR, Z_DEFLATED } = constants$2;
/* STATES ====================================================================*/ /* ===========================================================================*/ const HEAD = 16180; /* i: waiting for magic header */ 
const FLAGS = 16181; /* i: waiting for method and flags (gzip) */ 
const TIME = 16182; /* i: waiting for modification time (gzip) */ 
const OS = 16183; /* i: waiting for extra flags and operating system (gzip) */ 
const EXLEN = 16184; /* i: waiting for extra length (gzip) */ 
const EXTRA = 16185; /* i: waiting for extra bytes (gzip) */ 
const NAME = 16186; /* i: waiting for end of file name (gzip) */ 
const COMMENT = 16187; /* i: waiting for end of comment (gzip) */ 
const HCRC = 16188; /* i: waiting for header crc (gzip) */ 
const DICTID = 16189; /* i: waiting for dictionary check value */ 
const DICT = 16190; /* waiting for inflateSetDictionary() call */ 
const TYPE = 16191; /* i: waiting for type bits, including last-flag bit */ 
const TYPEDO = 16192; /* i: same, but skip check to exit inflate on new block */ 
const STORED = 16193; /* i: waiting for stored size (length and complement) */ 
const COPY_ = 16194; /* i/o: same as COPY below, but only first time in */ 
const COPY = 16195; /* i/o: waiting for input or output to copy stored block */ 
const TABLE = 16196; /* i: waiting for dynamic block table lengths */ 
const LENLENS = 16197; /* i: waiting for code length code lengths */ 
const CODELENS = 16198; /* i: waiting for length/lit and distance code lengths */ 
const LEN_ = 16199; /* i: same as LEN below, but only first time in */ 
const LEN = 16200; /* i: waiting for length/lit/eob code */ 
const LENEXT = 16201; /* i: waiting for length extra bits */ 
const DIST = 16202; /* i: waiting for distance code */ 
const DISTEXT = 16203; /* i: waiting for distance extra bits */ 
const MATCH = 16204; /* o: waiting for output space to copy string */ 
const LIT = 16205; /* o: waiting for output space to write literal */ 
const CHECK = 16206; /* i: waiting for 32-bit check value */ 
const LENGTH = 16207; /* i: waiting for 32-bit length (gzip) */ 
const DONE = 16208; /* finished check, done -- remain here until reset */ 
const BAD = 16209; /* got a data error -- remain here until reset */ 
const MEM = 16210; /* got an inflate() memory error -- remain here until reset */ 
const SYNC = 16211; /* looking for synchronization bytes to restart inflate() */ 
/* ===========================================================================*/ const ENOUGH_LENS = 852;
const ENOUGH_DISTS = 592;
//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
const MAX_WBITS = 15;
/* 32K LZ77 window */ const DEF_WBITS = MAX_WBITS;
const zswap32 = (q)=>{
    return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
};
function InflateState() {
    this.strm = null; /* pointer back to this zlib stream */ 
    this.mode = 0; /* current inflate mode */ 
    this.last = false; /* true if processing last block */ 
    this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip,
                                 bit 2 true to validate check value */ 
    this.havedict = false; /* true if dictionary provided */ 
    this.flags = 0; /* gzip header method and flags (0 if zlib), or
                                 -1 if raw or no header yet */ 
    this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */ 
    this.check = 0; /* protected copy of check value */ 
    this.total = 0; /* protected copy of output count */ 
    // TODO: may be {}
    this.head = null; /* where to save gzip header information */ 
    /* sliding window */ this.wbits = 0; /* log base 2 of requested window size */ 
    this.wsize = 0; /* window size or zero if not using window */ 
    this.whave = 0; /* valid bytes in the window */ 
    this.wnext = 0; /* window write index */ 
    this.window = null; /* allocated sliding window, if needed */ 
    /* bit accumulator */ this.hold = 0; /* input bit accumulator */ 
    this.bits = 0; /* number of bits in "in" */ 
    /* for string and stored block copying */ this.length = 0; /* literal or length of data to copy */ 
    this.offset = 0; /* distance back to copy string from */ 
    /* for table and code decoding */ this.extra = 0; /* extra bits needed */ 
    /* fixed and dynamic code tables */ this.lencode = null; /* starting table for length/literal codes */ 
    this.distcode = null; /* starting table for distance codes */ 
    this.lenbits = 0; /* index bits for lencode */ 
    this.distbits = 0; /* index bits for distcode */ 
    /* dynamic table building */ this.ncode = 0; /* number of code length code lengths */ 
    this.nlen = 0; /* number of length code lengths */ 
    this.ndist = 0; /* number of distance code lengths */ 
    this.have = 0; /* number of code lengths in lens[] */ 
    this.next = null; /* next available space in codes[] */ 
    this.lens = new Uint16Array(320); /* temporary storage for code lengths */ 
    this.work = new Uint16Array(288); /* work area for code table building */ 
    /*
   because we don't have pointers in js, we use lencode and distcode directly
   as buffers so we don't need codes
  */ //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
    this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */ 
    this.distdyn = null; /* dynamic table for distance codes (JS specific) */ 
    this.sane = 0; /* if false, allow invalid distance too far */ 
    this.back = 0; /* bits back of last unprocessed length/lit */ 
    this.was = 0; /* initial length of match */ 
}
const inflateStateCheck = (strm)=>{
    if (!strm) return 1;
    const state = strm.state;
    if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) return 1;
    return 0;
};
const inflateResetKeep = (strm)=>{
    if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    const state = strm.state;
    strm.total_in = strm.total_out = state.total = 0;
    strm.msg = ''; /*Z_NULL*/ 
    if (state.wrap) strm.adler = state.wrap & 1;
    state.mode = HEAD;
    state.last = 0;
    state.havedict = 0;
    state.flags = -1;
    state.dmax = 32768;
    state.head = null /*Z_NULL*/ ;
    state.hold = 0;
    state.bits = 0;
    //state.lencode = state.distcode = state.next = state.codes;
    state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
    state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
    state.sane = 1;
    state.back = -1;
    //Tracev((stderr, "inflate: reset\n"));
    return Z_OK$1;
};
const inflateReset = (strm)=>{
    if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    const state = strm.state;
    state.wsize = 0;
    state.whave = 0;
    state.wnext = 0;
    return inflateResetKeep(strm);
};
const inflateReset2 = (strm, windowBits)=>{
    let wrap;
    /* get the state */ if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    const state = strm.state;
    /* extract wrap request from windowBits parameter */ if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
    } else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) windowBits &= 15;
    }
    /* set number of window bits, free window if different */ if (windowBits && (windowBits < 8 || windowBits > 15)) return Z_STREAM_ERROR$1;
    if (state.window !== null && state.wbits !== windowBits) state.window = null;
    /* update state and reset the rest of it */ state.wrap = wrap;
    state.wbits = windowBits;
    return inflateReset(strm);
};
const inflateInit2 = (strm, windowBits)=>{
    if (!strm) return Z_STREAM_ERROR$1;
    //strm.msg = Z_NULL;                 /* in case we return an error */
    const state = new InflateState();
    //if (state === Z_NULL) return Z_MEM_ERROR;
    //Tracev((stderr, "inflate: allocated\n"));
    strm.state = state;
    state.strm = strm;
    state.window = null /*Z_NULL*/ ;
    state.mode = HEAD; /* to pass state test in inflateReset2() */ 
    const ret = inflateReset2(strm, windowBits);
    if (ret !== Z_OK$1) strm.state = null /*Z_NULL*/ ;
    return ret;
};
const inflateInit = (strm)=>{
    return inflateInit2(strm, DEF_WBITS);
};
/*
 Return state with length and distance decoding tables and index sizes set to
 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
 If BUILDFIXED is defined, then instead this routine builds the tables the
 first time it's called, and returns those tables the first time and
 thereafter.  This reduces the size of the code by about 2K bytes, in
 exchange for a little execution time.  However, BUILDFIXED should not be
 used for threaded applications, since the rewriting of the tables and virgin
 may not be thread-safe.
 */ let virgin = true;
let lenfix, distfix; // We have no pointers in JS, so keep tables separate
const fixedtables = (state)=>{
    /* build fixed huffman tables if first call (may not be thread safe) */ if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);
        /* literal/length table */ let sym = 0;
        while(sym < 144)state.lens[sym++] = 8;
        while(sym < 256)state.lens[sym++] = 9;
        while(sym < 280)state.lens[sym++] = 7;
        while(sym < 288)state.lens[sym++] = 8;
        inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
        });
        /* distance table */ sym = 0;
        while(sym < 32)state.lens[sym++] = 5;
        inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
        });
        /* do this just once */ virgin = false;
    }
    state.lencode = lenfix;
    state.lenbits = 9;
    state.distcode = distfix;
    state.distbits = 5;
};
/*
 Update the window with the last wsize (normally 32K) bytes written before
 returning.  If window does not exist yet, create it.  This is only called
 when a window is already in use, or when output has been written during this
 inflate call, but the end of the deflate stream has not been reached yet.
 It is also called to create a window for dictionary data when a dictionary
 is loaded.

 Providing output buffers larger than 32K to inflate() should provide a speed
 advantage, since only the last 32K of output is copied to the sliding window
 upon return from inflate(), and since all distances after the first 32K of
 output will fall in the output data, making match copies simpler and faster.
 The advantage may be dependent on the size of the processor's data caches.
 */ const updatewindow = (strm, src, end, copy)=>{
    let dist;
    const state = strm.state;
    /* if it hasn't been done already, allocate space for the window */ if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;
        state.window = new Uint8Array(state.wsize);
    }
    /* copy state->wsize or less output bytes into the circular window */ if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
    } else {
        dist = state.wsize - state.wnext;
        if (dist > copy) dist = copy;
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            state.window.set(src.subarray(end - copy, end), 0);
            state.wnext = copy;
            state.whave = state.wsize;
        } else {
            state.wnext += dist;
            if (state.wnext === state.wsize) state.wnext = 0;
            if (state.whave < state.wsize) state.whave += dist;
        }
    }
    return 0;
};
const inflate$2 = (strm, flush)=>{
    let state;
    let input, output; // input/output buffers
    let next; /* next input INDEX */ 
    let put; /* next output INDEX */ 
    let have, left; /* available input and output */ 
    let hold; /* bit buffer */ 
    let bits; /* bits in bit buffer */ 
    let _in, _out; /* save starting available input and output */ 
    let copy; /* number of stored or match bytes to copy */ 
    let from; /* where to copy match bytes from */ 
    let from_source;
    let here = 0; /* current decoding table entry */ 
    let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
    //let last;                   /* parent table entry */
    let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
    let len; /* length to copy for repeats, bits to drop */ 
    let ret; /* return code */ 
    const hbuf = new Uint8Array(4); /* buffer for gzip header crc calculation */ 
    let opts;
    let n; // temporary variable for NEED_BITS
    const order = /* permutation of code lengths */ new Uint8Array([
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
    ]);
    if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) return Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.mode === TYPE) state.mode = TYPEDO;
     /* skip check */ 
    //--- LOAD() ---
    put = strm.next_out;
    output = strm.output;
    left = strm.avail_out;
    next = strm.next_in;
    input = strm.input;
    have = strm.avail_in;
    hold = state.hold;
    bits = state.bits;
    //---
    _in = have;
    _out = left;
    ret = Z_OK$1;
    inf_leave: for(;;)switch(state.mode){
        case HEAD:
            if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
            }
            //=== NEEDBITS(16);
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.wrap & 2 && hold === 0x8b1f) {
                if (state.wbits === 0) state.wbits = 15;
                state.check = 0 /*crc32(0L, Z_NULL, 0)*/ ;
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
                //===//
                //=== INITBITS();
                hold = 0;
                bits = 0;
                //===//
                state.mode = FLAGS;
                break;
            }
            if (state.head) state.head.done = false;
            if (!(state.wrap & 1) || /* check if zlib header allowed */ (((hold & 0xff) << 8) + (hold >> 8)) % 31) {
                strm.msg = 'incorrect header check';
                state.mode = BAD;
                break;
            }
            if ((hold & 0x0f) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f) + 8;
            if (state.wbits === 0) state.wbits = len;
            if (len > 15 || len > state.wbits) {
                strm.msg = 'invalid window size';
                state.mode = BAD;
                break;
            }
            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;
            state.flags = 0; /* indicate zlib header */ 
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            break;
        case FLAGS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
            }
            if (state.flags & 0xe000) {
                strm.msg = 'unknown header flags set';
                state.mode = BAD;
                break;
            }
            if (state.head) state.head.text = hold >> 8 & 1;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
        /* falls through */ case TIME:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) state.head.time = hold;
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = crc32_1(state.check, hbuf, 4, 0);
            //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
        /* falls through */ case OS:
            //=== NEEDBITS(16); */
            while(bits < 16){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
            }
            if (state.flags & 0x0200 && state.wrap & 4) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
            //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
        /* falls through */ case EXLEN:
            if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length = hold;
                if (state.head) state.head.extra_len = hold;
                if (state.flags & 0x0200 && state.wrap & 4) {
                    //=== CRC2(state.check, hold);
                    hbuf[0] = hold & 0xff;
                    hbuf[1] = hold >>> 8 & 0xff;
                    state.check = crc32_1(state.check, hbuf, 2, 0);
                //===//
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            } else if (state.head) state.head.extra = null /*Z_NULL*/ ;
            state.mode = EXTRA;
        /* falls through */ case EXTRA:
            if (state.flags & 0x0400) {
                copy = state.length;
                if (copy > have) copy = have;
                if (copy) {
                    if (state.head) {
                        len = state.head.extra_len - state.length;
                        if (!state.head.extra) // Use untyped array for more convenient processing later
                        state.head.extra = new Uint8Array(state.head.extra_len);
                        state.head.extra.set(input.subarray(next, // extra field is limited to 65536 bytes
                        // - no need for additional size check
                        next + copy), /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/ len);
                    //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                    }
                    if (state.flags & 0x0200 && state.wrap & 4) state.check = crc32_1(state.check, input, copy, next);
                    have -= copy;
                    next += copy;
                    state.length -= copy;
                }
                if (state.length) break inf_leave;
            }
            state.length = 0;
            state.mode = NAME;
        /* falls through */ case NAME:
            if (state.flags & 0x0800) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    // TODO: 2 or 1 bytes?
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.name_max*/ ) state.head.name += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.name = null;
            state.length = 0;
            state.mode = COMMENT;
        /* falls through */ case COMMENT:
            if (state.flags & 0x1000) {
                if (have === 0) break inf_leave;
                copy = 0;
                do {
                    len = input[next + copy++];
                    /* use constant limit because in js we should not preallocate memory */ if (state.head && len && state.length < 65536 /*state.head.comm_max*/ ) state.head.comment += String.fromCharCode(len);
                }while (len && copy < have);
                if (state.flags & 0x0200 && state.wrap & 4) state.check = crc32_1(state.check, input, copy, next);
                have -= copy;
                next += copy;
                if (len) break inf_leave;
            } else if (state.head) state.head.comment = null;
            state.mode = HCRC;
        /* falls through */ case HCRC:
            if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while(bits < 16){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.check & 0xffff)) {
                    strm.msg = 'header crc mismatch';
                    state.mode = BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            }
            if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
        case DICTID:
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
        /* falls through */ case DICT:
            if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                return Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/ ;
            state.mode = TYPE;
        /* falls through */ case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) break inf_leave;
        /* falls through */ case TYPEDO:
            if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7;
                //---//
                state.mode = CHECK;
                break;
            }
            //=== NEEDBITS(3); */
            while(bits < 3){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.last = hold & 0x01 /*BITS(1)*/ ;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//
            switch(hold & 0x03){
                case 0:
                    /* stored block */ //Tracev((stderr, "inflate:     stored block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = STORED;
                    break;
                case 1:
                    /* fixed block */ fixedtables(state);
                    //Tracev((stderr, "inflate:     fixed codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = LEN_; /* decode codes */ 
                    if (flush === Z_TREES) {
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                        break inf_leave;
                    }
                    break;
                case 2:
                    /* dynamic block */ //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                    //        state.last ? " (last)" : ""));
                    state.mode = TABLE;
                    break;
                case 3:
                    strm.msg = 'invalid block type';
                    state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            break;
        case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while(bits < 32){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = 'invalid stored block lengths';
                state.mode = BAD;
                break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES) break inf_leave;
        /* falls through */ case COPY_:
            state.mode = COPY;
        /* falls through */ case COPY:
            copy = state.length;
            if (copy) {
                if (copy > have) copy = have;
                if (copy > left) copy = left;
                if (copy === 0) break inf_leave;
                //--- zmemcpy(put, next, copy); ---
                output.set(input.subarray(next, next + copy), put);
                //---//
                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
        case TABLE:
            //=== NEEDBITS(14); */
            while(bits < 14){
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f) + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f) + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f) + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = 'too many length or distance symbols';
                state.mode = BAD;
                break;
            }
            //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
        /* falls through */ case LENLENS:
            while(state.have < state.ncode){
                //=== NEEDBITS(3);
                while(bits < 3){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//
                hold >>>= 3;
                bits -= 3;
            //---//
            }
            while(state.have < 19)state.lens[order[state.have++]] = 0;
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;
            opts = {
                bits: state.lenbits
            };
            ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;
            if (ret) {
                strm.msg = 'invalid code lengths set';
                state.mode = BAD;
                break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
        /* falls through */ case CODELENS:
            while(state.have < state.nlen + state.ndist){
                for(;;){
                    here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                if (here_val < 16) {
                    //--- DROPBITS(here.bits) ---//
                    hold >>>= here_bits;
                    bits -= here_bits;
                    //---//
                    state.lens[state.have++] = here_val;
                } else {
                    if (here_val === 16) {
                        //=== NEEDBITS(here.bits + 2);
                        n = here_bits + 2;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        if (state.have === 0) {
                            strm.msg = 'invalid bit length repeat';
                            state.mode = BAD;
                            break;
                        }
                        len = state.lens[state.have - 1];
                        copy = 3 + (hold & 0x03); //BITS(2);
                        //--- DROPBITS(2) ---//
                        hold >>>= 2;
                        bits -= 2;
                    //---//
                    } else if (here_val === 17) {
                        //=== NEEDBITS(here.bits + 3);
                        n = here_bits + 3;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 3 + (hold & 0x07); //BITS(3);
                        //--- DROPBITS(3) ---//
                        hold >>>= 3;
                        bits -= 3;
                    //---//
                    } else {
                        //=== NEEDBITS(here.bits + 7);
                        n = here_bits + 7;
                        while(bits < n){
                            if (have === 0) break inf_leave;
                            have--;
                            hold += input[next++] << bits;
                            bits += 8;
                        }
                        //===//
                        //--- DROPBITS(here.bits) ---//
                        hold >>>= here_bits;
                        bits -= here_bits;
                        //---//
                        len = 0;
                        copy = 11 + (hold & 0x7f); //BITS(7);
                        //--- DROPBITS(7) ---//
                        hold >>>= 7;
                        bits -= 7;
                    //---//
                    }
                    if (state.have + copy > state.nlen + state.ndist) {
                        strm.msg = 'invalid bit length repeat';
                        state.mode = BAD;
                        break;
                    }
                    while(copy--)state.lens[state.have++] = len;
                }
            }
            /* handle error breaks in while */ if (state.mode === BAD) break;
            /* check for end-of-block code (better have one) */ if (state.lens[256] === 0) {
                strm.msg = 'invalid code -- missing end-of-block';
                state.mode = BAD;
                break;
            }
            /* build code tables -- note: do not change the lenbits or distbits
           values here (9 and 6) without reading the comments in inftrees.h
           concerning the ENOUGH constants, which depend on those values */ state.lenbits = 9;
            opts = {
                bits: state.lenbits
            };
            ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;
            if (ret) {
                strm.msg = 'invalid literal/lengths set';
                state.mode = BAD;
                break;
            }
            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = {
                bits: state.distbits
            };
            ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;
            if (ret) {
                strm.msg = 'invalid distances set';
                state.mode = BAD;
                break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES) break inf_leave;
        /* falls through */ case LEN_:
            state.mode = LEN;
        /* falls through */ case LEN:
            if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits;
                //---
                inffast(strm, _out);
                //--- LOAD() ---
                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits;
                //---
                if (state.mode === TYPE) state.back = -1;
                break;
            }
            state.back = 0;
            for(;;){
                here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = LIT;
                break;
            }
            if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = TYPE;
                break;
            }
            if (here_op & 64) {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD;
                break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
        /* falls through */ case LENEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
        /* falls through */ case DIST:
            for(;;){
                here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/ 
                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;
                if (here_bits <= bits) break;
                //--- PULLBYTE() ---//
                if (have === 0) break inf_leave;
                have--;
                hold += input[next++] << bits;
                bits += 8;
            //---//
            }
            if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;
                for(;;){
                    here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
                    here_bits = here >>> 24;
                    here_op = here >>> 16 & 0xff;
                    here_val = here & 0xffff;
                    if (last_bits + here_bits <= bits) break;
                    //--- PULLBYTE() ---//
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                //---//
                }
                //--- DROPBITS(last.bits) ---//
                hold >>>= last_bits;
                bits -= last_bits;
                //---//
                state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break;
            }
            state.offset = here_val;
            state.extra = here_op & 15;
            state.mode = DISTEXT;
        /* falls through */ case DISTEXT:
            if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;
                while(bits < n){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/ ;
                //--- DROPBITS(state.extra) ---//
                hold >>>= state.extra;
                bits -= state.extra;
                //---//
                state.back += state.extra;
            }
            //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
            }
            //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
        /* falls through */ case MATCH:
            if (left === 0) break inf_leave;
            copy = _out - left;
            if (state.offset > copy) {
                copy = state.offset - copy;
                if (copy > state.whave) {
                    if (state.sane) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break;
                    }
                }
                if (copy > state.wnext) {
                    copy -= state.wnext;
                    from = state.wsize - copy;
                } else from = state.wnext - copy;
                if (copy > state.length) copy = state.length;
                from_source = state.window;
            } else {
                from_source = output;
                from = put - state.offset;
                copy = state.length;
            }
            if (copy > left) copy = left;
            left -= copy;
            state.length -= copy;
            do output[put++] = from_source[from++];
            while (--copy);
            if (state.length === 0) state.mode = LEN;
            break;
        case LIT:
            if (left === 0) break inf_leave;
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
        case CHECK:
            if (state.wrap) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    // Use '|' instead of '+' to make sure that result is signed
                    hold |= input[next++] << bits;
                    bits += 8;
                }
                //===//
                _out -= left;
                strm.total_out += _out;
                state.total += _out;
                if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, put - _out, _out);*/ state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
                _out = left;
                // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
                if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
                    strm.msg = 'incorrect data check';
                    state.mode = BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
        /* falls through */ case LENGTH:
            if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while(bits < 32){
                    if (have === 0) break inf_leave;
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                }
                //===//
                if (state.wrap & 4 && hold !== (state.total & 0xffffffff)) {
                    strm.msg = 'incorrect length check';
                    state.mode = BAD;
                    break;
                }
                //=== INITBITS();
                hold = 0;
                bits = 0;
            //===//
            //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
        /* falls through */ case DONE:
            ret = Z_STREAM_END$1;
            break inf_leave;
        case BAD:
            ret = Z_DATA_ERROR$1;
            break inf_leave;
        case MEM:
            return Z_MEM_ERROR$1;
        case SYNC:
        /* falls through */ default:
            return Z_STREAM_ERROR$1;
    }
    // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
    /*
     Return from inflate(), updating the total counts and the check value.
     If there was no progress during the inflate() call, return a buffer
     error.  Call updatewindow() to create and/or update the window state.
     Note: a memory error from inflate() is non-recoverable.
   */ //--- RESTORE() ---
    strm.next_out = put;
    strm.avail_out = left;
    strm.next_in = next;
    strm.avail_in = have;
    state.hold = hold;
    state.bits = bits;
    //---
    if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$1)) updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out);
    _in -= strm.avail_in;
    _out -= strm.avail_out;
    strm.total_in += _in;
    strm.total_out += _out;
    state.total += _out;
    if (state.wrap & 4 && _out) strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/ state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
    strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
    if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) ret = Z_BUF_ERROR;
    return ret;
};
const inflateEnd = (strm)=>{
    if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    let state = strm.state;
    if (state.window) state.window = null;
    strm.state = null;
    return Z_OK$1;
};
const inflateGetHeader = (strm, head)=>{
    /* check state */ if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    const state = strm.state;
    if ((state.wrap & 2) === 0) return Z_STREAM_ERROR$1;
    /* save header structure */ state.head = head;
    head.done = false;
    return Z_OK$1;
};
const inflateSetDictionary = (strm, dictionary)=>{
    const dictLength = dictionary.length;
    let state;
    let dictid;
    let ret;
    /* check state */ if (inflateStateCheck(strm)) return Z_STREAM_ERROR$1;
    state = strm.state;
    if (state.wrap !== 0 && state.mode !== DICT) return Z_STREAM_ERROR$1;
    /* check for correct dictionary identifier */ if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/ 
        /* dictid = adler32(dictid, dictionary, dictLength); */ dictid = adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) return Z_DATA_ERROR$1;
    }
    /* copy dictionary to window using updatewindow(), which will amend the
   existing dictionary if appropriate */ ret = updatewindow(strm, dictionary, dictLength, dictLength);
    if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR$1;
    }
    state.havedict = 1;
    // Tracev((stderr, "inflate:   dictionary set\n"));
    return Z_OK$1;
};
var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = 'pako inflate (from Nodeca project)';
/* Not implemented
module.exports.inflateCodesUsed = inflateCodesUsed;
module.exports.inflateCopy = inflateCopy;
module.exports.inflateGetDictionary = inflateGetDictionary;
module.exports.inflateMark = inflateMark;
module.exports.inflatePrime = inflatePrime;
module.exports.inflateSync = inflateSync;
module.exports.inflateSyncPoint = inflateSyncPoint;
module.exports.inflateUndermine = inflateUndermine;
module.exports.inflateValidate = inflateValidate;
*/ var inflate_1$2 = {
    inflateReset: inflateReset_1,
    inflateReset2: inflateReset2_1,
    inflateResetKeep: inflateResetKeep_1,
    inflateInit: inflateInit_1,
    inflateInit2: inflateInit2_1,
    inflate: inflate_2$1,
    inflateEnd: inflateEnd_1,
    inflateGetHeader: inflateGetHeader_1,
    inflateSetDictionary: inflateSetDictionary_1,
    inflateInfo: inflateInfo
};
// (C) 1995-2013 Jean-loup Gailly and Mark Adler
// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//   claim that you wrote the original software. If you use this software
//   in a product, an acknowledgment in the product documentation would be
//   appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//   misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
function GZheader() {
    /* true if compressed data believed to be text */ this.text = 0;
    /* modification time */ this.time = 0;
    /* extra flags (not used when writing a gzip file) */ this.xflags = 0;
    /* operating system */ this.os = 0;
    /* pointer to extra field or Z_NULL if none */ this.extra = null;
    /* extra field length (valid if extra != Z_NULL) */ this.extra_len = 0; // Actually, we don't need it in JS,
    // but leave for few code modifications
    //
    // Setup limits is not necessary because in js we should not preallocate memory
    // for inflate use constant limit in 65536 bytes
    //
    /* space at extra (only when reading header) */ // this.extra_max  = 0;
    /* pointer to zero-terminated file name or Z_NULL */ this.name = '';
    /* space at name (only when reading header) */ // this.name_max   = 0;
    /* pointer to zero-terminated comment or Z_NULL */ this.comment = '';
    /* space at comment (only when reading header) */ // this.comm_max   = 0;
    /* true if there was or will be a header crc */ this.hcrc = 0;
    /* true when done reading gzip header (not used when writing a gzip file) */ this.done = false;
}
var gzheader = GZheader;
const toString = Object.prototype.toString;
/* Public constants ==========================================================*/ /* ===========================================================================*/ const { Z_NO_FLUSH, Z_FINISH, Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR } = constants$2;
/* ===========================================================================*/ /**
 * class Inflate
 *
 * Generic JS-style wrapper for zlib calls. If you don't need
 * streaming behaviour - use more simple functions: [[inflate]]
 * and [[inflateRaw]].
 **/ /* internal
 * inflate.chunks -> Array
 *
 * Chunks of output data, if [[Inflate#onData]] not overridden.
 **/ /**
 * Inflate.result -> Uint8Array|String
 *
 * Uncompressed result, generated by default [[Inflate#onData]]
 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
 * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
 **/ /**
 * Inflate.err -> Number
 *
 * Error code after inflate finished. 0 (Z_OK) on success.
 * Should be checked if broken data possible.
 **/ /**
 * Inflate.msg -> String
 *
 * Error message, if [[Inflate.err]] != 0
 **/ /**
 * new Inflate(options)
 * - options (Object): zlib inflate options.
 *
 * Creates new inflator instance with specified params. Throws exception
 * on bad params. Supported options:
 *
 * - `windowBits`
 * - `dictionary`
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information on these.
 *
 * Additional options, for internal needs:
 *
 * - `chunkSize` - size of generated data chunks (16K by default)
 * - `raw` (Boolean) - do raw inflate
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 * By default, when no options set, autodetect deflate/gzip data format via
 * wrapper header.
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako')
 * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
 * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
 *
 * const inflate = new pako.Inflate({ level: 3});
 *
 * inflate.push(chunk1, false);
 * inflate.push(chunk2, true);  // true -> last chunk
 *
 * if (inflate.err) { throw new Error(inflate.err); }
 *
 * console.log(inflate.result);
 * ```
 **/ function Inflate$1(options) {
    this.options = common.assign({
        chunkSize: 65536,
        windowBits: 15,
        to: ''
    }, options || {});
    const opt = this.options;
    // Force window size for `raw` data, if not set directly,
    // because we have no header for autodetect.
    if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) opt.windowBits = -15;
    }
    // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
    if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) opt.windowBits += 32;
    // Gzip header has no info about windows size, we can do autodetect only
    // for deflate. So, if window size not set, force it to max when gzip possible
    if (opt.windowBits > 15 && opt.windowBits < 48) // bit 3 (16) -> gzipped data
    // bit 4 (32) -> autodetect gzip/deflate
    {
        if ((opt.windowBits & 15) === 0) opt.windowBits |= 15;
    }
    this.err = 0; // error code, if happens (0 = Z_OK)
    this.msg = ''; // error message
    this.ended = false; // used to avoid multiple onEnd() calls
    this.chunks = []; // chunks of compressed data
    this.strm = new zstream();
    this.strm.avail_out = 0;
    let status = inflate_1$2.inflateInit2(this.strm, opt.windowBits);
    if (status !== Z_OK) throw new Error(messages[status]);
    this.header = new gzheader();
    inflate_1$2.inflateGetHeader(this.strm, this.header);
    // Setup dictionary
    if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === 'string') opt.dictionary = strings.string2buf(opt.dictionary);
        else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') opt.dictionary = new Uint8Array(opt.dictionary);
        if (opt.raw) {
            status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
            if (status !== Z_OK) throw new Error(messages[status]);
        }
    }
}
/**
 * Inflate#push(data[, flush_mode]) -> Boolean
 * - data (Uint8Array|ArrayBuffer): input data
 * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
 *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
 *   `true` means Z_FINISH.
 *
 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
 * new output chunks. Returns `true` on success. If end of stream detected,
 * [[Inflate#onEnd]] will be called.
 *
 * `flush_mode` is not needed for normal operation, because end of stream
 * detected automatically. You may try to use it for advanced things, but
 * this functionality was not tested.
 *
 * On fail call [[Inflate#onEnd]] with error code and return false.
 *
 * ##### Example
 *
 * ```javascript
 * push(chunk, false); // push one of data chunks
 * ...
 * push(chunk, true);  // push last chunk
 * ```
 **/ Inflate$1.prototype.push = function(data, flush_mode) {
    const strm = this.strm;
    const chunkSize = this.options.chunkSize;
    const dictionary = this.options.dictionary;
    let status, _flush_mode, last_avail_out;
    if (this.ended) return false;
    if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
    else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
    // Convert data if needed
    if (toString.call(data) === '[object ArrayBuffer]') strm.input = new Uint8Array(data);
    else strm.input = data;
    strm.next_in = 0;
    strm.avail_in = strm.input.length;
    for(;;){
        if (strm.avail_out === 0) {
            strm.output = new Uint8Array(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
        }
        status = inflate_1$2.inflate(strm, _flush_mode);
        if (status === Z_NEED_DICT && dictionary) {
            status = inflate_1$2.inflateSetDictionary(strm, dictionary);
            if (status === Z_OK) status = inflate_1$2.inflate(strm, _flush_mode);
            else if (status === Z_DATA_ERROR) // Replace code with more verbose
            status = Z_NEED_DICT;
        }
        // Skip snyc markers if more data follows and not raw mode
        while(strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data[strm.next_in] !== 0){
            inflate_1$2.inflateReset(strm);
            status = inflate_1$2.inflate(strm, _flush_mode);
        }
        switch(status){
            case Z_STREAM_ERROR:
            case Z_DATA_ERROR:
            case Z_NEED_DICT:
            case Z_MEM_ERROR:
                this.onEnd(status);
                this.ended = true;
                return false;
        }
        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;
        if (strm.next_out) {
            if (strm.avail_out === 0 || status === Z_STREAM_END) {
                if (this.options.to === 'string') {
                    let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                    let tail = strm.next_out - next_out_utf8;
                    let utf8str = strings.buf2string(strm.output, next_out_utf8);
                    // move tail & realign counters
                    strm.next_out = tail;
                    strm.avail_out = chunkSize - tail;
                    if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
                    this.onData(utf8str);
                } else this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
        }
        // Must repeat iteration if out buffer is full
        if (status === Z_OK && last_avail_out === 0) continue;
        // Finalize if end of stream reached.
        if (status === Z_STREAM_END) {
            status = inflate_1$2.inflateEnd(this.strm);
            this.onEnd(status);
            this.ended = true;
            return true;
        }
        if (strm.avail_in === 0) break;
    }
    return true;
};
/**
 * Inflate#onData(chunk) -> Void
 * - chunk (Uint8Array|String): output data. When string output requested,
 *   each chunk will be string.
 *
 * By default, stores data blocks in `chunks[]` property and glue
 * those in `onEnd`. Override this handler, if you need another behaviour.
 **/ Inflate$1.prototype.onData = function(chunk) {
    this.chunks.push(chunk);
};
/**
 * Inflate#onEnd(status) -> Void
 * - status (Number): inflate status. 0 (Z_OK) on success,
 *   other if not.
 *
 * Called either after you tell inflate that the input stream is
 * complete (Z_FINISH). By default - join collected chunks,
 * free memory and fill `results` / `err` properties.
 **/ Inflate$1.prototype.onEnd = function(status) {
    // On success - join
    if (status === Z_OK) {
        if (this.options.to === 'string') this.result = this.chunks.join('');
        else this.result = common.flattenChunks(this.chunks);
    }
    this.chunks = [];
    this.err = status;
    this.msg = this.strm.msg;
};
/**
 * inflate(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Decompress `data` with inflate/ungzip and `options`. Autodetect
 * format via wrapper header by default. That's why we don't provide
 * separate `ungzip` method.
 *
 * Supported options are:
 *
 * - windowBits
 *
 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
 * for more information.
 *
 * Sugar (options):
 *
 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
 *   negative windowBits implicitly.
 * - `to` (String) - if equal to 'string', then result will be converted
 *   from utf8 to utf16 (javascript) string. When string output requested,
 *   chunk length can differ from `chunkSize`, depending on content.
 *
 *
 * ##### Example:
 *
 * ```javascript
 * const pako = require('pako');
 * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
 * let output;
 *
 * try {
 *   output = pako.inflate(input);
 * } catch (err) {
 *   console.log(err);
 * }
 * ```
 **/ function inflate$1(input, options) {
    const inflator = new Inflate$1(options);
    inflator.push(input);
    // That will never happens, if you don't cheat with options :)
    if (inflator.err) throw inflator.msg || messages[inflator.err];
    return inflator.result;
}
/**
 * inflateRaw(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * The same as [[inflate]], but creates raw data, without wrapper
 * (header and adler32 crc).
 **/ function inflateRaw$1(input, options) {
    options = options || {};
    options.raw = true;
    return inflate$1(input, options);
}
/**
 * ungzip(data[, options]) -> Uint8Array|String
 * - data (Uint8Array|ArrayBuffer): input data to decompress.
 * - options (Object): zlib inflate options.
 *
 * Just shortcut to [[inflate]], because it autodetects format
 * by header.content. Done for convenience.
 **/ var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var constants = constants$2;
var inflate_1$1 = {
    Inflate: Inflate_1$1,
    inflate: inflate_2,
    inflateRaw: inflateRaw_1$1,
    ungzip: ungzip$1,
    constants: constants
};
const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;
const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
var Deflate_1 = Deflate;
var deflate_1 = deflate;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var Inflate_1 = Inflate;
var inflate_1 = inflate;
var inflateRaw_1 = inflateRaw;
var ungzip_1 = ungzip;
var constants_1 = constants$2;
var pako = {
    Deflate: Deflate_1,
    deflate: deflate_1,
    deflateRaw: deflateRaw_1,
    gzip: gzip_1,
    Inflate: Inflate_1,
    inflate: inflate_1,
    inflateRaw: inflateRaw_1,
    ungzip: ungzip_1,
    constants: constants_1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnCL0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chromaJs = require("./src/chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
// feel free to comment out anything to rollup
// a smaller chroma.js built
// io --> convert colors
var _indexJs = require("./src/io/cmyk/index.js");
var _indexJs1 = require("./src/io/css/index.js");
var _indexJs2 = require("./src/io/gl/index.js");
var _indexJs3 = require("./src/io/hcg/index.js");
var _indexJs4 = require("./src/io/hex/index.js");
var _indexJs5 = require("./src/io/hsi/index.js");
var _indexJs6 = require("./src/io/hsl/index.js");
var _indexJs7 = require("./src/io/hsv/index.js");
var _indexJs8 = require("./src/io/lab/index.js");
var _indexJs9 = require("./src/io/lch/index.js");
var _indexJs10 = require("./src/io/named/index.js");
var _indexJs11 = require("./src/io/num/index.js");
var _indexJs12 = require("./src/io/rgb/index.js");
var _indexJs13 = require("./src/io/temp/index.js");
var _indexJs14 = require("./src/io/oklab/index.js");
var _indexJs15 = require("./src/io/oklch/index.js");
// operators --> modify existing Colors
var _alphaJs = require("./src/ops/alpha.js");
var _clippedJs = require("./src/ops/clipped.js");
var _darkenJs = require("./src/ops/darken.js");
var _getJs = require("./src/ops/get.js");
var _luminanceJs = require("./src/ops/luminance.js");
var _mixJs = require("./src/ops/mix.js");
var _premultiplyJs = require("./src/ops/premultiply.js");
var _saturateJs = require("./src/ops/saturate.js");
var _setJs = require("./src/ops/set.js");
var _shadeJs = require("./src/ops/shade.js");
// interpolators
var _rgbJs = require("./src/interpolator/rgb.js");
var _lrgbJs = require("./src/interpolator/lrgb.js");
var _labJs = require("./src/interpolator/lab.js");
var _lchJs = require("./src/interpolator/lch.js");
var _numJs = require("./src/interpolator/num.js");
var _hcgJs = require("./src/interpolator/hcg.js");
var _hsiJs = require("./src/interpolator/hsi.js");
var _hslJs = require("./src/interpolator/hsl.js");
var _hsvJs = require("./src/interpolator/hsv.js");
var _oklabJs = require("./src/interpolator/oklab.js");
var _oklchJs = require("./src/interpolator/oklch.js");
// generators -- > create new colors
var _averageJs = require("./src/generator/average.js");
var _averageJsDefault = parcelHelpers.interopDefault(_averageJs);
var _bezierJs = require("./src/generator/bezier.js");
var _bezierJsDefault = parcelHelpers.interopDefault(_bezierJs);
var _blendJs = require("./src/generator/blend.js");
var _blendJsDefault = parcelHelpers.interopDefault(_blendJs);
var _cubehelixJs = require("./src/generator/cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _mixJs1 = require("./src/generator/mix.js");
var _mixJsDefault = parcelHelpers.interopDefault(_mixJs1);
var _randomJs = require("./src/generator/random.js");
var _randomJsDefault = parcelHelpers.interopDefault(_randomJs);
var _scaleJs = require("./src/generator/scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
// other utility methods
var _analyzeJs = require("./src/utils/analyze.js");
var _contrastJs = require("./src/utils/contrast.js");
var _contrastJsDefault = parcelHelpers.interopDefault(_contrastJs);
var _deltaEJs = require("./src/utils/delta-e.js");
var _deltaEJsDefault = parcelHelpers.interopDefault(_deltaEJs);
var _distanceJs = require("./src/utils/distance.js");
var _distanceJsDefault = parcelHelpers.interopDefault(_distanceJs);
var _validJs = require("./src/utils/valid.js");
var _validJsDefault = parcelHelpers.interopDefault(_validJs);
var _inputJs = require("./src/io/input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
// scale
var _scalesJs = require("./src/utils/scales.js");
var _scalesJsDefault = parcelHelpers.interopDefault(_scalesJs);
// colors
var _w3Cx11Js = require("./src/colors/w3cx11.js");
var _w3Cx11JsDefault = parcelHelpers.interopDefault(_w3Cx11Js);
var _colorbrewerJs = require("./src/colors/colorbrewer.js");
var _colorbrewerJsDefault = parcelHelpers.interopDefault(_colorbrewerJs);
Object.assign((0, _chromaJsDefault.default), {
    average: (0, _averageJsDefault.default),
    bezier: (0, _bezierJsDefault.default),
    blend: (0, _blendJsDefault.default),
    cubehelix: (0, _cubehelixJsDefault.default),
    mix: (0, _mixJsDefault.default),
    interpolate: (0, _mixJsDefault.default),
    random: (0, _randomJsDefault.default),
    scale: (0, _scaleJsDefault.default),
    analyze: (0, _analyzeJs.analyze),
    contrast: (0, _contrastJsDefault.default),
    deltaE: (0, _deltaEJsDefault.default),
    distance: (0, _distanceJsDefault.default),
    limits: (0, _analyzeJs.limits),
    valid: (0, _validJsDefault.default),
    scales: (0, _scalesJsDefault.default),
    input: (0, _inputJsDefault.default),
    colors: (0, _w3Cx11JsDefault.default),
    brewer: (0, _colorbrewerJsDefault.default)
});
exports.default = (0, _chromaJsDefault.default);

},{"./src/chroma.js":"jNNC2","./src/io/cmyk/index.js":"bsZcA","./src/io/css/index.js":"jXc7O","./src/io/gl/index.js":"aAjbI","./src/io/hcg/index.js":"tBkG3","./src/io/hex/index.js":"dNTHS","./src/io/hsi/index.js":"kYSQw","./src/io/hsl/index.js":"jIO0h","./src/io/hsv/index.js":"4uLhg","./src/io/lab/index.js":"gMW4F","./src/io/lch/index.js":"eOUqb","./src/io/named/index.js":"9P6ya","./src/io/num/index.js":"kAJcC","./src/io/rgb/index.js":"2XQ0e","./src/io/temp/index.js":"3benl","./src/io/oklab/index.js":"beksD","./src/io/oklch/index.js":"cH6m3","./src/ops/alpha.js":"9kEpd","./src/ops/clipped.js":"55Kk5","./src/ops/darken.js":"g8H5C","./src/ops/get.js":"dVaYT","./src/ops/luminance.js":"9NQik","./src/ops/mix.js":"5KlJS","./src/ops/premultiply.js":"mcoWa","./src/ops/saturate.js":"dwlfr","./src/ops/set.js":"bLPTP","./src/ops/shade.js":"eBxqt","./src/interpolator/rgb.js":"3Mpwf","./src/interpolator/lrgb.js":"jVlXN","./src/interpolator/lab.js":"5Usm2","./src/interpolator/lch.js":"1wkzn","./src/interpolator/num.js":"63PvC","./src/interpolator/hcg.js":"4510n","./src/interpolator/hsi.js":"kJ0St","./src/interpolator/hsl.js":"4r9Np","./src/interpolator/hsv.js":"lNNWW","./src/interpolator/oklab.js":"h4nc8","./src/interpolator/oklch.js":"1CTmB","./src/generator/average.js":"27RYU","./src/generator/bezier.js":"boRft","./src/generator/blend.js":"1MBHJ","./src/generator/cubehelix.js":"247pR","./src/generator/mix.js":"hPOrz","./src/generator/random.js":"cS4dQ","./src/generator/scale.js":"gBPPh","./src/utils/analyze.js":"hJPw4","./src/utils/contrast.js":"103co","./src/utils/delta-e.js":"hKJFm","./src/utils/distance.js":"3CIrA","./src/utils/valid.js":"i7AZI","./src/io/input.js":"2ncJk","./src/utils/scales.js":"fP9EO","./src/colors/w3cx11.js":"ks5NN","./src/colors/colorbrewer.js":"9uaXl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jNNC2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("./Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _versionJs = require("./version.js");
const chroma = (...args)=>{
    return new chroma.Color(...args);
};
chroma.Color = (0, _colorJsDefault.default);
chroma.version = (0, _versionJs.version);
exports.default = chroma;

},{"./Color.js":"86WNB","./version.js":"jvI9M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"86WNB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./utils/index.js");
var _inputJs = require("./io/input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
class Color {
    constructor(...args){
        const me = this;
        if ((0, _indexJs.type)(args[0]) === 'object' && args[0].constructor && args[0].constructor === this.constructor) // the argument is already a Color instance
        return args[0];
        // last argument could be the mode
        let mode = (0, _indexJs.last)(args);
        let autodetect = false;
        if (!mode) {
            autodetect = true;
            if (!(0, _inputJsDefault.default).sorted) {
                (0, _inputJsDefault.default).autodetect = (0, _inputJsDefault.default).autodetect.sort((a, b)=>b.p - a.p);
                (0, _inputJsDefault.default).sorted = true;
            }
            // auto-detect format
            for (let chk of (0, _inputJsDefault.default).autodetect){
                mode = chk.test(...args);
                if (mode) break;
            }
        }
        if ((0, _inputJsDefault.default).format[mode]) {
            const rgb = (0, _inputJsDefault.default).format[mode].apply(null, autodetect ? args : args.slice(0, -1));
            me._rgb = (0, _indexJs.clip_rgb)(rgb);
        } else throw new Error('unknown format: ' + args);
        // add alpha channel
        if (me._rgb.length === 3) me._rgb.push(1);
    }
    toString() {
        if ((0, _indexJs.type)(this.hex) == 'function') return this.hex();
        return `[${this._rgb.join(',')}]`;
    }
}
exports.default = Color;

},{"./utils/index.js":"FsUmr","./io/input.js":"2ncJk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"FsUmr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "clip_rgb", ()=>(0, _clipRgbJsDefault.default));
parcelHelpers.export(exports, "limit", ()=>(0, _limitJsDefault.default));
parcelHelpers.export(exports, "type", ()=>(0, _typeJsDefault.default));
parcelHelpers.export(exports, "unpack", ()=>(0, _unpackJsDefault.default));
parcelHelpers.export(exports, "last", ()=>(0, _lastJsDefault.default));
parcelHelpers.export(exports, "PI", ()=>PI);
parcelHelpers.export(exports, "TWOPI", ()=>TWOPI);
parcelHelpers.export(exports, "PITHIRD", ()=>PITHIRD);
parcelHelpers.export(exports, "DEG2RAD", ()=>DEG2RAD);
parcelHelpers.export(exports, "RAD2DEG", ()=>RAD2DEG);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "max", ()=>max);
var _clipRgbJs = require("./clip_rgb.js");
var _clipRgbJsDefault = parcelHelpers.interopDefault(_clipRgbJs);
var _limitJs = require("./limit.js");
var _limitJsDefault = parcelHelpers.interopDefault(_limitJs);
var _typeJs = require("./type.js");
var _typeJsDefault = parcelHelpers.interopDefault(_typeJs);
var _unpackJs = require("./unpack.js");
var _unpackJsDefault = parcelHelpers.interopDefault(_unpackJs);
var _lastJs = require("./last.js");
var _lastJsDefault = parcelHelpers.interopDefault(_lastJs);
const { PI, min, max } = Math;
const TWOPI = PI * 2;
const PITHIRD = PI / 3;
const DEG2RAD = PI / 180;
const RAD2DEG = 180 / PI;

},{"./clip_rgb.js":"kUWBW","./limit.js":"2kV17","./type.js":"dsbh4","./unpack.js":"lNpBW","./last.js":"5nHuQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUWBW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _limitJs = require("./limit.js");
var _limitJsDefault = parcelHelpers.interopDefault(_limitJs);
exports.default = (rgb)=>{
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for(let i = 0; i <= 3; i++){
        if (i < 3) {
            if (rgb[i] < 0 || rgb[i] > 255) rgb._clipped = true;
            rgb[i] = (0, _limitJsDefault.default)(rgb[i], 0, 255);
        } else if (i === 3) rgb[i] = (0, _limitJsDefault.default)(rgb[i], 0, 1);
    }
    return rgb;
};

},{"./limit.js":"2kV17","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2kV17":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
exports.default = (x, low = 0, high = 1)=>{
    return (0, _indexJs.min)((0, _indexJs.max)(low, x), high);
};

},{"./index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsbh4":[function(require,module,exports,__globalThis) {
// ported from jQuery's $.type
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || 'object';
    });
const classToType = {};
for (let name of [
    'Boolean',
    'Number',
    'String',
    'Function',
    'Array',
    'Date',
    'RegExp',
    'Undefined',
    'Null'
])classToType[`[object ${name}]`] = name.toLowerCase();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNpBW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeJs = require("./type.js");
var _typeJsDefault = parcelHelpers.interopDefault(_typeJs);
exports.default = (args, keyOrder = null)=>{
    // if called with more than 3 arguments, we return the arguments
    if (args.length >= 3) return Array.prototype.slice.call(args);
    // with less than 3 args we check if first arg is object
    // and use the keyOrder string to extract and sort properties
    if ((0, _typeJsDefault.default)(args[0]) == 'object' && keyOrder) return keyOrder.split('').filter((k)=>args[0][k] !== undefined).map((k)=>args[0][k]);
    // otherwise we just return the first argument
    // (which we suppose is an array of args)
    return args[0];
};

},{"./type.js":"dsbh4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5nHuQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _typeJs = require("./type.js");
var _typeJsDefault = parcelHelpers.interopDefault(_typeJs);
exports.default = (args)=>{
    if (args.length < 2) return null;
    const l = args.length - 1;
    if ((0, _typeJsDefault.default)(args[l]) == 'string') return args[l].toLowerCase();
    return null;
};

},{"./type.js":"dsbh4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ncJk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    format: {},
    autodetect: []
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvI9M":[function(require,module,exports,__globalThis) {
// this gets updated automatically
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
const version = '2.6.0';

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsZcA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
var _cmyk2RgbJs = require("./cmyk2rgb.js");
var _cmyk2RgbJsDefault = parcelHelpers.interopDefault(_cmyk2RgbJs);
var _rgb2CmykJs = require("./rgb2cmyk.js");
var _rgb2CmykJsDefault = parcelHelpers.interopDefault(_rgb2CmykJs);
(0, _colorJsDefault.default).prototype.cmyk = function() {
    return (0, _rgb2CmykJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).cmyk = (...args)=>new (0, _colorJsDefault.default)(...args, 'cmyk');
(0, _inputJsDefault.default).format.cmyk = (0, _cmyk2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 2,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'cmyk');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 4) return 'cmyk';
    }
});

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","../../utils/index.js":"FsUmr","./cmyk2rgb.js":"af4Ez","./rgb2cmyk.js":"3TQAo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"af4Ez":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const cmyk2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'cmyk');
    const [c, m, y, k] = args;
    const alpha = args.length > 4 ? args[4] : 1;
    if (k === 1) return [
        0,
        0,
        0,
        alpha
    ];
    return [
        c >= 1 ? 0 : 255 * (1 - c) * (1 - k),
        m >= 1 ? 0 : 255 * (1 - m) * (1 - k),
        y >= 1 ? 0 : 255 * (1 - y) * (1 - k),
        alpha
    ];
};
exports.default = cmyk2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3TQAo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { max } = Math;
const rgb2cmyk = (...args)=>{
    let [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    r = r / 255;
    g = g / 255;
    b = b / 255;
    const k = 1 - max(r, max(g, b));
    const f = k < 1 ? 1 / (1 - k) : 0;
    const c = (1 - r - k) * f;
    const m = (1 - g - k) * f;
    const y = (1 - b - k) * f;
    return [
        c,
        m,
        y,
        k
    ];
};
exports.default = rgb2cmyk;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jXc7O":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
var _rgb2CssJs = require("./rgb2css.js");
var _rgb2CssJsDefault = parcelHelpers.interopDefault(_rgb2CssJs);
var _css2RgbJs = require("./css2rgb.js");
var _css2RgbJsDefault = parcelHelpers.interopDefault(_css2RgbJs);
(0, _colorJsDefault.default).prototype.css = function(mode) {
    return (0, _rgb2CssJsDefault.default)(this._rgb, mode);
};
(0, _chromaJsDefault.default).css = (...args)=>new (0, _colorJsDefault.default)(...args, 'css');
(0, _inputJsDefault.default).format.css = (0, _css2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 5,
    test: (h, ...rest)=>{
        if (!rest.length && (0, _indexJs.type)(h) === 'string' && (0, _css2RgbJsDefault.default).test(h)) return 'css';
    }
});

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","../../utils/index.js":"FsUmr","./rgb2css.js":"eOa9j","./css2rgb.js":"akXOj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOa9j":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _hsl2CssJs = require("./hsl2css.js");
var _hsl2CssJsDefault = parcelHelpers.interopDefault(_hsl2CssJs);
var _rgb2HslJs = require("../hsl/rgb2hsl.js");
var _rgb2HslJsDefault = parcelHelpers.interopDefault(_rgb2HslJs);
const { round } = Math;
/*
 * supported arguments:
 * - rgb2css(r,g,b)
 * - rgb2css(r,g,b,a)
 * - rgb2css([r,g,b], mode)
 * - rgb2css([r,g,b,a], mode)
 * - rgb2css({r,g,b,a}, mode)
 */ const rgb2css = (...args)=>{
    const rgba = (0, _indexJs.unpack)(args, 'rgba');
    let mode = (0, _indexJs.last)(args) || 'rgb';
    if (mode.substr(0, 3) == 'hsl') return (0, _hsl2CssJsDefault.default)((0, _rgb2HslJsDefault.default)(rgba), mode);
    rgba[0] = round(rgba[0]);
    rgba[1] = round(rgba[1]);
    rgba[2] = round(rgba[2]);
    if (mode === 'rgba' || rgba.length > 3 && rgba[3] < 1) {
        rgba[3] = rgba.length > 3 ? rgba[3] : 1;
        mode = 'rgba';
    }
    return `${mode}(${rgba.slice(0, mode === 'rgb' ? 3 : 4).join(',')})`;
};
exports.default = rgb2css;

},{"../../utils/index.js":"FsUmr","./hsl2css.js":"9ztCv","../hsl/rgb2hsl.js":"htYyX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9ztCv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const rnd = (a)=>Math.round(a * 100) / 100;
/*
 * supported arguments:
 * - hsl2css(h,s,l)
 * - hsl2css(h,s,l,a)
 * - hsl2css([h,s,l], mode)
 * - hsl2css([h,s,l,a], mode)
 * - hsl2css({h,s,l,a}, mode)
 */ const hsl2css = (...args)=>{
    const hsla = (0, _indexJs.unpack)(args, 'hsla');
    let mode = (0, _indexJs.last)(args) || 'lsa';
    hsla[0] = rnd(hsla[0] || 0);
    hsla[1] = rnd(hsla[1] * 100) + '%';
    hsla[2] = rnd(hsla[2] * 100) + '%';
    if (mode === 'hsla' || hsla.length > 3 && hsla[3] < 1) {
        hsla[3] = hsla.length > 3 ? hsla[3] : 1;
        mode = 'hsla';
    } else hsla.length = 3;
    return `${mode}(${hsla.join(',')})`;
};
exports.default = hsl2css;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htYyX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
/*
 * supported arguments:
 * - rgb2hsl(r,g,b)
 * - rgb2hsl(r,g,b,a)
 * - rgb2hsl([r,g,b])
 * - rgb2hsl([r,g,b,a])
 * - rgb2hsl({r,g,b,a})
 */ const rgb2hsl = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'rgba');
    let [r, g, b] = args;
    r /= 255;
    g /= 255;
    b /= 255;
    const minRgb = (0, _indexJs.min)(r, g, b);
    const maxRgb = (0, _indexJs.max)(r, g, b);
    const l = (maxRgb + minRgb) / 2;
    let s, h;
    if (maxRgb === minRgb) {
        s = 0;
        h = Number.NaN;
    } else s = l < 0.5 ? (maxRgb - minRgb) / (maxRgb + minRgb) : (maxRgb - minRgb) / (2 - maxRgb - minRgb);
    if (r == maxRgb) h = (g - b) / (maxRgb - minRgb);
    else if (g == maxRgb) h = 2 + (b - r) / (maxRgb - minRgb);
    else if (b == maxRgb) h = 4 + (r - g) / (maxRgb - minRgb);
    h *= 60;
    if (h < 0) h += 360;
    if (args.length > 3 && args[3] !== undefined) return [
        h,
        s,
        l,
        args[3]
    ];
    return [
        h,
        s,
        l
    ];
};
exports.default = rgb2hsl;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akXOj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hsl2RgbJs = require("../hsl/hsl2rgb.js");
var _hsl2RgbJsDefault = parcelHelpers.interopDefault(_hsl2RgbJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
const RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
const RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
const RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
const RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
const RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
const RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
const { round } = Math;
const css2rgb = (css)=>{
    css = css.toLowerCase().trim();
    let m;
    if ((0, _inputJsDefault.default).format.named) try {
        return (0, _inputJsDefault.default).format.named(css);
    // eslint-disable-next-line
    } catch (e) {}
    // rgb(250,20,0)
    if (m = css.match(RE_RGB)) {
        const rgb = m.slice(1, 4);
        for(let i = 0; i < 3; i++)rgb[i] = +rgb[i];
        rgb[3] = 1; // default alpha
        return rgb;
    }
    // rgba(250,20,0,0.4)
    if (m = css.match(RE_RGBA)) {
        const rgb = m.slice(1, 5);
        for(let i = 0; i < 4; i++)rgb[i] = +rgb[i];
        return rgb;
    }
    // rgb(100%,0%,0%)
    if (m = css.match(RE_RGB_PCT)) {
        const rgb = m.slice(1, 4);
        for(let i = 0; i < 3; i++)rgb[i] = round(rgb[i] * 2.55);
        rgb[3] = 1; // default alpha
        return rgb;
    }
    // rgba(100%,0%,0%,0.4)
    if (m = css.match(RE_RGBA_PCT)) {
        const rgb = m.slice(1, 5);
        for(let i = 0; i < 3; i++)rgb[i] = round(rgb[i] * 2.55);
        rgb[3] = +rgb[3];
        return rgb;
    }
    // hsl(0,100%,50%)
    if (m = css.match(RE_HSL)) {
        const hsl = m.slice(1, 4);
        hsl[1] *= 0.01;
        hsl[2] *= 0.01;
        const rgb = (0, _hsl2RgbJsDefault.default)(hsl);
        rgb[3] = 1;
        return rgb;
    }
    // hsla(0,100%,50%,0.5)
    if (m = css.match(RE_HSLA)) {
        const hsl = m.slice(1, 4);
        hsl[1] *= 0.01;
        hsl[2] *= 0.01;
        const rgb = (0, _hsl2RgbJsDefault.default)(hsl);
        rgb[3] = +m[4]; // default alpha = 1
        return rgb;
    }
};
css2rgb.test = (s)=>{
    return RE_RGB.test(s) || RE_RGBA.test(s) || RE_RGB_PCT.test(s) || RE_RGBA_PCT.test(s) || RE_HSL.test(s) || RE_HSLA.test(s);
};
exports.default = css2rgb;

},{"../hsl/hsl2rgb.js":"dv6uz","../input.js":"2ncJk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dv6uz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { round } = Math;
const hsl2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'hsl');
    const [h, s, l] = args;
    let r, g, b;
    if (s === 0) r = g = b = l * 255;
    else {
        const t3 = [
            0,
            0,
            0
        ];
        const c = [
            0,
            0,
            0
        ];
        const t2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const t1 = 2 * l - t2;
        const h_ = h / 360;
        t3[0] = h_ + 1 / 3;
        t3[1] = h_;
        t3[2] = h_ - 1 / 3;
        for(let i = 0; i < 3; i++){
            if (t3[i] < 0) t3[i] += 1;
            if (t3[i] > 1) t3[i] -= 1;
            if (6 * t3[i] < 1) c[i] = t1 + (t2 - t1) * 6 * t3[i];
            else if (2 * t3[i] < 1) c[i] = t2;
            else if (3 * t3[i] < 2) c[i] = t1 + (t2 - t1) * (2 / 3 - t3[i]) * 6;
            else c[i] = t1;
        }
        [r, g, b] = [
            round(c[0] * 255),
            round(c[1] * 255),
            round(c[2] * 255)
        ];
    }
    if (args.length > 3) // keep alpha channel
    return [
        r,
        g,
        b,
        args[3]
    ];
    return [
        r,
        g,
        b,
        1
    ];
};
exports.default = hsl2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAjbI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
(0, _inputJsDefault.default).format.gl = (...args)=>{
    const rgb = (0, _indexJs.unpack)(args, 'rgba');
    rgb[0] *= 255;
    rgb[1] *= 255;
    rgb[2] *= 255;
    return rgb;
};
(0, _chromaJsDefault.default).gl = (...args)=>new (0, _colorJsDefault.default)(...args, 'gl');
(0, _colorJsDefault.default).prototype.gl = function() {
    const rgb = this._rgb;
    return [
        rgb[0] / 255,
        rgb[1] / 255,
        rgb[2] / 255,
        rgb[3]
    ];
};

},{"../../Color.js":"86WNB","../../chroma.js":"jNNC2","../input.js":"2ncJk","../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"tBkG3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _hcg2RgbJs = require("./hcg2rgb.js");
var _hcg2RgbJsDefault = parcelHelpers.interopDefault(_hcg2RgbJs);
var _rgb2HcgJs = require("./rgb2hcg.js");
var _rgb2HcgJsDefault = parcelHelpers.interopDefault(_rgb2HcgJs);
(0, _colorJsDefault.default).prototype.hcg = function() {
    return (0, _rgb2HcgJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).hcg = (...args)=>new (0, _colorJsDefault.default)(...args, 'hcg');
(0, _inputJsDefault.default).format.hcg = (0, _hcg2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 1,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'hcg');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'hcg';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./hcg2rgb.js":"9r55O","./rgb2hcg.js":"haUz3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9r55O":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { floor } = Math;
/*
 * this is basically just HSV with some minor tweaks
 *
 * hue.. [0..360]
 * chroma .. [0..1]
 * grayness .. [0..1]
 */ const hcg2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'hcg');
    let [h, c, _g] = args;
    let r, g, b;
    _g = _g * 255;
    const _c = c * 255;
    if (c === 0) r = g = b = _g;
    else {
        if (h === 360) h = 0;
        if (h > 360) h -= 360;
        if (h < 0) h += 360;
        h /= 60;
        const i = floor(h);
        const f = h - i;
        const p = _g * (1 - c);
        const q = p + _c * (1 - f);
        const t = p + _c * f;
        const v = p + _c;
        switch(i){
            case 0:
                [r, g, b] = [
                    v,
                    t,
                    p
                ];
                break;
            case 1:
                [r, g, b] = [
                    q,
                    v,
                    p
                ];
                break;
            case 2:
                [r, g, b] = [
                    p,
                    v,
                    t
                ];
                break;
            case 3:
                [r, g, b] = [
                    p,
                    q,
                    v
                ];
                break;
            case 4:
                [r, g, b] = [
                    t,
                    p,
                    v
                ];
                break;
            case 5:
                [r, g, b] = [
                    v,
                    p,
                    q
                ];
                break;
        }
    }
    return [
        r,
        g,
        b,
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = hcg2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"haUz3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const rgb2hcg = (...args)=>{
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    const minRgb = (0, _indexJs.min)(r, g, b);
    const maxRgb = (0, _indexJs.max)(r, g, b);
    const delta = maxRgb - minRgb;
    const c = delta * 100 / 255;
    const _g = minRgb / (255 - delta) * 100;
    let h;
    if (delta === 0) h = Number.NaN;
    else {
        if (r === maxRgb) h = (g - b) / delta;
        if (g === maxRgb) h = 2 + (b - r) / delta;
        if (b === maxRgb) h = 4 + (r - g) / delta;
        h *= 60;
        if (h < 0) h += 360;
    }
    return [
        h,
        c,
        _g
    ];
};
exports.default = rgb2hcg;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNTHS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../../utils/index.js");
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _hex2RgbJs = require("./hex2rgb.js");
var _hex2RgbJsDefault = parcelHelpers.interopDefault(_hex2RgbJs);
var _rgb2HexJs = require("./rgb2hex.js");
var _rgb2HexJsDefault = parcelHelpers.interopDefault(_rgb2HexJs);
(0, _colorJsDefault.default).prototype.hex = function(mode) {
    return (0, _rgb2HexJsDefault.default)(this._rgb, mode);
};
(0, _chromaJsDefault.default).hex = (...args)=>new (0, _colorJsDefault.default)(...args, 'hex');
(0, _inputJsDefault.default).format.hex = (0, _hex2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 4,
    test: (h, ...rest)=>{
        if (!rest.length && (0, _indexJs.type)(h) === 'string' && [
            3,
            4,
            5,
            6,
            7,
            8,
            9
        ].indexOf(h.length) >= 0) return 'hex';
    }
});

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../../utils/index.js":"FsUmr","../input.js":"2ncJk","./hex2rgb.js":"a9jpQ","./rgb2hex.js":"3c37q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9jpQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
const RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;
const hex2rgb = (hex)=>{
    if (hex.match(RE_HEX)) {
        // remove optional leading #
        if (hex.length === 4 || hex.length === 7) hex = hex.substr(1);
        // expand short-notation to full six-digit
        if (hex.length === 3) {
            hex = hex.split('');
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        const u = parseInt(hex, 16);
        const r = u >> 16;
        const g = u >> 8 & 0xff;
        const b = u & 0xff;
        return [
            r,
            g,
            b,
            1
        ];
    }
    // match rgba hex format, eg #FF000077
    if (hex.match(RE_HEXA)) {
        if (hex.length === 5 || hex.length === 9) // remove optional leading #
        hex = hex.substr(1);
        // expand short-notation to full eight-digit
        if (hex.length === 4) {
            hex = hex.split('');
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
        }
        const u = parseInt(hex, 16);
        const r = u >> 24 & 0xff;
        const g = u >> 16 & 0xff;
        const b = u >> 8 & 0xff;
        const a = Math.round((u & 0xff) / 0xff * 100) / 100;
        return [
            r,
            g,
            b,
            a
        ];
    }
    // we used to check for css colors here
    // if _input.css? and rgb = _input.css hex
    //     return rgb
    throw new Error(`unknown hex color: ${hex}`);
};
exports.default = hex2rgb;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3c37q":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { round } = Math;
const rgb2hex = (...args)=>{
    let [r, g, b, a] = (0, _indexJs.unpack)(args, 'rgba');
    let mode = (0, _indexJs.last)(args) || 'auto';
    if (a === undefined) a = 1;
    if (mode === 'auto') mode = a < 1 ? 'rgba' : 'rgb';
    r = round(r);
    g = round(g);
    b = round(b);
    const u = r << 16 | g << 8 | b;
    let str = '000000' + u.toString(16); //#.toUpperCase();
    str = str.substr(str.length - 6);
    let hxa = '0' + round(a * 255).toString(16);
    hxa = hxa.substr(hxa.length - 2);
    switch(mode.toLowerCase()){
        case 'rgba':
            return `#${str}${hxa}`;
        case 'argb':
            return `#${hxa}${str}`;
        default:
            return `#${str}`;
    }
};
exports.default = rgb2hex;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kYSQw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _hsi2RgbJs = require("./hsi2rgb.js");
var _hsi2RgbJsDefault = parcelHelpers.interopDefault(_hsi2RgbJs);
var _rgb2HsiJs = require("./rgb2hsi.js");
var _rgb2HsiJsDefault = parcelHelpers.interopDefault(_rgb2HsiJs);
(0, _colorJsDefault.default).prototype.hsi = function() {
    return (0, _rgb2HsiJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).hsi = (...args)=>new (0, _colorJsDefault.default)(...args, 'hsi');
(0, _inputJsDefault.default).format.hsi = (0, _hsi2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 2,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'hsi');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'hsi';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./hsi2rgb.js":"kMU9W","./rgb2hsi.js":"g5Gcy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMU9W":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { cos } = Math;
/*
 * hue [0..360]
 * saturation [0..1]
 * intensity [0..1]
 */ const hsi2rgb = (...args)=>{
    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp
    */ args = (0, _indexJs.unpack)(args, 'hsi');
    let [h, s, i] = args;
    let r, g, b;
    if (isNaN(h)) h = 0;
    if (isNaN(s)) s = 0;
    // normalize hue
    if (h > 360) h -= 360;
    if (h < 0) h += 360;
    h /= 360;
    if (h < 1 / 3) {
        b = (1 - s) / 3;
        r = (1 + s * cos((0, _indexJs.TWOPI) * h) / cos((0, _indexJs.PITHIRD) - (0, _indexJs.TWOPI) * h)) / 3;
        g = 1 - (b + r);
    } else if (h < 2 / 3) {
        h -= 1 / 3;
        r = (1 - s) / 3;
        g = (1 + s * cos((0, _indexJs.TWOPI) * h) / cos((0, _indexJs.PITHIRD) - (0, _indexJs.TWOPI) * h)) / 3;
        b = 1 - (r + g);
    } else {
        h -= 2 / 3;
        g = (1 - s) / 3;
        b = (1 + s * cos((0, _indexJs.TWOPI) * h) / cos((0, _indexJs.PITHIRD) - (0, _indexJs.TWOPI) * h)) / 3;
        r = 1 - (g + b);
    }
    r = (0, _indexJs.limit)(i * r * 3);
    g = (0, _indexJs.limit)(i * g * 3);
    b = (0, _indexJs.limit)(i * b * 3);
    return [
        r * 255,
        g * 255,
        b * 255,
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = hsi2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g5Gcy":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { min, sqrt, acos } = Math;
const rgb2hsi = (...args)=>{
    /*
    borrowed from here:
    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/rgb2hsi.cpp
    */ let [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    r /= 255;
    g /= 255;
    b /= 255;
    let h;
    const min_ = min(r, g, b);
    const i = (r + g + b) / 3;
    const s = i > 0 ? 1 - min_ / i : 0;
    if (s === 0) h = NaN;
    else {
        h = (r - g + (r - b)) / 2;
        h /= sqrt((r - g) * (r - g) + (r - b) * (g - b));
        h = acos(h);
        if (b > g) h = (0, _indexJs.TWOPI) - h;
        h /= (0, _indexJs.TWOPI);
    }
    return [
        h * 360,
        s,
        i
    ];
};
exports.default = rgb2hsi;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIO0h":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _hsl2RgbJs = require("./hsl2rgb.js");
var _hsl2RgbJsDefault = parcelHelpers.interopDefault(_hsl2RgbJs);
var _rgb2HslJs = require("./rgb2hsl.js");
var _rgb2HslJsDefault = parcelHelpers.interopDefault(_rgb2HslJs);
(0, _colorJsDefault.default).prototype.hsl = function() {
    return (0, _rgb2HslJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).hsl = (...args)=>new (0, _colorJsDefault.default)(...args, 'hsl');
(0, _inputJsDefault.default).format.hsl = (0, _hsl2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 2,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'hsl');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'hsl';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./hsl2rgb.js":"dv6uz","./rgb2hsl.js":"htYyX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uLhg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _hsv2RgbJs = require("./hsv2rgb.js");
var _hsv2RgbJsDefault = parcelHelpers.interopDefault(_hsv2RgbJs);
var _rgb2HsvJs = require("./rgb2hsv.js");
var _rgb2HsvJsDefault = parcelHelpers.interopDefault(_rgb2HsvJs);
(0, _colorJsDefault.default).prototype.hsv = function() {
    return (0, _rgb2HsvJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).hsv = (...args)=>new (0, _colorJsDefault.default)(...args, 'hsv');
(0, _inputJsDefault.default).format.hsv = (0, _hsv2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 2,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'hsv');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'hsv';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./hsv2rgb.js":"8eknv","./rgb2hsv.js":"lPOIi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8eknv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { floor } = Math;
const hsv2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'hsv');
    let [h, s, v] = args;
    let r, g, b;
    v *= 255;
    if (s === 0) r = g = b = v;
    else {
        if (h === 360) h = 0;
        if (h > 360) h -= 360;
        if (h < 0) h += 360;
        h /= 60;
        const i = floor(h);
        const f = h - i;
        const p = v * (1 - s);
        const q = v * (1 - s * f);
        const t = v * (1 - s * (1 - f));
        switch(i){
            case 0:
                [r, g, b] = [
                    v,
                    t,
                    p
                ];
                break;
            case 1:
                [r, g, b] = [
                    q,
                    v,
                    p
                ];
                break;
            case 2:
                [r, g, b] = [
                    p,
                    v,
                    t
                ];
                break;
            case 3:
                [r, g, b] = [
                    p,
                    q,
                    v
                ];
                break;
            case 4:
                [r, g, b] = [
                    t,
                    p,
                    v
                ];
                break;
            case 5:
                [r, g, b] = [
                    v,
                    p,
                    q
                ];
                break;
        }
    }
    return [
        r,
        g,
        b,
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = hsv2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lPOIi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { min, max } = Math;
/*
 * supported arguments:
 * - rgb2hsv(r,g,b)
 * - rgb2hsv([r,g,b])
 * - rgb2hsv({r,g,b})
 */ const rgb2hsl = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'rgb');
    let [r, g, b] = args;
    const min_ = min(r, g, b);
    const max_ = max(r, g, b);
    const delta = max_ - min_;
    let h, s, v;
    v = max_ / 255.0;
    if (max_ === 0) {
        h = Number.NaN;
        s = 0;
    } else {
        s = delta / max_;
        if (r === max_) h = (g - b) / delta;
        if (g === max_) h = 2 + (b - r) / delta;
        if (b === max_) h = 4 + (r - g) / delta;
        h *= 60;
        if (h < 0) h += 360;
    }
    return [
        h,
        s,
        v
    ];
};
exports.default = rgb2hsl;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gMW4F":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _lab2RgbJs = require("./lab2rgb.js");
var _lab2RgbJsDefault = parcelHelpers.interopDefault(_lab2RgbJs);
var _rgb2LabJs = require("./rgb2lab.js");
var _rgb2LabJsDefault = parcelHelpers.interopDefault(_rgb2LabJs);
(0, _colorJsDefault.default).prototype.lab = function() {
    return (0, _rgb2LabJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).lab = (...args)=>new (0, _colorJsDefault.default)(...args, 'lab');
(0, _inputJsDefault.default).format.lab = (0, _lab2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 2,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'lab');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'lab';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./lab2rgb.js":"dOvRZ","./rgb2lab.js":"fXI7U","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOvRZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labConstantsJs = require("./lab-constants.js");
var _labConstantsJsDefault = parcelHelpers.interopDefault(_labConstantsJs);
var _indexJs = require("../../utils/index.js");
const { pow } = Math;
/*
 * L* [0..100]
 * a [-100..100]
 * b [-100..100]
 */ const lab2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'lab');
    const [l, a, b] = args;
    let x, y, z, r, g, b_;
    y = (l + 16) / 116;
    x = isNaN(a) ? y : y + a / 500;
    z = isNaN(b) ? y : y - b / 200;
    y = (0, _labConstantsJsDefault.default).Yn * lab_xyz(y);
    x = (0, _labConstantsJsDefault.default).Xn * lab_xyz(x);
    z = (0, _labConstantsJsDefault.default).Zn * lab_xyz(z);
    r = xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z); // D65 -> sRGB
    g = xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z);
    b_ = xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z);
    return [
        r,
        g,
        b_,
        args.length > 3 ? args[3] : 1
    ];
};
const xyz_rgb = (r)=>{
    return 255 * (r <= 0.00304 ? 12.92 * r : 1.055 * pow(r, 1 / 2.4) - 0.055);
};
const lab_xyz = (t)=>{
    return t > (0, _labConstantsJsDefault.default).t1 ? t * t * t : (0, _labConstantsJsDefault.default).t2 * (t - (0, _labConstantsJsDefault.default).t0);
};
exports.default = lab2rgb;

},{"./lab-constants.js":"gfMpf","../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gfMpf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    // Corresponds roughly to RGB brighter/darker
    Kn: 18,
    // D65 standard referent
    Xn: 0.95047,
    Yn: 1,
    Zn: 1.08883,
    t0: 0.137931034,
    t1: 0.206896552,
    t2: 0.12841855,
    t3: 0.008856452 // t1 * t1 * t1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXI7U":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _labConstantsJs = require("./lab-constants.js");
var _labConstantsJsDefault = parcelHelpers.interopDefault(_labConstantsJs);
var _indexJs = require("../../utils/index.js");
const { pow } = Math;
const rgb2lab = (...args)=>{
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    const [x, y, z] = rgb2xyz(r, g, b);
    const l = 116 * y - 16;
    return [
        l < 0 ? 0 : l,
        500 * (x - y),
        200 * (y - z)
    ];
};
const rgb_xyz = (r)=>{
    if ((r /= 255) <= 0.04045) return r / 12.92;
    return pow((r + 0.055) / 1.055, 2.4);
};
const xyz_lab = (t)=>{
    if (t > (0, _labConstantsJsDefault.default).t3) return pow(t, 1 / 3);
    return t / (0, _labConstantsJsDefault.default).t2 + (0, _labConstantsJsDefault.default).t0;
};
const rgb2xyz = (r, g, b)=>{
    r = rgb_xyz(r);
    g = rgb_xyz(g);
    b = rgb_xyz(b);
    const x = xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / (0, _labConstantsJsDefault.default).Xn);
    const y = xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / (0, _labConstantsJsDefault.default).Yn);
    const z = xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / (0, _labConstantsJsDefault.default).Zn);
    return [
        x,
        y,
        z
    ];
};
exports.default = rgb2lab;

},{"./lab-constants.js":"gfMpf","../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOUqb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _lch2RgbJs = require("./lch2rgb.js");
var _lch2RgbJsDefault = parcelHelpers.interopDefault(_lch2RgbJs);
var _hcl2RgbJs = require("./hcl2rgb.js");
var _hcl2RgbJsDefault = parcelHelpers.interopDefault(_hcl2RgbJs);
var _rgb2LchJs = require("./rgb2lch.js");
var _rgb2LchJsDefault = parcelHelpers.interopDefault(_rgb2LchJs);
(0, _colorJsDefault.default).prototype.lch = function() {
    return (0, _rgb2LchJsDefault.default)(this._rgb);
};
(0, _colorJsDefault.default).prototype.hcl = function() {
    return (0, _rgb2LchJsDefault.default)(this._rgb).reverse();
};
(0, _chromaJsDefault.default).lch = (...args)=>new (0, _colorJsDefault.default)(...args, 'lch');
(0, _chromaJsDefault.default).hcl = (...args)=>new (0, _colorJsDefault.default)(...args, 'hcl');
(0, _inputJsDefault.default).format.lch = (0, _lch2RgbJsDefault.default);
(0, _inputJsDefault.default).format.hcl = (0, _hcl2RgbJsDefault.default);
[
    'lch',
    'hcl'
].forEach((m)=>(0, _inputJsDefault.default).autodetect.push({
        p: 2,
        test: (...args)=>{
            args = (0, _indexJs.unpack)(args, m);
            if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return m;
        }
    }));

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./lch2rgb.js":"8WnhP","./hcl2rgb.js":"bZxDS","./rgb2lch.js":"k0ohY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WnhP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _lch2LabJs = require("./lch2lab.js");
var _lch2LabJsDefault = parcelHelpers.interopDefault(_lch2LabJs);
var _lab2RgbJs = require("../lab/lab2rgb.js");
var _lab2RgbJsDefault = parcelHelpers.interopDefault(_lab2RgbJs);
const lch2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'lch');
    const [l, c, h] = args;
    const [L, a, b_] = (0, _lch2LabJsDefault.default)(l, c, h);
    const [r, g, b] = (0, _lab2RgbJsDefault.default)(L, a, b_);
    return [
        r,
        g,
        b,
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = lch2rgb;

},{"../../utils/index.js":"FsUmr","./lch2lab.js":"dlfqJ","../lab/lab2rgb.js":"dOvRZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlfqJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { sin, cos } = Math;
const lch2lab = (...args)=>{
    /*
    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.
    These formulas were invented by David Dalrymple to obtain maximum contrast without going
    out of gamut if the parameters are in the range 0-1.

    A saturation multiplier was added by Gregor Aisch
    */ let [l, c, h] = (0, _indexJs.unpack)(args, 'lch');
    if (isNaN(h)) h = 0;
    h = h * (0, _indexJs.DEG2RAD);
    return [
        l,
        cos(h) * c,
        sin(h) * c
    ];
};
exports.default = lch2lab;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZxDS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _lch2RgbJs = require("./lch2rgb.js");
var _lch2RgbJsDefault = parcelHelpers.interopDefault(_lch2RgbJs);
const hcl2rgb = (...args)=>{
    const hcl = (0, _indexJs.unpack)(args, 'hcl').reverse();
    return (0, _lch2RgbJsDefault.default)(...hcl);
};
exports.default = hcl2rgb;

},{"../../utils/index.js":"FsUmr","./lch2rgb.js":"8WnhP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0ohY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _rgb2LabJs = require("../lab/rgb2lab.js");
var _rgb2LabJsDefault = parcelHelpers.interopDefault(_rgb2LabJs);
var _lab2LchJs = require("./lab2lch.js");
var _lab2LchJsDefault = parcelHelpers.interopDefault(_lab2LchJs);
const rgb2lch = (...args)=>{
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    const [l, a, b_] = (0, _rgb2LabJsDefault.default)(r, g, b);
    return (0, _lab2LchJsDefault.default)(l, a, b_);
};
exports.default = rgb2lch;

},{"../../utils/index.js":"FsUmr","../lab/rgb2lab.js":"fXI7U","./lab2lch.js":"k2mTo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k2mTo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { sqrt, atan2, round } = Math;
const lab2lch = (...args)=>{
    const [l, a, b] = (0, _indexJs.unpack)(args, 'lab');
    const c = sqrt(a * a + b * b);
    let h = (atan2(b, a) * (0, _indexJs.RAD2DEG) + 360) % 360;
    if (round(c * 10000) === 0) h = Number.NaN;
    return [
        l,
        c,
        h
    ];
};
exports.default = lab2lch;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9P6ya":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
var _w3Cx11Js = require("../../colors/w3cx11.js");
var _w3Cx11JsDefault = parcelHelpers.interopDefault(_w3Cx11Js);
var _hex2RgbJs = require("../hex/hex2rgb.js");
var _hex2RgbJsDefault = parcelHelpers.interopDefault(_hex2RgbJs);
var _rgb2HexJs = require("../hex/rgb2hex.js");
var _rgb2HexJsDefault = parcelHelpers.interopDefault(_rgb2HexJs);
(0, _colorJsDefault.default).prototype.name = function() {
    const hex = (0, _rgb2HexJsDefault.default)(this._rgb, 'rgb');
    for (let n of Object.keys((0, _w3Cx11JsDefault.default))){
        if ((0, _w3Cx11JsDefault.default)[n] === hex) return n.toLowerCase();
    }
    return hex;
};
(0, _inputJsDefault.default).format.named = (name)=>{
    name = name.toLowerCase();
    if ((0, _w3Cx11JsDefault.default)[name]) return (0, _hex2RgbJsDefault.default)((0, _w3Cx11JsDefault.default)[name]);
    throw new Error('unknown color name: ' + name);
};
(0, _inputJsDefault.default).autodetect.push({
    p: 5,
    test: (h, ...rest)=>{
        if (!rest.length && (0, _indexJs.type)(h) === 'string' && (0, _w3Cx11JsDefault.default)[h.toLowerCase()]) return 'named';
    }
});

},{"../../Color.js":"86WNB","../input.js":"2ncJk","../../utils/index.js":"FsUmr","../../colors/w3cx11.js":"ks5NN","../hex/hex2rgb.js":"a9jpQ","../hex/rgb2hex.js":"3c37q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ks5NN":[function(require,module,exports,__globalThis) {
/**
	X11 color names

	http://www.w3.org/TR/css3-color/#svg-color
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const w3cx11 = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    laserlemon: '#ffff54',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrod: '#fafad2',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    maroon2: '#7f0000',
    maroon3: '#b03060',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    purple2: '#7f007f',
    purple3: '#a020f0',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};
exports.default = w3cx11;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kAJcC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
var _num2RgbJs = require("./num2rgb.js");
var _num2RgbJsDefault = parcelHelpers.interopDefault(_num2RgbJs);
var _rgb2NumJs = require("./rgb2num.js");
var _rgb2NumJsDefault = parcelHelpers.interopDefault(_rgb2NumJs);
(0, _colorJsDefault.default).prototype.num = function() {
    return (0, _rgb2NumJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).num = (...args)=>new (0, _colorJsDefault.default)(...args, 'num');
(0, _inputJsDefault.default).format.num = (0, _num2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 5,
    test: (...args)=>{
        if (args.length === 1 && (0, _indexJs.type)(args[0]) === 'number' && args[0] >= 0 && args[0] <= 0xffffff) return 'num';
    }
});

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","../../utils/index.js":"FsUmr","./num2rgb.js":"8QRxn","./rgb2num.js":"2xFnM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8QRxn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const num2rgb = (num)=>{
    if ((0, _indexJs.type)(num) == 'number' && num >= 0 && num <= 0xffffff) {
        const r = num >> 16;
        const g = num >> 8 & 0xff;
        const b = num & 0xff;
        return [
            r,
            g,
            b,
            1
        ];
    }
    throw new Error('unknown num color: ' + num);
};
exports.default = num2rgb;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2xFnM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const rgb2num = (...args)=>{
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    return (r << 16) + (g << 8) + b;
};
exports.default = rgb2num;

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XQ0e":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _indexJs = require("../../utils/index.js");
const { round } = Math;
(0, _colorJsDefault.default).prototype.rgb = function(rnd = true) {
    if (rnd === false) return this._rgb.slice(0, 3);
    return this._rgb.slice(0, 3).map(round);
};
(0, _colorJsDefault.default).prototype.rgba = function(rnd = true) {
    return this._rgb.slice(0, 4).map((v, i)=>{
        return i < 3 ? rnd === false ? v : round(v) : v;
    });
};
(0, _chromaJsDefault.default).rgb = (...args)=>new (0, _colorJsDefault.default)(...args, 'rgb');
(0, _inputJsDefault.default).format.rgb = (...args)=>{
    const rgba = (0, _indexJs.unpack)(args, 'rgba');
    if (rgba[3] === undefined) rgba[3] = 1;
    return rgba;
};
(0, _inputJsDefault.default).autodetect.push({
    p: 3,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'rgba');
        if ((0, _indexJs.type)(args) === 'array' && (args.length === 3 || args.length === 4 && (0, _indexJs.type)(args[3]) == 'number' && args[3] >= 0 && args[3] <= 1)) return 'rgb';
    }
});

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3benl":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _temperature2RgbJs = require("./temperature2rgb.js");
var _temperature2RgbJsDefault = parcelHelpers.interopDefault(_temperature2RgbJs);
var _rgb2TemperatureJs = require("./rgb2temperature.js");
var _rgb2TemperatureJsDefault = parcelHelpers.interopDefault(_rgb2TemperatureJs);
(0, _colorJsDefault.default).prototype.temp = (0, _colorJsDefault.default).prototype.kelvin = (0, _colorJsDefault.default).prototype.temperature = function() {
    return (0, _rgb2TemperatureJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).temp = (0, _chromaJsDefault.default).kelvin = (0, _chromaJsDefault.default).temperature = (...args)=>new (0, _colorJsDefault.default)(...args, 'temp');
(0, _inputJsDefault.default).format.temp = (0, _inputJsDefault.default).format.kelvin = (0, _inputJsDefault.default).format.temperature = (0, _temperature2RgbJsDefault.default);

},{"../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./temperature2rgb.js":"jbNpI","./rgb2temperature.js":"2Sc8b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbNpI":[function(require,module,exports,__globalThis) {
/*
 * Based on implementation by Neil Bartlett
 * https://github.com/neilbartlett/color-temperature
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const { log } = Math;
const temperature2rgb = (kelvin)=>{
    const temp = kelvin / 100;
    let r, g, b;
    if (temp < 66) {
        r = 255;
        g = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g = temp - 2) + 104.49216199393888 * log(g);
        b = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b = temp - 10) + 115.67994401066147 * log(b);
    } else {
        r = 351.97690566805693 + 0.114206453784165 * (r = temp - 55) - 40.25366309332127 * log(r);
        g = 325.4494125711974 + 0.07943456536662342 * (g = temp - 50) - 28.0852963507957 * log(g);
        b = 255;
    }
    return [
        r,
        g,
        b,
        1
    ];
};
exports.default = temperature2rgb;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Sc8b":[function(require,module,exports,__globalThis) {
/*
 * Based on implementation by Neil Bartlett
 * https://github.com/neilbartlett/color-temperature
 **/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _temperature2RgbJs = require("./temperature2rgb.js");
var _temperature2RgbJsDefault = parcelHelpers.interopDefault(_temperature2RgbJs);
var _indexJs = require("../../utils/index.js");
const { round } = Math;
const rgb2temperature = (...args)=>{
    const rgb = (0, _indexJs.unpack)(args, 'rgb');
    const r = rgb[0], b = rgb[2];
    let minTemp = 1000;
    let maxTemp = 40000;
    const eps = 0.4;
    let temp;
    while(maxTemp - minTemp > eps){
        temp = (maxTemp + minTemp) * 0.5;
        const rgb = (0, _temperature2RgbJsDefault.default)(temp);
        if (rgb[2] / rgb[0] >= b / r) maxTemp = temp;
        else minTemp = temp;
    }
    return round(temp);
};
exports.default = rgb2temperature;

},{"./temperature2rgb.js":"jbNpI","../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"beksD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _oklab2RgbJs = require("./oklab2rgb.js");
var _oklab2RgbJsDefault = parcelHelpers.interopDefault(_oklab2RgbJs);
var _rgb2OklabJs = require("./rgb2oklab.js");
var _rgb2OklabJsDefault = parcelHelpers.interopDefault(_rgb2OklabJs);
(0, _colorJsDefault.default).prototype.oklab = function() {
    return (0, _rgb2OklabJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).oklab = (...args)=>new (0, _colorJsDefault.default)(...args, 'oklab');
(0, _inputJsDefault.default).format.oklab = (0, _oklab2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 3,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'oklab');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'oklab';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./oklab2rgb.js":"iK0cA","./rgb2oklab.js":"aC22F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iK0cA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { pow, sign } = Math;
/*
 * L* [0..100]
 * a [-100..100]
 * b [-100..100]
 */ const oklab2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'lab');
    const [L, a, b] = args;
    const l = pow(L + 0.3963377774 * a + 0.2158037573 * b, 3);
    const m = pow(L - 0.1055613458 * a - 0.0638541728 * b, 3);
    const s = pow(L - 0.0894841775 * a - 1.291485548 * b, 3);
    return [
        255 * lrgb2rgb(4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s),
        255 * lrgb2rgb(-1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s),
        255 * lrgb2rgb(-0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s),
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = oklab2rgb;
function lrgb2rgb(c) {
    const abs = Math.abs(c);
    if (abs > 0.0031308) return (sign(c) || 1) * (1.055 * pow(abs, 1 / 2.4) - 0.055);
    return c * 12.92;
}

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aC22F":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
const { cbrt, pow, sign } = Math;
const rgb2oklab = (...args)=>{
    // OKLab color space implementation taken from
    // https://bottosson.github.io/posts/oklab/
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    const [lr, lg, lb] = [
        rgb2lrgb(r / 255),
        rgb2lrgb(g / 255),
        rgb2lrgb(b / 255)
    ];
    const l = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);
    const m = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);
    const s = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);
    return [
        0.2104542553 * l + 0.793617785 * m - 0.0040720468 * s,
        1.9779984951 * l - 2.428592205 * m + 0.4505937099 * s,
        0.0259040371 * l + 0.7827717662 * m - 0.808675766 * s
    ];
};
exports.default = rgb2oklab;
function rgb2lrgb(c) {
    const abs = Math.abs(c);
    if (abs < 0.04045) return c / 12.92;
    return (sign(c) || 1) * pow((abs + 0.055) / 1.055, 2.4);
}

},{"../../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cH6m3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../../utils/index.js");
var _chromaJs = require("../../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _colorJs = require("../../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _inputJs = require("../input.js");
var _inputJsDefault = parcelHelpers.interopDefault(_inputJs);
var _oklch2RgbJs = require("./oklch2rgb.js");
var _oklch2RgbJsDefault = parcelHelpers.interopDefault(_oklch2RgbJs);
var _rgb2OklchJs = require("./rgb2oklch.js");
var _rgb2OklchJsDefault = parcelHelpers.interopDefault(_rgb2OklchJs);
(0, _colorJsDefault.default).prototype.oklch = function() {
    return (0, _rgb2OklchJsDefault.default)(this._rgb);
};
(0, _chromaJsDefault.default).oklch = (...args)=>new (0, _colorJsDefault.default)(...args, 'oklch');
(0, _inputJsDefault.default).format.oklch = (0, _oklch2RgbJsDefault.default);
(0, _inputJsDefault.default).autodetect.push({
    p: 3,
    test: (...args)=>{
        args = (0, _indexJs.unpack)(args, 'oklch');
        if ((0, _indexJs.type)(args) === 'array' && args.length === 3) return 'oklch';
    }
});

},{"../../utils/index.js":"FsUmr","../../chroma.js":"jNNC2","../../Color.js":"86WNB","../input.js":"2ncJk","./oklch2rgb.js":"bQx3E","./rgb2oklch.js":"jYT8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQx3E":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _lch2LabJs = require("../lch/lch2lab.js");
var _lch2LabJsDefault = parcelHelpers.interopDefault(_lch2LabJs);
var _oklab2RgbJs = require("../oklab/oklab2rgb.js");
var _oklab2RgbJsDefault = parcelHelpers.interopDefault(_oklab2RgbJs);
const oklch2rgb = (...args)=>{
    args = (0, _indexJs.unpack)(args, 'lch');
    const [l, c, h] = args;
    const [L, a, b_] = (0, _lch2LabJsDefault.default)(l, c, h);
    const [r, g, b] = (0, _oklab2RgbJsDefault.default)(L, a, b_);
    return [
        r,
        g,
        b,
        args.length > 3 ? args[3] : 1
    ];
};
exports.default = oklch2rgb;

},{"../../utils/index.js":"FsUmr","../lch/lch2lab.js":"dlfqJ","../oklab/oklab2rgb.js":"iK0cA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jYT8A":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../../utils/index.js");
var _rgb2OklabJs = require("../oklab/rgb2oklab.js");
var _rgb2OklabJsDefault = parcelHelpers.interopDefault(_rgb2OklabJs);
var _lab2LchJs = require("../lch/lab2lch.js");
var _lab2LchJsDefault = parcelHelpers.interopDefault(_lab2LchJs);
const rgb2oklch = (...args)=>{
    const [r, g, b] = (0, _indexJs.unpack)(args, 'rgb');
    const [l, a, b_] = (0, _rgb2OklabJsDefault.default)(r, g, b);
    return (0, _lab2LchJsDefault.default)(l, a, b_);
};
exports.default = rgb2oklch;

},{"../../utils/index.js":"FsUmr","../oklab/rgb2oklab.js":"aC22F","../lch/lab2lch.js":"k2mTo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kEpd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../utils/index.js");
(0, _colorJsDefault.default).prototype.alpha = function(a, mutate = false) {
    if (a !== undefined && (0, _indexJs.type)(a) === 'number') {
        if (mutate) {
            this._rgb[3] = a;
            return this;
        }
        return new (0, _colorJsDefault.default)([
            this._rgb[0],
            this._rgb[1],
            this._rgb[2],
            a
        ], 'rgb');
    }
    return this._rgb[3];
};

},{"../Color.js":"86WNB","../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"55Kk5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
(0, _colorJsDefault.default).prototype.clipped = function() {
    return this._rgb._clipped || false;
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g8H5C":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../io/lab/index.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labConstantsJs = require("../io/lab/lab-constants.js");
var _labConstantsJsDefault = parcelHelpers.interopDefault(_labConstantsJs);
(0, _colorJsDefault.default).prototype.darken = function(amount = 1) {
    const me = this;
    const lab = me.lab();
    lab[0] -= (0, _labConstantsJsDefault.default).Kn * amount;
    return new (0, _colorJsDefault.default)(lab, 'lab').alpha(me.alpha(), true);
};
(0, _colorJsDefault.default).prototype.brighten = function(amount = 1) {
    return this.darken(-amount);
};
(0, _colorJsDefault.default).prototype.darker = (0, _colorJsDefault.default).prototype.darken;
(0, _colorJsDefault.default).prototype.brighter = (0, _colorJsDefault.default).prototype.brighten;

},{"../io/lab/index.js":"gMW4F","../Color.js":"86WNB","../io/lab/lab-constants.js":"gfMpf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVaYT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
(0, _colorJsDefault.default).prototype.get = function(mc) {
    const [mode, channel] = mc.split('.');
    const src = this[mode]();
    if (channel) {
        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
        if (i > -1) return src[i];
        throw new Error(`unknown channel ${channel} in mode ${mode}`);
    } else return src;
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NQik":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../utils/index.js");
const { pow } = Math;
const EPS = 1e-7;
const MAX_ITER = 20;
(0, _colorJsDefault.default).prototype.luminance = function(lum, mode = 'rgb') {
    if (lum !== undefined && (0, _indexJs.type)(lum) === 'number') {
        if (lum === 0) // return pure black
        return new (0, _colorJsDefault.default)([
            0,
            0,
            0,
            this._rgb[3]
        ], 'rgb');
        if (lum === 1) // return pure white
        return new (0, _colorJsDefault.default)([
            255,
            255,
            255,
            this._rgb[3]
        ], 'rgb');
        // compute new color using...
        let cur_lum = this.luminance();
        let max_iter = MAX_ITER;
        const test = (low, high)=>{
            const mid = low.interpolate(high, 0.5, mode);
            const lm = mid.luminance();
            if (Math.abs(lum - lm) < EPS || !max_iter--) // close enough
            return mid;
            return lm > lum ? test(low, mid) : test(mid, high);
        };
        const rgb = (cur_lum > lum ? test(new (0, _colorJsDefault.default)([
            0,
            0,
            0
        ]), this) : test(this, new (0, _colorJsDefault.default)([
            255,
            255,
            255
        ]))).rgb();
        return new (0, _colorJsDefault.default)([
            ...rgb,
            this._rgb[3]
        ]);
    }
    return rgb2luminance(...this._rgb.slice(0, 3));
};
const rgb2luminance = (r, g, b)=>{
    // relative luminance
    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    r = luminance_x(r);
    g = luminance_x(g);
    b = luminance_x(b);
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
};
const luminance_x = (x)=>{
    x /= 255;
    return x <= 0.03928 ? x / 12.92 : pow((x + 0.055) / 1.055, 2.4);
};

},{"../Color.js":"86WNB","../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5KlJS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _mixJs = require("../generator/mix.js");
var _mixJsDefault = parcelHelpers.interopDefault(_mixJs);
(0, _colorJsDefault.default).prototype.mix = (0, _colorJsDefault.default).prototype.interpolate = function(col2, f = 0.5, ...rest) {
    return (0, _mixJsDefault.default)(this, col2, f, ...rest);
};

},{"../Color.js":"86WNB","../generator/mix.js":"hPOrz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hPOrz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../utils/index.js");
var _indexJs1 = require("../interpolator/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
exports.default = (col1, col2, f = 0.5, ...rest)=>{
    let mode = rest[0] || 'lrgb';
    if (!(0, _indexJsDefault.default)[mode] && !rest.length) // fall back to the first supported mode
    mode = Object.keys((0, _indexJsDefault.default))[0];
    if (!(0, _indexJsDefault.default)[mode]) throw new Error(`interpolation mode ${mode} is not defined`);
    if ((0, _indexJs.type)(col1) !== 'object') col1 = new (0, _colorJsDefault.default)(col1);
    if ((0, _indexJs.type)(col2) !== 'object') col2 = new (0, _colorJsDefault.default)(col2);
    return (0, _indexJsDefault.default)[mode](col1, col2, f).alpha(col1.alpha() + f * (col2.alpha() - col1.alpha()));
};

},{"../Color.js":"86WNB","../utils/index.js":"FsUmr","../interpolator/index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htTcH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"mcoWa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
(0, _colorJsDefault.default).prototype.premultiply = function(mutate = false) {
    const rgb = this._rgb;
    const a = rgb[3];
    if (mutate) {
        this._rgb = [
            rgb[0] * a,
            rgb[1] * a,
            rgb[2] * a,
            a
        ];
        return this;
    } else return new (0, _colorJsDefault.default)([
        rgb[0] * a,
        rgb[1] * a,
        rgb[2] * a,
        a
    ], 'rgb');
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwlfr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../io/lch/index.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labConstantsJs = require("../io/lab/lab-constants.js");
var _labConstantsJsDefault = parcelHelpers.interopDefault(_labConstantsJs);
(0, _colorJsDefault.default).prototype.saturate = function(amount = 1) {
    const me = this;
    const lch = me.lch();
    lch[1] += (0, _labConstantsJsDefault.default).Kn * amount;
    if (lch[1] < 0) lch[1] = 0;
    return new (0, _colorJsDefault.default)(lch, 'lch').alpha(me.alpha(), true);
};
(0, _colorJsDefault.default).prototype.desaturate = function(amount = 1) {
    return this.saturate(-amount);
};

},{"../io/lch/index.js":"eOUqb","../Color.js":"86WNB","../io/lab/lab-constants.js":"gfMpf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bLPTP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../utils/index.js");
(0, _colorJsDefault.default).prototype.set = function(mc, value, mutate = false) {
    const [mode, channel] = mc.split('.');
    const src = this[mode]();
    if (channel) {
        const i = mode.indexOf(channel) - (mode.substr(0, 2) === 'ok' ? 2 : 0);
        if (i > -1) {
            if ((0, _indexJs.type)(value) == 'string') switch(value.charAt(0)){
                case '+':
                    src[i] += +value;
                    break;
                case '-':
                    src[i] += +value;
                    break;
                case '*':
                    src[i] *= +value.substr(1);
                    break;
                case '/':
                    src[i] /= +value.substr(1);
                    break;
                default:
                    src[i] = +value;
            }
            else if ((0, _indexJs.type)(value) === 'number') src[i] = value;
            else throw new Error(`unsupported value for Color.set`);
            const out = new (0, _colorJsDefault.default)(src, mode);
            if (mutate) {
                this._rgb = out._rgb;
                return this;
            }
            return out;
        }
        throw new Error(`unknown channel ${channel} in mode ${mode}`);
    } else return src;
};

},{"../Color.js":"86WNB","../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eBxqt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _indexJs = require("../io/lab/index.js");
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _mixJs = require("../generator/mix.js");
var _mixJsDefault = parcelHelpers.interopDefault(_mixJs);
(0, _colorJsDefault.default).prototype.tint = function(f = 0.5, ...rest) {
    return (0, _mixJsDefault.default)(this, 'white', f, ...rest);
};
(0, _colorJsDefault.default).prototype.shade = function(f = 0.5, ...rest) {
    return (0, _mixJsDefault.default)(this, 'black', f, ...rest);
};

},{"../io/lab/index.js":"gMW4F","../Color.js":"86WNB","../generator/mix.js":"hPOrz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Mpwf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
const rgb = (col1, col2, f)=>{
    const xyz0 = col1._rgb;
    const xyz1 = col2._rgb;
    return new (0, _colorJsDefault.default)(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), 'rgb');
};
// register interpolator
(0, _indexJsDefault.default).rgb = rgb;
exports.default = rgb;

},{"../Color.js":"86WNB","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVlXN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
const { sqrt, pow } = Math;
const lrgb = (col1, col2, f)=>{
    const [x1, y1, z1] = col1._rgb;
    const [x2, y2, z2] = col2._rgb;
    return new (0, _colorJsDefault.default)(sqrt(pow(x1, 2) * (1 - f) + pow(x2, 2) * f), sqrt(pow(y1, 2) * (1 - f) + pow(y2, 2) * f), sqrt(pow(z1, 2) * (1 - f) + pow(z2, 2) * f), 'rgb');
};
// register interpolator
(0, _indexJsDefault.default).lrgb = lrgb;
exports.default = lrgb;

},{"../Color.js":"86WNB","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Usm2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/lab/index.js");
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
const lab = (col1, col2, f)=>{
    const xyz0 = col1.lab();
    const xyz1 = col2.lab();
    return new (0, _colorJsDefault.default)(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), 'lab');
};
// register interpolator
(0, _indexJsDefault.default).lab = lab;
exports.default = lab;

},{"../io/lab/index.js":"gMW4F","./index.js":"htTcH","../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wkzn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/lch/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const lch = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'lch');
};
// register interpolator
(0, _indexJsDefault.default).lch = lch;
(0, _indexJsDefault.default).hcl = lch;
exports.default = lch;

},{"../io/lch/index.js":"eOUqb","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8k0Mz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
exports.default = (col1, col2, f, m)=>{
    let xyz0, xyz1;
    if (m === 'hsl') {
        xyz0 = col1.hsl();
        xyz1 = col2.hsl();
    } else if (m === 'hsv') {
        xyz0 = col1.hsv();
        xyz1 = col2.hsv();
    } else if (m === 'hcg') {
        xyz0 = col1.hcg();
        xyz1 = col2.hcg();
    } else if (m === 'hsi') {
        xyz0 = col1.hsi();
        xyz1 = col2.hsi();
    } else if (m === 'lch' || m === 'hcl') {
        m = 'hcl';
        xyz0 = col1.hcl();
        xyz1 = col2.hcl();
    } else if (m === 'oklch') {
        xyz0 = col1.oklch().reverse();
        xyz1 = col2.oklch().reverse();
    }
    let hue0, hue1, sat0, sat1, lbv0, lbv1;
    if (m.substr(0, 1) === 'h' || m === 'oklch') {
        [hue0, sat0, lbv0] = xyz0;
        [hue1, sat1, lbv1] = xyz1;
    }
    let sat, hue, lbv, dh;
    if (!isNaN(hue0) && !isNaN(hue1)) {
        // both colors have hue
        if (hue1 > hue0 && hue1 - hue0 > 180) dh = hue1 - (hue0 + 360);
        else if (hue1 < hue0 && hue0 - hue1 > 180) dh = hue1 + 360 - hue0;
        else dh = hue1 - hue0;
        hue = hue0 + f * dh;
    } else if (!isNaN(hue0)) {
        hue = hue0;
        if ((lbv1 == 1 || lbv1 == 0) && m != 'hsv') sat = sat0;
    } else if (!isNaN(hue1)) {
        hue = hue1;
        if ((lbv0 == 1 || lbv0 == 0) && m != 'hsv') sat = sat1;
    } else hue = Number.NaN;
    if (sat === undefined) sat = sat0 + f * (sat1 - sat0);
    lbv = lbv0 + f * (lbv1 - lbv0);
    return m === 'oklch' ? new (0, _colorJsDefault.default)([
        lbv,
        sat,
        hue
    ], m) : new (0, _colorJsDefault.default)([
        hue,
        sat,
        lbv
    ], m);
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63PvC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/num/index.js");
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
const num = (col1, col2, f)=>{
    const c1 = col1.num();
    const c2 = col2.num();
    return new (0, _colorJsDefault.default)(c1 + f * (c2 - c1), 'num');
};
// register interpolator
(0, _indexJsDefault.default).num = num;
exports.default = num;

},{"../io/num/index.js":"kAJcC","./index.js":"htTcH","../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4510n":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/hcg/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const hcg = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'hcg');
};
// register interpolator
(0, _indexJsDefault.default).hcg = hcg;
exports.default = hcg;

},{"../io/hcg/index.js":"tBkG3","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kJ0St":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/hsi/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const hsi = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'hsi');
};
// register interpolator
(0, _indexJsDefault.default).hsi = hsi;
exports.default = hsi;

},{"../io/hsi/index.js":"kYSQw","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4r9Np":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/hsl/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const hsl = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'hsl');
};
// register interpolator
(0, _indexJsDefault.default).hsl = hsl;
exports.default = hsl;

},{"../io/hsl/index.js":"jIO0h","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNNWW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/hsv/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const hsv = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'hsv');
};
// register interpolator
(0, _indexJsDefault.default).hsv = hsv;
exports.default = hsv;

},{"../io/hsv/index.js":"4uLhg","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4nc8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/oklab/index.js");
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
const oklab = (col1, col2, f)=>{
    const xyz0 = col1.oklab();
    const xyz1 = col2.oklab();
    return new (0, _colorJsDefault.default)(xyz0[0] + f * (xyz1[0] - xyz0[0]), xyz0[1] + f * (xyz1[1] - xyz0[1]), xyz0[2] + f * (xyz1[2] - xyz0[2]), 'oklab');
};
// register interpolator
(0, _indexJsDefault.default).oklab = oklab;
exports.default = oklab;

},{"../io/oklab/index.js":"beksD","./index.js":"htTcH","../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1CTmB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/lch/index.js");
var _hsxJs = require("./_hsx.js");
var _hsxJsDefault = parcelHelpers.interopDefault(_hsxJs);
var _indexJs1 = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
const oklch = (col1, col2, f)=>{
    return (0, _hsxJsDefault.default)(col1, col2, f, 'oklch');
};
// register interpolator
(0, _indexJsDefault.default).oklch = oklch;
exports.default = oklch;

},{"../io/lch/index.js":"eOUqb","./_hsx.js":"8k0Mz","./index.js":"htTcH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27RYU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../utils/index.js");
const { pow, sqrt, PI, cos, sin, atan2 } = Math;
exports.default = (colors, mode = 'lrgb', weights = null)=>{
    const l = colors.length;
    if (!weights) weights = Array.from(new Array(l)).map(()=>1);
    // normalize weights
    const k = l / weights.reduce(function(a, b) {
        return a + b;
    });
    weights.forEach((w, i)=>{
        weights[i] *= k;
    });
    // convert colors to Color objects
    colors = colors.map((c)=>new (0, _colorJsDefault.default)(c));
    if (mode === 'lrgb') return _average_lrgb(colors, weights);
    const first = colors.shift();
    const xyz = first.get(mode);
    const cnt = [];
    let dx = 0;
    let dy = 0;
    // initial color
    for(let i = 0; i < xyz.length; i++){
        xyz[i] = (xyz[i] || 0) * weights[0];
        cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);
        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {
            const A = xyz[i] / 180 * PI;
            dx += cos(A) * weights[0];
            dy += sin(A) * weights[0];
        }
    }
    let alpha = first.alpha() * weights[0];
    colors.forEach((c, ci)=>{
        const xyz2 = c.get(mode);
        alpha += c.alpha() * weights[ci + 1];
        for(let i = 0; i < xyz.length; i++)if (!isNaN(xyz2[i])) {
            cnt[i] += weights[ci + 1];
            if (mode.charAt(i) === 'h') {
                const A = xyz2[i] / 180 * PI;
                dx += cos(A) * weights[ci + 1];
                dy += sin(A) * weights[ci + 1];
            } else xyz[i] += xyz2[i] * weights[ci + 1];
        }
    });
    for(let i = 0; i < xyz.length; i++)if (mode.charAt(i) === 'h') {
        let A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;
        while(A < 0)A += 360;
        while(A >= 360)A -= 360;
        xyz[i] = A;
    } else xyz[i] = xyz[i] / cnt[i];
    alpha /= l;
    return new (0, _colorJsDefault.default)(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);
};
const _average_lrgb = (colors, weights)=>{
    const l = colors.length;
    const xyz = [
        0,
        0,
        0,
        0
    ];
    for(let i = 0; i < colors.length; i++){
        const col = colors[i];
        const f = weights[i] / l;
        const rgb = col._rgb;
        xyz[0] += pow(rgb[0], 2) * f;
        xyz[1] += pow(rgb[1], 2) * f;
        xyz[2] += pow(rgb[2], 2) * f;
        xyz[3] += rgb[3] * f;
    }
    xyz[0] = sqrt(xyz[0]);
    xyz[1] = sqrt(xyz[1]);
    xyz[2] = sqrt(xyz[2]);
    if (xyz[3] > 0.9999999) xyz[3] = 1;
    return new (0, _colorJsDefault.default)((0, _indexJs.clip_rgb)(xyz));
};

},{"../Color.js":"86WNB","../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"boRft":[function(require,module,exports,__globalThis) {
//
// interpolates between a set of colors uzing a bezier spline
//
// @requires utils lab
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _indexJs = require("../io/lab/index.js");
var _scaleJs = require("./scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
// nth row of the pascal triangle
const binom_row = function(n) {
    let row = [
        1,
        1
    ];
    for(let i = 1; i < n; i++){
        let newrow = [
            1
        ];
        for(let j = 1; j <= row.length; j++)newrow[j] = (row[j] || 0) + row[j - 1];
        row = newrow;
    }
    return row;
};
const bezier = function(colors) {
    let I, lab0, lab1, lab2;
    colors = colors.map((c)=>new (0, _colorJsDefault.default)(c));
    if (colors.length === 2) {
        // linear interpolation
        [lab0, lab1] = colors.map((c)=>c.lab());
        I = function(t) {
            const lab = [
                0,
                1,
                2
            ].map((i)=>lab0[i] + t * (lab1[i] - lab0[i]));
            return new (0, _colorJsDefault.default)(lab, 'lab');
        };
    } else if (colors.length === 3) {
        // quadratic bezier interpolation
        [lab0, lab1, lab2] = colors.map((c)=>c.lab());
        I = function(t) {
            const lab = [
                0,
                1,
                2
            ].map((i)=>(1 - t) * (1 - t) * lab0[i] + 2 * (1 - t) * t * lab1[i] + t * t * lab2[i]);
            return new (0, _colorJsDefault.default)(lab, 'lab');
        };
    } else if (colors.length === 4) {
        // cubic bezier interpolation
        let lab3;
        [lab0, lab1, lab2, lab3] = colors.map((c)=>c.lab());
        I = function(t) {
            const lab = [
                0,
                1,
                2
            ].map((i)=>(1 - t) * (1 - t) * (1 - t) * lab0[i] + 3 * (1 - t) * (1 - t) * t * lab1[i] + 3 * (1 - t) * t * t * lab2[i] + t * t * t * lab3[i]);
            return new (0, _colorJsDefault.default)(lab, 'lab');
        };
    } else if (colors.length >= 5) {
        // general case (degree n bezier)
        let labs, row, n;
        labs = colors.map((c)=>c.lab());
        n = colors.length - 1;
        row = binom_row(n);
        I = function(t) {
            const u = 1 - t;
            const lab = [
                0,
                1,
                2
            ].map((i)=>labs.reduce((sum, el, j)=>sum + row[j] * u ** (n - j) * t ** j * el[i], 0));
            return new (0, _colorJsDefault.default)(lab, 'lab');
        };
    } else throw new RangeError('No point in running bezier with only one color.');
    return I;
};
exports.default = (colors)=>{
    const f = bezier(colors);
    f.scale = ()=>(0, _scaleJsDefault.default)(f);
    return f;
};

},{"../Color.js":"86WNB","../io/lab/index.js":"gMW4F","./scale.js":"gBPPh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gBPPh":[function(require,module,exports,__globalThis) {
// minimal multi-purpose interface
// @requires utils color analyze
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(colors) {
        // constructor
        let _mode = 'rgb';
        let _nacol = (0, _chromaJsDefault.default)('#ccc');
        let _spread = 0;
        // const _fixed = false;
        let _domain = [
            0,
            1
        ];
        let _pos = [];
        let _padding = [
            0,
            0
        ];
        let _classes = false;
        let _colors = [];
        let _out = false;
        let _min = 0;
        let _max = 1;
        let _correctLightness = false;
        let _colorCache = {};
        let _useCache = true;
        let _gamma = 1;
        // private methods
        const setColors = function(colors) {
            colors = colors || [
                '#fff',
                '#000'
            ];
            if (colors && (0, _indexJs.type)(colors) === 'string' && (0, _chromaJsDefault.default).brewer && (0, _chromaJsDefault.default).brewer[colors.toLowerCase()]) colors = (0, _chromaJsDefault.default).brewer[colors.toLowerCase()];
            if ((0, _indexJs.type)(colors) === 'array') {
                // handle single color
                if (colors.length === 1) colors = [
                    colors[0],
                    colors[0]
                ];
                // make a copy of the colors
                colors = colors.slice(0);
                // convert to chroma classes
                for(let c = 0; c < colors.length; c++)colors[c] = (0, _chromaJsDefault.default)(colors[c]);
                // auto-fill color position
                _pos.length = 0;
                for(let c = 0; c < colors.length; c++)_pos.push(c / (colors.length - 1));
            }
            resetCache();
            return _colors = colors;
        };
        const getClass = function(value) {
            if (_classes != null) {
                const n = _classes.length - 1;
                let i = 0;
                while(i < n && value >= _classes[i])i++;
                return i - 1;
            }
            return 0;
        };
        let tMapLightness = (t)=>t;
        let tMapDomain = (t)=>t;
        // const classifyValue = function(value) {
        //     let val = value;
        //     if (_classes.length > 2) {
        //         const n = _classes.length-1;
        //         const i = getClass(value);
        //         const minc = _classes[0] + ((_classes[1]-_classes[0]) * (0 + (_spread * 0.5)));  // center of 1st class
        //         const maxc = _classes[n-1] + ((_classes[n]-_classes[n-1]) * (1 - (_spread * 0.5)));  // center of last class
        //         val = _min + ((((_classes[i] + ((_classes[i+1] - _classes[i]) * 0.5)) - minc) / (maxc-minc)) * (_max - _min));
        //     }
        //     return val;
        // };
        const getColor = function(val, bypassMap) {
            let col, t;
            if (bypassMap == null) bypassMap = false;
            if (isNaN(val) || val === null) return _nacol;
            if (!bypassMap) {
                if (_classes && _classes.length > 2) {
                    // find the class
                    const c = getClass(val);
                    t = c / (_classes.length - 2);
                } else if (_max !== _min) // just interpolate between min/max
                t = (val - _min) / (_max - _min);
                else t = 1;
            } else t = val;
            // domain map
            t = tMapDomain(t);
            if (!bypassMap) t = tMapLightness(t); // lightness correction
            if (_gamma !== 1) t = pow(t, _gamma);
            t = _padding[0] + t * (1 - _padding[0] - _padding[1]);
            t = (0, _indexJs.limit)(t, 0, 1);
            const k = Math.floor(t * 10000);
            if (_useCache && _colorCache[k]) col = _colorCache[k];
            else {
                if ((0, _indexJs.type)(_colors) === 'array') //for i in [0.._pos.length-1]
                for(let i = 0; i < _pos.length; i++){
                    const p = _pos[i];
                    if (t <= p) {
                        col = _colors[i];
                        break;
                    }
                    if (t >= p && i === _pos.length - 1) {
                        col = _colors[i];
                        break;
                    }
                    if (t > p && t < _pos[i + 1]) {
                        t = (t - p) / (_pos[i + 1] - p);
                        col = (0, _chromaJsDefault.default).interpolate(_colors[i], _colors[i + 1], t, _mode);
                        break;
                    }
                }
                else if ((0, _indexJs.type)(_colors) === 'function') col = _colors(t);
                if (_useCache) _colorCache[k] = col;
            }
            return col;
        };
        var resetCache = ()=>_colorCache = {};
        setColors(colors);
        // public interface
        const f = function(v) {
            const c = (0, _chromaJsDefault.default)(getColor(v));
            if (_out && c[_out]) return c[_out]();
            else return c;
        };
        f.classes = function(classes) {
            if (classes != null) {
                if ((0, _indexJs.type)(classes) === 'array') {
                    _classes = classes;
                    _domain = [
                        classes[0],
                        classes[classes.length - 1]
                    ];
                } else {
                    const d = (0, _chromaJsDefault.default).analyze(_domain);
                    if (classes === 0) _classes = [
                        d.min,
                        d.max
                    ];
                    else _classes = (0, _chromaJsDefault.default).limits(d, 'e', classes);
                }
                return f;
            }
            return _classes;
        };
        f.domain = function(domain) {
            if (!arguments.length) return _domain;
            _min = domain[0];
            _max = domain[domain.length - 1];
            _pos = [];
            const k = _colors.length;
            if (domain.length === k && _min !== _max) // update positions
            for (let d of Array.from(domain))_pos.push((d - _min) / (_max - _min));
            else {
                for(let c = 0; c < k; c++)_pos.push(c / (k - 1));
                if (domain.length > 2) {
                    // set domain map
                    const tOut = domain.map((d, i)=>i / (domain.length - 1));
                    const tBreaks = domain.map((d)=>(d - _min) / (_max - _min));
                    if (!tBreaks.every((val, i)=>tOut[i] === val)) tMapDomain = (t)=>{
                        if (t <= 0 || t >= 1) return t;
                        let i = 0;
                        while(t >= tBreaks[i + 1])i++;
                        const f = (t - tBreaks[i]) / (tBreaks[i + 1] - tBreaks[i]);
                        const out = tOut[i] + f * (tOut[i + 1] - tOut[i]);
                        return out;
                    };
                }
            }
            _domain = [
                _min,
                _max
            ];
            return f;
        };
        f.mode = function(_m) {
            if (!arguments.length) return _mode;
            _mode = _m;
            resetCache();
            return f;
        };
        f.range = function(colors, _pos) {
            setColors(colors, _pos);
            return f;
        };
        f.out = function(_o) {
            _out = _o;
            return f;
        };
        f.spread = function(val) {
            if (!arguments.length) return _spread;
            _spread = val;
            return f;
        };
        f.correctLightness = function(v) {
            if (v == null) v = true;
            _correctLightness = v;
            resetCache();
            if (_correctLightness) tMapLightness = function(t) {
                const L0 = getColor(0, true).lab()[0];
                const L1 = getColor(1, true).lab()[0];
                const pol = L0 > L1;
                let L_actual = getColor(t, true).lab()[0];
                const L_ideal = L0 + (L1 - L0) * t;
                let L_diff = L_actual - L_ideal;
                let t0 = 0;
                let t1 = 1;
                let max_iter = 20;
                while(Math.abs(L_diff) > 1e-2 && max_iter-- > 0)(function() {
                    if (pol) L_diff *= -1;
                    if (L_diff < 0) {
                        t0 = t;
                        t += (t1 - t) * 0.5;
                    } else {
                        t1 = t;
                        t += (t0 - t) * 0.5;
                    }
                    L_actual = getColor(t, true).lab()[0];
                    return L_diff = L_actual - L_ideal;
                })();
                return t;
            };
            else tMapLightness = (t)=>t;
            return f;
        };
        f.padding = function(p) {
            if (p != null) {
                if ((0, _indexJs.type)(p) === 'number') p = [
                    p,
                    p
                ];
                _padding = p;
                return f;
            } else return _padding;
        };
        f.colors = function(numColors, out) {
            // If no arguments are given, return the original colors that were provided
            if (arguments.length < 2) out = 'hex';
            let result = [];
            if (arguments.length === 0) result = _colors.slice(0);
            else if (numColors === 1) result = [
                f(0.5)
            ];
            else if (numColors > 1) {
                const dm = _domain[0];
                const dd = _domain[1] - dm;
                result = __range__(0, numColors, false).map((i)=>f(dm + i / (numColors - 1) * dd));
            } else {
                // returns all colors based on the defined classes
                colors = [];
                let samples = [];
                if (_classes && _classes.length > 2) for(let i = 1, end = _classes.length, asc = 1 <= end; asc ? i < end : i > end; asc ? i++ : i--)samples.push((_classes[i - 1] + _classes[i]) * 0.5);
                else samples = _domain;
                result = samples.map((v)=>f(v));
            }
            if ((0, _chromaJsDefault.default)[out]) result = result.map((c)=>c[out]());
            return result;
        };
        f.cache = function(c) {
            if (c != null) {
                _useCache = c;
                return f;
            } else return _useCache;
        };
        f.gamma = function(g) {
            if (g != null) {
                _gamma = g;
                return f;
            } else return _gamma;
        };
        f.nodata = function(d) {
            if (d != null) {
                _nacol = (0, _chromaJsDefault.default)(d);
                return f;
            } else return _nacol;
        };
        return f;
    });
var _chromaJs = require("../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _indexJs = require("../utils/index.js");
const { pow } = Math;
function __range__(left, right, inclusive) {
    let range = [];
    let ascending = left < right;
    let end = !inclusive ? right : ascending ? right + 1 : right - 1;
    for(let i = left; ascending ? i < end : i > end; ascending ? i++ : i--)range.push(i);
    return range;
}

},{"../chroma.js":"jNNC2","../utils/index.js":"FsUmr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1MBHJ":[function(require,module,exports,__globalThis) {
/*
 * interpolates between a set of colors uzing a bezier spline
 * blend mode formulas taken from https://web.archive.org/web/20180110014946/http://www.venture-ware.com/kevin/coding/lets-learn-math-photoshop-blend-modes/
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("../io/rgb/index.js");
var _chromaJs = require("../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
const blend = (bottom, top, mode)=>{
    if (!blend[mode]) throw new Error('unknown blend mode ' + mode);
    return blend[mode](bottom, top);
};
const blend_f = (f)=>(bottom, top)=>{
        const c0 = (0, _chromaJsDefault.default)(top).rgb();
        const c1 = (0, _chromaJsDefault.default)(bottom).rgb();
        return (0, _chromaJsDefault.default).rgb(f(c0, c1));
    };
const each = (f)=>(c0, c1)=>{
        const out = [];
        out[0] = f(c0[0], c1[0]);
        out[1] = f(c0[1], c1[1]);
        out[2] = f(c0[2], c1[2]);
        return out;
    };
const normal = (a)=>a;
const multiply = (a, b)=>a * b / 255;
const darken = (a, b)=>a > b ? b : a;
const lighten = (a, b)=>a > b ? a : b;
const screen = (a, b)=>255 * (1 - (1 - a / 255) * (1 - b / 255));
const overlay = (a, b)=>b < 128 ? 2 * a * b / 255 : 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255));
const burn = (a, b)=>255 * (1 - (1 - b / 255) / (a / 255));
const dodge = (a, b)=>{
    if (a === 255) return 255;
    a = 255 * (b / 255) / (1 - a / 255);
    return a > 255 ? 255 : a;
};
// # add = (a,b) ->
// #     if (a + b > 255) then 255 else a + b
blend.normal = blend_f(each(normal));
blend.multiply = blend_f(each(multiply));
blend.screen = blend_f(each(screen));
blend.overlay = blend_f(each(overlay));
blend.darken = blend_f(each(darken));
blend.lighten = blend_f(each(lighten));
blend.dodge = blend_f(each(dodge));
blend.burn = blend_f(each(burn));
// blend.add = blend_f(each(add));
exports.default = blend;

},{"../io/rgb/index.js":"2XQ0e","../chroma.js":"jNNC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"247pR":[function(require,module,exports,__globalThis) {
// cubehelix interpolation
// based on D.A. Green "A colour scheme for the display of astronomical intensity images"
// http://astron-soc.in/bulletin/11June/289392011.pdf
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(start = 300, rotations = -1.5, hue = 1, gamma = 1, lightness = [
        0,
        1
    ]) {
        let dh = 0, dl;
        if ((0, _indexJs.type)(lightness) === 'array') dl = lightness[1] - lightness[0];
        else {
            dl = 0;
            lightness = [
                lightness,
                lightness
            ];
        }
        const f = function(fract) {
            const a = (0, _indexJs.TWOPI) * ((start + 120) / 360 + rotations * fract);
            const l = pow(lightness[0] + dl * fract, gamma);
            const h = dh !== 0 ? hue[0] + fract * dh : hue;
            const amp = h * l * (1 - l) / 2;
            const cos_a = cos(a);
            const sin_a = sin(a);
            const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
            const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
            const b = l + amp * (1.97294 * cos_a);
            return (0, _chromaJsDefault.default)((0, _indexJs.clip_rgb)([
                r * 255,
                g * 255,
                b * 255,
                1
            ]));
        };
        f.start = function(s) {
            if (s == null) return start;
            start = s;
            return f;
        };
        f.rotations = function(r) {
            if (r == null) return rotations;
            rotations = r;
            return f;
        };
        f.gamma = function(g) {
            if (g == null) return gamma;
            gamma = g;
            return f;
        };
        f.hue = function(h) {
            if (h == null) return hue;
            hue = h;
            if ((0, _indexJs.type)(hue) === 'array') {
                dh = hue[1] - hue[0];
                if (dh === 0) hue = hue[1];
            } else dh = 0;
            return f;
        };
        f.lightness = function(h) {
            if (h == null) return lightness;
            if ((0, _indexJs.type)(h) === 'array') {
                lightness = h;
                dl = h[1] - h[0];
            } else {
                lightness = [
                    h,
                    h
                ];
                dl = 0;
            }
            return f;
        };
        f.scale = ()=>(0, _chromaJsDefault.default).scale(f);
        f.hue(hue);
        return f;
    });
var _indexJs = require("../utils/index.js");
var _chromaJs = require("../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
const { pow, sin, cos } = Math;

},{"../utils/index.js":"FsUmr","../chroma.js":"jNNC2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cS4dQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
const digits = '0123456789abcdef';
const { floor, random } = Math;
exports.default = ()=>{
    let code = '#';
    for(let i = 0; i < 6; i++)code += digits.charAt(floor(random() * 16));
    return new (0, _colorJsDefault.default)(code, 'hex');
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hJPw4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "analyze", ()=>analyze);
parcelHelpers.export(exports, "limits", ()=>limits);
var _typeJs = require("./type.js");
var _typeJsDefault = parcelHelpers.interopDefault(_typeJs);
const { log, pow, floor, abs } = Math;
function analyze(data, key = null) {
    const r = {
        min: Number.MAX_VALUE,
        max: Number.MAX_VALUE * -1,
        sum: 0,
        values: [],
        count: 0
    };
    if ((0, _typeJsDefault.default)(data) === 'object') data = Object.values(data);
    data.forEach((val)=>{
        if (key && (0, _typeJsDefault.default)(val) === 'object') val = val[key];
        if (val !== undefined && val !== null && !isNaN(val)) {
            r.values.push(val);
            r.sum += val;
            if (val < r.min) r.min = val;
            if (val > r.max) r.max = val;
            r.count += 1;
        }
    });
    r.domain = [
        r.min,
        r.max
    ];
    r.limits = (mode, num)=>limits(r, mode, num);
    return r;
}
function limits(data, mode = 'equal', num = 7) {
    if ((0, _typeJsDefault.default)(data) == 'array') data = analyze(data);
    const { min, max } = data;
    const values = data.values.sort((a, b)=>a - b);
    if (num === 1) return [
        min,
        max
    ];
    const limits1 = [];
    if (mode.substr(0, 1) === 'c') {
        // continuous
        limits1.push(min);
        limits1.push(max);
    }
    if (mode.substr(0, 1) === 'e') {
        // equal interval
        limits1.push(min);
        for(let i = 1; i < num; i++)limits1.push(min + i / num * (max - min));
        limits1.push(max);
    } else if (mode.substr(0, 1) === 'l') {
        // log scale
        if (min <= 0) throw new Error('Logarithmic scales are only possible for values > 0');
        const min_log = Math.LOG10E * log(min);
        const max_log = Math.LOG10E * log(max);
        limits1.push(min);
        for(let i = 1; i < num; i++)limits1.push(pow(10, min_log + i / num * (max_log - min_log)));
        limits1.push(max);
    } else if (mode.substr(0, 1) === 'q') {
        // quantile scale
        limits1.push(min);
        for(let i = 1; i < num; i++){
            const p = (values.length - 1) * i / num;
            const pb = floor(p);
            if (pb === p) limits1.push(values[pb]);
            else {
                // p > pb
                const pr = p - pb;
                limits1.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
        }
        limits1.push(max);
    } else if (mode.substr(0, 1) === 'k') {
        // k-means clustering
        /*
        implementation based on
        http://code.google.com/p/figue/source/browse/trunk/figue.js#336
        simplified for 1-d input values
        */ let cluster;
        const n = values.length;
        const assignments = new Array(n);
        const clusterSizes = new Array(num);
        let repeat = true;
        let nb_iters = 0;
        let centroids = null;
        // get seed values
        centroids = [];
        centroids.push(min);
        for(let i = 1; i < num; i++)centroids.push(min + i / num * (max - min));
        centroids.push(max);
        while(repeat){
            // assignment step
            for(let j = 0; j < num; j++)clusterSizes[j] = 0;
            for(let i = 0; i < n; i++){
                const value = values[i];
                let mindist = Number.MAX_VALUE;
                let best;
                for(let j = 0; j < num; j++){
                    const dist = abs(centroids[j] - value);
                    if (dist < mindist) {
                        mindist = dist;
                        best = j;
                    }
                    clusterSizes[best]++;
                    assignments[i] = best;
                }
            }
            // update centroids step
            const newCentroids = new Array(num);
            for(let j = 0; j < num; j++)newCentroids[j] = null;
            for(let i = 0; i < n; i++){
                cluster = assignments[i];
                if (newCentroids[cluster] === null) newCentroids[cluster] = values[i];
                else newCentroids[cluster] += values[i];
            }
            for(let j = 0; j < num; j++)newCentroids[j] *= 1 / clusterSizes[j];
            // check convergence
            repeat = false;
            for(let j = 0; j < num; j++)if (newCentroids[j] !== centroids[j]) {
                repeat = true;
                break;
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) repeat = false;
        }
        // finished k-means clustering
        // the next part is borrowed from gabrielflor.it
        const kClusters = {};
        for(let j = 0; j < num; j++)kClusters[j] = [];
        for(let i = 0; i < n; i++){
            cluster = assignments[i];
            kClusters[cluster].push(values[i]);
        }
        let tmpKMeansBreaks = [];
        for(let j = 0; j < num; j++){
            tmpKMeansBreaks.push(kClusters[j][0]);
            tmpKMeansBreaks.push(kClusters[j][kClusters[j].length - 1]);
        }
        tmpKMeansBreaks = tmpKMeansBreaks.sort((a, b)=>a - b);
        limits1.push(tmpKMeansBreaks[0]);
        for(let i = 1; i < tmpKMeansBreaks.length; i += 2){
            const v = tmpKMeansBreaks[i];
            if (!isNaN(v) && limits1.indexOf(v) === -1) limits1.push(v);
        }
    }
    return limits1;
}

},{"./type.js":"dsbh4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"103co":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _luminanceJs = require("../ops/luminance.js");
exports.default = (a, b)=>{
    // WCAG contrast ratio
    // see http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
    a = new (0, _colorJsDefault.default)(a);
    b = new (0, _colorJsDefault.default)(b);
    const l1 = a.luminance();
    const l2 = b.luminance();
    return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
};

},{"../Color.js":"86WNB","../ops/luminance.js":"9NQik","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKJFm":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b, Kl = 1, Kc = 1, Kh = 1) {
        // Delta E (CIE 2000)
        // see http://www.brucelindbloom.com/index.html?Eqn_DeltaE_CIE2000.html
        var rad2deg = function(rad) {
            return 360 * rad / (2 * PI);
        };
        var deg2rad = function(deg) {
            return 2 * PI * deg / 360;
        };
        a = new (0, _colorJsDefault.default)(a);
        b = new (0, _colorJsDefault.default)(b);
        const [L1, a1, b1] = Array.from(a.lab());
        const [L2, a2, b2] = Array.from(b.lab());
        const avgL = (L1 + L2) / 2;
        const C1 = sqrt(pow(a1, 2) + pow(b1, 2));
        const C2 = sqrt(pow(a2, 2) + pow(b2, 2));
        const avgC = (C1 + C2) / 2;
        const G = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));
        const a1p = a1 * (1 + G);
        const a2p = a2 * (1 + G);
        const C1p = sqrt(pow(a1p, 2) + pow(b1, 2));
        const C2p = sqrt(pow(a2p, 2) + pow(b2, 2));
        const avgCp = (C1p + C2p) / 2;
        const arctan1 = rad2deg(atan2(b1, a1p));
        const arctan2 = rad2deg(atan2(b2, a2p));
        const h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;
        const h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;
        const avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;
        const T = 1 - 0.17 * cos(deg2rad(avgHp - 30)) + 0.24 * cos(deg2rad(2 * avgHp)) + 0.32 * cos(deg2rad(3 * avgHp + 6)) - 0.2 * cos(deg2rad(4 * avgHp - 63));
        let deltaHp = h2p - h1p;
        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;
        deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);
        const deltaL = L2 - L1;
        const deltaCp = C2p - C1p;
        const sl = 1 + 0.015 * pow(avgL - 50, 2) / sqrt(20 + pow(avgL - 50, 2));
        const sc = 1 + 0.045 * avgCp;
        const sh = 1 + 0.015 * avgCp * T;
        const deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));
        const Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));
        const Rt = -Rc * sin(2 * deg2rad(deltaTheta));
        const result = sqrt(pow(deltaL / (Kl * sl), 2) + pow(deltaCp / (Kc * sc), 2) + pow(deltaHp / (Kh * sh), 2) + Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh)));
        return max(0, min(100, result));
    });
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
const { sqrt, pow, min, max, atan2, abs, cos, sin, exp, PI } = Math;

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3CIrA":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// simple Euclidean distance
parcelHelpers.export(exports, "default", ()=>function(a, b, mode = 'lab') {
        // Delta E (CIE 1976)
        // see http://www.brucelindbloom.com/index.html?Equations.html
        a = new (0, _colorJsDefault.default)(a);
        b = new (0, _colorJsDefault.default)(b);
        const l1 = a.get(mode);
        const l2 = b.get(mode);
        let sum_sq = 0;
        for(let i in l1){
            const d = (l1[i] || 0) - (l2[i] || 0);
            sum_sq += d * d;
        }
        return Math.sqrt(sum_sq);
    });
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i7AZI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorJs = require("../Color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
exports.default = (...args)=>{
    try {
        new (0, _colorJsDefault.default)(...args);
        return true;
    // eslint-disable-next-line
    } catch (e) {
        return false;
    }
};

},{"../Color.js":"86WNB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fP9EO":[function(require,module,exports,__globalThis) {
// some pre-defined color scales:
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chromaJs = require("../chroma.js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _indexJs = require("../io/hsl/index.js");
var _scaleJs = require("../generator/scale.js");
var _scaleJsDefault = parcelHelpers.interopDefault(_scaleJs);
exports.default = {
    cool () {
        return (0, _scaleJsDefault.default)([
            (0, _chromaJsDefault.default).hsl(180, 1, 0.9),
            (0, _chromaJsDefault.default).hsl(250, 0.7, 0.4)
        ]);
    },
    hot () {
        return (0, _scaleJsDefault.default)([
            '#000',
            '#f00',
            '#ff0',
            '#fff'
        ], [
            0,
            0.25,
            0.75,
            1
        ]).mode('rgb');
    }
};

},{"../chroma.js":"jNNC2","../io/hsl/index.js":"jIO0h","../generator/scale.js":"gBPPh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9uaXl":[function(require,module,exports,__globalThis) {
/**
    ColorBrewer colors for chroma.js

    Copyright (c) 2002 Cynthia Brewer, Mark Harrower, and The
    Pennsylvania State University.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed
    under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
    CONDITIONS OF ANY KIND, either express or implied. See the License for the
    specific language governing permissions and limitations under the License.
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const colorbrewer = {
    // sequential
    OrRd: [
        '#fff7ec',
        '#fee8c8',
        '#fdd49e',
        '#fdbb84',
        '#fc8d59',
        '#ef6548',
        '#d7301f',
        '#b30000',
        '#7f0000'
    ],
    PuBu: [
        '#fff7fb',
        '#ece7f2',
        '#d0d1e6',
        '#a6bddb',
        '#74a9cf',
        '#3690c0',
        '#0570b0',
        '#045a8d',
        '#023858'
    ],
    BuPu: [
        '#f7fcfd',
        '#e0ecf4',
        '#bfd3e6',
        '#9ebcda',
        '#8c96c6',
        '#8c6bb1',
        '#88419d',
        '#810f7c',
        '#4d004b'
    ],
    Oranges: [
        '#fff5eb',
        '#fee6ce',
        '#fdd0a2',
        '#fdae6b',
        '#fd8d3c',
        '#f16913',
        '#d94801',
        '#a63603',
        '#7f2704'
    ],
    BuGn: [
        '#f7fcfd',
        '#e5f5f9',
        '#ccece6',
        '#99d8c9',
        '#66c2a4',
        '#41ae76',
        '#238b45',
        '#006d2c',
        '#00441b'
    ],
    YlOrBr: [
        '#ffffe5',
        '#fff7bc',
        '#fee391',
        '#fec44f',
        '#fe9929',
        '#ec7014',
        '#cc4c02',
        '#993404',
        '#662506'
    ],
    YlGn: [
        '#ffffe5',
        '#f7fcb9',
        '#d9f0a3',
        '#addd8e',
        '#78c679',
        '#41ab5d',
        '#238443',
        '#006837',
        '#004529'
    ],
    Reds: [
        '#fff5f0',
        '#fee0d2',
        '#fcbba1',
        '#fc9272',
        '#fb6a4a',
        '#ef3b2c',
        '#cb181d',
        '#a50f15',
        '#67000d'
    ],
    RdPu: [
        '#fff7f3',
        '#fde0dd',
        '#fcc5c0',
        '#fa9fb5',
        '#f768a1',
        '#dd3497',
        '#ae017e',
        '#7a0177',
        '#49006a'
    ],
    Greens: [
        '#f7fcf5',
        '#e5f5e0',
        '#c7e9c0',
        '#a1d99b',
        '#74c476',
        '#41ab5d',
        '#238b45',
        '#006d2c',
        '#00441b'
    ],
    YlGnBu: [
        '#ffffd9',
        '#edf8b1',
        '#c7e9b4',
        '#7fcdbb',
        '#41b6c4',
        '#1d91c0',
        '#225ea8',
        '#253494',
        '#081d58'
    ],
    Purples: [
        '#fcfbfd',
        '#efedf5',
        '#dadaeb',
        '#bcbddc',
        '#9e9ac8',
        '#807dba',
        '#6a51a3',
        '#54278f',
        '#3f007d'
    ],
    GnBu: [
        '#f7fcf0',
        '#e0f3db',
        '#ccebc5',
        '#a8ddb5',
        '#7bccc4',
        '#4eb3d3',
        '#2b8cbe',
        '#0868ac',
        '#084081'
    ],
    Greys: [
        '#ffffff',
        '#f0f0f0',
        '#d9d9d9',
        '#bdbdbd',
        '#969696',
        '#737373',
        '#525252',
        '#252525',
        '#000000'
    ],
    YlOrRd: [
        '#ffffcc',
        '#ffeda0',
        '#fed976',
        '#feb24c',
        '#fd8d3c',
        '#fc4e2a',
        '#e31a1c',
        '#bd0026',
        '#800026'
    ],
    PuRd: [
        '#f7f4f9',
        '#e7e1ef',
        '#d4b9da',
        '#c994c7',
        '#df65b0',
        '#e7298a',
        '#ce1256',
        '#980043',
        '#67001f'
    ],
    Blues: [
        '#f7fbff',
        '#deebf7',
        '#c6dbef',
        '#9ecae1',
        '#6baed6',
        '#4292c6',
        '#2171b5',
        '#08519c',
        '#08306b'
    ],
    PuBuGn: [
        '#fff7fb',
        '#ece2f0',
        '#d0d1e6',
        '#a6bddb',
        '#67a9cf',
        '#3690c0',
        '#02818a',
        '#016c59',
        '#014636'
    ],
    Viridis: [
        '#440154',
        '#482777',
        '#3f4a8a',
        '#31678e',
        '#26838f',
        '#1f9d8a',
        '#6cce5a',
        '#b6de2b',
        '#fee825'
    ],
    // diverging
    Spectral: [
        '#9e0142',
        '#d53e4f',
        '#f46d43',
        '#fdae61',
        '#fee08b',
        '#ffffbf',
        '#e6f598',
        '#abdda4',
        '#66c2a5',
        '#3288bd',
        '#5e4fa2'
    ],
    RdYlGn: [
        '#a50026',
        '#d73027',
        '#f46d43',
        '#fdae61',
        '#fee08b',
        '#ffffbf',
        '#d9ef8b',
        '#a6d96a',
        '#66bd63',
        '#1a9850',
        '#006837'
    ],
    RdBu: [
        '#67001f',
        '#b2182b',
        '#d6604d',
        '#f4a582',
        '#fddbc7',
        '#f7f7f7',
        '#d1e5f0',
        '#92c5de',
        '#4393c3',
        '#2166ac',
        '#053061'
    ],
    PiYG: [
        '#8e0152',
        '#c51b7d',
        '#de77ae',
        '#f1b6da',
        '#fde0ef',
        '#f7f7f7',
        '#e6f5d0',
        '#b8e186',
        '#7fbc41',
        '#4d9221',
        '#276419'
    ],
    PRGn: [
        '#40004b',
        '#762a83',
        '#9970ab',
        '#c2a5cf',
        '#e7d4e8',
        '#f7f7f7',
        '#d9f0d3',
        '#a6dba0',
        '#5aae61',
        '#1b7837',
        '#00441b'
    ],
    RdYlBu: [
        '#a50026',
        '#d73027',
        '#f46d43',
        '#fdae61',
        '#fee090',
        '#ffffbf',
        '#e0f3f8',
        '#abd9e9',
        '#74add1',
        '#4575b4',
        '#313695'
    ],
    BrBG: [
        '#543005',
        '#8c510a',
        '#bf812d',
        '#dfc27d',
        '#f6e8c3',
        '#f5f5f5',
        '#c7eae5',
        '#80cdc1',
        '#35978f',
        '#01665e',
        '#003c30'
    ],
    RdGy: [
        '#67001f',
        '#b2182b',
        '#d6604d',
        '#f4a582',
        '#fddbc7',
        '#ffffff',
        '#e0e0e0',
        '#bababa',
        '#878787',
        '#4d4d4d',
        '#1a1a1a'
    ],
    PuOr: [
        '#7f3b08',
        '#b35806',
        '#e08214',
        '#fdb863',
        '#fee0b6',
        '#f7f7f7',
        '#d8daeb',
        '#b2abd2',
        '#8073ac',
        '#542788',
        '#2d004b'
    ],
    // qualitative
    Set2: [
        '#66c2a5',
        '#fc8d62',
        '#8da0cb',
        '#e78ac3',
        '#a6d854',
        '#ffd92f',
        '#e5c494',
        '#b3b3b3'
    ],
    Accent: [
        '#7fc97f',
        '#beaed4',
        '#fdc086',
        '#ffff99',
        '#386cb0',
        '#f0027f',
        '#bf5b17',
        '#666666'
    ],
    Set1: [
        '#e41a1c',
        '#377eb8',
        '#4daf4a',
        '#984ea3',
        '#ff7f00',
        '#ffff33',
        '#a65628',
        '#f781bf',
        '#999999'
    ],
    Set3: [
        '#8dd3c7',
        '#ffffb3',
        '#bebada',
        '#fb8072',
        '#80b1d3',
        '#fdb462',
        '#b3de69',
        '#fccde5',
        '#d9d9d9',
        '#bc80bd',
        '#ccebc5',
        '#ffed6f'
    ],
    Dark2: [
        '#1b9e77',
        '#d95f02',
        '#7570b3',
        '#e7298a',
        '#66a61e',
        '#e6ab02',
        '#a6761d',
        '#666666'
    ],
    Paired: [
        '#a6cee3',
        '#1f78b4',
        '#b2df8a',
        '#33a02c',
        '#fb9a99',
        '#e31a1c',
        '#fdbf6f',
        '#ff7f00',
        '#cab2d6',
        '#6a3d9a',
        '#ffff99',
        '#b15928'
    ],
    Pastel2: [
        '#b3e2cd',
        '#fdcdac',
        '#cbd5e8',
        '#f4cae4',
        '#e6f5c9',
        '#fff2ae',
        '#f1e2cc',
        '#cccccc'
    ],
    Pastel1: [
        '#fbb4ae',
        '#b3cde3',
        '#ccebc5',
        '#decbe4',
        '#fed9a6',
        '#ffffcc',
        '#e5d8bd',
        '#fddaec',
        '#f2f2f2'
    ]
};
// add lowercase aliases for case-insensitive matches
for (let key of Object.keys(colorbrewer))colorbrewer[key.toLowerCase()] = colorbrewer[key];
exports.default = colorbrewer;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"agkns":[function(require,module,exports,__globalThis) {
/*!
 * Paper.js v0.12.18 - The Swiss Army Knife of Vector Graphics Scripting.
 * http://paperjs.org/
 *
 * Copyright (c) 2011 - 2020, Jürg Lehni & Jonathan Puckey
 * http://juerglehni.com/ & https://puckey.studio/
 *
 * Distributed under the MIT license. See LICENSE file for details.
 *
 * All rights reserved.
 *
 * Date: Wed Jul 17 14:57:24 2024 +0200
 *
 ***
 *
 * Straps.js - Class inheritance library with support for bean-style accessors
 *
 * Copyright (c) 2006 - 2020 Jürg Lehni
 * http://juerglehni.com/
 *
 * Distributed under the MIT license.
 *
 ***
 *
 * Acorn.js
 * https://marijnhaverbeke.nl/acorn/
 *
 * Acorn is a tiny, fast JavaScript parser written in JavaScript,
 * created by Marijn Haverbeke and released under an MIT license.
 *
 */ var paper = (function(self1, undefined) {
    self1 = self1 || require("10b6d6e628bbae73");
    var window = self1.window, document = self1.document;
    var Base = new function() {
        var hidden = /^(statics|enumerable|beans|preserve)$/, array = [], slice = array.slice, create = Object.create, describe = Object.getOwnPropertyDescriptor, define1 = Object.defineProperty, forEach = array.forEach || function(iter, bind) {
            for(var i = 0, l = this.length; i < l; i++)iter.call(bind, this[i], i, this);
        }, forIn = function(iter, bind) {
            for(var i in this)if (this.hasOwnProperty(i)) iter.call(bind, this[i], i, this);
        }, set = Object.assign || function(dst) {
            for(var i = 1, l = arguments.length; i < l; i++){
                var src = arguments[i];
                for(var key in src)if (src.hasOwnProperty(key)) dst[key] = src[key];
            }
            return dst;
        }, each = function(obj, iter, bind) {
            if (obj) {
                var desc = describe(obj, 'length');
                (desc && typeof desc.value === 'number' ? forEach : forIn).call(obj, iter, bind = bind || obj);
            }
            return bind;
        };
        function inject(dest, src, enumerable, beans, preserve) {
            var beansNames = {};
            function field(name, val) {
                val = val || (val = describe(src, name)) && (val.get ? val : val.value);
                if (typeof val === 'string' && val[0] === '#') val = dest[val.substring(1)] || val;
                var isFunc = typeof val === 'function', res = val, prev = preserve || isFunc && !val.base ? val && val.get ? name in dest : dest[name] : null, bean;
                if (!preserve || !prev) {
                    if (isFunc && prev) val.base = prev;
                    if (isFunc && beans !== false && (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/))) beansNames[bean[3].toLowerCase() + bean[4]] = bean[2];
                    if (!res || isFunc || !res.get || typeof res.get !== 'function' || !Base.isPlainObject(res)) res = {
                        value: res,
                        writable: true
                    };
                    if ((describe(dest, name) || {
                        configurable: true
                    }).configurable) {
                        res.configurable = true;
                        res.enumerable = enumerable != null ? enumerable : !bean;
                    }
                    define1(dest, name, res);
                }
            }
            if (src) {
                for(var name in src)if (src.hasOwnProperty(name) && !hidden.test(name)) field(name);
                for(var name in beansNames){
                    var part = beansNames[name], set = dest['set' + part], get = dest['get' + part] || set && dest['is' + part];
                    if (get && (beans === true || get.length === 0)) field(name, {
                        get: get,
                        set: set
                    });
                }
            }
            return dest;
        }
        function Base() {
            for(var i = 0, l = arguments.length; i < l; i++){
                var src = arguments[i];
                if (src) set(this, src);
            }
            return this;
        }
        return inject(Base, {
            inject: function(src) {
                if (src) {
                    var statics = src.statics === true ? src : src.statics, beans = src.beans, preserve = src.preserve;
                    if (statics !== src) inject(this.prototype, src, src.enumerable, beans, preserve);
                    inject(this, statics, null, beans, preserve);
                }
                for(var i = 1, l = arguments.length; i < l; i++)this.inject(arguments[i]);
                return this;
            },
            extend: function() {
                var base = this, ctor, proto;
                for(var i = 0, obj, l = arguments.length; i < l && !(ctor && proto); i++){
                    obj = arguments[i];
                    ctor = ctor || obj.initialize;
                    proto = proto || obj.prototype;
                }
                ctor = ctor || function() {
                    base.apply(this, arguments);
                };
                proto = ctor.prototype = proto || create(this.prototype);
                define1(proto, 'constructor', {
                    value: ctor,
                    writable: true,
                    configurable: true
                });
                inject(ctor, this);
                if (arguments.length) this.inject.apply(ctor, arguments);
                ctor.base = base;
                return ctor;
            }
        }).inject({
            enumerable: false,
            initialize: Base,
            set: Base,
            inject: function() {
                for(var i = 0, l = arguments.length; i < l; i++){
                    var src = arguments[i];
                    if (src) inject(this, src, src.enumerable, src.beans, src.preserve);
                }
                return this;
            },
            extend: function() {
                var res = create(this);
                return res.inject.apply(res, arguments);
            },
            each: function(iter, bind) {
                return each(this, iter, bind);
            },
            clone: function() {
                return new this.constructor(this);
            },
            statics: {
                set: set,
                each: each,
                create: create,
                define: define1,
                describe: describe,
                clone: function(obj) {
                    return set(new obj.constructor(), obj);
                },
                isPlainObject: function(obj) {
                    var ctor = obj != null && obj.constructor;
                    return ctor && (ctor === Object || ctor === Base || ctor.name === 'Object');
                },
                pick: function(a, b) {
                    return a !== undefined ? a : b;
                },
                slice: function(list, begin, end) {
                    return slice.call(list, begin, end);
                }
            }
        });
    };
    module.exports = Base;
    Base.inject({
        enumerable: false,
        toString: function() {
            return this._id != null ? (this._class || 'Object') + (this._name ? " '" + this._name + "'" : ' @' + this._id) : '{ ' + Base.each(this, function(value, key) {
                if (!/^_/.test(key)) {
                    var type = typeof value;
                    this.push(key + ': ' + (type === 'number' ? Formatter.instance.number(value) : type === 'string' ? "'" + value + "'" : value));
                }
            }, []).join(', ') + ' }';
        },
        getClassName: function() {
            return this._class || '';
        },
        importJSON: function(json) {
            return Base.importJSON(json, this);
        },
        exportJSON: function(options) {
            return Base.exportJSON(this, options);
        },
        toJSON: function() {
            return Base.serialize(this);
        },
        set: function(props, exclude) {
            if (props) Base.filter(this, props, exclude, this._prioritize);
            return this;
        }
    }, {
        beans: false,
        statics: {
            exports: {},
            extend: function extend() {
                var res = extend.base.apply(this, arguments), name = res.prototype._class;
                if (name && !Base.exports[name]) Base.exports[name] = res;
                return res;
            },
            equals: function(obj1, obj2) {
                if (obj1 === obj2) return true;
                if (obj1 && obj1.equals) return obj1.equals(obj2);
                if (obj2 && obj2.equals) return obj2.equals(obj1);
                if (obj1 && obj2 && typeof obj1 === 'object' && typeof obj2 === 'object') {
                    if (Array.isArray(obj1) && Array.isArray(obj2)) {
                        var length = obj1.length;
                        if (length !== obj2.length) return false;
                        while(length--){
                            if (!Base.equals(obj1[length], obj2[length])) return false;
                        }
                    } else {
                        var keys = Object.keys(obj1), length = keys.length;
                        if (length !== Object.keys(obj2).length) return false;
                        while(length--){
                            var key = keys[length];
                            if (!(obj2.hasOwnProperty(key) && Base.equals(obj1[key], obj2[key]))) return false;
                        }
                    }
                    return true;
                }
                return false;
            },
            read: function(list, start, options, amount) {
                if (this === Base) {
                    var value = this.peek(list, start);
                    list.__index++;
                    return value;
                }
                var proto = this.prototype, readIndex = proto._readIndex, begin = start || readIndex && list.__index || 0, length = list.length, obj = list[begin];
                amount = amount || length - begin;
                if (obj instanceof this || options && options.readNull && obj == null && amount <= 1) {
                    if (readIndex) list.__index = begin + 1;
                    return obj && options && options.clone ? obj.clone() : obj;
                }
                obj = Base.create(proto);
                if (readIndex) obj.__read = true;
                obj = obj.initialize.apply(obj, begin > 0 || begin + amount < length ? Base.slice(list, begin, begin + amount) : list) || obj;
                if (readIndex) {
                    list.__index = begin + obj.__read;
                    var filtered = obj.__filtered;
                    if (filtered) {
                        list.__filtered = filtered;
                        obj.__filtered = undefined;
                    }
                    obj.__read = undefined;
                }
                return obj;
            },
            peek: function(list, start) {
                return list[list.__index = start || list.__index || 0];
            },
            remain: function(list) {
                return list.length - (list.__index || 0);
            },
            readList: function(list, start, options, amount) {
                var res = [], entry, begin = start || 0, end = amount ? begin + amount : list.length;
                for(var i = begin; i < end; i++)res.push(Array.isArray(entry = list[i]) ? this.read(entry, 0, options) : this.read(list, i, options, 1));
                return res;
            },
            readNamed: function(list, name, start, options, amount) {
                var value = this.getNamed(list, name), hasValue = value !== undefined;
                if (hasValue) {
                    var filtered = list.__filtered;
                    if (!filtered) {
                        var source = this.getSource(list);
                        filtered = list.__filtered = Base.create(source);
                        filtered.__unfiltered = source;
                    }
                    filtered[name] = undefined;
                }
                return this.read(hasValue ? [
                    value
                ] : list, start, options, amount);
            },
            readSupported: function(list, dest) {
                var source = this.getSource(list), that = this, read = false;
                if (source) Object.keys(source).forEach(function(key) {
                    if (key in dest) {
                        var value = that.readNamed(list, key);
                        if (value !== undefined) dest[key] = value;
                        read = true;
                    }
                });
                return read;
            },
            getSource: function(list) {
                var source = list.__source;
                if (source === undefined) {
                    var arg = list.length === 1 && list[0];
                    source = list.__source = arg && Base.isPlainObject(arg) ? arg : null;
                }
                return source;
            },
            getNamed: function(list, name) {
                var source = this.getSource(list);
                if (source) return name ? source[name] : list.__filtered || source;
            },
            hasNamed: function(list, name) {
                return !!this.getNamed(list, name);
            },
            filter: function(dest, source, exclude, prioritize) {
                var processed;
                function handleKey(key) {
                    if (!(exclude && key in exclude) && !(processed && key in processed)) {
                        var value = source[key];
                        if (value !== undefined) dest[key] = value;
                    }
                }
                if (prioritize) {
                    var keys = {};
                    for(var i = 0, key, l = prioritize.length; i < l; i++)if ((key = prioritize[i]) in source) {
                        handleKey(key);
                        keys[key] = true;
                    }
                    processed = keys;
                }
                Object.keys(source.__unfiltered || source).forEach(handleKey);
                return dest;
            },
            isPlainValue: function(obj, asString) {
                return Base.isPlainObject(obj) || Array.isArray(obj) || asString && typeof obj === 'string';
            },
            serialize: function(obj, options, compact, dictionary) {
                options = options || {};
                var isRoot = !dictionary, res;
                if (isRoot) {
                    options.formatter = new Formatter(options.precision);
                    dictionary = {
                        length: 0,
                        definitions: {},
                        references: {},
                        add: function(item, create) {
                            var id = '#' + item._id, ref = this.references[id];
                            if (!ref) {
                                this.length++;
                                var res = create.call(item), name = item._class;
                                if (name && res[0] !== name) res.unshift(name);
                                this.definitions[id] = res;
                                ref = this.references[id] = [
                                    id
                                ];
                            }
                            return ref;
                        }
                    };
                }
                if (obj && obj._serialize) {
                    res = obj._serialize(options, dictionary);
                    var name = obj._class;
                    if (name && !obj._compactSerialize && (isRoot || !compact) && res[0] !== name) res.unshift(name);
                } else if (Array.isArray(obj)) {
                    res = [];
                    for(var i = 0, l = obj.length; i < l; i++)res[i] = Base.serialize(obj[i], options, compact, dictionary);
                } else if (Base.isPlainObject(obj)) {
                    res = {};
                    var keys = Object.keys(obj);
                    for(var i = 0, l = keys.length; i < l; i++){
                        var key = keys[i];
                        res[key] = Base.serialize(obj[key], options, compact, dictionary);
                    }
                } else if (typeof obj === 'number') res = options.formatter.number(obj, options.precision);
                else res = obj;
                return isRoot && dictionary.length > 0 ? [
                    [
                        'dictionary',
                        dictionary.definitions
                    ],
                    res
                ] : res;
            },
            deserialize: function(json, create, _data, _setDictionary, _isRoot) {
                var res = json, isFirst = !_data, hasDictionary = isFirst && json && json.length && json[0][0] === 'dictionary';
                _data = _data || {};
                if (Array.isArray(json)) {
                    var type = json[0], isDictionary = type === 'dictionary';
                    if (json.length == 1 && /^#/.test(type)) return _data.dictionary[type];
                    type = Base.exports[type];
                    res = [];
                    for(var i = type ? 1 : 0, l = json.length; i < l; i++)res.push(Base.deserialize(json[i], create, _data, isDictionary, hasDictionary));
                    if (type) {
                        var args = res;
                        if (create) res = create(type, args, isFirst || _isRoot);
                        else res = new type(args);
                    }
                } else if (Base.isPlainObject(json)) {
                    res = {};
                    if (_setDictionary) _data.dictionary = res;
                    for(var key in json)res[key] = Base.deserialize(json[key], create, _data);
                }
                return hasDictionary ? res[1] : res;
            },
            exportJSON: function(obj, options) {
                var json = Base.serialize(obj, options);
                return options && options.asString == false ? json : JSON.stringify(json);
            },
            importJSON: function(json, target) {
                return Base.deserialize(typeof json === 'string' ? JSON.parse(json) : json, function(ctor, args, isRoot) {
                    var useTarget = isRoot && target && target.constructor === ctor, obj = useTarget ? target : Base.create(ctor.prototype);
                    if (args.length === 1 && obj instanceof Item && (useTarget || !(obj instanceof Layer))) {
                        var arg = args[0];
                        if (Base.isPlainObject(arg)) {
                            arg.insert = false;
                            if (useTarget) args = args.concat([
                                Item.INSERT
                            ]);
                        }
                    }
                    (useTarget ? obj.set : ctor).apply(obj, args);
                    if (useTarget) target = null;
                    return obj;
                });
            },
            push: function(list, items) {
                var itemsLength = items.length;
                if (itemsLength < 4096) list.push.apply(list, items);
                else {
                    var startLength = list.length;
                    list.length += itemsLength;
                    for(var i = 0; i < itemsLength; i++)list[startLength + i] = items[i];
                }
                return list;
            },
            splice: function(list, items, index, remove) {
                var amount = items && items.length, append = index === undefined;
                index = append ? list.length : index;
                if (index > list.length) index = list.length;
                for(var i = 0; i < amount; i++)items[i]._index = index + i;
                if (append) {
                    Base.push(list, items);
                    return [];
                } else {
                    var args = [
                        index,
                        remove
                    ];
                    if (items) Base.push(args, items);
                    var removed = list.splice.apply(list, args);
                    for(var i = 0, l = removed.length; i < l; i++)removed[i]._index = undefined;
                    for(var i = index + amount, l = list.length; i < l; i++)list[i]._index = i;
                    return removed;
                }
            },
            capitalize: function(str) {
                return str.replace(/\b[a-z]/g, function(match) {
                    return match.toUpperCase();
                });
            },
            camelize: function(str) {
                return str.replace(/-(.)/g, function(match, chr) {
                    return chr.toUpperCase();
                });
            },
            hyphenate: function(str) {
                return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
            }
        }
    });
    var Emitter = {
        on: function(type, func) {
            if (typeof type !== 'string') Base.each(type, function(value, key) {
                this.on(key, value);
            }, this);
            else {
                var types = this._eventTypes, entry = types && types[type], handlers = this._callbacks = this._callbacks || {};
                handlers = handlers[type] = handlers[type] || [];
                if (handlers.indexOf(func) === -1) {
                    handlers.push(func);
                    if (entry && entry.install && handlers.length === 1) entry.install.call(this, type);
                }
            }
            return this;
        },
        off: function(type, func) {
            if (typeof type !== 'string') {
                Base.each(type, function(value, key) {
                    this.off(key, value);
                }, this);
                return;
            }
            var types = this._eventTypes, entry = types && types[type], handlers = this._callbacks && this._callbacks[type], index;
            if (handlers) {
                if (!func || (index = handlers.indexOf(func)) !== -1 && handlers.length === 1) {
                    if (entry && entry.uninstall) entry.uninstall.call(this, type);
                    delete this._callbacks[type];
                } else if (index !== -1) handlers.splice(index, 1);
            }
            return this;
        },
        once: function(type, func) {
            return this.on(type, function handler() {
                func.apply(this, arguments);
                this.off(type, handler);
            });
        },
        emit: function(type, event) {
            var handlers = this._callbacks && this._callbacks[type];
            if (!handlers) return false;
            var args = Base.slice(arguments, 1), setTarget = event && event.target && !event.currentTarget;
            handlers = handlers.slice();
            if (setTarget) event.currentTarget = this;
            for(var i = 0, l = handlers.length; i < l; i++)if (handlers[i].apply(this, args) == false) {
                if (event && event.stop) event.stop();
                break;
            }
            if (setTarget) delete event.currentTarget;
            return true;
        },
        responds: function(type) {
            return !!(this._callbacks && this._callbacks[type]);
        },
        attach: '#on',
        detach: '#off',
        fire: '#emit',
        _installEvents: function(install) {
            var types = this._eventTypes, handlers = this._callbacks, key = install ? 'install' : 'uninstall';
            if (types) {
                for(var type in handlers)if (handlers[type].length > 0) {
                    var entry = types[type], func = entry && entry[key];
                    if (func) func.call(this, type);
                }
            }
        },
        statics: {
            inject: function inject(src) {
                var events = src._events;
                if (events) {
                    var types = {};
                    Base.each(events, function(entry, key) {
                        var isString = typeof entry === 'string', name = isString ? entry : key, part = Base.capitalize(name), type = name.substring(2).toLowerCase();
                        types[type] = isString ? {} : entry;
                        name = '_' + name;
                        src['get' + part] = function() {
                            return this[name];
                        };
                        src['set' + part] = function(func) {
                            var prev = this[name];
                            if (prev) this.off(type, prev);
                            if (func) this.on(type, func);
                            this[name] = func;
                        };
                    });
                    src._eventTypes = types;
                }
                return inject.base.apply(this, arguments);
            }
        }
    };
    var PaperScope = Base.extend({
        _class: 'PaperScope',
        initialize: function PaperScope() {
            paper = this;
            this.settings = new Base({
                applyMatrix: true,
                insertItems: true,
                handleSize: 4,
                hitTolerance: 0
            });
            this.project = null;
            this.projects = [];
            this.tools = [];
            this._id = PaperScope._id++;
            PaperScope._scopes[this._id] = this;
            var proto = PaperScope.prototype;
            if (!this.support) {
                var ctx = CanvasProvider.getContext(1, 1) || {};
                proto.support = {
                    nativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,
                    nativeBlendModes: BlendMode.nativeModes
                };
                CanvasProvider.release(ctx);
            }
            if (!this.agent) {
                var user = self1.navigator.userAgent.toLowerCase(), os = (/(darwin|win|mac|linux|freebsd|sunos)/.exec(user) || [])[0], platform = os === 'darwin' ? 'mac' : os, agent = proto.agent = proto.browser = {
                    platform: platform
                };
                if (platform) agent[platform] = true;
                user.replace(/(opera|chrome|safari|webkit|firefox|msie|trident|atom|node|jsdom)\/?\s*([.\d]+)(?:.*version\/([.\d]+))?(?:.*rv\:v?([.\d]+))?/g, function(match, n, v1, v2, rv) {
                    if (!agent.chrome) {
                        var v = n === 'opera' ? v2 : /^(node|trident)$/.test(n) ? rv : v1;
                        agent.version = v;
                        agent.versionNumber = parseFloat(v);
                        n = ({
                            trident: 'msie',
                            jsdom: 'node'
                        })[n] || n;
                        agent.name = n;
                        agent[n] = true;
                    }
                });
                if (agent.chrome) delete agent.webkit;
                if (agent.atom) delete agent.chrome;
            }
        },
        version: "0.12.18",
        getView: function() {
            var project = this.project;
            return project && project._view;
        },
        getPaper: function() {
            return this;
        },
        execute: function(code, options) {
            var exports = paper.PaperScript.execute(code, this, options);
            View.updateFocus();
            return exports;
        },
        install: function(scope) {
            var that = this;
            Base.each([
                'project',
                'view',
                'tool'
            ], function(key) {
                Base.define(scope, key, {
                    configurable: true,
                    get: function() {
                        return that[key];
                    }
                });
            });
            for(var key in this)if (!/^_/.test(key) && this[key]) scope[key] = this[key];
        },
        setup: function(element) {
            paper = this;
            this.project = new Project(element);
            return this;
        },
        createCanvas: function(width, height) {
            return CanvasProvider.getCanvas(width, height);
        },
        activate: function() {
            paper = this;
        },
        clear: function() {
            var projects = this.projects, tools = this.tools;
            for(var i = projects.length - 1; i >= 0; i--)projects[i].remove();
            for(var i = tools.length - 1; i >= 0; i--)tools[i].remove();
        },
        remove: function() {
            this.clear();
            delete PaperScope._scopes[this._id];
        },
        statics: new function() {
            function handleAttribute(name) {
                name += 'Attribute';
                return function(el, attr) {
                    return el[name](attr) || el[name]('data-paper-' + attr);
                };
            }
            return {
                _scopes: {},
                _id: 0,
                get: function(id) {
                    return this._scopes[id] || null;
                },
                getAttribute: handleAttribute('get'),
                hasAttribute: handleAttribute('has')
            };
        }
    });
    var PaperScopeItem = Base.extend(Emitter, {
        initialize: function(activate) {
            this._scope = paper;
            this._index = this._scope[this._list].push(this) - 1;
            if (activate || !this._scope[this._reference]) this.activate();
        },
        activate: function() {
            if (!this._scope) return false;
            var prev = this._scope[this._reference];
            if (prev && prev !== this) prev.emit('deactivate');
            this._scope[this._reference] = this;
            this.emit('activate', prev);
            return true;
        },
        isActive: function() {
            return this._scope[this._reference] === this;
        },
        remove: function() {
            if (this._index == null) return false;
            Base.splice(this._scope[this._list], null, this._index, 1);
            if (this._scope[this._reference] == this) this._scope[this._reference] = null;
            this._scope = null;
            return true;
        },
        getView: function() {
            return this._scope.getView();
        }
    });
    var CollisionDetection = {
        findItemBoundsCollisions: function(items1, items2, tolerance) {
            function getBounds(items) {
                var bounds = new Array(items.length);
                for(var i = 0; i < items.length; i++){
                    var rect = items[i].getBounds();
                    bounds[i] = [
                        rect.left,
                        rect.top,
                        rect.right,
                        rect.bottom
                    ];
                }
                return bounds;
            }
            var bounds1 = getBounds(items1), bounds2 = !items2 || items2 === items1 ? bounds1 : getBounds(items2);
            return this.findBoundsCollisions(bounds1, bounds2, tolerance || 0);
        },
        findCurveBoundsCollisions: function(curves1, curves2, tolerance, bothAxis) {
            function getBounds(curves) {
                var min = Math.min, max = Math.max, bounds = new Array(curves.length);
                for(var i = 0; i < curves.length; i++){
                    var v = curves[i];
                    bounds[i] = [
                        min(v[0], v[2], v[4], v[6]),
                        min(v[1], v[3], v[5], v[7]),
                        max(v[0], v[2], v[4], v[6]),
                        max(v[1], v[3], v[5], v[7])
                    ];
                }
                return bounds;
            }
            var bounds1 = getBounds(curves1), bounds2 = !curves2 || curves2 === curves1 ? bounds1 : getBounds(curves2);
            if (bothAxis) {
                var hor = this.findBoundsCollisions(bounds1, bounds2, tolerance || 0, false, true), ver = this.findBoundsCollisions(bounds1, bounds2, tolerance || 0, true, true), list = [];
                for(var i = 0, l = hor.length; i < l; i++)list[i] = {
                    hor: hor[i],
                    ver: ver[i]
                };
                return list;
            }
            return this.findBoundsCollisions(bounds1, bounds2, tolerance || 0);
        },
        findBoundsCollisions: function(boundsA, boundsB, tolerance, sweepVertical, onlySweepAxisCollisions) {
            var self1 = !boundsB || boundsA === boundsB, allBounds = self1 ? boundsA : boundsA.concat(boundsB), lengthA = boundsA.length, lengthAll = allBounds.length;
            function binarySearch(indices, coord, value) {
                var lo = 0, hi = indices.length;
                while(lo < hi){
                    var mid = hi + lo >>> 1;
                    if (allBounds[indices[mid]][coord] < value) lo = mid + 1;
                    else hi = mid;
                }
                return lo - 1;
            }
            var pri0 = sweepVertical ? 1 : 0, pri1 = pri0 + 2, sec0 = sweepVertical ? 0 : 1, sec1 = sec0 + 2;
            var allIndicesByPri0 = new Array(lengthAll);
            for(var i = 0; i < lengthAll; i++)allIndicesByPri0[i] = i;
            allIndicesByPri0.sort(function(i1, i2) {
                return allBounds[i1][pri0] - allBounds[i2][pri0];
            });
            var activeIndicesByPri1 = [], allCollisions = new Array(lengthA);
            for(var i = 0; i < lengthAll; i++){
                var curIndex = allIndicesByPri0[i], curBounds = allBounds[curIndex], origIndex = self1 ? curIndex : curIndex - lengthA, isCurrentA = curIndex < lengthA, isCurrentB = self1 || !isCurrentA, curCollisions = isCurrentA ? [] : null;
                if (activeIndicesByPri1.length) {
                    var pruneCount = binarySearch(activeIndicesByPri1, pri1, curBounds[pri0] - tolerance) + 1;
                    activeIndicesByPri1.splice(0, pruneCount);
                    if (self1 && onlySweepAxisCollisions) {
                        curCollisions = curCollisions.concat(activeIndicesByPri1);
                        for(var j = 0; j < activeIndicesByPri1.length; j++){
                            var activeIndex = activeIndicesByPri1[j];
                            allCollisions[activeIndex].push(origIndex);
                        }
                    } else {
                        var curSec1 = curBounds[sec1], curSec0 = curBounds[sec0];
                        for(var j = 0; j < activeIndicesByPri1.length; j++){
                            var activeIndex = activeIndicesByPri1[j], activeBounds = allBounds[activeIndex], isActiveA = activeIndex < lengthA, isActiveB = self1 || activeIndex >= lengthA;
                            if (onlySweepAxisCollisions || (isCurrentA && isActiveB || isCurrentB && isActiveA) && curSec1 >= activeBounds[sec0] - tolerance && curSec0 <= activeBounds[sec1] + tolerance) {
                                if (isCurrentA && isActiveB) curCollisions.push(self1 ? activeIndex : activeIndex - lengthA);
                                if (isCurrentB && isActiveA) allCollisions[activeIndex].push(origIndex);
                            }
                        }
                    }
                }
                if (isCurrentA) {
                    if (boundsA === boundsB) curCollisions.push(curIndex);
                    allCollisions[curIndex] = curCollisions;
                }
                if (activeIndicesByPri1.length) {
                    var curPri1 = curBounds[pri1], index = binarySearch(activeIndicesByPri1, pri1, curPri1);
                    activeIndicesByPri1.splice(index + 1, 0, curIndex);
                } else activeIndicesByPri1.push(curIndex);
            }
            for(var i = 0; i < allCollisions.length; i++){
                var collisions = allCollisions[i];
                if (collisions) collisions.sort(function(i1, i2) {
                    return i1 - i2;
                });
            }
            return allCollisions;
        }
    };
    var Formatter = Base.extend({
        initialize: function(precision) {
            this.precision = Base.pick(precision, 5);
            this.multiplier = Math.pow(10, this.precision);
        },
        number: function(val) {
            return this.precision < 16 ? Math.round(val * this.multiplier) / this.multiplier : val;
        },
        pair: function(val1, val2, separator) {
            return this.number(val1) + (separator || ',') + this.number(val2);
        },
        point: function(val, separator) {
            return this.number(val.x) + (separator || ',') + this.number(val.y);
        },
        size: function(val, separator) {
            return this.number(val.width) + (separator || ',') + this.number(val.height);
        },
        rectangle: function(val, separator) {
            return this.point(val, separator) + (separator || ',') + this.size(val, separator);
        }
    });
    Formatter.instance = new Formatter();
    var Numerical = new function() {
        var abscissas = [
            [
                0.5773502691896257645091488
            ],
            [
                0,
                0.7745966692414833770358531
            ],
            [
                0.3399810435848562648026658,
                0.8611363115940525752239465
            ],
            [
                0,
                0.5384693101056830910363144,
                0.9061798459386639927976269
            ],
            [
                0.2386191860831969086305017,
                0.6612093864662645136613996,
                0.9324695142031520278123016
            ],
            [
                0,
                0.4058451513773971669066064,
                0.7415311855993944398638648,
                0.9491079123427585245261897
            ],
            [
                0.1834346424956498049394761,
                0.5255324099163289858177390,
                0.7966664774136267395915539,
                0.9602898564975362316835609
            ],
            [
                0,
                0.3242534234038089290385380,
                0.6133714327005903973087020,
                0.8360311073266357942994298,
                0.9681602395076260898355762
            ],
            [
                0.1488743389816312108848260,
                0.4333953941292471907992659,
                0.6794095682990244062343274,
                0.8650633666889845107320967,
                0.9739065285171717200779640
            ],
            [
                0,
                0.2695431559523449723315320,
                0.5190961292068118159257257,
                0.7301520055740493240934163,
                0.8870625997680952990751578,
                0.9782286581460569928039380
            ],
            [
                0.1252334085114689154724414,
                0.3678314989981801937526915,
                0.5873179542866174472967024,
                0.7699026741943046870368938,
                0.9041172563704748566784659,
                0.9815606342467192506905491
            ],
            [
                0,
                0.2304583159551347940655281,
                0.4484927510364468528779129,
                0.6423493394403402206439846,
                0.8015780907333099127942065,
                0.9175983992229779652065478,
                0.9841830547185881494728294
            ],
            [
                0.1080549487073436620662447,
                0.3191123689278897604356718,
                0.5152486363581540919652907,
                0.6872929048116854701480198,
                0.8272013150697649931897947,
                0.9284348836635735173363911,
                0.9862838086968123388415973
            ],
            [
                0,
                0.2011940939974345223006283,
                0.3941513470775633698972074,
                0.5709721726085388475372267,
                0.7244177313601700474161861,
                0.8482065834104272162006483,
                0.9372733924007059043077589,
                0.9879925180204854284895657
            ],
            [
                0.0950125098376374401853193,
                0.2816035507792589132304605,
                0.4580167776572273863424194,
                0.6178762444026437484466718,
                0.7554044083550030338951012,
                0.8656312023878317438804679,
                0.9445750230732325760779884,
                0.9894009349916499325961542
            ]
        ];
        var weights = [
            [
                1
            ],
            [
                0.8888888888888888888888889,
                0.5555555555555555555555556
            ],
            [
                0.6521451548625461426269361,
                0.3478548451374538573730639
            ],
            [
                0.5688888888888888888888889,
                0.4786286704993664680412915,
                0.2369268850561890875142640
            ],
            [
                0.4679139345726910473898703,
                0.3607615730481386075698335,
                0.1713244923791703450402961
            ],
            [
                0.4179591836734693877551020,
                0.3818300505051189449503698,
                0.2797053914892766679014678,
                0.1294849661688696932706114
            ],
            [
                0.3626837833783619829651504,
                0.3137066458778872873379622,
                0.2223810344533744705443560,
                0.1012285362903762591525314
            ],
            [
                0.3302393550012597631645251,
                0.3123470770400028400686304,
                0.2606106964029354623187429,
                0.1806481606948574040584720,
                0.0812743883615744119718922
            ],
            [
                0.2955242247147528701738930,
                0.2692667193099963550912269,
                0.2190863625159820439955349,
                0.1494513491505805931457763,
                0.0666713443086881375935688
            ],
            [
                0.2729250867779006307144835,
                0.2628045445102466621806889,
                0.2331937645919904799185237,
                0.1862902109277342514260976,
                0.1255803694649046246346943,
                0.0556685671161736664827537
            ],
            [
                0.2491470458134027850005624,
                0.2334925365383548087608499,
                0.2031674267230659217490645,
                0.1600783285433462263346525,
                0.1069393259953184309602547,
                0.0471753363865118271946160
            ],
            [
                0.2325515532308739101945895,
                0.2262831802628972384120902,
                0.2078160475368885023125232,
                0.1781459807619457382800467,
                0.1388735102197872384636018,
                0.0921214998377284479144218,
                0.0404840047653158795200216
            ],
            [
                0.2152638534631577901958764,
                0.2051984637212956039659241,
                0.1855383974779378137417166,
                0.1572031671581935345696019,
                0.1215185706879031846894148,
                0.0801580871597602098056333,
                0.0351194603317518630318329
            ],
            [
                0.2025782419255612728806202,
                0.1984314853271115764561183,
                0.1861610000155622110268006,
                0.1662692058169939335532009,
                0.1395706779261543144478048,
                0.1071592204671719350118695,
                0.0703660474881081247092674,
                0.0307532419961172683546284
            ],
            [
                0.1894506104550684962853967,
                0.1826034150449235888667637,
                0.1691565193950025381893121,
                0.1495959888165767320815017,
                0.1246289712555338720524763,
                0.0951585116824927848099251,
                0.0622535239386478928628438,
                0.0271524594117540948517806
            ]
        ];
        var abs = Math.abs, sqrt = Math.sqrt, pow = Math.pow, log2 = Math.log2 || function(x) {
            return Math.log(x) * Math.LOG2E;
        }, EPSILON = 1e-12, MACHINE_EPSILON = 1.12e-16;
        function clamp(value, min, max) {
            return value < min ? min : value > max ? max : value;
        }
        function getDiscriminant(a, b, c) {
            function split(v) {
                var x = v * 134217729, y = v - x, hi = y + x, lo = v - hi;
                return [
                    hi,
                    lo
                ];
            }
            var D = b * b - a * c, E = b * b + a * c;
            if (abs(D) * 3 < E) {
                var ad = split(a), bd = split(b), cd = split(c), p = b * b, dp = bd[0] * bd[0] - p + 2 * bd[0] * bd[1] + bd[1] * bd[1], q = a * c, dq = ad[0] * cd[0] - q + ad[0] * cd[1] + ad[1] * cd[0] + ad[1] * cd[1];
                D = p - q + (dp - dq);
            }
            return D;
        }
        function getNormalizationFactor() {
            var norm = Math.max.apply(Math, arguments);
            return norm && (norm < 1e-8 || norm > 1e8) ? pow(2, -Math.round(log2(norm))) : 0;
        }
        return {
            EPSILON: EPSILON,
            MACHINE_EPSILON: MACHINE_EPSILON,
            CURVETIME_EPSILON: 1e-8,
            GEOMETRIC_EPSILON: 1e-7,
            TRIGONOMETRIC_EPSILON: 1e-8,
            ANGULAR_EPSILON: 1e-5,
            KAPPA: 4 * (sqrt(2) - 1) / 3,
            isZero: function(val) {
                return val >= -EPSILON && val <= EPSILON;
            },
            isMachineZero: function(val) {
                return val >= -MACHINE_EPSILON && val <= MACHINE_EPSILON;
            },
            clamp: clamp,
            integrate: function(f, a, b, n) {
                var x = abscissas[n - 2], w = weights[n - 2], A = (b - a) * 0.5, B = A + a, i = 0, m = n + 1 >> 1, sum = n & 1 ? w[i++] * f(B) : 0;
                while(i < m){
                    var Ax = A * x[i];
                    sum += w[i++] * (f(B + Ax) + f(B - Ax));
                }
                return A * sum;
            },
            findRoot: function(f, df, x, a, b, n, tolerance) {
                for(var i = 0; i < n; i++){
                    var fx = f(x), dx = fx / df(x), nx = x - dx;
                    if (abs(dx) < tolerance) {
                        x = nx;
                        break;
                    }
                    if (fx > 0) {
                        b = x;
                        x = nx <= a ? (a + b) * 0.5 : nx;
                    } else {
                        a = x;
                        x = nx >= b ? (a + b) * 0.5 : nx;
                    }
                }
                return clamp(x, a, b);
            },
            solveQuadratic: function(a, b, c, roots, min, max) {
                var x1, x2 = Infinity;
                if (abs(a) < EPSILON) {
                    if (abs(b) < EPSILON) return abs(c) < EPSILON ? -1 : 0;
                    x1 = -c / b;
                } else {
                    b *= -0.5;
                    var D = getDiscriminant(a, b, c);
                    if (D && abs(D) < MACHINE_EPSILON) {
                        var f = getNormalizationFactor(abs(a), abs(b), abs(c));
                        if (f) {
                            a *= f;
                            b *= f;
                            c *= f;
                            D = getDiscriminant(a, b, c);
                        }
                    }
                    if (D >= -MACHINE_EPSILON) {
                        var Q = D < 0 ? 0 : sqrt(D), R = b + (b < 0 ? -Q : Q);
                        if (R === 0) {
                            x1 = c / a;
                            x2 = -x1;
                        } else {
                            x1 = R / a;
                            x2 = c / R;
                        }
                    }
                }
                var count = 0, boundless = min == null, minB = min - EPSILON, maxB = max + EPSILON;
                if (isFinite(x1) && (boundless || x1 > minB && x1 < maxB)) roots[count++] = boundless ? x1 : clamp(x1, min, max);
                if (x2 !== x1 && isFinite(x2) && (boundless || x2 > minB && x2 < maxB)) roots[count++] = boundless ? x2 : clamp(x2, min, max);
                return count;
            },
            solveCubic: function(a, b, c, d, roots, min, max) {
                var f = getNormalizationFactor(abs(a), abs(b), abs(c), abs(d)), x, b1, c2, qd, q;
                if (f) {
                    a *= f;
                    b *= f;
                    c *= f;
                    d *= f;
                }
                function evaluate(x0) {
                    x = x0;
                    var tmp = a * x;
                    b1 = tmp + b;
                    c2 = b1 * x + c;
                    qd = (tmp + b1) * x + c2;
                    q = c2 * x + d;
                }
                if (abs(a) < EPSILON) {
                    a = b;
                    b1 = c;
                    c2 = d;
                    x = Infinity;
                } else if (abs(d) < EPSILON) {
                    b1 = b;
                    c2 = c;
                    x = 0;
                } else {
                    evaluate(-(b / a) / 3);
                    var t = q / a, r = pow(abs(t), 1 / 3), s = t < 0 ? -1 : 1, td = -qd / a, rd = td > 0 ? 1.324717957244746 * Math.max(r, sqrt(td)) : r, x0 = x - s * rd;
                    if (x0 !== x) {
                        do {
                            evaluate(x0);
                            x0 = qd === 0 ? x : x - q / qd / (1 + MACHINE_EPSILON);
                        }while (s * x0 > s * x);
                        if (abs(a) * x * x > abs(d / x)) {
                            c2 = -d / x;
                            b1 = (c2 - c) / x;
                        }
                    }
                }
                var count = Numerical.solveQuadratic(a, b1, c2, roots, min, max), boundless = min == null;
                if (isFinite(x) && (count === 0 || count > 0 && x !== roots[0] && x !== roots[1]) && (boundless || x > min - EPSILON && x < max + EPSILON)) roots[count++] = boundless ? x : clamp(x, min, max);
                return count;
            }
        };
    };
    var UID = {
        _id: 1,
        _pools: {},
        get: function(name) {
            if (name) {
                var pool = this._pools[name];
                if (!pool) pool = this._pools[name] = {
                    _id: 1
                };
                return pool._id++;
            } else return this._id++;
        }
    };
    var Point = Base.extend({
        _class: 'Point',
        _readIndex: true,
        initialize: function Point(arg0, arg1) {
            var type = typeof arg0, reading = this.__read, read = 0;
            if (type === 'number') {
                var hasY = typeof arg1 === 'number';
                this._set(arg0, hasY ? arg1 : arg0);
                if (reading) read = hasY ? 2 : 1;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0);
                if (reading) read = arg0 === null ? 1 : 0;
            } else {
                var obj = type === 'string' ? arg0.split(/[\s,]+/) || [] : arg0;
                read = 1;
                if (Array.isArray(obj)) this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));
                else if ('x' in obj) this._set(obj.x || 0, obj.y || 0);
                else if ('width' in obj) this._set(obj.width || 0, obj.height || 0);
                else if ('angle' in obj) {
                    this._set(obj.length || 0, 0);
                    this.setAngle(obj.angle || 0);
                } else {
                    this._set(0, 0);
                    read = 0;
                }
            }
            if (reading) this.__read = read;
            return this;
        },
        set: '#initialize',
        _set: function(x, y) {
            this.x = x;
            this.y = y;
            return this;
        },
        equals: function(point) {
            return this === point || point && (this.x === point.x && this.y === point.y || Array.isArray(point) && this.x === point[0] && this.y === point[1]) || false;
        },
        clone: function() {
            return new Point(this.x, this.y);
        },
        toString: function() {
            var f = Formatter.instance;
            return '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';
        },
        _serialize: function(options) {
            var f = options.formatter;
            return [
                f.number(this.x),
                f.number(this.y)
            ];
        },
        getLength: function() {
            return Math.sqrt(this.x * this.x + this.y * this.y);
        },
        setLength: function(length) {
            if (this.isZero()) {
                var angle = this._angle || 0;
                this._set(Math.cos(angle) * length, Math.sin(angle) * length);
            } else {
                var scale = length / this.getLength();
                if (Numerical.isZero(scale)) this.getAngle();
                this._set(this.x * scale, this.y * scale);
            }
        },
        getAngle: function() {
            return this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;
        },
        setAngle: function(angle) {
            this.setAngleInRadians.call(this, angle * Math.PI / 180);
        },
        getAngleInDegrees: '#getAngle',
        setAngleInDegrees: '#setAngle',
        getAngleInRadians: function() {
            if (!arguments.length) return this.isZero() ? this._angle || 0 : this._angle = Math.atan2(this.y, this.x);
            else {
                var point = Point.read(arguments), div = this.getLength() * point.getLength();
                if (Numerical.isZero(div)) return NaN;
                else {
                    var a = this.dot(point) / div;
                    return Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);
                }
            }
        },
        setAngleInRadians: function(angle) {
            this._angle = angle;
            if (!this.isZero()) {
                var length = this.getLength();
                this._set(Math.cos(angle) * length, Math.sin(angle) * length);
            }
        },
        getQuadrant: function() {
            return this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;
        }
    }, {
        beans: false,
        getDirectedAngle: function() {
            var point = Point.read(arguments);
            return Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;
        },
        getDistance: function() {
            var args = arguments, point = Point.read(args), x = point.x - this.x, y = point.y - this.y, d = x * x + y * y, squared = Base.read(args);
            return squared ? d : Math.sqrt(d);
        },
        normalize: function(length) {
            if (length === undefined) length = 1;
            var current = this.getLength(), scale = current !== 0 ? length / current : 0, point = new Point(this.x * scale, this.y * scale);
            if (scale >= 0) point._angle = this._angle;
            return point;
        },
        rotate: function(angle, center) {
            if (angle === 0) return this.clone();
            angle = angle * Math.PI / 180;
            var point = center ? this.subtract(center) : this, sin = Math.sin(angle), cos = Math.cos(angle);
            point = new Point(point.x * cos - point.y * sin, point.x * sin + point.y * cos);
            return center ? point.add(center) : point;
        },
        transform: function(matrix) {
            return matrix ? matrix._transformPoint(this) : this;
        },
        add: function() {
            var point = Point.read(arguments);
            return new Point(this.x + point.x, this.y + point.y);
        },
        subtract: function() {
            var point = Point.read(arguments);
            return new Point(this.x - point.x, this.y - point.y);
        },
        multiply: function() {
            var point = Point.read(arguments);
            return new Point(this.x * point.x, this.y * point.y);
        },
        divide: function() {
            var point = Point.read(arguments);
            return new Point(this.x / point.x, this.y / point.y);
        },
        modulo: function() {
            var point = Point.read(arguments);
            return new Point(this.x % point.x, this.y % point.y);
        },
        negate: function() {
            return new Point(-this.x, -this.y);
        },
        isInside: function() {
            return Rectangle.read(arguments).contains(this);
        },
        isClose: function() {
            var args = arguments, point = Point.read(args), tolerance = Base.read(args);
            return this.getDistance(point) <= tolerance;
        },
        isCollinear: function() {
            var point = Point.read(arguments);
            return Point.isCollinear(this.x, this.y, point.x, point.y);
        },
        isColinear: '#isCollinear',
        isOrthogonal: function() {
            var point = Point.read(arguments);
            return Point.isOrthogonal(this.x, this.y, point.x, point.y);
        },
        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this.x) && isZero(this.y);
        },
        isNaN: function() {
            return isNaN(this.x) || isNaN(this.y);
        },
        isInQuadrant: function(q) {
            return this.x * (q > 1 && q < 4 ? -1 : 1) >= 0 && this.y * (q > 2 ? -1 : 1) >= 0;
        },
        dot: function() {
            var point = Point.read(arguments);
            return this.x * point.x + this.y * point.y;
        },
        cross: function() {
            var point = Point.read(arguments);
            return this.x * point.y - this.y * point.x;
        },
        project: function() {
            var point = Point.read(arguments), scale = point.isZero() ? 0 : this.dot(point) / point.dot(point);
            return new Point(point.x * scale, point.y * scale);
        },
        statics: {
            min: function() {
                var args = arguments, point1 = Point.read(args), point2 = Point.read(args);
                return new Point(Math.min(point1.x, point2.x), Math.min(point1.y, point2.y));
            },
            max: function() {
                var args = arguments, point1 = Point.read(args), point2 = Point.read(args);
                return new Point(Math.max(point1.x, point2.x), Math.max(point1.y, point2.y));
            },
            random: function() {
                return new Point(Math.random(), Math.random());
            },
            isCollinear: function(x1, y1, x2, y2) {
                return Math.abs(x1 * y2 - y1 * x2) <= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) * 1e-8;
            },
            isOrthogonal: function(x1, y1, x2, y2) {
                return Math.abs(x1 * x2 + y1 * y2) <= Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)) * 1e-8;
            }
        }
    }, Base.each([
        'round',
        'ceil',
        'floor',
        'abs'
    ], function(key) {
        var op = Math[key];
        this[key] = function() {
            return new Point(op(this.x), op(this.y));
        };
    }, {}));
    var LinkedPoint = Point.extend({
        initialize: function Point(x, y, owner, setter) {
            this._x = x;
            this._y = y;
            this._owner = owner;
            this._setter = setter;
        },
        _set: function(x, y, _dontNotify) {
            this._x = x;
            this._y = y;
            if (!_dontNotify) this._owner[this._setter](this);
            return this;
        },
        getX: function() {
            return this._x;
        },
        setX: function(x) {
            this._x = x;
            this._owner[this._setter](this);
        },
        getY: function() {
            return this._y;
        },
        setY: function(y) {
            this._y = y;
            this._owner[this._setter](this);
        },
        isSelected: function() {
            return !!(this._owner._selection & this._getSelection());
        },
        setSelected: function(selected) {
            this._owner._changeSelection(this._getSelection(), selected);
        },
        _getSelection: function() {
            return this._setter === 'setPosition' ? 4 : 0;
        }
    });
    var Size = Base.extend({
        _class: 'Size',
        _readIndex: true,
        initialize: function Size(arg0, arg1) {
            var type = typeof arg0, reading = this.__read, read = 0;
            if (type === 'number') {
                var hasHeight = typeof arg1 === 'number';
                this._set(arg0, hasHeight ? arg1 : arg0);
                if (reading) read = hasHeight ? 2 : 1;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0);
                if (reading) read = arg0 === null ? 1 : 0;
            } else {
                var obj = type === 'string' ? arg0.split(/[\s,]+/) || [] : arg0;
                read = 1;
                if (Array.isArray(obj)) this._set(+obj[0], +(obj.length > 1 ? obj[1] : obj[0]));
                else if ('width' in obj) this._set(obj.width || 0, obj.height || 0);
                else if ('x' in obj) this._set(obj.x || 0, obj.y || 0);
                else {
                    this._set(0, 0);
                    read = 0;
                }
            }
            if (reading) this.__read = read;
            return this;
        },
        set: '#initialize',
        _set: function(width, height) {
            this.width = width;
            this.height = height;
            return this;
        },
        equals: function(size) {
            return size === this || size && (this.width === size.width && this.height === size.height || Array.isArray(size) && this.width === size[0] && this.height === size[1]) || false;
        },
        clone: function() {
            return new Size(this.width, this.height);
        },
        toString: function() {
            var f = Formatter.instance;
            return '{ width: ' + f.number(this.width) + ', height: ' + f.number(this.height) + ' }';
        },
        _serialize: function(options) {
            var f = options.formatter;
            return [
                f.number(this.width),
                f.number(this.height)
            ];
        },
        add: function() {
            var size = Size.read(arguments);
            return new Size(this.width + size.width, this.height + size.height);
        },
        subtract: function() {
            var size = Size.read(arguments);
            return new Size(this.width - size.width, this.height - size.height);
        },
        multiply: function() {
            var size = Size.read(arguments);
            return new Size(this.width * size.width, this.height * size.height);
        },
        divide: function() {
            var size = Size.read(arguments);
            return new Size(this.width / size.width, this.height / size.height);
        },
        modulo: function() {
            var size = Size.read(arguments);
            return new Size(this.width % size.width, this.height % size.height);
        },
        negate: function() {
            return new Size(-this.width, -this.height);
        },
        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this.width) && isZero(this.height);
        },
        isNaN: function() {
            return isNaN(this.width) || isNaN(this.height);
        },
        statics: {
            min: function(size1, size2) {
                return new Size(Math.min(size1.width, size2.width), Math.min(size1.height, size2.height));
            },
            max: function(size1, size2) {
                return new Size(Math.max(size1.width, size2.width), Math.max(size1.height, size2.height));
            },
            random: function() {
                return new Size(Math.random(), Math.random());
            }
        }
    }, Base.each([
        'round',
        'ceil',
        'floor',
        'abs'
    ], function(key) {
        var op = Math[key];
        this[key] = function() {
            return new Size(op(this.width), op(this.height));
        };
    }, {}));
    var LinkedSize = Size.extend({
        initialize: function Size(width, height, owner, setter) {
            this._width = width;
            this._height = height;
            this._owner = owner;
            this._setter = setter;
        },
        _set: function(width, height, _dontNotify) {
            this._width = width;
            this._height = height;
            if (!_dontNotify) this._owner[this._setter](this);
            return this;
        },
        getWidth: function() {
            return this._width;
        },
        setWidth: function(width) {
            this._width = width;
            this._owner[this._setter](this);
        },
        getHeight: function() {
            return this._height;
        },
        setHeight: function(height) {
            this._height = height;
            this._owner[this._setter](this);
        }
    });
    var Rectangle = Base.extend({
        _class: 'Rectangle',
        _readIndex: true,
        beans: true,
        initialize: function Rectangle(arg0, arg1, arg2, arg3) {
            var args = arguments, type = typeof arg0, read;
            if (type === 'number') {
                this._set(arg0, arg1, arg2, arg3);
                read = 4;
            } else if (type === 'undefined' || arg0 === null) {
                this._set(0, 0, 0, 0);
                read = arg0 === null ? 1 : 0;
            } else if (args.length === 1) {
                if (Array.isArray(arg0)) {
                    this._set.apply(this, arg0);
                    read = 1;
                } else if (arg0.x !== undefined || arg0.width !== undefined) {
                    this._set(arg0.x || 0, arg0.y || 0, arg0.width || 0, arg0.height || 0);
                    read = 1;
                } else if (arg0.from === undefined && arg0.to === undefined) {
                    this._set(0, 0, 0, 0);
                    if (Base.readSupported(args, this)) read = 1;
                }
            }
            if (read === undefined) {
                var frm = Point.readNamed(args, 'from'), next = Base.peek(args), x = frm.x, y = frm.y, width, height;
                if (next && next.x !== undefined || Base.hasNamed(args, 'to')) {
                    var to = Point.readNamed(args, 'to');
                    width = to.x - x;
                    height = to.y - y;
                    if (width < 0) {
                        x = to.x;
                        width = -width;
                    }
                    if (height < 0) {
                        y = to.y;
                        height = -height;
                    }
                } else {
                    var size = Size.read(args);
                    width = size.width;
                    height = size.height;
                }
                this._set(x, y, width, height);
                read = args.__index;
            }
            var filtered = args.__filtered;
            if (filtered) this.__filtered = filtered;
            if (this.__read) this.__read = read;
            return this;
        },
        set: '#initialize',
        _set: function(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            return this;
        },
        clone: function() {
            return new Rectangle(this.x, this.y, this.width, this.height);
        },
        equals: function(rect) {
            var rt = Base.isPlainValue(rect) ? Rectangle.read(arguments) : rect;
            return rt === this || rt && this.x === rt.x && this.y === rt.y && this.width === rt.width && this.height === rt.height || false;
        },
        toString: function() {
            var f = Formatter.instance;
            return '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ', width: ' + f.number(this.width) + ', height: ' + f.number(this.height) + ' }';
        },
        _serialize: function(options) {
            var f = options.formatter;
            return [
                f.number(this.x),
                f.number(this.y),
                f.number(this.width),
                f.number(this.height)
            ];
        },
        getPoint: function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            return new ctor(this.x, this.y, this, 'setPoint');
        },
        setPoint: function() {
            var point = Point.read(arguments);
            this.x = point.x;
            this.y = point.y;
        },
        getSize: function(_dontLink) {
            var ctor = _dontLink ? Size : LinkedSize;
            return new ctor(this.width, this.height, this, 'setSize');
        },
        _fw: 1,
        _fh: 1,
        setSize: function() {
            var size = Size.read(arguments), sx = this._sx, sy = this._sy, w = size.width, h = size.height;
            if (sx) this.x += (this.width - w) * sx;
            if (sy) this.y += (this.height - h) * sy;
            this.width = w;
            this.height = h;
            this._fw = this._fh = 1;
        },
        getLeft: function() {
            return this.x;
        },
        setLeft: function(left) {
            if (!this._fw) {
                var amount = left - this.x;
                this.width -= this._sx === 0.5 ? amount * 2 : amount;
            }
            this.x = left;
            this._sx = this._fw = 0;
        },
        getTop: function() {
            return this.y;
        },
        setTop: function(top) {
            if (!this._fh) {
                var amount = top - this.y;
                this.height -= this._sy === 0.5 ? amount * 2 : amount;
            }
            this.y = top;
            this._sy = this._fh = 0;
        },
        getRight: function() {
            return this.x + this.width;
        },
        setRight: function(right) {
            if (!this._fw) {
                var amount = right - this.x;
                this.width = this._sx === 0.5 ? amount * 2 : amount;
            }
            this.x = right - this.width;
            this._sx = 1;
            this._fw = 0;
        },
        getBottom: function() {
            return this.y + this.height;
        },
        setBottom: function(bottom) {
            if (!this._fh) {
                var amount = bottom - this.y;
                this.height = this._sy === 0.5 ? amount * 2 : amount;
            }
            this.y = bottom - this.height;
            this._sy = 1;
            this._fh = 0;
        },
        getCenterX: function() {
            return this.x + this.width / 2;
        },
        setCenterX: function(x) {
            if (this._fw || this._sx === 0.5) this.x = x - this.width / 2;
            else {
                if (this._sx) this.x += (x - this.x) * 2 * this._sx;
                this.width = (x - this.x) * 2;
            }
            this._sx = 0.5;
            this._fw = 0;
        },
        getCenterY: function() {
            return this.y + this.height / 2;
        },
        setCenterY: function(y) {
            if (this._fh || this._sy === 0.5) this.y = y - this.height / 2;
            else {
                if (this._sy) this.y += (y - this.y) * 2 * this._sy;
                this.height = (y - this.y) * 2;
            }
            this._sy = 0.5;
            this._fh = 0;
        },
        getCenter: function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            return new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');
        },
        setCenter: function() {
            var point = Point.read(arguments);
            this.setCenterX(point.x);
            this.setCenterY(point.y);
            return this;
        },
        getArea: function() {
            return this.width * this.height;
        },
        isEmpty: function() {
            return this.width === 0 || this.height === 0;
        },
        contains: function(arg) {
            return arg && arg.width !== undefined || (Array.isArray(arg) ? arg : arguments).length === 4 ? this._containsRectangle(Rectangle.read(arguments)) : this._containsPoint(Point.read(arguments));
        },
        _containsPoint: function(point) {
            var x = point.x, y = point.y;
            return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;
        },
        _containsRectangle: function(rect) {
            var x = rect.x, y = rect.y;
            return x >= this.x && y >= this.y && x + rect.width <= this.x + this.width && y + rect.height <= this.y + this.height;
        },
        intersects: function() {
            var rect = Rectangle.read(arguments), epsilon = Base.read(arguments) || 0;
            return rect.x + rect.width > this.x - epsilon && rect.y + rect.height > this.y - epsilon && rect.x < this.x + this.width + epsilon && rect.y < this.y + this.height + epsilon;
        },
        intersect: function() {
            var rect = Rectangle.read(arguments), x1 = Math.max(this.x, rect.x), y1 = Math.max(this.y, rect.y), x2 = Math.min(this.x + this.width, rect.x + rect.width), y2 = Math.min(this.y + this.height, rect.y + rect.height);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },
        unite: function() {
            var rect = Rectangle.read(arguments), x1 = Math.min(this.x, rect.x), y1 = Math.min(this.y, rect.y), x2 = Math.max(this.x + this.width, rect.x + rect.width), y2 = Math.max(this.y + this.height, rect.y + rect.height);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },
        include: function() {
            var point = Point.read(arguments);
            var x1 = Math.min(this.x, point.x), y1 = Math.min(this.y, point.y), x2 = Math.max(this.x + this.width, point.x), y2 = Math.max(this.y + this.height, point.y);
            return new Rectangle(x1, y1, x2 - x1, y2 - y1);
        },
        expand: function() {
            var amount = Size.read(arguments), hor = amount.width, ver = amount.height;
            return new Rectangle(this.x - hor / 2, this.y - ver / 2, this.width + hor, this.height + ver);
        },
        scale: function(hor, ver) {
            return this.expand(this.width * hor - this.width, this.height * (ver === undefined ? hor : ver) - this.height);
        }
    }, Base.each([
        [
            'Top',
            'Left'
        ],
        [
            'Top',
            'Right'
        ],
        [
            'Bottom',
            'Left'
        ],
        [
            'Bottom',
            'Right'
        ],
        [
            'Left',
            'Center'
        ],
        [
            'Top',
            'Center'
        ],
        [
            'Right',
            'Center'
        ],
        [
            'Bottom',
            'Center'
        ]
    ], function(parts, index) {
        var part = parts.join(''), xFirst = /^[RL]/.test(part);
        if (index >= 4) parts[1] += xFirst ? 'Y' : 'X';
        var x = parts[xFirst ? 0 : 1], y = parts[xFirst ? 1 : 0], getX = 'get' + x, getY = 'get' + y, setX = 'set' + x, setY = 'set' + y, get = 'get' + part, set = 'set' + part;
        this[get] = function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            return new ctor(this[getX](), this[getY](), this, set);
        };
        this[set] = function() {
            var point = Point.read(arguments);
            this[setX](point.x);
            this[setY](point.y);
        };
    }, {
        beans: true
    }));
    var LinkedRectangle = Rectangle.extend({
        initialize: function Rectangle(x, y, width, height, owner, setter) {
            this._set(x, y, width, height, true);
            this._owner = owner;
            this._setter = setter;
        },
        _set: function(x, y, width, height, _dontNotify) {
            this._x = x;
            this._y = y;
            this._width = width;
            this._height = height;
            if (!_dontNotify) this._owner[this._setter](this);
            return this;
        }
    }, new function() {
        var proto = Rectangle.prototype;
        return Base.each([
            'x',
            'y',
            'width',
            'height'
        ], function(key) {
            var part = Base.capitalize(key), internal = '_' + key;
            this['get' + part] = function() {
                return this[internal];
            };
            this['set' + part] = function(value) {
                this[internal] = value;
                if (!this._dontNotify) this._owner[this._setter](this);
            };
        }, Base.each([
            'Point',
            'Size',
            'Center',
            'Left',
            'Top',
            'Right',
            'Bottom',
            'CenterX',
            'CenterY',
            'TopLeft',
            'TopRight',
            'BottomLeft',
            'BottomRight',
            'LeftCenter',
            'TopCenter',
            'RightCenter',
            'BottomCenter'
        ], function(key) {
            var name = 'set' + key;
            this[name] = function() {
                this._dontNotify = true;
                proto[name].apply(this, arguments);
                this._dontNotify = false;
                this._owner[this._setter](this);
            };
        }, {
            isSelected: function() {
                return !!(this._owner._selection & 2);
            },
            setSelected: function(selected) {
                var owner = this._owner;
                if (owner._changeSelection) owner._changeSelection(2, selected);
            }
        }));
    });
    var Matrix = Base.extend({
        _class: 'Matrix',
        initialize: function Matrix(arg, _dontNotify) {
            var args = arguments, count = args.length, ok = true;
            if (count >= 6) this._set.apply(this, args);
            else if (count === 1 || count === 2) {
                if (arg instanceof Matrix) this._set(arg._a, arg._b, arg._c, arg._d, arg._tx, arg._ty, _dontNotify);
                else if (Array.isArray(arg)) this._set.apply(this, _dontNotify ? arg.concat([
                    _dontNotify
                ]) : arg);
                else ok = false;
            } else if (!count) this.reset();
            else ok = false;
            if (!ok) throw new Error('Unsupported matrix parameters');
            return this;
        },
        set: '#initialize',
        _set: function(a, b, c, d, tx, ty, _dontNotify) {
            this._a = a;
            this._b = b;
            this._c = c;
            this._d = d;
            this._tx = tx;
            this._ty = ty;
            if (!_dontNotify) this._changed();
            return this;
        },
        _serialize: function(options, dictionary) {
            return Base.serialize(this.getValues(), options, true, dictionary);
        },
        _changed: function() {
            var owner = this._owner;
            if (owner) {
                if (owner._applyMatrix) owner.transform(null, true);
                else owner._changed(25);
            }
        },
        clone: function() {
            return new Matrix(this._a, this._b, this._c, this._d, this._tx, this._ty);
        },
        equals: function(mx) {
            return mx === this || mx && this._a === mx._a && this._b === mx._b && this._c === mx._c && this._d === mx._d && this._tx === mx._tx && this._ty === mx._ty;
        },
        toString: function() {
            var f = Formatter.instance;
            return '[[' + [
                f.number(this._a),
                f.number(this._c),
                f.number(this._tx)
            ].join(', ') + '], [' + [
                f.number(this._b),
                f.number(this._d),
                f.number(this._ty)
            ].join(', ') + ']]';
        },
        reset: function(_dontNotify) {
            this._a = this._d = 1;
            this._b = this._c = this._tx = this._ty = 0;
            if (!_dontNotify) this._changed();
            return this;
        },
        apply: function(recursively, _setApplyMatrix) {
            var owner = this._owner;
            if (owner) {
                owner.transform(null, Base.pick(recursively, true), _setApplyMatrix);
                return this.isIdentity();
            }
            return false;
        },
        translate: function() {
            var point = Point.read(arguments), x = point.x, y = point.y;
            this._tx += x * this._a + y * this._c;
            this._ty += x * this._b + y * this._d;
            this._changed();
            return this;
        },
        scale: function() {
            var args = arguments, scale = Point.read(args), center = Point.read(args, 0, {
                readNull: true
            });
            if (center) this.translate(center);
            this._a *= scale.x;
            this._b *= scale.x;
            this._c *= scale.y;
            this._d *= scale.y;
            if (center) this.translate(center.negate());
            this._changed();
            return this;
        },
        rotate: function(angle) {
            angle *= Math.PI / 180;
            var center = Point.read(arguments, 1), x = center.x, y = center.y, cos = Math.cos(angle), sin = Math.sin(angle), tx = x - x * cos + y * sin, ty = y - x * sin - y * cos, a = this._a, b = this._b, c = this._c, d = this._d;
            this._a = cos * a + sin * c;
            this._b = cos * b + sin * d;
            this._c = -sin * a + cos * c;
            this._d = -sin * b + cos * d;
            this._tx += tx * a + ty * c;
            this._ty += tx * b + ty * d;
            this._changed();
            return this;
        },
        shear: function() {
            var args = arguments, shear = Point.read(args), center = Point.read(args, 0, {
                readNull: true
            });
            if (center) this.translate(center);
            var a = this._a, b = this._b;
            this._a += shear.y * this._c;
            this._b += shear.y * this._d;
            this._c += shear.x * a;
            this._d += shear.x * b;
            if (center) this.translate(center.negate());
            this._changed();
            return this;
        },
        skew: function() {
            var args = arguments, skew = Point.read(args), center = Point.read(args, 0, {
                readNull: true
            }), toRadians = Math.PI / 180, shear = new Point(Math.tan(skew.x * toRadians), Math.tan(skew.y * toRadians));
            return this.shear(shear, center);
        },
        append: function(mx, _dontNotify) {
            if (mx) {
                var a1 = this._a, b1 = this._b, c1 = this._c, d1 = this._d, a2 = mx._a, b2 = mx._c, c2 = mx._b, d2 = mx._d, tx2 = mx._tx, ty2 = mx._ty;
                this._a = a2 * a1 + c2 * c1;
                this._c = b2 * a1 + d2 * c1;
                this._b = a2 * b1 + c2 * d1;
                this._d = b2 * b1 + d2 * d1;
                this._tx += tx2 * a1 + ty2 * c1;
                this._ty += tx2 * b1 + ty2 * d1;
                if (!_dontNotify) this._changed();
            }
            return this;
        },
        prepend: function(mx, _dontNotify) {
            if (mx) {
                var a1 = this._a, b1 = this._b, c1 = this._c, d1 = this._d, tx1 = this._tx, ty1 = this._ty, a2 = mx._a, b2 = mx._c, c2 = mx._b, d2 = mx._d, tx2 = mx._tx, ty2 = mx._ty;
                this._a = a2 * a1 + b2 * b1;
                this._c = a2 * c1 + b2 * d1;
                this._b = c2 * a1 + d2 * b1;
                this._d = c2 * c1 + d2 * d1;
                this._tx = a2 * tx1 + b2 * ty1 + tx2;
                this._ty = c2 * tx1 + d2 * ty1 + ty2;
                if (!_dontNotify) this._changed();
            }
            return this;
        },
        appended: function(mx) {
            return this.clone().append(mx);
        },
        prepended: function(mx) {
            return this.clone().prepend(mx);
        },
        invert: function() {
            var a = this._a, b = this._b, c = this._c, d = this._d, tx = this._tx, ty = this._ty, det = a * d - b * c, res = null;
            if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {
                this._a = d / det;
                this._b = -b / det;
                this._c = -c / det;
                this._d = a / det;
                this._tx = (c * ty - d * tx) / det;
                this._ty = (b * tx - a * ty) / det;
                res = this;
            }
            return res;
        },
        inverted: function() {
            return this.clone().invert();
        },
        concatenate: '#append',
        preConcatenate: '#prepend',
        chain: '#appended',
        _shiftless: function() {
            return new Matrix(this._a, this._b, this._c, this._d, 0, 0);
        },
        _orNullIfIdentity: function() {
            return this.isIdentity() ? null : this;
        },
        isIdentity: function() {
            return this._a === 1 && this._b === 0 && this._c === 0 && this._d === 1 && this._tx === 0 && this._ty === 0;
        },
        isInvertible: function() {
            var det = this._a * this._d - this._c * this._b;
            return det && !isNaN(det) && isFinite(this._tx) && isFinite(this._ty);
        },
        isSingular: function() {
            return !this.isInvertible();
        },
        transform: function(src, dst, count) {
            return arguments.length < 3 ? this._transformPoint(Point.read(arguments)) : this._transformCoordinates(src, dst, count);
        },
        _transformPoint: function(point, dest, _dontNotify) {
            var x = point.x, y = point.y;
            if (!dest) dest = new Point();
            return dest._set(x * this._a + y * this._c + this._tx, x * this._b + y * this._d + this._ty, _dontNotify);
        },
        _transformCoordinates: function(src, dst, count) {
            for(var i = 0, max = 2 * count; i < max; i += 2){
                var x = src[i], y = src[i + 1];
                dst[i] = x * this._a + y * this._c + this._tx;
                dst[i + 1] = x * this._b + y * this._d + this._ty;
            }
            return dst;
        },
        _transformCorners: function(rect) {
            var x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, coords = [
                x1,
                y1,
                x2,
                y1,
                x2,
                y2,
                x1,
                y2
            ];
            return this._transformCoordinates(coords, coords, 4);
        },
        _transformBounds: function(bounds, dest, _dontNotify) {
            var coords = this._transformCorners(bounds), min = coords.slice(0, 2), max = min.slice();
            for(var i = 2; i < 8; i++){
                var val = coords[i], j = i & 1;
                if (val < min[j]) min[j] = val;
                else if (val > max[j]) max[j] = val;
            }
            if (!dest) dest = new Rectangle();
            return dest._set(min[0], min[1], max[0] - min[0], max[1] - min[1], _dontNotify);
        },
        inverseTransform: function() {
            return this._inverseTransform(Point.read(arguments));
        },
        _inverseTransform: function(point, dest, _dontNotify) {
            var a = this._a, b = this._b, c = this._c, d = this._d, tx = this._tx, ty = this._ty, det = a * d - b * c, res = null;
            if (det && !isNaN(det) && isFinite(tx) && isFinite(ty)) {
                var x = point.x - this._tx, y = point.y - this._ty;
                if (!dest) dest = new Point();
                res = dest._set((x * d - y * c) / det, (y * a - x * b) / det, _dontNotify);
            }
            return res;
        },
        decompose: function() {
            var a = this._a, b = this._b, c = this._c, d = this._d, det = a * d - b * c, sqrt = Math.sqrt, atan2 = Math.atan2, degrees = 180 / Math.PI, rotate, scale, skew;
            if (a !== 0 || b !== 0) {
                var r = sqrt(a * a + b * b);
                rotate = Math.acos(a / r) * (b > 0 ? 1 : -1);
                scale = [
                    r,
                    det / r
                ];
                skew = [
                    atan2(a * c + b * d, r * r),
                    0
                ];
            } else if (c !== 0 || d !== 0) {
                var s = sqrt(c * c + d * d);
                rotate = Math.asin(c / s) * (d > 0 ? 1 : -1);
                scale = [
                    det / s,
                    s
                ];
                skew = [
                    0,
                    atan2(a * c + b * d, s * s)
                ];
            } else {
                rotate = 0;
                skew = scale = [
                    0,
                    0
                ];
            }
            return {
                translation: this.getTranslation(),
                rotation: rotate * degrees,
                scaling: new Point(scale),
                skewing: new Point(skew[0] * degrees, skew[1] * degrees)
            };
        },
        getValues: function() {
            return [
                this._a,
                this._b,
                this._c,
                this._d,
                this._tx,
                this._ty
            ];
        },
        getTranslation: function() {
            return new Point(this._tx, this._ty);
        },
        getScaling: function() {
            return this.decompose().scaling;
        },
        getRotation: function() {
            return this.decompose().rotation;
        },
        applyToContext: function(ctx) {
            if (!this.isIdentity()) ctx.transform(this._a, this._b, this._c, this._d, this._tx, this._ty);
        }
    }, Base.each([
        'a',
        'b',
        'c',
        'd',
        'tx',
        'ty'
    ], function(key) {
        var part = Base.capitalize(key), prop = '_' + key;
        this['get' + part] = function() {
            return this[prop];
        };
        this['set' + part] = function(value) {
            this[prop] = value;
            this._changed();
        };
    }, {}));
    var Line = Base.extend({
        _class: 'Line',
        initialize: function Line(arg0, arg1, arg2, arg3, arg4) {
            var asVector = false;
            if (arguments.length >= 4) {
                this._px = arg0;
                this._py = arg1;
                this._vx = arg2;
                this._vy = arg3;
                asVector = arg4;
            } else {
                this._px = arg0.x;
                this._py = arg0.y;
                this._vx = arg1.x;
                this._vy = arg1.y;
                asVector = arg2;
            }
            if (!asVector) {
                this._vx -= this._px;
                this._vy -= this._py;
            }
        },
        getPoint: function() {
            return new Point(this._px, this._py);
        },
        getVector: function() {
            return new Point(this._vx, this._vy);
        },
        getLength: function() {
            return this.getVector().getLength();
        },
        intersect: function(line, isInfinite) {
            return Line.intersect(this._px, this._py, this._vx, this._vy, line._px, line._py, line._vx, line._vy, true, isInfinite);
        },
        getSide: function(point, isInfinite) {
            return Line.getSide(this._px, this._py, this._vx, this._vy, point.x, point.y, true, isInfinite);
        },
        getDistance: function(point) {
            return Math.abs(this.getSignedDistance(point));
        },
        getSignedDistance: function(point) {
            return Line.getSignedDistance(this._px, this._py, this._vx, this._vy, point.x, point.y, true);
        },
        isCollinear: function(line) {
            return Point.isCollinear(this._vx, this._vy, line._vx, line._vy);
        },
        isOrthogonal: function(line) {
            return Point.isOrthogonal(this._vx, this._vy, line._vx, line._vy);
        },
        statics: {
            intersect: function(p1x, p1y, v1x, v1y, p2x, p2y, v2x, v2y, asVector, isInfinite) {
                if (!asVector) {
                    v1x -= p1x;
                    v1y -= p1y;
                    v2x -= p2x;
                    v2y -= p2y;
                }
                var cross = v1x * v2y - v1y * v2x;
                if (!Numerical.isMachineZero(cross)) {
                    var dx = p1x - p2x, dy = p1y - p2y, u1 = (v2x * dy - v2y * dx) / cross, u2 = (v1x * dy - v1y * dx) / cross, epsilon = 1e-12, uMin = -epsilon, uMax = 1 + epsilon;
                    if (isInfinite || uMin < u1 && u1 < uMax && uMin < u2 && u2 < uMax) {
                        if (!isInfinite) u1 = u1 <= 0 ? 0 : u1 >= 1 ? 1 : u1;
                        return new Point(p1x + u1 * v1x, p1y + u1 * v1y);
                    }
                }
            },
            getSide: function(px, py, vx, vy, x, y, asVector, isInfinite) {
                if (!asVector) {
                    vx -= px;
                    vy -= py;
                }
                var v2x = x - px, v2y = y - py, ccw = v2x * vy - v2y * vx;
                if (!isInfinite && Numerical.isMachineZero(ccw)) {
                    ccw = (v2x * vx + v2x * vx) / (vx * vx + vy * vy);
                    if (ccw >= 0 && ccw <= 1) ccw = 0;
                }
                return ccw < 0 ? -1 : ccw > 0 ? 1 : 0;
            },
            getSignedDistance: function(px, py, vx, vy, x, y, asVector) {
                if (!asVector) {
                    vx -= px;
                    vy -= py;
                }
                return vx === 0 ? vy > 0 ? x - px : px - x : vy === 0 ? vx < 0 ? y - py : py - y : ((x - px) * vy - (y - py) * vx) / (vy > vx ? vy * Math.sqrt(1 + vx * vx / (vy * vy)) : vx * Math.sqrt(1 + vy * vy / (vx * vx)));
            },
            getDistance: function(px, py, vx, vy, x, y, asVector) {
                return Math.abs(Line.getSignedDistance(px, py, vx, vy, x, y, asVector));
            }
        }
    });
    var Project = PaperScopeItem.extend({
        _class: 'Project',
        _list: 'projects',
        _reference: 'project',
        _compactSerialize: true,
        initialize: function Project(element) {
            PaperScopeItem.call(this, true);
            this._children = [];
            this._namedChildren = {};
            this._activeLayer = null;
            this._currentStyle = new Style(null, null, this);
            this._view = View.create(this, element || CanvasProvider.getCanvas(1, 1));
            this._selectionItems = {};
            this._selectionCount = 0;
            this._updateVersion = 0;
        },
        _serialize: function(options, dictionary) {
            return Base.serialize(this._children, options, true, dictionary);
        },
        _changed: function(flags, item) {
            if (flags & 1) {
                var view = this._view;
                if (view) {
                    view._needsUpdate = true;
                    if (!view._requested && view._autoUpdate) view.requestUpdate();
                }
            }
            var changes = this._changes;
            if (changes && item) {
                var changesById = this._changesById, id = item._id, entry = changesById[id];
                if (entry) entry.flags |= flags;
                else changes.push(changesById[id] = {
                    item: item,
                    flags: flags
                });
            }
        },
        clear: function() {
            var children = this._children;
            for(var i = children.length - 1; i >= 0; i--)children[i].remove();
        },
        isEmpty: function() {
            return !this._children.length;
        },
        remove: function remove() {
            if (!remove.base.call(this)) return false;
            if (this._view) this._view.remove();
            return true;
        },
        getView: function() {
            return this._view;
        },
        getCurrentStyle: function() {
            return this._currentStyle;
        },
        setCurrentStyle: function(style) {
            this._currentStyle.set(style);
        },
        getIndex: function() {
            return this._index;
        },
        getOptions: function() {
            return this._scope.settings;
        },
        getLayers: function() {
            return this._children;
        },
        getActiveLayer: function() {
            return this._activeLayer || new Layer({
                project: this,
                insert: true
            });
        },
        getSymbolDefinitions: function() {
            var definitions = [], ids = {};
            this.getItems({
                class: SymbolItem,
                match: function(item) {
                    var definition = item._definition, id = definition._id;
                    if (!ids[id]) {
                        ids[id] = true;
                        definitions.push(definition);
                    }
                    return false;
                }
            });
            return definitions;
        },
        getSymbols: 'getSymbolDefinitions',
        getSelectedItems: function() {
            var selectionItems = this._selectionItems, items = [];
            for(var id in selectionItems){
                var item = selectionItems[id], selection = item._selection;
                if (selection & 1 && item.isInserted()) items.push(item);
                else if (!selection) this._updateSelection(item);
            }
            return items;
        },
        _updateSelection: function(item) {
            var id = item._id, selectionItems = this._selectionItems;
            if (item._selection) {
                if (selectionItems[id] !== item) {
                    this._selectionCount++;
                    selectionItems[id] = item;
                }
            } else if (selectionItems[id] === item) {
                this._selectionCount--;
                delete selectionItems[id];
            }
        },
        selectAll: function() {
            var children = this._children;
            for(var i = 0, l = children.length; i < l; i++)children[i].setFullySelected(true);
        },
        deselectAll: function() {
            var selectionItems = this._selectionItems;
            for(var i in selectionItems)selectionItems[i].setFullySelected(false);
        },
        addLayer: function(layer) {
            return this.insertLayer(undefined, layer);
        },
        insertLayer: function(index, layer) {
            if (layer instanceof Layer) {
                layer._remove(false, true);
                Base.splice(this._children, [
                    layer
                ], index, 0);
                layer._setProject(this, true);
                var name = layer._name;
                if (name) layer.setName(name);
                if (this._changes) layer._changed(5);
                if (!this._activeLayer) this._activeLayer = layer;
            } else layer = null;
            return layer;
        },
        _insertItem: function(index, item, _created) {
            item = this.insertLayer(index, item) || (this._activeLayer || this._insertItem(undefined, new Layer(Item.NO_INSERT), true)).insertChild(index, item);
            if (_created && item.activate) item.activate();
            return item;
        },
        getItems: function(options) {
            return Item._getItems(this, options);
        },
        getItem: function(options) {
            return Item._getItems(this, options, null, null, true)[0] || null;
        },
        importJSON: function(json) {
            this.activate();
            var layer = this._activeLayer;
            return Base.importJSON(json, layer && layer.isEmpty() && layer);
        },
        removeOn: function(type) {
            var sets = this._removeSets;
            if (sets) {
                if (type === 'mouseup') sets.mousedrag = null;
                var set = sets[type];
                if (set) {
                    for(var id in set){
                        var item = set[id];
                        for(var key in sets){
                            var other = sets[key];
                            if (other && other != set) delete other[item._id];
                        }
                        item.remove();
                    }
                    sets[type] = null;
                }
            }
        },
        draw: function(ctx, matrix, pixelRatio) {
            this._updateVersion++;
            ctx.save();
            matrix.applyToContext(ctx);
            var children = this._children, param = new Base({
                offset: new Point(0, 0),
                pixelRatio: pixelRatio,
                viewMatrix: matrix.isIdentity() ? null : matrix,
                matrices: [
                    new Matrix()
                ],
                updateMatrix: true
            });
            for(var i = 0, l = children.length; i < l; i++)children[i].draw(ctx, param);
            ctx.restore();
            if (this._selectionCount > 0) {
                ctx.save();
                ctx.strokeWidth = 1;
                var items = this._selectionItems, size = this._scope.settings.handleSize, version = this._updateVersion;
                for(var id in items)items[id]._drawSelection(ctx, matrix, size, items, version);
                ctx.restore();
            }
        }
    });
    var Item = Base.extend(Emitter, {
        statics: {
            extend: function extend(src) {
                if (src._serializeFields) src._serializeFields = Base.set({}, this.prototype._serializeFields, src._serializeFields);
                return extend.base.apply(this, arguments);
            },
            INSERT: {
                insert: true
            },
            NO_INSERT: {
                insert: false
            }
        },
        _class: 'Item',
        _name: null,
        _applyMatrix: true,
        _canApplyMatrix: true,
        _canScaleStroke: false,
        _pivot: null,
        _visible: true,
        _blendMode: 'normal',
        _opacity: 1,
        _locked: false,
        _guide: false,
        _clipMask: false,
        _selection: 0,
        _selectBounds: true,
        _selectChildren: false,
        _serializeFields: {
            name: null,
            applyMatrix: null,
            matrix: new Matrix(),
            pivot: null,
            visible: true,
            blendMode: 'normal',
            opacity: 1,
            locked: false,
            guide: false,
            clipMask: false,
            selected: false,
            data: {}
        },
        _prioritize: [
            'applyMatrix'
        ]
    }, new function() {
        var handlers = [
            'onMouseDown',
            'onMouseUp',
            'onMouseDrag',
            'onClick',
            'onDoubleClick',
            'onMouseMove',
            'onMouseEnter',
            'onMouseLeave'
        ];
        return Base.each(handlers, function(name) {
            this._events[name] = {
                install: function(type) {
                    this.getView()._countItemEvent(type, 1);
                },
                uninstall: function(type) {
                    this.getView()._countItemEvent(type, -1);
                }
            };
        }, {
            _events: {
                onFrame: {
                    install: function() {
                        this.getView()._animateItem(this, true);
                    },
                    uninstall: function() {
                        this.getView()._animateItem(this, false);
                    }
                },
                onLoad: {},
                onError: {}
            },
            statics: {
                _itemHandlers: handlers
            }
        });
    }, {
        initialize: function Item() {},
        _initialize: function(props, point) {
            var hasProps = props && Base.isPlainObject(props), internal = hasProps && props.internal === true, matrix = this._matrix = new Matrix(), project = hasProps && props.project || paper.project, settings = paper.settings;
            this._id = internal ? null : UID.get();
            this._parent = this._index = null;
            this._applyMatrix = this._canApplyMatrix && settings.applyMatrix;
            if (point) matrix.translate(point);
            matrix._owner = this;
            this._style = new Style(project._currentStyle, this, project);
            if (internal || hasProps && props.insert == false || !settings.insertItems && !(hasProps && props.insert == true)) this._setProject(project);
            else (hasProps && props.parent || project)._insertItem(undefined, this, true);
            if (hasProps && props !== Item.NO_INSERT && props !== Item.INSERT) this.set(props, {
                internal: true,
                insert: true,
                project: true,
                parent: true
            });
            return hasProps;
        },
        _serialize: function(options, dictionary) {
            var props = {}, that = this;
            function serialize(fields) {
                for(var key in fields){
                    var value = that[key];
                    if (!Base.equals(value, key === 'leading' ? fields.fontSize * 1.2 : fields[key])) props[key] = Base.serialize(value, options, key !== 'data', dictionary);
                }
            }
            serialize(this._serializeFields);
            if (!(this instanceof Group)) serialize(this._style._defaults);
            return [
                this._class,
                props
            ];
        },
        _changed: function(flags) {
            var symbol = this._symbol, cacheParent = this._parent || symbol, project = this._project;
            if (flags & 8) this._bounds = this._position = this._decomposed = undefined;
            if (flags & 16) this._globalMatrix = undefined;
            if (cacheParent && flags & 72) Item._clearBoundsCache(cacheParent);
            if (flags & 2) Item._clearBoundsCache(this);
            if (project) project._changed(flags, this);
            if (symbol) symbol._changed(flags);
        },
        getId: function() {
            return this._id;
        },
        getName: function() {
            return this._name;
        },
        setName: function(name) {
            if (this._name) this._removeNamed();
            if (name === +name + '') throw new Error('Names consisting only of numbers are not supported.');
            var owner = this._getOwner();
            if (name && owner) {
                var children = owner._children, namedChildren = owner._namedChildren;
                (namedChildren[name] = namedChildren[name] || []).push(this);
                if (!(name in children)) children[name] = this;
            }
            this._name = name || undefined;
            this._changed(256);
        },
        getStyle: function() {
            return this._style;
        },
        setStyle: function(style) {
            this.getStyle().set(style);
        }
    }, Base.each([
        'locked',
        'visible',
        'blendMode',
        'opacity',
        'guide'
    ], function(name) {
        var part = Base.capitalize(name), key = '_' + name, flags = {
            locked: 256,
            visible: 265
        };
        this['get' + part] = function() {
            return this[key];
        };
        this['set' + part] = function(value) {
            if (value != this[key]) {
                this[key] = value;
                this._changed(flags[name] || 257);
            }
        };
    }, {}), {
        beans: true,
        getSelection: function() {
            return this._selection;
        },
        setSelection: function(selection) {
            if (selection !== this._selection) {
                this._selection = selection;
                var project = this._project;
                if (project) {
                    project._updateSelection(this);
                    this._changed(257);
                }
            }
        },
        _changeSelection: function(flag, selected) {
            var selection = this._selection;
            this.setSelection(selected ? selection | flag : selection & ~flag);
        },
        isSelected: function() {
            if (this._selectChildren) {
                var children = this._children;
                for(var i = 0, l = children.length; i < l; i++)if (children[i].isSelected()) return true;
            }
            return !!(this._selection & 1);
        },
        setSelected: function(selected) {
            if (this._selectChildren) {
                var children = this._children;
                for(var i = 0, l = children.length; i < l; i++)children[i].setSelected(selected);
            }
            this._changeSelection(1, selected);
        },
        isFullySelected: function() {
            var children = this._children, selected = !!(this._selection & 1);
            if (children && selected) {
                for(var i = 0, l = children.length; i < l; i++)if (!children[i].isFullySelected()) return false;
                return true;
            }
            return selected;
        },
        setFullySelected: function(selected) {
            var children = this._children;
            if (children) for(var i = 0, l = children.length; i < l; i++)children[i].setFullySelected(selected);
            this._changeSelection(1, selected);
        },
        isClipMask: function() {
            return this._clipMask;
        },
        setClipMask: function(clipMask) {
            if (this._clipMask != (clipMask = !!clipMask)) {
                this._clipMask = clipMask;
                if (clipMask) {
                    this.setFillColor(null);
                    this.setStrokeColor(null);
                }
                this._changed(257);
                if (this._parent) this._parent._changed(2048);
            }
        },
        getData: function() {
            if (!this._data) this._data = {};
            return this._data;
        },
        setData: function(data) {
            this._data = data;
        },
        getPosition: function(_dontLink) {
            var ctor = _dontLink ? Point : LinkedPoint;
            var position = this._position || (this._position = this._getPositionFromBounds());
            return new ctor(position.x, position.y, this, 'setPosition');
        },
        setPosition: function() {
            this.translate(Point.read(arguments).subtract(this.getPosition(true)));
        },
        _getPositionFromBounds: function(bounds) {
            return this._pivot ? this._matrix._transformPoint(this._pivot) : (bounds || this.getBounds()).getCenter(true);
        },
        getPivot: function() {
            var pivot = this._pivot;
            return pivot ? new LinkedPoint(pivot.x, pivot.y, this, 'setPivot') : null;
        },
        setPivot: function() {
            this._pivot = Point.read(arguments, 0, {
                clone: true,
                readNull: true
            });
            this._position = undefined;
        }
    }, Base.each({
        getStrokeBounds: {
            stroke: true
        },
        getHandleBounds: {
            handle: true
        },
        getInternalBounds: {
            internal: true
        }
    }, function(options, key) {
        this[key] = function(matrix) {
            return this.getBounds(matrix, options);
        };
    }, {
        beans: true,
        getBounds: function(matrix, options) {
            var hasMatrix = options || matrix instanceof Matrix, opts = Base.set({}, hasMatrix ? options : matrix, this._boundsOptions);
            if (!opts.stroke || this.getStrokeScaling()) opts.cacheItem = this;
            var rect = this._getCachedBounds(hasMatrix && matrix, opts).rect;
            return !arguments.length ? new LinkedRectangle(rect.x, rect.y, rect.width, rect.height, this, 'setBounds') : rect;
        },
        setBounds: function() {
            var rect = Rectangle.read(arguments), bounds = this.getBounds(), _matrix = this._matrix, matrix = new Matrix(), center = rect.getCenter();
            matrix.translate(center);
            if (rect.width != bounds.width || rect.height != bounds.height) {
                if (!_matrix.isInvertible()) {
                    _matrix.set(_matrix._backup || new Matrix().translate(_matrix.getTranslation()));
                    bounds = this.getBounds();
                }
                matrix.scale(bounds.width !== 0 ? rect.width / bounds.width : 0, bounds.height !== 0 ? rect.height / bounds.height : 0);
            }
            center = bounds.getCenter();
            matrix.translate(-center.x, -center.y);
            this.transform(matrix);
        },
        _getBounds: function(matrix, options) {
            var children = this._children;
            if (!children || !children.length) return new Rectangle();
            Item._updateBoundsCache(this, options.cacheItem);
            return Item._getBounds(children, matrix, options);
        },
        _getBoundsCacheKey: function(options, internal) {
            return [
                options.stroke ? 1 : 0,
                options.handle ? 1 : 0,
                internal ? 1 : 0
            ].join('');
        },
        _getCachedBounds: function(matrix, options, noInternal) {
            matrix = matrix && matrix._orNullIfIdentity();
            var internal = options.internal && !noInternal, cacheItem = options.cacheItem, _matrix = internal ? null : this._matrix._orNullIfIdentity(), cacheKey = cacheItem && (!matrix || matrix.equals(_matrix)) && this._getBoundsCacheKey(options, internal), bounds = this._bounds;
            Item._updateBoundsCache(this._parent || this._symbol, cacheItem);
            if (cacheKey && bounds && cacheKey in bounds) {
                var cached = bounds[cacheKey];
                return {
                    rect: cached.rect.clone(),
                    nonscaling: cached.nonscaling
                };
            }
            var res = this._getBounds(matrix || _matrix, options), rect = res.rect || res, style = this._style, nonscaling = res.nonscaling || style.hasStroke() && !style.getStrokeScaling();
            if (cacheKey) {
                if (!bounds) this._bounds = bounds = {};
                var cached = bounds[cacheKey] = {
                    rect: rect.clone(),
                    nonscaling: nonscaling,
                    internal: internal
                };
            }
            return {
                rect: rect,
                nonscaling: nonscaling
            };
        },
        _getStrokeMatrix: function(matrix, options) {
            var parent = this.getStrokeScaling() ? null : options && options.internal ? this : this._parent || this._symbol && this._symbol._item, mx = parent ? parent.getViewMatrix().invert() : matrix;
            return mx && mx._shiftless();
        },
        statics: {
            _updateBoundsCache: function(parent, item) {
                if (parent && item) {
                    var id = item._id, ref = parent._boundsCache = parent._boundsCache || {
                        ids: {},
                        list: []
                    };
                    if (!ref.ids[id]) {
                        ref.list.push(item);
                        ref.ids[id] = item;
                    }
                }
            },
            _clearBoundsCache: function(item) {
                var cache = item._boundsCache;
                if (cache) {
                    item._bounds = item._position = item._boundsCache = undefined;
                    for(var i = 0, list = cache.list, l = list.length; i < l; i++){
                        var other = list[i];
                        if (other !== item) {
                            other._bounds = other._position = undefined;
                            if (other._boundsCache) Item._clearBoundsCache(other);
                        }
                    }
                }
            },
            _getBounds: function(items, matrix, options) {
                var x1 = Infinity, x2 = -x1, y1 = x1, y2 = x2, nonscaling = false;
                options = options || {};
                for(var i = 0, l = items.length; i < l; i++){
                    var item = items[i];
                    if (item._visible && !item.isEmpty(true)) {
                        var bounds = item._getCachedBounds(matrix && matrix.appended(item._matrix), options, true), rect = bounds.rect;
                        x1 = Math.min(rect.x, x1);
                        y1 = Math.min(rect.y, y1);
                        x2 = Math.max(rect.x + rect.width, x2);
                        y2 = Math.max(rect.y + rect.height, y2);
                        if (bounds.nonscaling) nonscaling = true;
                    }
                }
                return {
                    rect: isFinite(x1) ? new Rectangle(x1, y1, x2 - x1, y2 - y1) : new Rectangle(),
                    nonscaling: nonscaling
                };
            }
        }
    }), {
        beans: true,
        _decompose: function() {
            return this._applyMatrix ? null : this._decomposed || (this._decomposed = this._matrix.decompose());
        },
        getRotation: function() {
            var decomposed = this._decompose();
            return decomposed ? decomposed.rotation : 0;
        },
        setRotation: function(rotation) {
            var current = this.getRotation();
            if (current != null && rotation != null) {
                var decomposed = this._decomposed;
                this.rotate(rotation - current);
                if (decomposed) {
                    decomposed.rotation = rotation;
                    this._decomposed = decomposed;
                }
            }
        },
        getScaling: function() {
            var decomposed = this._decompose(), s = decomposed && decomposed.scaling;
            return new LinkedPoint(s ? s.x : 1, s ? s.y : 1, this, 'setScaling');
        },
        setScaling: function() {
            var current = this.getScaling(), scaling = Point.read(arguments, 0, {
                clone: true,
                readNull: true
            });
            if (current && scaling && !current.equals(scaling)) {
                var rotation = this.getRotation(), decomposed = this._decomposed, matrix = new Matrix(), isZero = Numerical.isZero;
                if (isZero(current.x) || isZero(current.y)) {
                    matrix.translate(decomposed.translation);
                    if (rotation) matrix.rotate(rotation);
                    matrix.scale(scaling.x, scaling.y);
                    this._matrix.set(matrix);
                } else {
                    var center = this.getPosition(true);
                    matrix.translate(center);
                    if (rotation) matrix.rotate(rotation);
                    matrix.scale(scaling.x / current.x, scaling.y / current.y);
                    if (rotation) matrix.rotate(-rotation);
                    matrix.translate(center.negate());
                    this.transform(matrix);
                }
                if (decomposed) {
                    decomposed.scaling = scaling;
                    this._decomposed = decomposed;
                }
            }
        },
        getMatrix: function() {
            return this._matrix;
        },
        setMatrix: function() {
            var matrix = this._matrix;
            matrix.set.apply(matrix, arguments);
        },
        getGlobalMatrix: function(_dontClone) {
            var matrix = this._globalMatrix;
            if (matrix) {
                var parent = this._parent;
                var parents = [];
                while(parent){
                    if (!parent._globalMatrix) {
                        matrix = null;
                        for(var i = 0, l = parents.length; i < l; i++)parents[i]._globalMatrix = null;
                        break;
                    }
                    parents.push(parent);
                    parent = parent._parent;
                }
            }
            if (!matrix) {
                matrix = this._globalMatrix = this._matrix.clone();
                var parent = this._parent;
                if (parent) matrix.prepend(parent.getGlobalMatrix(true));
            }
            return _dontClone ? matrix : matrix.clone();
        },
        getViewMatrix: function() {
            return this.getGlobalMatrix().prepend(this.getView()._matrix);
        },
        getApplyMatrix: function() {
            return this._applyMatrix;
        },
        setApplyMatrix: function(apply) {
            if (this._applyMatrix = this._canApplyMatrix && !!apply) this.transform(null, true);
        },
        getTransformContent: '#getApplyMatrix',
        setTransformContent: '#setApplyMatrix'
    }, {
        getProject: function() {
            return this._project;
        },
        _setProject: function(project, installEvents) {
            if (this._project !== project) {
                if (this._project) this._installEvents(false);
                this._project = project;
                var children = this._children;
                for(var i = 0, l = children && children.length; i < l; i++)children[i]._setProject(project);
                installEvents = true;
            }
            if (installEvents) this._installEvents(true);
        },
        getView: function() {
            return this._project._view;
        },
        _installEvents: function _installEvents(install) {
            _installEvents.base.call(this, install);
            var children = this._children;
            for(var i = 0, l = children && children.length; i < l; i++)children[i]._installEvents(install);
        },
        getLayer: function() {
            var parent = this;
            while(parent = parent._parent){
                if (parent instanceof Layer) return parent;
            }
            return null;
        },
        getParent: function() {
            return this._parent;
        },
        setParent: function(item) {
            return item.addChild(this);
        },
        _getOwner: '#getParent',
        getChildren: function() {
            return this._children;
        },
        setChildren: function(items) {
            this.removeChildren();
            this.addChildren(items);
        },
        getFirstChild: function() {
            return this._children && this._children[0] || null;
        },
        getLastChild: function() {
            return this._children && this._children[this._children.length - 1] || null;
        },
        getNextSibling: function() {
            var owner = this._getOwner();
            return owner && owner._children[this._index + 1] || null;
        },
        getPreviousSibling: function() {
            var owner = this._getOwner();
            return owner && owner._children[this._index - 1] || null;
        },
        getIndex: function() {
            return this._index;
        },
        setIndex: function(index) {
            var parent = this._parent, children = parent && parent._children;
            if (children) parent.insertChildren(index in children ? index : undefined, [
                this
            ]);
        },
        equals: function(item) {
            return item === this || item && this._class === item._class && this._style.equals(item._style) && this._matrix.equals(item._matrix) && this._locked === item._locked && this._visible === item._visible && this._blendMode === item._blendMode && this._opacity === item._opacity && this._clipMask === item._clipMask && this._guide === item._guide && this._equals(item) || false;
        },
        _equals: function(item) {
            return Base.equals(this._children, item._children);
        },
        clone: function(options) {
            var copy = new this.constructor(Item.NO_INSERT), children = this._children, insert = Base.pick(options ? options.insert : undefined, options === undefined || options === true), deep = Base.pick(options ? options.deep : undefined, true);
            if (children) copy.copyAttributes(this);
            if (!children || deep) copy.copyContent(this);
            if (!children) copy.copyAttributes(this);
            if (insert) copy.insertAbove(this);
            var name = this._name, parent = this._parent;
            if (name && parent) {
                var children = parent._children, orig = name, i = 1;
                while(children[name])name = orig + ' ' + i++;
                if (name !== orig) copy.setName(name);
            }
            return copy;
        },
        copyContent: function(source) {
            var children = source._children;
            for(var i = 0, l = children && children.length; i < l; i++)this.addChild(children[i].clone(false), true);
        },
        copyAttributes: function(source, excludeMatrix) {
            this.setStyle(source._style);
            var keys = [
                '_locked',
                '_visible',
                '_blendMode',
                '_opacity',
                '_clipMask',
                '_guide'
            ];
            for(var i = 0, l = keys.length; i < l; i++){
                var key = keys[i];
                if (source.hasOwnProperty(key)) this[key] = source[key];
            }
            if (!excludeMatrix) this._matrix.set(source._matrix, true);
            this.setApplyMatrix(source._applyMatrix);
            this.setPivot(source._pivot);
            this.setSelection(source._selection);
            var data = source._data, name = source._name;
            this._data = data ? Base.clone(data) : null;
            if (name) this.setName(name);
        },
        rasterize: function(arg0, arg1) {
            var resolution, insert, raster;
            if (Base.isPlainObject(arg0)) {
                resolution = arg0.resolution;
                insert = arg0.insert;
                raster = arg0.raster;
            } else {
                resolution = arg0;
                insert = arg1;
            }
            if (!raster) raster = new Raster(Item.NO_INSERT);
            var bounds = this.getStrokeBounds(), scale = (resolution || this.getView().getResolution()) / 72, topLeft = bounds.getTopLeft().floor(), bottomRight = bounds.getBottomRight().ceil(), boundsSize = new Size(bottomRight.subtract(topLeft)), rasterSize = boundsSize.multiply(scale);
            raster.setSize(rasterSize, true);
            if (!rasterSize.isZero()) {
                var ctx = raster.getContext(true), matrix = new Matrix().scale(scale).translate(topLeft.negate());
                ctx.save();
                matrix.applyToContext(ctx);
                this.draw(ctx, new Base({
                    matrices: [
                        matrix
                    ]
                }));
                ctx.restore();
            }
            raster._matrix.set(new Matrix().translate(topLeft.add(boundsSize.divide(2))).scale(1 / scale));
            if (insert === undefined || insert) raster.insertAbove(this);
            return raster;
        },
        contains: function() {
            var matrix = this._matrix;
            return matrix.isInvertible() && !!this._contains(matrix._inverseTransform(Point.read(arguments)));
        },
        _contains: function(point) {
            var children = this._children;
            if (children) {
                for(var i = children.length - 1; i >= 0; i--){
                    if (children[i].contains(point)) return true;
                }
                return false;
            }
            return point.isInside(this.getInternalBounds());
        },
        isInside: function() {
            return Rectangle.read(arguments).contains(this.getBounds());
        },
        _asPathItem: function() {
            return new Path.Rectangle({
                rectangle: this.getInternalBounds(),
                matrix: this._matrix,
                insert: false
            });
        },
        intersects: function(item, _matrix) {
            if (!(item instanceof Item)) return false;
            return this._asPathItem().getIntersections(item._asPathItem(), null, _matrix, true).length > 0;
        }
    }, new function() {
        function hitTest() {
            var args = arguments;
            return this._hitTest(Point.read(args), HitResult.getOptions(args));
        }
        function hitTestAll() {
            var args = arguments, point = Point.read(args), options = HitResult.getOptions(args), all = [];
            this._hitTest(point, new Base({
                all: all
            }, options));
            return all;
        }
        function hitTestChildren(point, options, viewMatrix, _exclude) {
            var children = this._children;
            if (children) for(var i = children.length - 1; i >= 0; i--){
                var child = children[i];
                var res = child !== _exclude && child._hitTest(point, options, viewMatrix);
                if (res && !options.all) return res;
            }
            return null;
        }
        Project.inject({
            hitTest: hitTest,
            hitTestAll: hitTestAll,
            _hitTest: hitTestChildren
        });
        return {
            hitTest: hitTest,
            hitTestAll: hitTestAll,
            _hitTestChildren: hitTestChildren
        };
    }, {
        _hitTest: function(point, options, parentViewMatrix) {
            if (this._locked || !this._visible || this._guide && !options.guides || this.isEmpty()) return null;
            var matrix = this._matrix, viewMatrix = parentViewMatrix ? parentViewMatrix.appended(matrix) : this.getGlobalMatrix().prepend(this.getView()._matrix), tolerance = Math.max(options.tolerance, 1e-12), tolerancePadding = options._tolerancePadding = new Size(Path._getStrokePadding(tolerance, matrix._shiftless().invert()));
            point = matrix._inverseTransform(point);
            if (!point || !this._children && !this.getBounds({
                internal: true,
                stroke: true,
                handle: true
            }).expand(tolerancePadding.multiply(2))._containsPoint(point)) return null;
            var checkSelf = !(options.guides && !this._guide || options.selected && !this.isSelected() || options.type && options.type !== Base.hyphenate(this._class) || options.class && !(this instanceof options.class)), match = options.match, that = this, bounds, res;
            function filter(hit) {
                if (hit && match && !match(hit)) hit = null;
                if (hit && options.all) options.all.push(hit);
                return hit;
            }
            function checkPoint(type, part) {
                var pt = part ? bounds['get' + part]() : that.getPosition();
                if (point.subtract(pt).divide(tolerancePadding).length <= 1) return new HitResult(type, that, {
                    name: part ? Base.hyphenate(part) : type,
                    point: pt
                });
            }
            var checkPosition = options.position, checkCenter = options.center, checkBounds = options.bounds;
            if (checkSelf && this._parent && (checkPosition || checkCenter || checkBounds)) {
                if (checkCenter || checkBounds) bounds = this.getInternalBounds();
                res = checkPosition && checkPoint('position') || checkCenter && checkPoint('center', 'Center');
                if (!res && checkBounds) {
                    var points = [
                        'TopLeft',
                        'TopRight',
                        'BottomLeft',
                        'BottomRight',
                        'LeftCenter',
                        'TopCenter',
                        'RightCenter',
                        'BottomCenter'
                    ];
                    for(var i = 0; i < 8 && !res; i++)res = checkPoint('bounds', points[i]);
                }
                res = filter(res);
            }
            if (!res) res = this._hitTestChildren(point, options, viewMatrix) || checkSelf && filter(this._hitTestSelf(point, options, viewMatrix, this.getStrokeScaling() ? null : viewMatrix._shiftless().invert())) || null;
            if (res && res.point) res.point = matrix.transform(res.point);
            return res;
        },
        _hitTestSelf: function(point, options) {
            if (options.fill && this.hasFill() && this._contains(point)) return new HitResult('fill', this);
        },
        matches: function(name, compare) {
            function matchObject(obj1, obj2) {
                for(var i in obj1)if (obj1.hasOwnProperty(i)) {
                    var val1 = obj1[i], val2 = obj2[i];
                    if (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {
                        if (!matchObject(val1, val2)) return false;
                    } else if (!Base.equals(val1, val2)) return false;
                }
                return true;
            }
            var type = typeof name;
            if (type === 'object') {
                for(var key in name){
                    if (name.hasOwnProperty(key) && !this.matches(key, name[key])) return false;
                }
                return true;
            } else if (type === 'function') return name(this);
            else if (name === 'match') return compare(this);
            else {
                var value = /^(empty|editable)$/.test(name) ? this['is' + Base.capitalize(name)]() : name === 'type' ? Base.hyphenate(this._class) : this[name];
                if (name === 'class') {
                    if (typeof compare === 'function') return this instanceof compare;
                    value = this._class;
                }
                if (typeof compare === 'function') return !!compare(value);
                else if (compare) {
                    if (compare.test) return compare.test(value);
                    else if (Base.isPlainObject(compare)) return matchObject(compare, value);
                }
                return Base.equals(value, compare);
            }
        },
        getItems: function(options) {
            return Item._getItems(this, options, this._matrix);
        },
        getItem: function(options) {
            return Item._getItems(this, options, this._matrix, null, true)[0] || null;
        },
        statics: {
            _getItems: function _getItems(item, options, matrix, param, firstOnly) {
                if (!param) {
                    var obj = typeof options === 'object' && options, overlapping = obj && obj.overlapping, inside = obj && obj.inside, bounds = overlapping || inside, rect = bounds && Rectangle.read([
                        bounds
                    ]);
                    param = {
                        items: [],
                        recursive: obj && obj.recursive !== false,
                        inside: !!inside,
                        overlapping: !!overlapping,
                        rect: rect,
                        path: overlapping && new Path.Rectangle({
                            rectangle: rect,
                            insert: false
                        })
                    };
                    if (obj) options = Base.filter({}, options, {
                        recursive: true,
                        inside: true,
                        overlapping: true
                    });
                }
                var children = item._children, items = param.items, rect = param.rect;
                matrix = rect && (matrix || new Matrix());
                for(var i = 0, l = children && children.length; i < l; i++){
                    var child = children[i], childMatrix = matrix && matrix.appended(child._matrix), add = true;
                    if (rect) {
                        var bounds = child.getBounds(childMatrix);
                        if (!rect.intersects(bounds)) continue;
                        if (!(rect.contains(bounds) || param.overlapping && (bounds.contains(rect) || param.path.intersects(child, childMatrix)))) add = false;
                    }
                    if (add && child.matches(options)) {
                        items.push(child);
                        if (firstOnly) break;
                    }
                    if (param.recursive !== false) _getItems(child, options, childMatrix, param, firstOnly);
                    if (firstOnly && items.length > 0) break;
                }
                return items;
            }
        }
    }, {
        importJSON: function(json) {
            var res = Base.importJSON(json, this);
            return res !== this ? this.addChild(res) : res;
        },
        addChild: function(item) {
            return this.insertChild(undefined, item);
        },
        insertChild: function(index, item) {
            var res = item ? this.insertChildren(index, [
                item
            ]) : null;
            return res && res[0];
        },
        addChildren: function(items) {
            return this.insertChildren(this._children.length, items);
        },
        insertChildren: function(index, items) {
            var children = this._children;
            if (children && items && items.length > 0) {
                items = Base.slice(items);
                var inserted = {};
                for(var i = items.length - 1; i >= 0; i--){
                    var item = items[i], id = item && item._id;
                    if (!item || inserted[id]) items.splice(i, 1);
                    else {
                        item._remove(false, true);
                        inserted[id] = true;
                    }
                }
                Base.splice(children, items, index, 0);
                var project = this._project, notifySelf = project._changes;
                for(var i = 0, l = items.length; i < l; i++){
                    var item = items[i], name = item._name;
                    item._parent = this;
                    item._setProject(project, true);
                    if (name) item.setName(name);
                    if (notifySelf) item._changed(5);
                }
                this._changed(11);
            } else items = null;
            return items;
        },
        _insertItem: '#insertChild',
        _insertAt: function(item, offset) {
            var owner = item && item._getOwner(), res = item !== this && owner ? this : null;
            if (res) {
                res._remove(false, true);
                owner._insertItem(item._index + offset, res);
            }
            return res;
        },
        insertAbove: function(item) {
            return this._insertAt(item, 1);
        },
        insertBelow: function(item) {
            return this._insertAt(item, 0);
        },
        sendToBack: function() {
            var owner = this._getOwner();
            return owner ? owner._insertItem(0, this) : null;
        },
        bringToFront: function() {
            var owner = this._getOwner();
            return owner ? owner._insertItem(undefined, this) : null;
        },
        appendTop: '#addChild',
        appendBottom: function(item) {
            return this.insertChild(0, item);
        },
        moveAbove: '#insertAbove',
        moveBelow: '#insertBelow',
        addTo: function(owner) {
            return owner._insertItem(undefined, this);
        },
        copyTo: function(owner) {
            return this.clone(false).addTo(owner);
        },
        reduce: function(options) {
            var children = this._children;
            if (children && children.length === 1) {
                var child = children[0].reduce(options);
                if (this._parent) {
                    child.insertAbove(this);
                    this.remove();
                } else child.remove();
                return child;
            }
            return this;
        },
        _removeNamed: function() {
            var owner = this._getOwner();
            if (owner) {
                var children = owner._children, namedChildren = owner._namedChildren, name = this._name, namedArray = namedChildren[name], index = namedArray ? namedArray.indexOf(this) : -1;
                if (index !== -1) {
                    if (children[name] == this) delete children[name];
                    namedArray.splice(index, 1);
                    if (namedArray.length) children[name] = namedArray[0];
                    else delete namedChildren[name];
                }
            }
        },
        _remove: function(notifySelf, notifyParent) {
            var owner = this._getOwner(), project = this._project, index = this._index;
            if (this._style) this._style._dispose();
            if (owner) {
                if (this._name) this._removeNamed();
                if (index != null) {
                    if (project._activeLayer === this) project._activeLayer = this.getNextSibling() || this.getPreviousSibling();
                    Base.splice(owner._children, null, index, 1);
                }
                this._installEvents(false);
                if (notifySelf && project._changes) this._changed(5);
                if (notifyParent) owner._changed(11, this);
                this._parent = null;
                return true;
            }
            return false;
        },
        remove: function() {
            return this._remove(true, true);
        },
        replaceWith: function(item) {
            var ok = item && item.insertBelow(this);
            if (ok) this.remove();
            return ok;
        },
        removeChildren: function(start, end) {
            if (!this._children) return null;
            start = start || 0;
            end = Base.pick(end, this._children.length);
            var removed = Base.splice(this._children, null, start, end - start);
            for(var i = removed.length - 1; i >= 0; i--)removed[i]._remove(true, false);
            if (removed.length > 0) this._changed(11);
            return removed;
        },
        clear: '#removeChildren',
        reverseChildren: function() {
            if (this._children) {
                this._children.reverse();
                for(var i = 0, l = this._children.length; i < l; i++)this._children[i]._index = i;
                this._changed(11);
            }
        },
        isEmpty: function(recursively) {
            var children = this._children;
            var numChildren = children ? children.length : 0;
            if (recursively) {
                for(var i = 0; i < numChildren; i++){
                    if (!children[i].isEmpty(recursively)) return false;
                }
                return true;
            }
            return !numChildren;
        },
        isEditable: function() {
            var item = this;
            while(item){
                if (!item._visible || item._locked) return false;
                item = item._parent;
            }
            return true;
        },
        hasFill: function() {
            return this.getStyle().hasFill();
        },
        hasStroke: function() {
            return this.getStyle().hasStroke();
        },
        hasShadow: function() {
            return this.getStyle().hasShadow();
        },
        _getOrder: function(item) {
            function getList(item) {
                var list = [];
                do list.unshift(item);
                while (item = item._parent);
                return list;
            }
            var list1 = getList(this), list2 = getList(item);
            for(var i = 0, l = Math.min(list1.length, list2.length); i < l; i++){
                if (list1[i] != list2[i]) return list1[i]._index < list2[i]._index ? 1 : -1;
            }
            return 0;
        },
        hasChildren: function() {
            return this._children && this._children.length > 0;
        },
        isInserted: function() {
            return this._parent ? this._parent.isInserted() : false;
        },
        isAbove: function(item) {
            return this._getOrder(item) === -1;
        },
        isBelow: function(item) {
            return this._getOrder(item) === 1;
        },
        isParent: function(item) {
            return this._parent === item;
        },
        isChild: function(item) {
            return item && item._parent === this;
        },
        isDescendant: function(item) {
            var parent = this;
            while(parent = parent._parent){
                if (parent === item) return true;
            }
            return false;
        },
        isAncestor: function(item) {
            return item ? item.isDescendant(this) : false;
        },
        isSibling: function(item) {
            return this._parent === item._parent;
        },
        isGroupedWith: function(item) {
            var parent = this._parent;
            while(parent){
                if (parent._parent && /^(Group|Layer|CompoundPath)$/.test(parent._class) && item.isDescendant(parent)) return true;
                parent = parent._parent;
            }
            return false;
        }
    }, Base.each([
        'rotate',
        'scale',
        'shear',
        'skew'
    ], function(key) {
        var rotate = key === 'rotate';
        this[key] = function() {
            var args = arguments, value = (rotate ? Base : Point).read(args), center = Point.read(args, 0, {
                readNull: true
            });
            return this.transform(new Matrix()[key](value, center || this.getPosition(true)));
        };
    }, {
        translate: function() {
            var mx = new Matrix();
            return this.transform(mx.translate.apply(mx, arguments));
        },
        transform: function(matrix, _applyRecursively, _setApplyMatrix) {
            var _matrix = this._matrix, transformMatrix = matrix && !matrix.isIdentity(), applyMatrix = _setApplyMatrix && this._canApplyMatrix || this._applyMatrix && (transformMatrix || !_matrix.isIdentity() || _applyRecursively && this._children);
            if (!transformMatrix && !applyMatrix) return this;
            if (transformMatrix) {
                if (!matrix.isInvertible() && _matrix.isInvertible()) _matrix._backup = _matrix.getValues();
                _matrix.prepend(matrix, true);
                var style = this._style, fillColor = style.getFillColor(true), strokeColor = style.getStrokeColor(true);
                if (fillColor) fillColor.transform(matrix);
                if (strokeColor) strokeColor.transform(matrix);
            }
            if (applyMatrix && (applyMatrix = this._transformContent(_matrix, _applyRecursively, _setApplyMatrix))) {
                var pivot = this._pivot;
                if (pivot) _matrix._transformPoint(pivot, pivot, true);
                _matrix.reset(true);
                if (_setApplyMatrix && this._canApplyMatrix) this._applyMatrix = true;
            }
            var bounds = this._bounds, position = this._position;
            if (transformMatrix || applyMatrix) this._changed(25);
            var decomp = transformMatrix && bounds && matrix.decompose();
            if (decomp && decomp.skewing.isZero() && decomp.rotation % 90 === 0) {
                for(var key in bounds){
                    var cache = bounds[key];
                    if (cache.nonscaling) delete bounds[key];
                    else if (applyMatrix || !cache.internal) {
                        var rect = cache.rect;
                        matrix._transformBounds(rect, rect);
                    }
                }
                this._bounds = bounds;
                var cached = bounds[this._getBoundsCacheKey(this._boundsOptions || {})];
                if (cached) this._position = this._getPositionFromBounds(cached.rect);
            } else if (transformMatrix && position && this._pivot) this._position = matrix._transformPoint(position, position);
            return this;
        },
        _transformContent: function(matrix, applyRecursively, setApplyMatrix) {
            var children = this._children;
            if (children) {
                for(var i = 0, l = children.length; i < l; i++)children[i].transform(matrix, applyRecursively, setApplyMatrix);
                return true;
            }
        },
        globalToLocal: function() {
            return this.getGlobalMatrix(true)._inverseTransform(Point.read(arguments));
        },
        localToGlobal: function() {
            return this.getGlobalMatrix(true)._transformPoint(Point.read(arguments));
        },
        parentToLocal: function() {
            return this._matrix._inverseTransform(Point.read(arguments));
        },
        localToParent: function() {
            return this._matrix._transformPoint(Point.read(arguments));
        },
        fitBounds: function(rectangle, fill) {
            rectangle = Rectangle.read(arguments);
            var bounds = this.getBounds(), itemRatio = bounds.height / bounds.width, rectRatio = rectangle.height / rectangle.width, scale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio) ? rectangle.width / bounds.width : rectangle.height / bounds.height, newBounds = new Rectangle(new Point(), new Size(bounds.width * scale, bounds.height * scale));
            newBounds.setCenter(rectangle.getCenter());
            this.setBounds(newBounds);
        }
    }), {
        _setStyles: function(ctx, param, viewMatrix) {
            var style = this._style, matrix = this._matrix;
            if (style.hasFill()) ctx.fillStyle = style.getFillColor().toCanvasStyle(ctx, matrix);
            if (style.hasStroke()) {
                ctx.strokeStyle = style.getStrokeColor().toCanvasStyle(ctx, matrix);
                ctx.lineWidth = style.getStrokeWidth();
                var strokeJoin = style.getStrokeJoin(), strokeCap = style.getStrokeCap(), miterLimit = style.getMiterLimit();
                if (strokeJoin) ctx.lineJoin = strokeJoin;
                if (strokeCap) ctx.lineCap = strokeCap;
                if (miterLimit) ctx.miterLimit = miterLimit;
                if (paper.support.nativeDash) {
                    var dashArray = style.getDashArray(), dashOffset = style.getDashOffset();
                    if (dashArray && dashArray.length) {
                        if ('setLineDash' in ctx) {
                            ctx.setLineDash(dashArray);
                            ctx.lineDashOffset = dashOffset;
                        } else {
                            ctx.mozDash = dashArray;
                            ctx.mozDashOffset = dashOffset;
                        }
                    }
                }
            }
            if (style.hasShadow()) {
                var pixelRatio = param.pixelRatio || 1, mx = viewMatrix._shiftless().prepend(new Matrix().scale(pixelRatio, pixelRatio)), blur = mx.transform(new Point(style.getShadowBlur(), 0)), offset = mx.transform(this.getShadowOffset());
                ctx.shadowColor = style.getShadowColor().toCanvasStyle(ctx);
                ctx.shadowBlur = blur.getLength();
                ctx.shadowOffsetX = offset.x;
                ctx.shadowOffsetY = offset.y;
            }
        },
        draw: function(ctx, param, parentStrokeMatrix) {
            var updateVersion = this._updateVersion = this._project._updateVersion;
            if (!this._visible || this._opacity === 0) return;
            var matrices = param.matrices, viewMatrix = param.viewMatrix, matrix = this._matrix, globalMatrix = matrices[matrices.length - 1].appended(matrix);
            if (!globalMatrix.isInvertible()) return;
            viewMatrix = viewMatrix ? viewMatrix.appended(globalMatrix) : globalMatrix;
            matrices.push(globalMatrix);
            if (param.updateMatrix) this._globalMatrix = globalMatrix;
            var blendMode = this._blendMode, opacity = Numerical.clamp(this._opacity, 0, 1), normalBlend = blendMode === 'normal', nativeBlend = BlendMode.nativeModes[blendMode], direct = normalBlend && opacity === 1 || param.dontStart || param.clip || (nativeBlend || normalBlend && opacity < 1) && this._canComposite(), pixelRatio = param.pixelRatio || 1, mainCtx, itemOffset, prevOffset;
            if (!direct) {
                var bounds = this.getStrokeBounds(viewMatrix);
                if (!bounds.width || !bounds.height) {
                    matrices.pop();
                    return;
                }
                prevOffset = param.offset;
                itemOffset = param.offset = bounds.getTopLeft().floor();
                mainCtx = ctx;
                ctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1).multiply(pixelRatio));
                if (pixelRatio !== 1) ctx.scale(pixelRatio, pixelRatio);
            }
            ctx.save();
            var strokeMatrix = parentStrokeMatrix ? parentStrokeMatrix.appended(matrix) : this._canScaleStroke && !this.getStrokeScaling(true) && viewMatrix, clip = !direct && param.clipItem, transform = !strokeMatrix || clip;
            if (direct) {
                ctx.globalAlpha = opacity;
                if (nativeBlend) ctx.globalCompositeOperation = blendMode;
            } else if (transform) ctx.translate(-itemOffset.x, -itemOffset.y);
            if (transform) (direct ? matrix : viewMatrix).applyToContext(ctx);
            if (clip) param.clipItem.draw(ctx, param.extend({
                clip: true
            }));
            if (strokeMatrix) {
                ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
                var offset = param.offset;
                if (offset) ctx.translate(-offset.x, -offset.y);
            }
            this._draw(ctx, param, viewMatrix, strokeMatrix);
            ctx.restore();
            matrices.pop();
            if (param.clip && !param.dontFinish) ctx.clip(this.getFillRule());
            if (!direct) {
                BlendMode.process(blendMode, ctx, mainCtx, opacity, itemOffset.subtract(prevOffset).multiply(pixelRatio));
                CanvasProvider.release(ctx);
                param.offset = prevOffset;
            }
        },
        _isUpdated: function(updateVersion) {
            var parent = this._parent;
            if (parent instanceof CompoundPath) return parent._isUpdated(updateVersion);
            var updated = this._updateVersion === updateVersion;
            if (!updated && parent && parent._visible && parent._isUpdated(updateVersion)) {
                this._updateVersion = updateVersion;
                updated = true;
            }
            return updated;
        },
        _drawSelection: function(ctx, matrix, size, selectionItems, updateVersion) {
            var selection = this._selection, itemSelected = selection & 1, boundsSelected = selection & 2 || itemSelected && this._selectBounds, positionSelected = selection & 4;
            if (!this._drawSelected) itemSelected = false;
            if ((itemSelected || boundsSelected || positionSelected) && this._isUpdated(updateVersion)) {
                var layer, color = this.getSelectedColor(true) || (layer = this.getLayer()) && layer.getSelectedColor(true), mx = matrix.appended(this.getGlobalMatrix(true)), half = size / 2;
                ctx.strokeStyle = ctx.fillStyle = color ? color.toCanvasStyle(ctx) : '#009dec';
                if (itemSelected) this._drawSelected(ctx, mx, selectionItems);
                if (positionSelected) {
                    var pos = this.getPosition(true), parent = this._parent, point = parent ? parent.localToGlobal(pos) : pos, x = point.x, y = point.y;
                    ctx.beginPath();
                    ctx.arc(x, y, half, 0, Math.PI * 2, true);
                    ctx.stroke();
                    var deltas = [
                        [
                            0,
                            -1
                        ],
                        [
                            1,
                            0
                        ],
                        [
                            0,
                            1
                        ],
                        [
                            -1,
                            0
                        ]
                    ], start = half, end = size + 1;
                    for(var i = 0; i < 4; i++){
                        var delta = deltas[i], dx = delta[0], dy = delta[1];
                        ctx.moveTo(x + dx * start, y + dy * start);
                        ctx.lineTo(x + dx * end, y + dy * end);
                        ctx.stroke();
                    }
                }
                if (boundsSelected) {
                    var coords = mx._transformCorners(this.getInternalBounds());
                    ctx.beginPath();
                    for(var i = 0; i < 8; i++)ctx[!i ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);
                    ctx.closePath();
                    ctx.stroke();
                    for(var i = 0; i < 8; i++)ctx.fillRect(coords[i] - half, coords[++i] - half, size, size);
                }
            }
        },
        _canComposite: function() {
            return false;
        }
    }, Base.each([
        'down',
        'drag',
        'up',
        'move'
    ], function(key) {
        this['removeOn' + Base.capitalize(key)] = function() {
            var hash = {};
            hash[key] = true;
            return this.removeOn(hash);
        };
    }, {
        removeOn: function(obj) {
            for(var name in obj)if (obj[name]) {
                var key = 'mouse' + name, project = this._project, sets = project._removeSets = project._removeSets || {};
                sets[key] = sets[key] || {};
                sets[key][this._id] = this;
            }
            return this;
        }
    }), {
        tween: function(from, to, options) {
            if (!options) {
                options = to;
                to = from;
                from = null;
                if (!options) {
                    options = to;
                    to = null;
                }
            }
            var easing = options && options.easing, start = options && options.start, duration = options != null && (typeof options === 'number' ? options : options.duration), tween = new Tween(this, from, to, duration, easing, start);
            function onFrame(event) {
                tween._handleFrame(event.time * 1000);
                if (!tween.running) this.off('frame', onFrame);
            }
            if (duration) this.on('frame', onFrame);
            return tween;
        },
        tweenTo: function(to, options) {
            return this.tween(null, to, options);
        },
        tweenFrom: function(from, options) {
            return this.tween(from, null, options);
        }
    });
    var Group = Item.extend({
        _class: 'Group',
        _selectBounds: false,
        _selectChildren: true,
        _serializeFields: {
            children: []
        },
        initialize: function Group(arg) {
            this._children = [];
            this._namedChildren = {};
            if (!this._initialize(arg)) this.addChildren(Array.isArray(arg) ? arg : arguments);
        },
        _changed: function _changed(flags) {
            _changed.base.call(this, flags);
            if (flags & 2050) this._clipItem = undefined;
        },
        _getClipItem: function() {
            var clipItem = this._clipItem;
            if (clipItem === undefined) {
                clipItem = null;
                var children = this._children;
                for(var i = 0, l = children.length; i < l; i++)if (children[i]._clipMask) {
                    clipItem = children[i];
                    break;
                }
                this._clipItem = clipItem;
            }
            return clipItem;
        },
        isClipped: function() {
            return !!this._getClipItem();
        },
        setClipped: function(clipped) {
            var child = this.getFirstChild();
            if (child) child.setClipMask(clipped);
        },
        _getBounds: function _getBounds(matrix, options) {
            var clipItem = this._getClipItem();
            return clipItem ? clipItem._getCachedBounds(clipItem._matrix.prepended(matrix), Base.set({}, options, {
                stroke: false
            })) : _getBounds.base.call(this, matrix, options);
        },
        _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {
            var clipItem = this._getClipItem();
            return (!clipItem || clipItem.contains(point)) && _hitTestChildren.base.call(this, point, options, viewMatrix, clipItem);
        },
        _draw: function(ctx, param) {
            var clip = param.clip, clipItem = !clip && this._getClipItem();
            param = param.extend({
                clipItem: clipItem,
                clip: false
            });
            if (clip) {
                ctx.beginPath();
                param.dontStart = param.dontFinish = true;
            } else if (clipItem) clipItem.draw(ctx, param.extend({
                clip: true
            }));
            var children = this._children;
            for(var i = 0, l = children.length; i < l; i++){
                var item = children[i];
                if (item !== clipItem) item.draw(ctx, param);
            }
        }
    });
    var Layer = Group.extend({
        _class: 'Layer',
        initialize: function Layer() {
            Group.apply(this, arguments);
        },
        _getOwner: function() {
            return this._parent || this._index != null && this._project;
        },
        isInserted: function isInserted() {
            return this._parent ? isInserted.base.call(this) : this._index != null;
        },
        activate: function() {
            this._project._activeLayer = this;
        },
        _hitTestSelf: function() {}
    });
    var Shape = Item.extend({
        _class: 'Shape',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _canScaleStroke: true,
        _serializeFields: {
            type: null,
            size: null,
            radius: null
        },
        initialize: function Shape(props, point) {
            this._initialize(props, point);
        },
        _equals: function(item) {
            return this._type === item._type && this._size.equals(item._size) && Base.equals(this._radius, item._radius);
        },
        copyContent: function(source) {
            this.setType(source._type);
            this.setSize(source._size);
            this.setRadius(source._radius);
        },
        getType: function() {
            return this._type;
        },
        setType: function(type) {
            this._type = type;
        },
        getShape: '#getType',
        setShape: '#setType',
        getSize: function() {
            var size = this._size;
            return new LinkedSize(size.width, size.height, this, 'setSize');
        },
        setSize: function() {
            var size = Size.read(arguments);
            if (!this._size) this._size = size.clone();
            else if (!this._size.equals(size)) {
                var type = this._type, width = size.width, height = size.height;
                if (type === 'rectangle') this._radius.set(Size.min(this._radius, size.divide(2).abs()));
                else if (type === 'circle') {
                    width = height = (width + height) / 2;
                    this._radius = width / 2;
                } else if (type === 'ellipse') this._radius._set(width / 2, height / 2);
                this._size._set(width, height);
                this._changed(9);
            }
        },
        getRadius: function() {
            var rad = this._radius;
            return this._type === 'circle' ? rad : new LinkedSize(rad.width, rad.height, this, 'setRadius');
        },
        setRadius: function(radius) {
            var type = this._type;
            if (type === 'circle') {
                if (radius === this._radius) return;
                var size = radius * 2;
                this._radius = radius;
                this._size._set(size, size);
            } else {
                radius = Size.read(arguments);
                if (!this._radius) this._radius = radius.clone();
                else {
                    if (this._radius.equals(radius)) return;
                    this._radius.set(radius);
                    if (type === 'rectangle') {
                        var size = Size.max(this._size, radius.multiply(2));
                        this._size.set(size);
                    } else if (type === 'ellipse') this._size._set(radius.width * 2, radius.height * 2);
                }
            }
            this._changed(9);
        },
        isEmpty: function() {
            return false;
        },
        toPath: function(insert) {
            var path = new Path[Base.capitalize(this._type)]({
                center: new Point(),
                size: this._size,
                radius: this._radius,
                insert: false
            });
            path.copyAttributes(this);
            if (paper.settings.applyMatrix) path.setApplyMatrix(true);
            if (insert === undefined || insert) path.insertAbove(this);
            return path;
        },
        toShape: '#clone',
        _asPathItem: function() {
            return this.toPath(false);
        },
        _draw: function(ctx, param, viewMatrix, strokeMatrix) {
            var style = this._style, hasFill = style.hasFill(), hasStroke = style.hasStroke(), dontPaint = param.dontFinish || param.clip, untransformed = !strokeMatrix;
            if (hasFill || hasStroke || dontPaint) {
                var type = this._type, radius = this._radius, isCircle = type === 'circle';
                if (!param.dontStart) ctx.beginPath();
                if (untransformed && isCircle) ctx.arc(0, 0, radius, 0, Math.PI * 2, true);
                else {
                    var rx = isCircle ? radius : radius.width, ry = isCircle ? radius : radius.height, size = this._size, width = size.width, height = size.height;
                    if (untransformed && type === 'rectangle' && rx === 0 && ry === 0) ctx.rect(-width / 2, -height / 2, width, height);
                    else {
                        var x = width / 2, y = height / 2, kappa = 0.44771525016920644, cx = rx * kappa, cy = ry * kappa, c = [
                            -x,
                            -y + ry,
                            -x,
                            -y + cy,
                            -x + cx,
                            -y,
                            -x + rx,
                            -y,
                            x - rx,
                            -y,
                            x - cx,
                            -y,
                            x,
                            -y + cy,
                            x,
                            -y + ry,
                            x,
                            y - ry,
                            x,
                            y - cy,
                            x - cx,
                            y,
                            x - rx,
                            y,
                            -x + rx,
                            y,
                            -x + cx,
                            y,
                            -x,
                            y - cy,
                            -x,
                            y - ry
                        ];
                        if (strokeMatrix) strokeMatrix.transform(c, c, 32);
                        ctx.moveTo(c[0], c[1]);
                        ctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);
                        if (x !== rx) ctx.lineTo(c[8], c[9]);
                        ctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);
                        if (y !== ry) ctx.lineTo(c[16], c[17]);
                        ctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);
                        if (x !== rx) ctx.lineTo(c[24], c[25]);
                        ctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);
                    }
                }
                ctx.closePath();
            }
            if (!dontPaint && (hasFill || hasStroke)) {
                this._setStyles(ctx, param, viewMatrix);
                if (hasFill) {
                    ctx.fill(style.getFillRule());
                    ctx.shadowColor = 'rgba(0,0,0,0)';
                }
                if (hasStroke) ctx.stroke();
            }
        },
        _canComposite: function() {
            return !(this.hasFill() && this.hasStroke());
        },
        _getBounds: function(matrix, options) {
            var rect = new Rectangle(this._size).setCenter(0, 0), style = this._style, strokeWidth = options.stroke && style.hasStroke() && style.getStrokeWidth();
            if (matrix) rect = matrix._transformBounds(rect);
            return strokeWidth ? rect.expand(Path._getStrokePadding(strokeWidth, this._getStrokeMatrix(matrix, options))) : rect;
        }
    }, new function() {
        function getCornerCenter(that, point, expand) {
            var radius = that._radius;
            if (!radius.isZero()) {
                var halfSize = that._size.divide(2);
                for(var q = 1; q <= 4; q++){
                    var dir = new Point(q > 1 && q < 4 ? -1 : 1, q > 2 ? -1 : 1), corner = dir.multiply(halfSize), center = corner.subtract(dir.multiply(radius)), rect = new Rectangle(expand ? corner.add(dir.multiply(expand)) : corner, center);
                    if (rect.contains(point)) return {
                        point: center,
                        quadrant: q
                    };
                }
            }
        }
        function isOnEllipseStroke(point, radius, padding, quadrant) {
            var vector = point.divide(radius);
            return (!quadrant || vector.isInQuadrant(quadrant)) && vector.subtract(vector.normalize()).multiply(radius).divide(padding).length <= 1;
        }
        return {
            _contains: function _contains(point) {
                if (this._type === 'rectangle') {
                    var center = getCornerCenter(this, point);
                    return center ? point.subtract(center.point).divide(this._radius).getLength() <= 1 : _contains.base.call(this, point);
                } else return point.divide(this.size).getLength() <= 0.5;
            },
            _hitTestSelf: function _hitTestSelf(point, options, viewMatrix, strokeMatrix) {
                var hit = false, style = this._style, hitStroke = options.stroke && style.hasStroke(), hitFill = options.fill && style.hasFill();
                if (hitStroke || hitFill) {
                    var type = this._type, radius = this._radius, strokeRadius = hitStroke ? style.getStrokeWidth() / 2 : 0, strokePadding = options._tolerancePadding.add(Path._getStrokePadding(strokeRadius, !style.getStrokeScaling() && strokeMatrix));
                    if (type === 'rectangle') {
                        var padding = strokePadding.multiply(2), center = getCornerCenter(this, point, padding);
                        if (center) hit = isOnEllipseStroke(point.subtract(center.point), radius, strokePadding, center.quadrant);
                        else {
                            var rect = new Rectangle(this._size).setCenter(0, 0), outer = rect.expand(padding), inner = rect.expand(padding.negate());
                            hit = outer._containsPoint(point) && !inner._containsPoint(point);
                        }
                    } else hit = isOnEllipseStroke(point, radius, strokePadding);
                }
                return hit ? new HitResult(hitStroke ? 'stroke' : 'fill', this) : _hitTestSelf.base.apply(this, arguments);
            }
        };
    }, {
        statics: new function() {
            function createShape(type, point, size, radius, args) {
                var item = Base.create(Shape.prototype);
                item._type = type;
                item._size = size;
                item._radius = radius;
                item._initialize(Base.getNamed(args), point);
                return item;
            }
            return {
                Circle: function() {
                    var args = arguments, center = Point.readNamed(args, 'center'), radius = Base.readNamed(args, 'radius');
                    return createShape('circle', center, new Size(radius * 2), radius, args);
                },
                Rectangle: function() {
                    var args = arguments, rect = Rectangle.readNamed(args, 'rectangle'), radius = Size.min(Size.readNamed(args, 'radius'), rect.getSize(true).divide(2));
                    return createShape('rectangle', rect.getCenter(true), rect.getSize(true), radius, args);
                },
                Ellipse: function() {
                    var args = arguments, ellipse = Shape._readEllipse(args), radius = ellipse.radius;
                    return createShape('ellipse', ellipse.center, radius.multiply(2), radius, args);
                },
                _readEllipse: function(args) {
                    var center, radius;
                    if (Base.hasNamed(args, 'radius')) {
                        center = Point.readNamed(args, 'center');
                        radius = Size.readNamed(args, 'radius');
                    } else {
                        var rect = Rectangle.readNamed(args, 'rectangle');
                        center = rect.getCenter(true);
                        radius = rect.getSize(true).divide(2);
                    }
                    return {
                        center: center,
                        radius: radius
                    };
                }
            };
        }
    });
    var Raster = Item.extend({
        _class: 'Raster',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _boundsOptions: {
            stroke: false,
            handle: false
        },
        _serializeFields: {
            crossOrigin: null,
            source: null
        },
        _prioritize: [
            'crossOrigin'
        ],
        _smoothing: 'low',
        beans: true,
        initialize: function Raster(source, position) {
            if (!this._initialize(source, position !== undefined && Point.read(arguments))) {
                var image, type = typeof source, object = type === 'string' ? document.getElementById(source) : type === 'object' ? source : null;
                if (object && object !== Item.NO_INSERT) {
                    if (object.getContext || object.naturalHeight != null) image = object;
                    else if (object) {
                        var size = Size.read(arguments);
                        if (!size.isZero()) image = CanvasProvider.getCanvas(size);
                    }
                }
                if (image) this.setImage(image);
                else this.setSource(source);
            }
            if (!this._size) {
                this._size = new Size();
                this._loaded = false;
            }
        },
        _equals: function(item) {
            return this.getSource() === item.getSource();
        },
        copyContent: function(source) {
            var image = source._image, canvas = source._canvas;
            if (image) this._setImage(image);
            else if (canvas) {
                var copyCanvas = CanvasProvider.getCanvas(source._size);
                copyCanvas.getContext('2d').drawImage(canvas, 0, 0);
                this._setImage(copyCanvas);
            }
            this._crossOrigin = source._crossOrigin;
        },
        getSize: function() {
            var size = this._size;
            return new LinkedSize(size ? size.width : 0, size ? size.height : 0, this, 'setSize');
        },
        setSize: function(_size, _clear) {
            var size = Size.read(arguments);
            if (!size.equals(this._size)) {
                if (size.width > 0 && size.height > 0) {
                    var element = !_clear && this.getElement();
                    this._setImage(CanvasProvider.getCanvas(size));
                    if (element) this.getContext(true).drawImage(element, 0, 0, size.width, size.height);
                } else {
                    if (this._canvas) CanvasProvider.release(this._canvas);
                    this._size = size.clone();
                }
            } else if (_clear) this.clear();
        },
        getWidth: function() {
            return this._size ? this._size.width : 0;
        },
        setWidth: function(width) {
            this.setSize(width, this.getHeight());
        },
        getHeight: function() {
            return this._size ? this._size.height : 0;
        },
        setHeight: function(height) {
            this.setSize(this.getWidth(), height);
        },
        getLoaded: function() {
            return this._loaded;
        },
        isEmpty: function() {
            var size = this._size;
            return !size || size.width === 0 && size.height === 0;
        },
        getResolution: function() {
            var matrix = this._matrix, orig = new Point(0, 0).transform(matrix), u = new Point(1, 0).transform(matrix).subtract(orig), v = new Point(0, 1).transform(matrix).subtract(orig);
            return new Size(72 / u.getLength(), 72 / v.getLength());
        },
        getPpi: '#getResolution',
        getImage: function() {
            return this._image;
        },
        setImage: function(image) {
            var that = this;
            function emit(event) {
                var view = that.getView(), type = event && event.type || 'load';
                if (view && that.responds(type)) {
                    paper = view._scope;
                    that.emit(type, new Event(event));
                }
            }
            this._setImage(image);
            if (this._loaded) setTimeout(emit, 0);
            else if (image) DomEvent.add(image, {
                load: function(event) {
                    that._setImage(image);
                    emit(event);
                },
                error: emit
            });
        },
        _setImage: function(image) {
            if (this._canvas) CanvasProvider.release(this._canvas);
            if (image && image.getContext) {
                this._image = null;
                this._canvas = image;
                this._loaded = true;
            } else {
                this._image = image;
                this._canvas = null;
                this._loaded = !!(image && image.src && image.complete);
            }
            this._size = new Size(image ? image.naturalWidth || image.width : 0, image ? image.naturalHeight || image.height : 0);
            this._context = null;
            this._changed(1033);
        },
        getCanvas: function() {
            if (!this._canvas) {
                var ctx = CanvasProvider.getContext(this._size);
                try {
                    if (this._image) ctx.drawImage(this._image, 0, 0);
                    this._canvas = ctx.canvas;
                } catch (e) {
                    CanvasProvider.release(ctx);
                }
            }
            return this._canvas;
        },
        setCanvas: '#setImage',
        getContext: function(_change) {
            if (!this._context) this._context = this.getCanvas().getContext('2d');
            if (_change) {
                this._image = null;
                this._changed(1025);
            }
            return this._context;
        },
        setContext: function(context) {
            this._context = context;
        },
        getSource: function() {
            var image = this._image;
            return image && image.src || this.toDataURL();
        },
        setSource: function(src) {
            var image = new self1.Image(), crossOrigin = this._crossOrigin;
            if (crossOrigin) image.crossOrigin = crossOrigin;
            if (src) image.src = src;
            this.setImage(image);
        },
        getCrossOrigin: function() {
            var image = this._image;
            return image && image.crossOrigin || this._crossOrigin || '';
        },
        setCrossOrigin: function(crossOrigin) {
            this._crossOrigin = crossOrigin;
            var image = this._image;
            if (image) image.crossOrigin = crossOrigin;
        },
        getSmoothing: function() {
            return this._smoothing;
        },
        setSmoothing: function(smoothing) {
            this._smoothing = typeof smoothing === 'string' ? smoothing : smoothing ? 'low' : 'off';
            this._changed(257);
        },
        getElement: function() {
            return this._canvas || this._loaded && this._image;
        }
    }, {
        beans: false,
        getSubCanvas: function() {
            var rect = Rectangle.read(arguments), ctx = CanvasProvider.getContext(rect.getSize());
            ctx.drawImage(this.getCanvas(), rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height);
            return ctx.canvas;
        },
        getSubRaster: function() {
            var rect = Rectangle.read(arguments), raster = new Raster(Item.NO_INSERT);
            raster._setImage(this.getSubCanvas(rect));
            raster.translate(rect.getCenter().subtract(this.getSize().divide(2)));
            raster._matrix.prepend(this._matrix);
            raster.insertAbove(this);
            return raster;
        },
        toDataURL: function() {
            var image = this._image, src = image && image.src;
            if (/^data:/.test(src)) return src;
            var canvas = this.getCanvas();
            return canvas ? canvas.toDataURL.apply(canvas, arguments) : null;
        },
        drawImage: function(image) {
            var point = Point.read(arguments, 1);
            this.getContext(true).drawImage(image, point.x, point.y);
        },
        getAverageColor: function(object) {
            var bounds, path;
            if (!object) bounds = this.getBounds();
            else if (object instanceof PathItem) {
                path = object;
                bounds = object.getBounds();
            } else if (typeof object === 'object') {
                if ('width' in object) bounds = new Rectangle(object);
                else if ('x' in object) bounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);
            }
            if (!bounds) return null;
            var sampleSize = 32, width = Math.min(bounds.width, sampleSize), height = Math.min(bounds.height, sampleSize);
            var ctx = Raster._sampleContext;
            if (!ctx) ctx = Raster._sampleContext = CanvasProvider.getContext(new Size(sampleSize));
            else ctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);
            ctx.save();
            var matrix = new Matrix().scale(width / bounds.width, height / bounds.height).translate(-bounds.x, -bounds.y);
            matrix.applyToContext(ctx);
            if (path) path.draw(ctx, new Base({
                clip: true,
                matrices: [
                    matrix
                ]
            }));
            this._matrix.applyToContext(ctx);
            var element = this.getElement(), size = this._size;
            if (element) ctx.drawImage(element, -size.width / 2, -size.height / 2);
            ctx.restore();
            var pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width), Math.ceil(height)).data, channels = [
                0,
                0,
                0
            ], total = 0;
            for(var i = 0, l = pixels.length; i < l; i += 4){
                var alpha = pixels[i + 3];
                total += alpha;
                alpha /= 255;
                channels[0] += pixels[i] * alpha;
                channels[1] += pixels[i + 1] * alpha;
                channels[2] += pixels[i + 2] * alpha;
            }
            for(var i = 0; i < 3; i++)channels[i] /= total;
            return total ? Color.read(channels) : null;
        },
        getPixel: function() {
            var point = Point.read(arguments);
            var data = this.getContext().getImageData(point.x, point.y, 1, 1).data;
            return new Color('rgb', [
                data[0] / 255,
                data[1] / 255,
                data[2] / 255
            ], data[3] / 255);
        },
        setPixel: function() {
            var args = arguments, point = Point.read(args), color = Color.read(args), components = color._convert('rgb'), alpha = color._alpha, ctx = this.getContext(true), imageData = ctx.createImageData(1, 1), data = imageData.data;
            data[0] = components[0] * 255;
            data[1] = components[1] * 255;
            data[2] = components[2] * 255;
            data[3] = alpha != null ? alpha * 255 : 255;
            ctx.putImageData(imageData, point.x, point.y);
        },
        clear: function() {
            var size = this._size;
            this.getContext(true).clearRect(0, 0, size.width + 1, size.height + 1);
        },
        createImageData: function() {
            var size = Size.read(arguments);
            return this.getContext().createImageData(size.width, size.height);
        },
        getImageData: function() {
            var rect = Rectangle.read(arguments);
            if (rect.isEmpty()) rect = new Rectangle(this._size);
            return this.getContext().getImageData(rect.x, rect.y, rect.width, rect.height);
        },
        putImageData: function(data) {
            var point = Point.read(arguments, 1);
            this.getContext(true).putImageData(data, point.x, point.y);
        },
        setImageData: function(data) {
            this.setSize(data);
            this.getContext(true).putImageData(data, 0, 0);
        },
        _getBounds: function(matrix, options) {
            var rect = new Rectangle(this._size).setCenter(0, 0);
            return matrix ? matrix._transformBounds(rect) : rect;
        },
        _hitTestSelf: function(point) {
            if (this._contains(point)) {
                var that = this;
                return new HitResult('pixel', that, {
                    offset: point.add(that._size.divide(2)).round(),
                    color: {
                        get: function() {
                            return that.getPixel(this.offset);
                        }
                    }
                });
            }
        },
        _draw: function(ctx, param, viewMatrix) {
            var element = this.getElement();
            if (element && element.width > 0 && element.height > 0) {
                ctx.globalAlpha = Numerical.clamp(this._opacity, 0, 1);
                this._setStyles(ctx, param, viewMatrix);
                var smoothing = this._smoothing, disabled = smoothing === 'off';
                DomElement.setPrefixed(ctx, disabled ? 'imageSmoothingEnabled' : 'imageSmoothingQuality', disabled ? false : smoothing);
                ctx.drawImage(element, -this._size.width / 2, -this._size.height / 2);
            }
        },
        _canComposite: function() {
            return true;
        }
    });
    var SymbolItem = Item.extend({
        _class: 'SymbolItem',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _boundsOptions: {
            stroke: true
        },
        _serializeFields: {
            symbol: null
        },
        initialize: function SymbolItem(arg0, arg1) {
            if (!this._initialize(arg0, arg1 !== undefined && Point.read(arguments, 1))) this.setDefinition(arg0 instanceof SymbolDefinition ? arg0 : new SymbolDefinition(arg0));
        },
        _equals: function(item) {
            return this._definition === item._definition;
        },
        copyContent: function(source) {
            this.setDefinition(source._definition);
        },
        getDefinition: function() {
            return this._definition;
        },
        setDefinition: function(definition) {
            this._definition = definition;
            this._changed(9);
        },
        getSymbol: '#getDefinition',
        setSymbol: '#setDefinition',
        isEmpty: function() {
            return this._definition._item.isEmpty();
        },
        _getBounds: function(matrix, options) {
            var item = this._definition._item;
            return item._getCachedBounds(item._matrix.prepended(matrix), options);
        },
        _hitTestSelf: function(point, options, viewMatrix) {
            var opts = options.extend({
                all: false
            });
            var res = this._definition._item._hitTest(point, opts, viewMatrix);
            if (res) res.item = this;
            return res;
        },
        _draw: function(ctx, param) {
            this._definition._item.draw(ctx, param);
        }
    });
    var SymbolDefinition = Base.extend({
        _class: 'SymbolDefinition',
        initialize: function SymbolDefinition(item, dontCenter) {
            this._id = UID.get();
            this.project = paper.project;
            if (item) this.setItem(item, dontCenter);
        },
        _serialize: function(options, dictionary) {
            return dictionary.add(this, function() {
                return Base.serialize([
                    this._class,
                    this._item
                ], options, false, dictionary);
            });
        },
        _changed: function(flags) {
            if (flags & 8) Item._clearBoundsCache(this);
            if (flags & 1) this.project._changed(flags);
        },
        getItem: function() {
            return this._item;
        },
        setItem: function(item, _dontCenter) {
            if (item._symbol) item = item.clone();
            if (this._item) this._item._symbol = null;
            this._item = item;
            item.remove();
            item.setSelected(false);
            if (!_dontCenter) item.setPosition(new Point());
            item._symbol = this;
            this._changed(9);
        },
        getDefinition: '#getItem',
        setDefinition: '#setItem',
        place: function(position) {
            return new SymbolItem(this, position);
        },
        clone: function() {
            return new SymbolDefinition(this._item.clone(false));
        },
        equals: function(symbol) {
            return symbol === this || symbol && this._item.equals(symbol._item) || false;
        }
    });
    var HitResult = Base.extend({
        _class: 'HitResult',
        initialize: function HitResult(type, item, values) {
            this.type = type;
            this.item = item;
            if (values) this.inject(values);
        },
        statics: {
            getOptions: function(args) {
                var options = args && Base.read(args);
                return new Base({
                    type: null,
                    tolerance: paper.settings.hitTolerance,
                    fill: !options,
                    stroke: !options,
                    segments: !options,
                    handles: false,
                    ends: false,
                    position: false,
                    center: false,
                    bounds: false,
                    guides: false,
                    selected: false
                }, options);
            }
        }
    });
    var Segment = Base.extend({
        _class: 'Segment',
        beans: true,
        _selection: 0,
        initialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {
            var count = arguments.length, point, handleIn, handleOut, selection;
            if (count > 0) {
                if (arg0 == null || typeof arg0 === 'object') {
                    if (count === 1 && arg0 && 'point' in arg0) {
                        point = arg0.point;
                        handleIn = arg0.handleIn;
                        handleOut = arg0.handleOut;
                        selection = arg0.selection;
                    } else {
                        point = arg0;
                        handleIn = arg1;
                        handleOut = arg2;
                        selection = arg3;
                    }
                } else {
                    point = [
                        arg0,
                        arg1
                    ];
                    handleIn = arg2 !== undefined ? [
                        arg2,
                        arg3
                    ] : null;
                    handleOut = arg4 !== undefined ? [
                        arg4,
                        arg5
                    ] : null;
                }
            }
            new SegmentPoint(point, this, '_point');
            new SegmentPoint(handleIn, this, '_handleIn');
            new SegmentPoint(handleOut, this, '_handleOut');
            if (selection) this.setSelection(selection);
        },
        _serialize: function(options, dictionary) {
            var point = this._point, selection = this._selection, obj = selection || this.hasHandles() ? [
                point,
                this._handleIn,
                this._handleOut
            ] : point;
            if (selection) obj.push(selection);
            return Base.serialize(obj, options, true, dictionary);
        },
        _changed: function(point) {
            var path = this._path;
            if (!path) return;
            var curves = path._curves, index = this._index, curve;
            if (curves) {
                if ((!point || point === this._point || point === this._handleIn) && (curve = index > 0 ? curves[index - 1] : path._closed ? curves[curves.length - 1] : null)) curve._changed();
                if ((!point || point === this._point || point === this._handleOut) && (curve = curves[index])) curve._changed();
            }
            path._changed(41);
        },
        getPoint: function() {
            return this._point;
        },
        setPoint: function() {
            this._point.set(Point.read(arguments));
        },
        getHandleIn: function() {
            return this._handleIn;
        },
        setHandleIn: function() {
            this._handleIn.set(Point.read(arguments));
        },
        getHandleOut: function() {
            return this._handleOut;
        },
        setHandleOut: function() {
            this._handleOut.set(Point.read(arguments));
        },
        hasHandles: function() {
            return !this._handleIn.isZero() || !this._handleOut.isZero();
        },
        isSmooth: function() {
            var handleIn = this._handleIn, handleOut = this._handleOut;
            return !handleIn.isZero() && !handleOut.isZero() && handleIn.isCollinear(handleOut);
        },
        clearHandles: function() {
            this._handleIn._set(0, 0);
            this._handleOut._set(0, 0);
        },
        getSelection: function() {
            return this._selection;
        },
        setSelection: function(selection) {
            var oldSelection = this._selection, path = this._path;
            this._selection = selection = selection || 0;
            if (path && selection !== oldSelection) {
                path._updateSelection(this, oldSelection, selection);
                path._changed(257);
            }
        },
        _changeSelection: function(flag, selected) {
            var selection = this._selection;
            this.setSelection(selected ? selection | flag : selection & ~flag);
        },
        isSelected: function() {
            return !!(this._selection & 7);
        },
        setSelected: function(selected) {
            this._changeSelection(7, selected);
        },
        getIndex: function() {
            return this._index !== undefined ? this._index : null;
        },
        getPath: function() {
            return this._path || null;
        },
        getCurve: function() {
            var path = this._path, index = this._index;
            if (path) {
                if (index > 0 && !path._closed && index === path._segments.length - 1) index--;
                return path.getCurves()[index] || null;
            }
            return null;
        },
        getLocation: function() {
            var curve = this.getCurve();
            return curve ? new CurveLocation(curve, this === curve._segment1 ? 0 : 1) : null;
        },
        getNext: function() {
            var segments = this._path && this._path._segments;
            return segments && (segments[this._index + 1] || this._path._closed && segments[0]) || null;
        },
        smooth: function(options, _first, _last) {
            var opts = options || {}, type = opts.type, factor = opts.factor, prev = this.getPrevious(), next = this.getNext(), p0 = (prev || this)._point, p1 = this._point, p2 = (next || this)._point, d1 = p0.getDistance(p1), d2 = p1.getDistance(p2);
            if (!type || type === 'catmull-rom') {
                var a = factor === undefined ? 0.5 : factor, d1_a = Math.pow(d1, a), d1_2a = d1_a * d1_a, d2_a = Math.pow(d2, a), d2_2a = d2_a * d2_a;
                if (!_first && prev) {
                    var A = 2 * d2_2a + 3 * d2_a * d1_a + d1_2a, N = 3 * d2_a * (d2_a + d1_a);
                    this.setHandleIn(N !== 0 ? new Point((d2_2a * p0._x + A * p1._x - d1_2a * p2._x) / N - p1._x, (d2_2a * p0._y + A * p1._y - d1_2a * p2._y) / N - p1._y) : new Point());
                }
                if (!_last && next) {
                    var A = 2 * d1_2a + 3 * d1_a * d2_a + d2_2a, N = 3 * d1_a * (d1_a + d2_a);
                    this.setHandleOut(N !== 0 ? new Point((d1_2a * p2._x + A * p1._x - d2_2a * p0._x) / N - p1._x, (d1_2a * p2._y + A * p1._y - d2_2a * p0._y) / N - p1._y) : new Point());
                }
            } else if (type === 'geometric') {
                if (prev && next) {
                    var vector = p0.subtract(p2), t = factor === undefined ? 0.4 : factor, k = t * d1 / (d1 + d2);
                    if (!_first) this.setHandleIn(vector.multiply(k));
                    if (!_last) this.setHandleOut(vector.multiply(k - t));
                }
            } else throw new Error('Smoothing method \'' + type + '\' not supported.');
        },
        getPrevious: function() {
            var segments = this._path && this._path._segments;
            return segments && (segments[this._index - 1] || this._path._closed && segments[segments.length - 1]) || null;
        },
        isFirst: function() {
            return !this._index;
        },
        isLast: function() {
            var path = this._path;
            return path && this._index === path._segments.length - 1 || false;
        },
        reverse: function() {
            var handleIn = this._handleIn, handleOut = this._handleOut, tmp = handleIn.clone();
            handleIn.set(handleOut);
            handleOut.set(tmp);
        },
        reversed: function() {
            return new Segment(this._point, this._handleOut, this._handleIn);
        },
        remove: function() {
            return this._path ? !!this._path.removeSegment(this._index) : false;
        },
        clone: function() {
            return new Segment(this._point, this._handleIn, this._handleOut);
        },
        equals: function(segment) {
            return segment === this || segment && this._class === segment._class && this._point.equals(segment._point) && this._handleIn.equals(segment._handleIn) && this._handleOut.equals(segment._handleOut) || false;
        },
        toString: function() {
            var parts = [
                'point: ' + this._point
            ];
            if (!this._handleIn.isZero()) parts.push('handleIn: ' + this._handleIn);
            if (!this._handleOut.isZero()) parts.push('handleOut: ' + this._handleOut);
            return '{ ' + parts.join(', ') + ' }';
        },
        transform: function(matrix) {
            this._transformCoordinates(matrix, new Array(6), true);
            this._changed();
        },
        interpolate: function(from, to, factor) {
            var u = 1 - factor, v = factor, point1 = from._point, point2 = to._point, handleIn1 = from._handleIn, handleIn2 = to._handleIn, handleOut2 = to._handleOut, handleOut1 = from._handleOut;
            this._point._set(u * point1._x + v * point2._x, u * point1._y + v * point2._y, true);
            this._handleIn._set(u * handleIn1._x + v * handleIn2._x, u * handleIn1._y + v * handleIn2._y, true);
            this._handleOut._set(u * handleOut1._x + v * handleOut2._x, u * handleOut1._y + v * handleOut2._y, true);
            this._changed();
        },
        _transformCoordinates: function(matrix, coords, change) {
            var point = this._point, handleIn = !change || !this._handleIn.isZero() ? this._handleIn : null, handleOut = !change || !this._handleOut.isZero() ? this._handleOut : null, x = point._x, y = point._y, i = 2;
            coords[0] = x;
            coords[1] = y;
            if (handleIn) {
                coords[i++] = handleIn._x + x;
                coords[i++] = handleIn._y + y;
            }
            if (handleOut) {
                coords[i++] = handleOut._x + x;
                coords[i++] = handleOut._y + y;
            }
            if (matrix) {
                matrix._transformCoordinates(coords, coords, i / 2);
                x = coords[0];
                y = coords[1];
                if (change) {
                    point._x = x;
                    point._y = y;
                    i = 2;
                    if (handleIn) {
                        handleIn._x = coords[i++] - x;
                        handleIn._y = coords[i++] - y;
                    }
                    if (handleOut) {
                        handleOut._x = coords[i++] - x;
                        handleOut._y = coords[i++] - y;
                    }
                } else {
                    if (!handleIn) {
                        coords[i++] = x;
                        coords[i++] = y;
                    }
                    if (!handleOut) {
                        coords[i++] = x;
                        coords[i++] = y;
                    }
                }
            }
            return coords;
        }
    });
    var SegmentPoint = Point.extend({
        initialize: function SegmentPoint(point, owner, key) {
            var x, y, selected;
            if (!point) x = y = 0;
            else if ((x = point[0]) !== undefined) y = point[1];
            else {
                var pt = point;
                if ((x = pt.x) === undefined) {
                    pt = Point.read(arguments);
                    x = pt.x;
                }
                y = pt.y;
                selected = pt.selected;
            }
            this._x = x;
            this._y = y;
            this._owner = owner;
            owner[key] = this;
            if (selected) this.setSelected(true);
        },
        _set: function(x, y) {
            this._x = x;
            this._y = y;
            this._owner._changed(this);
            return this;
        },
        getX: function() {
            return this._x;
        },
        setX: function(x) {
            this._x = x;
            this._owner._changed(this);
        },
        getY: function() {
            return this._y;
        },
        setY: function(y) {
            this._y = y;
            this._owner._changed(this);
        },
        isZero: function() {
            var isZero = Numerical.isZero;
            return isZero(this._x) && isZero(this._y);
        },
        isSelected: function() {
            return !!(this._owner._selection & this._getSelection());
        },
        setSelected: function(selected) {
            this._owner._changeSelection(this._getSelection(), selected);
        },
        _getSelection: function() {
            var owner = this._owner;
            return this === owner._point ? 1 : this === owner._handleIn ? 2 : this === owner._handleOut ? 4 : 0;
        }
    });
    var Curve = Base.extend({
        _class: 'Curve',
        beans: true,
        initialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
            var count = arguments.length, seg1, seg2, point1, point2, handle1, handle2;
            if (count === 3) {
                this._path = arg0;
                seg1 = arg1;
                seg2 = arg2;
            } else if (!count) {
                seg1 = new Segment();
                seg2 = new Segment();
            } else if (count === 1) {
                if ('segment1' in arg0) {
                    seg1 = new Segment(arg0.segment1);
                    seg2 = new Segment(arg0.segment2);
                } else if ('point1' in arg0) {
                    point1 = arg0.point1;
                    handle1 = arg0.handle1;
                    handle2 = arg0.handle2;
                    point2 = arg0.point2;
                } else if (Array.isArray(arg0)) {
                    point1 = [
                        arg0[0],
                        arg0[1]
                    ];
                    point2 = [
                        arg0[6],
                        arg0[7]
                    ];
                    handle1 = [
                        arg0[2] - arg0[0],
                        arg0[3] - arg0[1]
                    ];
                    handle2 = [
                        arg0[4] - arg0[6],
                        arg0[5] - arg0[7]
                    ];
                }
            } else if (count === 2) {
                seg1 = new Segment(arg0);
                seg2 = new Segment(arg1);
            } else if (count === 4) {
                point1 = arg0;
                handle1 = arg1;
                handle2 = arg2;
                point2 = arg3;
            } else if (count === 8) {
                point1 = [
                    arg0,
                    arg1
                ];
                point2 = [
                    arg6,
                    arg7
                ];
                handle1 = [
                    arg2 - arg0,
                    arg3 - arg1
                ];
                handle2 = [
                    arg4 - arg6,
                    arg5 - arg7
                ];
            }
            this._segment1 = seg1 || new Segment(point1, null, handle1);
            this._segment2 = seg2 || new Segment(point2, handle2, null);
        },
        _serialize: function(options, dictionary) {
            return Base.serialize(this.hasHandles() ? [
                this.getPoint1(),
                this.getHandle1(),
                this.getHandle2(),
                this.getPoint2()
            ] : [
                this.getPoint1(),
                this.getPoint2()
            ], options, true, dictionary);
        },
        _changed: function() {
            this._length = this._bounds = undefined;
        },
        clone: function() {
            return new Curve(this._segment1, this._segment2);
        },
        toString: function() {
            var parts = [
                'point1: ' + this._segment1._point
            ];
            if (!this._segment1._handleOut.isZero()) parts.push('handle1: ' + this._segment1._handleOut);
            if (!this._segment2._handleIn.isZero()) parts.push('handle2: ' + this._segment2._handleIn);
            parts.push('point2: ' + this._segment2._point);
            return '{ ' + parts.join(', ') + ' }';
        },
        classify: function() {
            return Curve.classify(this.getValues());
        },
        remove: function() {
            var removed = false;
            if (this._path) {
                var segment2 = this._segment2, handleOut = segment2._handleOut;
                removed = segment2.remove();
                if (removed) this._segment1._handleOut.set(handleOut);
            }
            return removed;
        },
        getPoint1: function() {
            return this._segment1._point;
        },
        setPoint1: function() {
            this._segment1._point.set(Point.read(arguments));
        },
        getPoint2: function() {
            return this._segment2._point;
        },
        setPoint2: function() {
            this._segment2._point.set(Point.read(arguments));
        },
        getHandle1: function() {
            return this._segment1._handleOut;
        },
        setHandle1: function() {
            this._segment1._handleOut.set(Point.read(arguments));
        },
        getHandle2: function() {
            return this._segment2._handleIn;
        },
        setHandle2: function() {
            this._segment2._handleIn.set(Point.read(arguments));
        },
        getSegment1: function() {
            return this._segment1;
        },
        getSegment2: function() {
            return this._segment2;
        },
        getPath: function() {
            return this._path;
        },
        getIndex: function() {
            return this._segment1._index;
        },
        getNext: function() {
            var curves = this._path && this._path._curves;
            return curves && (curves[this._segment1._index + 1] || this._path._closed && curves[0]) || null;
        },
        getPrevious: function() {
            var curves = this._path && this._path._curves;
            return curves && (curves[this._segment1._index - 1] || this._path._closed && curves[curves.length - 1]) || null;
        },
        isFirst: function() {
            return !this._segment1._index;
        },
        isLast: function() {
            var path = this._path;
            return path && this._segment1._index === path._curves.length - 1 || false;
        },
        isSelected: function() {
            return this.getPoint1().isSelected() && this.getHandle1().isSelected() && this.getHandle2().isSelected() && this.getPoint2().isSelected();
        },
        setSelected: function(selected) {
            this.getPoint1().setSelected(selected);
            this.getHandle1().setSelected(selected);
            this.getHandle2().setSelected(selected);
            this.getPoint2().setSelected(selected);
        },
        getValues: function(matrix) {
            return Curve.getValues(this._segment1, this._segment2, matrix);
        },
        getPoints: function() {
            var coords = this.getValues(), points = [];
            for(var i = 0; i < 8; i += 2)points.push(new Point(coords[i], coords[i + 1]));
            return points;
        }
    }, {
        getLength: function() {
            if (this._length == null) this._length = Curve.getLength(this.getValues(), 0, 1);
            return this._length;
        },
        getArea: function() {
            return Curve.getArea(this.getValues());
        },
        getLine: function() {
            return new Line(this._segment1._point, this._segment2._point);
        },
        getPart: function(from, to) {
            return new Curve(Curve.getPart(this.getValues(), from, to));
        },
        getPartLength: function(from, to) {
            return Curve.getLength(this.getValues(), from, to);
        },
        divideAt: function(location) {
            return this.divideAtTime(location && location.curve === this ? location.time : this.getTimeAt(location));
        },
        divideAtTime: function(time, _setHandles) {
            var tMin = 1e-8, tMax = 1 - tMin, res = null;
            if (time >= tMin && time <= tMax) {
                var parts = Curve.subdivide(this.getValues(), time), left = parts[0], right = parts[1], setHandles = _setHandles || this.hasHandles(), seg1 = this._segment1, seg2 = this._segment2, path = this._path;
                if (setHandles) {
                    seg1._handleOut._set(left[2] - left[0], left[3] - left[1]);
                    seg2._handleIn._set(right[4] - right[6], right[5] - right[7]);
                }
                var x = left[6], y = left[7], segment = new Segment(new Point(x, y), setHandles && new Point(left[4] - x, left[5] - y), setHandles && new Point(right[2] - x, right[3] - y));
                if (path) {
                    path.insert(seg1._index + 1, segment);
                    res = this.getNext();
                } else {
                    this._segment2 = segment;
                    this._changed();
                    res = new Curve(segment, seg2);
                }
            }
            return res;
        },
        splitAt: function(location) {
            var path = this._path;
            return path ? path.splitAt(location) : null;
        },
        splitAtTime: function(time) {
            return this.splitAt(this.getLocationAtTime(time));
        },
        divide: function(offset, isTime) {
            return this.divideAtTime(offset === undefined ? 0.5 : isTime ? offset : this.getTimeAt(offset));
        },
        split: function(offset, isTime) {
            return this.splitAtTime(offset === undefined ? 0.5 : isTime ? offset : this.getTimeAt(offset));
        },
        reversed: function() {
            return new Curve(this._segment2.reversed(), this._segment1.reversed());
        },
        clearHandles: function() {
            this._segment1._handleOut._set(0, 0);
            this._segment2._handleIn._set(0, 0);
        },
        statics: {
            getValues: function(segment1, segment2, matrix, straight) {
                var p1 = segment1._point, h1 = segment1._handleOut, h2 = segment2._handleIn, p2 = segment2._point, x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y, values = straight ? [
                    x1,
                    y1,
                    x1,
                    y1,
                    x2,
                    y2,
                    x2,
                    y2
                ] : [
                    x1,
                    y1,
                    x1 + h1._x,
                    y1 + h1._y,
                    x2 + h2._x,
                    y2 + h2._y,
                    x2,
                    y2
                ];
                if (matrix) matrix._transformCoordinates(values, values, 4);
                return values;
            },
            subdivide: function(v, t) {
                var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7];
                if (t === undefined) t = 0.5;
                var u = 1 - t, x4 = u * x0 + t * x1, y4 = u * y0 + t * y1, x5 = u * x1 + t * x2, y5 = u * y1 + t * y2, x6 = u * x2 + t * x3, y6 = u * y2 + t * y3, x7 = u * x4 + t * x5, y7 = u * y4 + t * y5, x8 = u * x5 + t * x6, y8 = u * y5 + t * y6, x9 = u * x7 + t * x8, y9 = u * y7 + t * y8;
                return [
                    [
                        x0,
                        y0,
                        x4,
                        y4,
                        x7,
                        y7,
                        x9,
                        y9
                    ],
                    [
                        x9,
                        y9,
                        x8,
                        y8,
                        x6,
                        y6,
                        x3,
                        y3
                    ]
                ];
            },
            getMonoCurves: function(v, dir) {
                var curves = [], io = dir ? 0 : 1, o0 = v[io + 0], o1 = v[io + 2], o2 = v[io + 4], o3 = v[io + 6];
                if (o0 >= o1 === o1 >= o2 && o1 >= o2 === o2 >= o3 || Curve.isStraight(v)) curves.push(v);
                else {
                    var a = 3 * (o1 - o2) - o0 + o3, b = 2 * (o0 + o2) - 4 * o1, c = o1 - o0, tMin = 1e-8, tMax = 1 - tMin, roots = [], n = Numerical.solveQuadratic(a, b, c, roots, tMin, tMax);
                    if (!n) curves.push(v);
                    else {
                        roots.sort();
                        var t = roots[0], parts = Curve.subdivide(v, t);
                        curves.push(parts[0]);
                        if (n > 1) {
                            t = (roots[1] - t) / (1 - t);
                            parts = Curve.subdivide(parts[1], t);
                            curves.push(parts[0]);
                        }
                        curves.push(parts[1]);
                    }
                }
                return curves;
            },
            solveCubic: function(v, coord, val, roots, min, max) {
                var v0 = v[coord], v1 = v[coord + 2], v2 = v[coord + 4], v3 = v[coord + 6], res = 0;
                if (!(v0 < val && v3 < val && v1 < val && v2 < val || v0 > val && v3 > val && v1 > val && v2 > val)) {
                    var c = 3 * (v1 - v0), b = 3 * (v2 - v1) - c, a = v3 - v0 - c - b;
                    res = Numerical.solveCubic(a, b, c, v0 - val, roots, min, max);
                }
                return res;
            },
            getTimeOf: function(v, point) {
                var p0 = new Point(v[0], v[1]), p3 = new Point(v[6], v[7]), epsilon = 1e-12, geomEpsilon = 1e-7, t = point.isClose(p0, epsilon) ? 0 : point.isClose(p3, epsilon) ? 1 : null;
                if (t === null) {
                    var coords = [
                        point.x,
                        point.y
                    ], roots = [];
                    for(var c = 0; c < 2; c++){
                        var count = Curve.solveCubic(v, c, coords[c], roots, 0, 1);
                        for(var i = 0; i < count; i++){
                            var u = roots[i];
                            if (point.isClose(Curve.getPoint(v, u), geomEpsilon)) return u;
                        }
                    }
                }
                return point.isClose(p0, geomEpsilon) ? 0 : point.isClose(p3, geomEpsilon) ? 1 : null;
            },
            getNearestTime: function(v, point) {
                if (Curve.isStraight(v)) {
                    var x0 = v[0], y0 = v[1], x3 = v[6], y3 = v[7], vx = x3 - x0, vy = y3 - y0, det = vx * vx + vy * vy;
                    if (det === 0) return 0;
                    var u = ((point.x - x0) * vx + (point.y - y0) * vy) / det;
                    return u < 1e-12 ? 0 : u > 0.999999999999 ? 1 : Curve.getTimeOf(v, new Point(x0 + u * vx, y0 + u * vy));
                }
                var count = 100, minDist = Infinity, minT = 0;
                function refine(t) {
                    if (t >= 0 && t <= 1) {
                        var dist = point.getDistance(Curve.getPoint(v, t), true);
                        if (dist < minDist) {
                            minDist = dist;
                            minT = t;
                            return true;
                        }
                    }
                }
                for(var i = 0; i <= count; i++)refine(i / count);
                var step = 1 / (count * 2);
                while(step > 1e-8)if (!refine(minT - step) && !refine(minT + step)) step /= 2;
                return minT;
            },
            getPart: function(v, from, to) {
                var flip = from > to;
                if (flip) {
                    var tmp = from;
                    from = to;
                    to = tmp;
                }
                if (from > 0) v = Curve.subdivide(v, from)[1];
                if (to < 1) v = Curve.subdivide(v, (to - from) / (1 - from))[0];
                return flip ? [
                    v[6],
                    v[7],
                    v[4],
                    v[5],
                    v[2],
                    v[3],
                    v[0],
                    v[1]
                ] : v;
            },
            isFlatEnough: function(v, flatness) {
                var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], ux = 3 * x1 - 2 * x0 - x3, uy = 3 * y1 - 2 * y0 - y3, vx = 3 * x2 - 2 * x3 - x0, vy = 3 * y2 - 2 * y3 - y0;
                return Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy) <= 16 * flatness * flatness;
            },
            getArea: function(v) {
                var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7];
                return 3 * ((y3 - y0) * (x1 + x2) - (x3 - x0) * (y1 + y2) + y1 * (x0 - x2) - x1 * (y0 - y2) + y3 * (x2 + x0 / 3) - x3 * (y2 + y0 / 3)) / 20;
            },
            getBounds: function(v) {
                var min = v.slice(0, 2), max = min.slice(), roots = [
                    0,
                    0
                ];
                for(var i = 0; i < 2; i++)Curve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6], i, 0, min, max, roots);
                return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);
            },
            _addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {
                function add(value, padding) {
                    var left = value - padding, right = value + padding;
                    if (left < min[coord]) min[coord] = left;
                    if (right > max[coord]) max[coord] = right;
                }
                padding /= 2;
                var minPad = min[coord] + padding, maxPad = max[coord] - padding;
                if (v0 < minPad || v1 < minPad || v2 < minPad || v3 < minPad || v0 > maxPad || v1 > maxPad || v2 > maxPad || v3 > maxPad) {
                    if (v1 < v0 != v1 < v3 && v2 < v0 != v2 < v3) {
                        add(v0, 0);
                        add(v3, 0);
                    } else {
                        var a = 3 * (v1 - v2) - v0 + v3, b = 2 * (v0 + v2) - 4 * v1, c = v1 - v0, count = Numerical.solveQuadratic(a, b, c, roots), tMin = 1e-8, tMax = 1 - tMin;
                        add(v3, 0);
                        for(var i = 0; i < count; i++){
                            var t = roots[i], u = 1 - t;
                            if (tMin <= t && t <= tMax) add(u * u * u * v0 + 3 * u * u * t * v1 + 3 * u * t * t * v2 + t * t * t * v3, padding);
                        }
                    }
                }
            }
        }
    }, Base.each([
        'getBounds',
        'getStrokeBounds',
        'getHandleBounds'
    ], function(name) {
        this[name] = function() {
            if (!this._bounds) this._bounds = {};
            var bounds = this._bounds[name];
            if (!bounds) bounds = this._bounds[name] = Path[name]([
                this._segment1,
                this._segment2
            ], false, this._path);
            return bounds.clone();
        };
    }, {}), Base.each({
        isStraight: function(p1, h1, h2, p2) {
            if (h1.isZero() && h2.isZero()) return true;
            else {
                var v = p2.subtract(p1);
                if (v.isZero()) return false;
                else if (v.isCollinear(h1) && v.isCollinear(h2)) {
                    var l = new Line(p1, p2), epsilon = 1e-7;
                    if (l.getDistance(p1.add(h1)) < epsilon && l.getDistance(p2.add(h2)) < epsilon) {
                        var div = v.dot(v), s1 = v.dot(h1) / div, s2 = v.dot(h2) / div;
                        return s1 >= 0 && s1 <= 1 && s2 <= 0 && s2 >= -1;
                    }
                }
            }
            return false;
        },
        isLinear: function(p1, h1, h2, p2) {
            var third = p2.subtract(p1).divide(3);
            return h1.equals(third) && h2.negate().equals(third);
        }
    }, function(test, name) {
        this[name] = function(epsilon) {
            var seg1 = this._segment1, seg2 = this._segment2;
            return test(seg1._point, seg1._handleOut, seg2._handleIn, seg2._point, epsilon);
        };
        this.statics[name] = function(v, epsilon) {
            var x0 = v[0], y0 = v[1], x3 = v[6], y3 = v[7];
            return test(new Point(x0, y0), new Point(v[2] - x0, v[3] - y0), new Point(v[4] - x3, v[5] - y3), new Point(x3, y3), epsilon);
        };
    }, {
        statics: {},
        hasHandles: function() {
            return !this._segment1._handleOut.isZero() || !this._segment2._handleIn.isZero();
        },
        hasLength: function(epsilon) {
            return (!this.getPoint1().equals(this.getPoint2()) || this.hasHandles()) && this.getLength() > (epsilon || 0);
        },
        isCollinear: function(curve) {
            return curve && this.isStraight() && curve.isStraight() && this.getLine().isCollinear(curve.getLine());
        },
        isHorizontal: function() {
            return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).y) < 1e-8;
        },
        isVertical: function() {
            return this.isStraight() && Math.abs(this.getTangentAtTime(0.5).x) < 1e-8;
        }
    }), {
        beans: false,
        getLocationAt: function(offset, _isTime) {
            return this.getLocationAtTime(_isTime ? offset : this.getTimeAt(offset));
        },
        getLocationAtTime: function(t) {
            return t != null && t >= 0 && t <= 1 ? new CurveLocation(this, t) : null;
        },
        getTimeAt: function(offset, start) {
            return Curve.getTimeAt(this.getValues(), offset, start);
        },
        getParameterAt: '#getTimeAt',
        getTimesWithTangent: function() {
            var tangent = Point.read(arguments);
            return tangent.isZero() ? [] : Curve.getTimesWithTangent(this.getValues(), tangent);
        },
        getOffsetAtTime: function(t) {
            return this.getPartLength(0, t);
        },
        getLocationOf: function() {
            return this.getLocationAtTime(this.getTimeOf(Point.read(arguments)));
        },
        getOffsetOf: function() {
            var loc = this.getLocationOf.apply(this, arguments);
            return loc ? loc.getOffset() : null;
        },
        getTimeOf: function() {
            return Curve.getTimeOf(this.getValues(), Point.read(arguments));
        },
        getParameterOf: '#getTimeOf',
        getNearestLocation: function() {
            var point = Point.read(arguments), values = this.getValues(), t = Curve.getNearestTime(values, point), pt = Curve.getPoint(values, t);
            return new CurveLocation(this, t, pt, null, point.getDistance(pt));
        },
        getNearestPoint: function() {
            var loc = this.getNearestLocation.apply(this, arguments);
            return loc ? loc.getPoint() : loc;
        }
    }, new function() {
        var methods = [
            'getPoint',
            'getTangent',
            'getNormal',
            'getWeightedTangent',
            'getWeightedNormal',
            'getCurvature'
        ];
        return Base.each(methods, function(name) {
            this[name + 'At'] = function(location, _isTime) {
                var values = this.getValues();
                return Curve[name](values, _isTime ? location : Curve.getTimeAt(values, location));
            };
            this[name + 'AtTime'] = function(time) {
                return Curve[name](this.getValues(), time);
            };
        }, {
            statics: {
                _evaluateMethods: methods
            }
        });
    }, new function() {
        function getLengthIntegrand(v) {
            var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], ax = 9 * (x1 - x2) + 3 * (x3 - x0), bx = 6 * (x0 + x2) - 12 * x1, cx = 3 * (x1 - x0), ay = 9 * (y1 - y2) + 3 * (y3 - y0), by = 6 * (y0 + y2) - 12 * y1, cy = 3 * (y1 - y0);
            return function(t) {
                var dx = (ax * t + bx) * t + cx, dy = (ay * t + by) * t + cy;
                return Math.sqrt(dx * dx + dy * dy);
            };
        }
        function getIterations(a, b) {
            return Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));
        }
        function evaluate(v, t, type, normalized) {
            if (t == null || t < 0 || t > 1) return null;
            var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], isZero = Numerical.isZero;
            if (isZero(x1 - x0) && isZero(y1 - y0)) {
                x1 = x0;
                y1 = y0;
            }
            if (isZero(x2 - x3) && isZero(y2 - y3)) {
                x2 = x3;
                y2 = y3;
            }
            var cx = 3 * (x1 - x0), bx = 3 * (x2 - x1) - cx, ax = x3 - x0 - cx - bx, cy = 3 * (y1 - y0), by = 3 * (y2 - y1) - cy, ay = y3 - y0 - cy - by, x, y;
            if (type === 0) {
                x = t === 0 ? x0 : t === 1 ? x3 : ((ax * t + bx) * t + cx) * t + x0;
                y = t === 0 ? y0 : t === 1 ? y3 : ((ay * t + by) * t + cy) * t + y0;
            } else {
                var tMin = 1e-8, tMax = 1 - tMin;
                if (t < tMin) {
                    x = cx;
                    y = cy;
                } else if (t > tMax) {
                    x = 3 * (x3 - x2);
                    y = 3 * (y3 - y2);
                } else {
                    x = (3 * ax * t + 2 * bx) * t + cx;
                    y = (3 * ay * t + 2 * by) * t + cy;
                }
                if (normalized) {
                    if (x === 0 && y === 0 && (t < tMin || t > tMax)) {
                        x = x2 - x1;
                        y = y2 - y1;
                    }
                    var len = Math.sqrt(x * x + y * y);
                    if (len) {
                        x /= len;
                        y /= len;
                    }
                }
                if (type === 3) {
                    var x2 = 6 * ax * t + 2 * bx, y2 = 6 * ay * t + 2 * by, d = Math.pow(x * x + y * y, 1.5);
                    x = d !== 0 ? (x * y2 - y * x2) / d : 0;
                    y = 0;
                }
            }
            return type === 2 ? new Point(y, -x) : new Point(x, y);
        }
        return {
            statics: {
                classify: function(v) {
                    var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], a1 = x0 * (y3 - y2) + y0 * (x2 - x3) + x3 * y2 - y3 * x2, a2 = x1 * (y0 - y3) + y1 * (x3 - x0) + x0 * y3 - y0 * x3, a3 = x2 * (y1 - y0) + y2 * (x0 - x1) + x1 * y0 - y1 * x0, d3 = 3 * a3, d2 = d3 - a2, d1 = d2 - a2 + a1, l = Math.sqrt(d1 * d1 + d2 * d2 + d3 * d3), s = l !== 0 ? 1 / l : 0, isZero = Numerical.isZero, serpentine = 'serpentine';
                    d1 *= s;
                    d2 *= s;
                    d3 *= s;
                    function type(type, t1, t2) {
                        var hasRoots = t1 !== undefined, t1Ok = hasRoots && t1 > 0 && t1 < 1, t2Ok = hasRoots && t2 > 0 && t2 < 1;
                        if (hasRoots && (!(t1Ok || t2Ok) || type === 'loop' && !(t1Ok && t2Ok))) {
                            type = 'arch';
                            t1Ok = t2Ok = false;
                        }
                        return {
                            type: type,
                            roots: t1Ok || t2Ok ? t1Ok && t2Ok ? t1 < t2 ? [
                                t1,
                                t2
                            ] : [
                                t2,
                                t1
                            ] : [
                                t1Ok ? t1 : t2
                            ] : null
                        };
                    }
                    if (isZero(d1)) return isZero(d2) ? type(isZero(d3) ? 'line' : 'quadratic') : type(serpentine, d3 / (3 * d2));
                    var d = 3 * d2 * d2 - 4 * d1 * d3;
                    if (isZero(d)) return type('cusp', d2 / (2 * d1));
                    var f1 = d > 0 ? Math.sqrt(d / 3) : Math.sqrt(-d), f2 = 2 * d1;
                    return type(d > 0 ? serpentine : 'loop', (d2 + f1) / f2, (d2 - f1) / f2);
                },
                getLength: function(v, a, b, ds) {
                    if (a === undefined) a = 0;
                    if (b === undefined) b = 1;
                    if (Curve.isStraight(v)) {
                        var c = v;
                        if (b < 1) {
                            c = Curve.subdivide(c, b)[0];
                            a /= b;
                        }
                        if (a > 0) c = Curve.subdivide(c, a)[1];
                        var dx = c[6] - c[0], dy = c[7] - c[1];
                        return Math.sqrt(dx * dx + dy * dy);
                    }
                    return Numerical.integrate(ds || getLengthIntegrand(v), a, b, getIterations(a, b));
                },
                getTimeAt: function(v, offset, start) {
                    if (start === undefined) start = offset < 0 ? 1 : 0;
                    if (offset === 0) return start;
                    var abs = Math.abs, epsilon = 1e-12, forward = offset > 0, a = forward ? start : 0, b = forward ? 1 : start, ds = getLengthIntegrand(v), rangeLength = Curve.getLength(v, a, b, ds), diff = abs(offset) - rangeLength;
                    if (abs(diff) < epsilon) return forward ? b : a;
                    else if (diff > epsilon) return null;
                    var guess = offset / rangeLength, length = 0;
                    function f(t) {
                        length += Numerical.integrate(ds, start, t, getIterations(start, t));
                        start = t;
                        return length - offset;
                    }
                    return Numerical.findRoot(f, ds, start + guess, a, b, 32, 1e-12);
                },
                getPoint: function(v, t) {
                    return evaluate(v, t, 0, false);
                },
                getTangent: function(v, t) {
                    return evaluate(v, t, 1, true);
                },
                getWeightedTangent: function(v, t) {
                    return evaluate(v, t, 1, false);
                },
                getNormal: function(v, t) {
                    return evaluate(v, t, 2, true);
                },
                getWeightedNormal: function(v, t) {
                    return evaluate(v, t, 2, false);
                },
                getCurvature: function(v, t) {
                    return evaluate(v, t, 3, false).x;
                },
                getPeaks: function(v) {
                    var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], ax = -x0 + 3 * x1 - 3 * x2 + x3, bx = 3 * x0 - 6 * x1 + 3 * x2, cx = -3 * x0 + 3 * x1, ay = -y0 + 3 * y1 - 3 * y2 + y3, by = 3 * y0 - 6 * y1 + 3 * y2, cy = -3 * y0 + 3 * y1, tMin = 1e-8, tMax = 1 - tMin, roots = [];
                    Numerical.solveCubic(9 * (ax * ax + ay * ay), 9 * (ax * bx + by * ay), 2 * (bx * bx + by * by) + 3 * (cx * ax + cy * ay), cx * bx + by * cy, roots, tMin, tMax);
                    return roots.sort();
                }
            }
        };
    }, new function() {
        function addLocation(locations, include, c1, t1, c2, t2, overlap) {
            var excludeStart = !overlap && c1.getPrevious() === c2, excludeEnd = !overlap && c1 !== c2 && c1.getNext() === c2, tMin = 1e-8, tMax = 1 - tMin;
            if (t1 !== null && t1 >= (excludeStart ? tMin : 0) && t1 <= (excludeEnd ? tMax : 1)) {
                if (t2 !== null && t2 >= (excludeEnd ? tMin : 0) && t2 <= (excludeStart ? tMax : 1)) {
                    var loc1 = new CurveLocation(c1, t1, null, overlap), loc2 = new CurveLocation(c2, t2, null, overlap);
                    loc1._intersection = loc2;
                    loc2._intersection = loc1;
                    if (!include || include(loc1)) CurveLocation.insert(locations, loc1, true);
                }
            }
        }
        function addCurveIntersections(v1, v2, c1, c2, locations, include, flip, recursion, calls, tMin, tMax, uMin, uMax) {
            if (++calls >= 4096 || ++recursion >= 40) return calls;
            var fatLineEpsilon = 1e-9, q0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7], getSignedDistance = Line.getSignedDistance, d1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]), d2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]), factor = d1 * d2 > 0 ? 3 / 4 : 4 / 9, dMin = factor * Math.min(0, d1, d2), dMax = factor * Math.max(0, d1, d2), dp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]), dp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]), dp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]), dp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]), hull = getConvexHull(dp0, dp1, dp2, dp3), top = hull[0], bottom = hull[1], tMinClip, tMaxClip;
            if (d1 === 0 && d2 === 0 && dp0 === 0 && dp1 === 0 && dp2 === 0 && dp3 === 0 || (tMinClip = clipConvexHull(top, bottom, dMin, dMax)) == null || (tMaxClip = clipConvexHull(top.reverse(), bottom.reverse(), dMin, dMax)) == null) return calls;
            var tMinNew = tMin + (tMax - tMin) * tMinClip, tMaxNew = tMin + (tMax - tMin) * tMaxClip;
            if (Math.max(uMax - uMin, tMaxNew - tMinNew) < fatLineEpsilon) {
                var t = (tMinNew + tMaxNew) / 2, u = (uMin + uMax) / 2;
                addLocation(locations, include, flip ? c2 : c1, flip ? u : t, flip ? c1 : c2, flip ? t : u);
            } else {
                v1 = Curve.getPart(v1, tMinClip, tMaxClip);
                var uDiff = uMax - uMin;
                if (tMaxClip - tMinClip > 0.8) {
                    if (tMaxNew - tMinNew > uDiff) {
                        var parts = Curve.subdivide(v1, 0.5), t = (tMinNew + tMaxNew) / 2;
                        calls = addCurveIntersections(v2, parts[0], c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, tMinNew, t);
                        calls = addCurveIntersections(v2, parts[1], c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, t, tMaxNew);
                    } else {
                        var parts = Curve.subdivide(v2, 0.5), u = (uMin + uMax) / 2;
                        calls = addCurveIntersections(parts[0], v1, c2, c1, locations, include, !flip, recursion, calls, uMin, u, tMinNew, tMaxNew);
                        calls = addCurveIntersections(parts[1], v1, c2, c1, locations, include, !flip, recursion, calls, u, uMax, tMinNew, tMaxNew);
                    }
                } else if (uDiff === 0 || uDiff >= fatLineEpsilon) calls = addCurveIntersections(v2, v1, c2, c1, locations, include, !flip, recursion, calls, uMin, uMax, tMinNew, tMaxNew);
                else calls = addCurveIntersections(v1, v2, c1, c2, locations, include, flip, recursion, calls, tMinNew, tMaxNew, uMin, uMax);
            }
            return calls;
        }
        function getConvexHull(dq0, dq1, dq2, dq3) {
            var p0 = [
                0,
                dq0
            ], p1 = [
                1 / 3,
                dq1
            ], p2 = [
                2 / 3,
                dq2
            ], p3 = [
                1,
                dq3
            ], dist1 = dq1 - (2 * dq0 + dq3) / 3, dist2 = dq2 - (dq0 + 2 * dq3) / 3, hull;
            if (dist1 * dist2 < 0) hull = [
                [
                    p0,
                    p1,
                    p3
                ],
                [
                    p0,
                    p2,
                    p3
                ]
            ];
            else {
                var distRatio = dist1 / dist2;
                hull = [
                    distRatio >= 2 ? [
                        p0,
                        p1,
                        p3
                    ] : distRatio <= 0.5 ? [
                        p0,
                        p2,
                        p3
                    ] : [
                        p0,
                        p1,
                        p2,
                        p3
                    ],
                    [
                        p0,
                        p3
                    ]
                ];
            }
            return (dist1 || dist2) < 0 ? hull.reverse() : hull;
        }
        function clipConvexHull(hullTop, hullBottom, dMin, dMax) {
            if (hullTop[0][1] < dMin) return clipConvexHullPart(hullTop, true, dMin);
            else if (hullBottom[0][1] > dMax) return clipConvexHullPart(hullBottom, false, dMax);
            else return hullTop[0][0];
        }
        function clipConvexHullPart(part, top, threshold) {
            var px = part[0][0], py = part[0][1];
            for(var i = 1, l = part.length; i < l; i++){
                var qx = part[i][0], qy = part[i][1];
                if (top ? qy >= threshold : qy <= threshold) return qy === threshold ? qx : px + (threshold - py) * (qx - px) / (qy - py);
                px = qx;
                py = qy;
            }
            return null;
        }
        function getCurveLineIntersections(v, px, py, vx, vy) {
            var isZero = Numerical.isZero;
            if (isZero(vx) && isZero(vy)) {
                var t = Curve.getTimeOf(v, new Point(px, py));
                return t === null ? [] : [
                    t
                ];
            }
            var angle = Math.atan2(-vy, vx), sin = Math.sin(angle), cos = Math.cos(angle), rv = [], roots = [];
            for(var i = 0; i < 8; i += 2){
                var x = v[i] - px, y = v[i + 1] - py;
                rv.push(x * cos - y * sin, x * sin + y * cos);
            }
            Curve.solveCubic(rv, 1, 0, roots, 0, 1);
            return roots;
        }
        function addCurveLineIntersections(v1, v2, c1, c2, locations, include, flip) {
            var x1 = v2[0], y1 = v2[1], x2 = v2[6], y2 = v2[7], roots = getCurveLineIntersections(v1, x1, y1, x2 - x1, y2 - y1);
            for(var i = 0, l = roots.length; i < l; i++){
                var t1 = roots[i], p1 = Curve.getPoint(v1, t1), t2 = Curve.getTimeOf(v2, p1);
                if (t2 !== null) addLocation(locations, include, flip ? c2 : c1, flip ? t2 : t1, flip ? c1 : c2, flip ? t1 : t2);
            }
        }
        function addLineIntersection(v1, v2, c1, c2, locations, include) {
            var pt = Line.intersect(v1[0], v1[1], v1[6], v1[7], v2[0], v2[1], v2[6], v2[7]);
            if (pt) addLocation(locations, include, c1, Curve.getTimeOf(v1, pt), c2, Curve.getTimeOf(v2, pt));
        }
        function getCurveIntersections(v1, v2, c1, c2, locations, include) {
            var epsilon = 1e-12, min = Math.min, max = Math.max;
            if (max(v1[0], v1[2], v1[4], v1[6]) + epsilon > min(v2[0], v2[2], v2[4], v2[6]) && min(v1[0], v1[2], v1[4], v1[6]) - epsilon < max(v2[0], v2[2], v2[4], v2[6]) && max(v1[1], v1[3], v1[5], v1[7]) + epsilon > min(v2[1], v2[3], v2[5], v2[7]) && min(v1[1], v1[3], v1[5], v1[7]) - epsilon < max(v2[1], v2[3], v2[5], v2[7])) {
                var overlaps = getOverlaps(v1, v2);
                if (overlaps) for(var i = 0; i < 2; i++){
                    var overlap = overlaps[i];
                    addLocation(locations, include, c1, overlap[0], c2, overlap[1], true);
                }
                else {
                    var straight1 = Curve.isStraight(v1), straight2 = Curve.isStraight(v2), straight = straight1 && straight2, flip = straight1 && !straight2, before = locations.length;
                    (straight ? addLineIntersection : straight1 || straight2 ? addCurveLineIntersections : addCurveIntersections)(flip ? v2 : v1, flip ? v1 : v2, flip ? c2 : c1, flip ? c1 : c2, locations, include, flip, 0, 0, 0, 1, 0, 1);
                    if (!straight || locations.length === before) for(var i = 0; i < 4; i++){
                        var t1 = i >> 1, t2 = i & 1, i1 = t1 * 6, i2 = t2 * 6, p1 = new Point(v1[i1], v1[i1 + 1]), p2 = new Point(v2[i2], v2[i2 + 1]);
                        if (p1.isClose(p2, epsilon)) addLocation(locations, include, c1, t1, c2, t2);
                    }
                }
            }
            return locations;
        }
        function getSelfIntersection(v1, c1, locations, include) {
            var info = Curve.classify(v1);
            if (info.type === 'loop') {
                var roots = info.roots;
                addLocation(locations, include, c1, roots[0], c1, roots[1]);
            }
            return locations;
        }
        function getIntersections(curves1, curves2, include, matrix1, matrix2, _returnFirst) {
            var epsilon = 1e-7, self1 = !curves2;
            if (self1) curves2 = curves1;
            var length1 = curves1.length, length2 = curves2.length, values1 = new Array(length1), values2 = self1 ? values1 : new Array(length2), locations = [];
            for(var i = 0; i < length1; i++)values1[i] = curves1[i].getValues(matrix1);
            if (!self1) for(var i = 0; i < length2; i++)values2[i] = curves2[i].getValues(matrix2);
            var boundsCollisions = CollisionDetection.findCurveBoundsCollisions(values1, values2, epsilon);
            for(var index1 = 0; index1 < length1; index1++){
                var curve1 = curves1[index1], v1 = values1[index1];
                if (self1) getSelfIntersection(v1, curve1, locations, include);
                var collisions1 = boundsCollisions[index1];
                if (collisions1) for(var j = 0; j < collisions1.length; j++){
                    if (_returnFirst && locations.length) return locations;
                    var index2 = collisions1[j];
                    if (!self1 || index2 > index1) {
                        var curve2 = curves2[index2], v2 = values2[index2];
                        getCurveIntersections(v1, v2, curve1, curve2, locations, include);
                    }
                }
            }
            return locations;
        }
        function getOverlaps(v1, v2) {
            function getSquaredLineLength(v) {
                var x = v[6] - v[0], y = v[7] - v[1];
                return x * x + y * y;
            }
            var abs = Math.abs, getDistance = Line.getDistance, timeEpsilon = 1e-8, geomEpsilon = 1e-7, straight1 = Curve.isStraight(v1), straight2 = Curve.isStraight(v2), straightBoth = straight1 && straight2, flip = getSquaredLineLength(v1) < getSquaredLineLength(v2), l1 = flip ? v2 : v1, l2 = flip ? v1 : v2, px = l1[0], py = l1[1], vx = l1[6] - px, vy = l1[7] - py;
            if (getDistance(px, py, vx, vy, l2[0], l2[1], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[6], l2[7], true) < geomEpsilon) {
                if (!straightBoth && getDistance(px, py, vx, vy, l1[2], l1[3], true) < geomEpsilon && getDistance(px, py, vx, vy, l1[4], l1[5], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[2], l2[3], true) < geomEpsilon && getDistance(px, py, vx, vy, l2[4], l2[5], true) < geomEpsilon) straight1 = straight2 = straightBoth = true;
            } else if (straightBoth) return null;
            if (straight1 ^ straight2) return null;
            var v = [
                v1,
                v2
            ], pairs = [];
            for(var i = 0; i < 4 && pairs.length < 2; i++){
                var i1 = i & 1, i2 = i1 ^ 1, t1 = i >> 1, t2 = Curve.getTimeOf(v[i1], new Point(v[i2][t1 ? 6 : 0], v[i2][t1 ? 7 : 1]));
                if (t2 != null) {
                    var pair = i1 ? [
                        t1,
                        t2
                    ] : [
                        t2,
                        t1
                    ];
                    if (!pairs.length || abs(pair[0] - pairs[0][0]) > timeEpsilon && abs(pair[1] - pairs[0][1]) > timeEpsilon) pairs.push(pair);
                }
                if (i > 2 && !pairs.length) break;
            }
            if (pairs.length !== 2) pairs = null;
            else if (!straightBoth) {
                var o1 = Curve.getPart(v1, pairs[0][0], pairs[1][0]), o2 = Curve.getPart(v2, pairs[0][1], pairs[1][1]);
                if (abs(o2[2] - o1[2]) > geomEpsilon || abs(o2[3] - o1[3]) > geomEpsilon || abs(o2[4] - o1[4]) > geomEpsilon || abs(o2[5] - o1[5]) > geomEpsilon) pairs = null;
            }
            return pairs;
        }
        function getTimesWithTangent(v, tangent) {
            var x0 = v[0], y0 = v[1], x1 = v[2], y1 = v[3], x2 = v[4], y2 = v[5], x3 = v[6], y3 = v[7], normalized = tangent.normalize(), tx = normalized.x, ty = normalized.y, ax = 3 * x3 - 9 * x2 + 9 * x1 - 3 * x0, ay = 3 * y3 - 9 * y2 + 9 * y1 - 3 * y0, bx = 6 * x2 - 12 * x1 + 6 * x0, by = 6 * y2 - 12 * y1 + 6 * y0, cx = 3 * x1 - 3 * x0, cy = 3 * y1 - 3 * y0, den = 2 * ax * ty - 2 * ay * tx, times = [];
            if (Math.abs(den) < Numerical.CURVETIME_EPSILON) {
                var num = ax * cy - ay * cx, den = ax * by - ay * bx;
                if (den != 0) {
                    var t = -num / den;
                    if (t >= 0 && t <= 1) times.push(t);
                }
            } else {
                var delta = (bx * bx - 4 * ax * cx) * ty * ty + (-2 * bx * by + 4 * ay * cx + 4 * ax * cy) * tx * ty + (by * by - 4 * ay * cy) * tx * tx, k = bx * ty - by * tx;
                if (delta >= 0 && den != 0) {
                    var d = Math.sqrt(delta), t0 = -(k + d) / den, t1 = (-k + d) / den;
                    if (t0 >= 0 && t0 <= 1) times.push(t0);
                    if (t1 >= 0 && t1 <= 1) times.push(t1);
                }
            }
            return times;
        }
        return {
            getIntersections: function(curve) {
                var v1 = this.getValues(), v2 = curve && curve !== this && curve.getValues();
                return v2 ? getCurveIntersections(v1, v2, this, curve, []) : getSelfIntersection(v1, this, []);
            },
            statics: {
                getOverlaps: getOverlaps,
                getIntersections: getIntersections,
                getCurveLineIntersections: getCurveLineIntersections,
                getTimesWithTangent: getTimesWithTangent
            }
        };
    });
    var CurveLocation = Base.extend({
        _class: 'CurveLocation',
        initialize: function CurveLocation(curve, time, point, _overlap, _distance) {
            if (time >= 0.99999999) {
                var next = curve.getNext();
                if (next) {
                    time = 0;
                    curve = next;
                }
            }
            this._setCurve(curve);
            this._time = time;
            this._point = point || curve.getPointAtTime(time);
            this._overlap = _overlap;
            this._distance = _distance;
            this._intersection = this._next = this._previous = null;
        },
        _setPath: function(path) {
            this._path = path;
            this._version = path ? path._version : 0;
        },
        _setCurve: function(curve) {
            this._setPath(curve._path);
            this._curve = curve;
            this._segment = null;
            this._segment1 = curve._segment1;
            this._segment2 = curve._segment2;
        },
        _setSegment: function(segment) {
            var curve = segment.getCurve();
            if (curve) this._setCurve(curve);
            else {
                this._setPath(segment._path);
                this._segment1 = segment;
                this._segment2 = null;
            }
            this._segment = segment;
            this._time = segment === this._segment1 ? 0 : 1;
            this._point = segment._point.clone();
        },
        getSegment: function() {
            var segment = this._segment;
            if (!segment) {
                var curve = this.getCurve(), time = this.getTime();
                if (time === 0) segment = curve._segment1;
                else if (time === 1) segment = curve._segment2;
                else if (time != null) segment = curve.getPartLength(0, time) < curve.getPartLength(time, 1) ? curve._segment1 : curve._segment2;
                this._segment = segment;
            }
            return segment;
        },
        getCurve: function() {
            var path = this._path, that = this;
            if (path && path._version !== this._version) this._time = this._offset = this._curveOffset = this._curve = null;
            function trySegment(segment) {
                var curve = segment && segment.getCurve();
                if (curve && (that._time = curve.getTimeOf(that._point)) != null) {
                    that._setCurve(curve);
                    return curve;
                }
            }
            return this._curve || trySegment(this._segment) || trySegment(this._segment1) || trySegment(this._segment2.getPrevious());
        },
        getPath: function() {
            var curve = this.getCurve();
            return curve && curve._path;
        },
        getIndex: function() {
            var curve = this.getCurve();
            return curve && curve.getIndex();
        },
        getTime: function() {
            var curve = this.getCurve(), time = this._time;
            return curve && time == null ? this._time = curve.getTimeOf(this._point) : time;
        },
        getParameter: '#getTime',
        getPoint: function() {
            return this._point;
        },
        getOffset: function() {
            var offset = this._offset;
            if (offset == null) {
                offset = 0;
                var path = this.getPath(), index = this.getIndex();
                if (path && index != null) {
                    var curves = path.getCurves();
                    for(var i = 0; i < index; i++)offset += curves[i].getLength();
                }
                this._offset = offset += this.getCurveOffset();
            }
            return offset;
        },
        getCurveOffset: function() {
            var offset = this._curveOffset;
            if (offset == null) {
                var curve = this.getCurve(), time = this.getTime();
                this._curveOffset = offset = time != null && curve && curve.getPartLength(0, time);
            }
            return offset;
        },
        getIntersection: function() {
            return this._intersection;
        },
        getDistance: function() {
            return this._distance;
        },
        divide: function() {
            var curve = this.getCurve(), res = curve && curve.divideAtTime(this.getTime());
            if (res) this._setSegment(res._segment1);
            return res;
        },
        split: function() {
            var curve = this.getCurve(), path = curve._path, res = curve && curve.splitAtTime(this.getTime());
            if (res) this._setSegment(path.getLastSegment());
            return res;
        },
        equals: function(loc, _ignoreOther) {
            var res = this === loc;
            if (!res && loc instanceof CurveLocation) {
                var c1 = this.getCurve(), c2 = loc.getCurve(), p1 = c1._path, p2 = c2._path;
                if (p1 === p2) {
                    var abs = Math.abs, epsilon = 1e-7, diff = abs(this.getOffset() - loc.getOffset()), i1 = !_ignoreOther && this._intersection, i2 = !_ignoreOther && loc._intersection;
                    res = (diff < epsilon || p1 && abs(p1.getLength() - diff) < epsilon) && (!i1 && !i2 || i1 && i2 && i1.equals(i2, true));
                }
            }
            return res;
        },
        toString: function() {
            var parts = [], point = this.getPoint(), f = Formatter.instance;
            if (point) parts.push('point: ' + point);
            var index = this.getIndex();
            if (index != null) parts.push('index: ' + index);
            var time = this.getTime();
            if (time != null) parts.push('time: ' + f.number(time));
            if (this._distance != null) parts.push('distance: ' + f.number(this._distance));
            return '{ ' + parts.join(', ') + ' }';
        },
        isTouching: function() {
            var inter = this._intersection;
            if (inter && this.getTangent().isCollinear(inter.getTangent())) {
                var curve1 = this.getCurve(), curve2 = inter.getCurve();
                return !(curve1.isStraight() && curve2.isStraight() && curve1.getLine().intersect(curve2.getLine()));
            }
            return false;
        },
        isCrossing: function() {
            var inter = this._intersection;
            if (!inter) return false;
            var t1 = this.getTime(), t2 = inter.getTime(), tMin = 1e-8, tMax = 1 - tMin, t1Inside = t1 >= tMin && t1 <= tMax, t2Inside = t2 >= tMin && t2 <= tMax;
            if (t1Inside && t2Inside) return !this.isTouching();
            var c2 = this.getCurve(), c1 = c2 && t1 < tMin ? c2.getPrevious() : c2, c4 = inter.getCurve(), c3 = c4 && t2 < tMin ? c4.getPrevious() : c4;
            if (t1 > tMax) c2 = c2.getNext();
            if (t2 > tMax) c4 = c4.getNext();
            if (!c1 || !c2 || !c3 || !c4) return false;
            var offsets = [];
            function addOffsets(curve, end) {
                var v = curve.getValues(), roots = Curve.classify(v).roots || Curve.getPeaks(v), count = roots.length, offset = Curve.getLength(v, end && count ? roots[count - 1] : 0, !end && count ? roots[0] : 1);
                offsets.push(count ? offset : offset / 32);
            }
            function isInRange(angle, min, max) {
                return min < max ? angle > min && angle < max : angle > min || angle < max;
            }
            if (!t1Inside) {
                addOffsets(c1, true);
                addOffsets(c2, false);
            }
            if (!t2Inside) {
                addOffsets(c3, true);
                addOffsets(c4, false);
            }
            var pt = this.getPoint(), offset = Math.min.apply(Math, offsets), v2 = t1Inside ? c2.getTangentAtTime(t1) : c2.getPointAt(offset).subtract(pt), v1 = t1Inside ? v2.negate() : c1.getPointAt(-offset).subtract(pt), v4 = t2Inside ? c4.getTangentAtTime(t2) : c4.getPointAt(offset).subtract(pt), v3 = t2Inside ? v4.negate() : c3.getPointAt(-offset).subtract(pt), a1 = v1.getAngle(), a2 = v2.getAngle(), a3 = v3.getAngle(), a4 = v4.getAngle();
            return !!(t1Inside ? isInRange(a1, a3, a4) ^ isInRange(a2, a3, a4) && isInRange(a1, a4, a3) ^ isInRange(a2, a4, a3) : isInRange(a3, a1, a2) ^ isInRange(a4, a1, a2) && isInRange(a3, a2, a1) ^ isInRange(a4, a2, a1));
        },
        hasOverlap: function() {
            return !!this._overlap;
        }
    }, Base.each(Curve._evaluateMethods, function(name) {
        var get = name + 'At';
        this[name] = function() {
            var curve = this.getCurve(), time = this.getTime();
            return time != null && curve && curve[get](time, true);
        };
    }, {
        preserve: true
    }), new function() {
        function insert(locations, loc, merge) {
            var length = locations.length, l = 0, r = length - 1;
            function search(index, dir) {
                for(var i = index + dir; i >= -1 && i <= length; i += dir){
                    var loc2 = locations[(i % length + length) % length];
                    if (!loc.getPoint().isClose(loc2.getPoint(), 1e-7)) break;
                    if (loc.equals(loc2)) return loc2;
                }
                return null;
            }
            while(l <= r){
                var m = l + r >>> 1, loc2 = locations[m], found;
                if (merge && (found = loc.equals(loc2) ? loc2 : search(m, -1) || search(m, 1))) {
                    if (loc._overlap) found._overlap = found._intersection._overlap = true;
                    return found;
                }
                var path1 = loc.getPath(), path2 = loc2.getPath(), diff = path1 !== path2 ? path1._id - path2._id : loc.getIndex() + loc.getTime() - (loc2.getIndex() + loc2.getTime());
                if (diff < 0) r = m - 1;
                else l = m + 1;
            }
            locations.splice(l, 0, loc);
            return loc;
        }
        return {
            statics: {
                insert: insert,
                expand: function(locations) {
                    var expanded = locations.slice();
                    for(var i = locations.length - 1; i >= 0; i--)insert(expanded, locations[i]._intersection, false);
                    return expanded;
                }
            }
        };
    });
    var PathItem = Item.extend({
        _class: 'PathItem',
        _selectBounds: false,
        _canScaleStroke: true,
        beans: true,
        initialize: function PathItem() {},
        statics: {
            create: function(arg) {
                var data, segments, compound;
                if (Base.isPlainObject(arg)) {
                    segments = arg.segments;
                    data = arg.pathData;
                } else if (Array.isArray(arg)) segments = arg;
                else if (typeof arg === 'string') data = arg;
                if (segments) {
                    var first = segments[0];
                    compound = first && Array.isArray(first[0]);
                } else if (data) compound = (data.match(/m/gi) || []).length > 1 || /z\s*\S+/i.test(data);
                var ctor = compound ? CompoundPath : Path;
                return new ctor(arg);
            }
        },
        _asPathItem: function() {
            return this;
        },
        isClockwise: function() {
            return this.getArea() >= 0;
        },
        setClockwise: function(clockwise) {
            if (this.isClockwise() != (clockwise = !!clockwise)) this.reverse();
        },
        setPathData: function(data) {
            var parts = data && data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig), coords, relative = false, previous, control, current = new Point(), start = new Point();
            function getCoord(index, coord) {
                var val = +coords[index];
                if (relative) val += current[coord];
                return val;
            }
            function getPoint(index) {
                return new Point(getCoord(index, 'x'), getCoord(index + 1, 'y'));
            }
            this.clear();
            for(var i = 0, l = parts && parts.length; i < l; i++){
                var part = parts[i], command = part[0], lower = command.toLowerCase();
                coords = part.match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g);
                var length = coords && coords.length;
                relative = command === lower;
                if (previous === 'z' && !/[mz]/.test(lower)) this.moveTo(current);
                switch(lower){
                    case 'm':
                    case 'l':
                        var move = lower === 'm';
                        for(var j = 0; j < length; j += 2){
                            this[move ? 'moveTo' : 'lineTo'](current = getPoint(j));
                            if (move) {
                                start = current;
                                move = false;
                            }
                        }
                        control = current;
                        break;
                    case 'h':
                    case 'v':
                        var coord = lower === 'h' ? 'x' : 'y';
                        current = current.clone();
                        for(var j = 0; j < length; j++){
                            current[coord] = getCoord(j, coord);
                            this.lineTo(current);
                        }
                        control = current;
                        break;
                    case 'c':
                        for(var j = 0; j < length; j += 6)this.cubicCurveTo(getPoint(j), control = getPoint(j + 2), current = getPoint(j + 4));
                        break;
                    case 's':
                        for(var j = 0; j < length; j += 4){
                            this.cubicCurveTo(/[cs]/.test(previous) ? current.multiply(2).subtract(control) : current, control = getPoint(j), current = getPoint(j + 2));
                            previous = lower;
                        }
                        break;
                    case 'q':
                        for(var j = 0; j < length; j += 4)this.quadraticCurveTo(control = getPoint(j), current = getPoint(j + 2));
                        break;
                    case 't':
                        for(var j = 0; j < length; j += 2){
                            this.quadraticCurveTo(control = /[qt]/.test(previous) ? current.multiply(2).subtract(control) : current, current = getPoint(j));
                            previous = lower;
                        }
                        break;
                    case 'a':
                        for(var j = 0; j < length; j += 7)this.arcTo(current = getPoint(j + 5), new Size(+coords[j], +coords[j + 1]), +coords[j + 2], +coords[j + 4], +coords[j + 3]);
                        break;
                    case 'z':
                        this.closePath(1e-12);
                        current = start;
                        break;
                }
                previous = lower;
            }
        },
        _canComposite: function() {
            return !(this.hasFill() && this.hasStroke());
        },
        _contains: function(point) {
            var winding = point.isInside(this.getBounds({
                internal: true,
                handle: true
            })) ? this._getWinding(point) : {};
            return winding.onPath || !!(this.getFillRule() === 'evenodd' ? winding.windingL & 1 || winding.windingR & 1 : winding.winding);
        },
        getIntersections: function(path, include, _matrix, _returnFirst) {
            var self1 = this === path || !path, matrix1 = this._matrix._orNullIfIdentity(), matrix2 = self1 ? matrix1 : (_matrix || path._matrix)._orNullIfIdentity();
            return self1 || this.getBounds(matrix1).intersects(path.getBounds(matrix2), 1e-12) ? Curve.getIntersections(this.getCurves(), !self1 && path.getCurves(), include, matrix1, matrix2, _returnFirst) : [];
        },
        getCrossings: function(path) {
            return this.getIntersections(path, function(inter) {
                return inter.isCrossing();
            });
        },
        getNearestLocation: function() {
            var point = Point.read(arguments), curves = this.getCurves(), minDist = Infinity, minLoc = null;
            for(var i = 0, l = curves.length; i < l; i++){
                var loc = curves[i].getNearestLocation(point);
                if (loc._distance < minDist) {
                    minDist = loc._distance;
                    minLoc = loc;
                }
            }
            return minLoc;
        },
        getNearestPoint: function() {
            var loc = this.getNearestLocation.apply(this, arguments);
            return loc ? loc.getPoint() : loc;
        },
        interpolate: function(from, to, factor) {
            var isPath = !this._children, name = isPath ? '_segments' : '_children', itemsFrom = from[name], itemsTo = to[name], items = this[name];
            if (!itemsFrom || !itemsTo || itemsFrom.length !== itemsTo.length) throw new Error('Invalid operands in interpolate() call: ' + from + ', ' + to);
            var current = items.length, length = itemsTo.length;
            if (current < length) {
                var ctor = isPath ? Segment : Path;
                for(var i = current; i < length; i++)this.add(new ctor());
            } else if (current > length) this[isPath ? 'removeSegments' : 'removeChildren'](length, current);
            for(var i = 0; i < length; i++)items[i].interpolate(itemsFrom[i], itemsTo[i], factor);
            if (isPath) {
                this.setClosed(from._closed);
                this._changed(9);
            }
        },
        compare: function(path) {
            var ok = false;
            if (path) {
                var paths1 = this._children || [
                    this
                ], paths2 = path._children ? path._children.slice() : [
                    path
                ], length1 = paths1.length, length2 = paths2.length, matched = [], count = 0;
                ok = true;
                var boundsOverlaps = CollisionDetection.findItemBoundsCollisions(paths1, paths2, Numerical.GEOMETRIC_EPSILON);
                for(var i1 = length1 - 1; i1 >= 0 && ok; i1--){
                    var path1 = paths1[i1];
                    ok = false;
                    var pathBoundsOverlaps = boundsOverlaps[i1];
                    if (pathBoundsOverlaps) {
                        for(var i2 = pathBoundsOverlaps.length - 1; i2 >= 0 && !ok; i2--)if (path1.compare(paths2[pathBoundsOverlaps[i2]])) {
                            if (!matched[pathBoundsOverlaps[i2]]) {
                                matched[pathBoundsOverlaps[i2]] = true;
                                count++;
                            }
                            ok = true;
                        }
                    }
                }
                ok = ok && count === length2;
            }
            return ok;
        }
    });
    var Path = PathItem.extend({
        _class: 'Path',
        _serializeFields: {
            segments: [],
            closed: false
        },
        initialize: function Path(arg) {
            this._closed = false;
            this._segments = [];
            this._version = 0;
            var args = arguments, segments = Array.isArray(arg) ? typeof arg[0] === 'object' ? arg : args : arg && arg.size === undefined && (arg.x !== undefined || arg.point !== undefined) ? args : null;
            if (segments && segments.length > 0) this.setSegments(segments);
            else {
                this._curves = undefined;
                this._segmentSelection = 0;
                if (!segments && typeof arg === 'string') {
                    this.setPathData(arg);
                    arg = null;
                }
            }
            this._initialize(!segments && arg);
        },
        _equals: function(item) {
            return this._closed === item._closed && Base.equals(this._segments, item._segments);
        },
        copyContent: function(source) {
            this.setSegments(source._segments);
            this._closed = source._closed;
        },
        _changed: function _changed(flags) {
            _changed.base.call(this, flags);
            if (flags & 8) {
                this._length = this._area = undefined;
                if (flags & 32) this._version++;
                else if (this._curves) for(var i = 0, l = this._curves.length; i < l; i++)this._curves[i]._changed();
            } else if (flags & 64) this._bounds = undefined;
        },
        getStyle: function() {
            var parent = this._parent;
            return (parent instanceof CompoundPath ? parent : this)._style;
        },
        getSegments: function() {
            return this._segments;
        },
        setSegments: function(segments) {
            var fullySelected = this.isFullySelected(), length = segments && segments.length;
            this._segments.length = 0;
            this._segmentSelection = 0;
            this._curves = undefined;
            if (length) {
                var last = segments[length - 1];
                if (typeof last === 'boolean') {
                    this.setClosed(last);
                    length--;
                }
                this._add(Segment.readList(segments, 0, {}, length));
            }
            if (fullySelected) this.setFullySelected(true);
        },
        getFirstSegment: function() {
            return this._segments[0];
        },
        getLastSegment: function() {
            return this._segments[this._segments.length - 1];
        },
        getCurves: function() {
            var curves = this._curves, segments = this._segments;
            if (!curves) {
                var length = this._countCurves();
                curves = this._curves = new Array(length);
                for(var i = 0; i < length; i++)curves[i] = new Curve(this, segments[i], segments[i + 1] || segments[0]);
            }
            return curves;
        },
        getFirstCurve: function() {
            return this.getCurves()[0];
        },
        getLastCurve: function() {
            var curves = this.getCurves();
            return curves[curves.length - 1];
        },
        isClosed: function() {
            return this._closed;
        },
        setClosed: function(closed) {
            if (this._closed != (closed = !!closed)) {
                this._closed = closed;
                if (this._curves) {
                    var length = this._curves.length = this._countCurves();
                    if (closed) this._curves[length - 1] = new Curve(this, this._segments[length - 1], this._segments[0]);
                }
                this._changed(41);
            }
        }
    }, {
        beans: true,
        getPathData: function(_matrix, _precision) {
            var segments = this._segments, length = segments.length, f = new Formatter(_precision), coords = new Array(6), first = true, curX, curY, prevX, prevY, inX, inY, outX, outY, parts = [];
            function addSegment(segment, skipLine) {
                segment._transformCoordinates(_matrix, coords);
                curX = coords[0];
                curY = coords[1];
                if (first) {
                    parts.push('M' + f.pair(curX, curY));
                    first = false;
                } else {
                    inX = coords[2];
                    inY = coords[3];
                    if (inX === curX && inY === curY && outX === prevX && outY === prevY) {
                        if (!skipLine) {
                            var dx = curX - prevX, dy = curY - prevY;
                            parts.push(dx === 0 ? 'v' + f.number(dy) : dy === 0 ? 'h' + f.number(dx) : 'l' + f.pair(dx, dy));
                        }
                    } else parts.push('c' + f.pair(outX - prevX, outY - prevY) + ' ' + f.pair(inX - prevX, inY - prevY) + ' ' + f.pair(curX - prevX, curY - prevY));
                }
                prevX = curX;
                prevY = curY;
                outX = coords[4];
                outY = coords[5];
            }
            if (!length) return '';
            for(var i = 0; i < length; i++)addSegment(segments[i]);
            if (this._closed && length > 0) {
                addSegment(segments[0], true);
                parts.push('z');
            }
            return parts.join('');
        },
        isEmpty: function() {
            return !this._segments.length;
        },
        _transformContent: function(matrix) {
            var segments = this._segments, coords = new Array(6);
            for(var i = 0, l = segments.length; i < l; i++)segments[i]._transformCoordinates(matrix, coords, true);
            return true;
        },
        _add: function(segs, index) {
            var segments = this._segments, curves = this._curves, amount = segs.length, append = index == null, index = append ? segments.length : index;
            for(var i = 0; i < amount; i++){
                var segment = segs[i];
                if (segment._path) segment = segs[i] = segment.clone();
                segment._path = this;
                segment._index = index + i;
                if (segment._selection) this._updateSelection(segment, 0, segment._selection);
            }
            if (append) Base.push(segments, segs);
            else {
                segments.splice.apply(segments, [
                    index,
                    0
                ].concat(segs));
                for(var i = index + amount, l = segments.length; i < l; i++)segments[i]._index = i;
            }
            if (curves) {
                var total = this._countCurves(), start = index > 0 && index + amount - 1 === total ? index - 1 : index, insert = start, end = Math.min(start + amount, total);
                if (segs._curves) {
                    curves.splice.apply(curves, [
                        start,
                        0
                    ].concat(segs._curves));
                    insert += segs._curves.length;
                }
                for(var i = insert; i < end; i++)curves.splice(i, 0, new Curve(this, null, null));
                this._adjustCurves(start, end);
            }
            this._changed(41);
            return segs;
        },
        _adjustCurves: function(start, end) {
            var segments = this._segments, curves = this._curves, curve;
            for(var i = start; i < end; i++){
                curve = curves[i];
                curve._path = this;
                curve._segment1 = segments[i];
                curve._segment2 = segments[i + 1] || segments[0];
                curve._changed();
            }
            if (curve = curves[this._closed && !start ? segments.length - 1 : start - 1]) {
                curve._segment2 = segments[start] || segments[0];
                curve._changed();
            }
            if (curve = curves[end]) {
                curve._segment1 = segments[end];
                curve._changed();
            }
        },
        _countCurves: function() {
            var length = this._segments.length;
            return !this._closed && length > 0 ? length - 1 : length;
        },
        add: function(segment1) {
            var args = arguments;
            return args.length > 1 && typeof segment1 !== 'number' ? this._add(Segment.readList(args)) : this._add([
                Segment.read(args)
            ])[0];
        },
        insert: function(index, segment1) {
            var args = arguments;
            return args.length > 2 && typeof segment1 !== 'number' ? this._add(Segment.readList(args, 1), index) : this._add([
                Segment.read(args, 1)
            ], index)[0];
        },
        addSegment: function() {
            return this._add([
                Segment.read(arguments)
            ])[0];
        },
        insertSegment: function(index) {
            return this._add([
                Segment.read(arguments, 1)
            ], index)[0];
        },
        addSegments: function(segments) {
            return this._add(Segment.readList(segments));
        },
        insertSegments: function(index, segments) {
            return this._add(Segment.readList(segments), index);
        },
        removeSegment: function(index) {
            return this.removeSegments(index, index + 1)[0] || null;
        },
        removeSegments: function(start, end, _includeCurves) {
            start = start || 0;
            end = Base.pick(end, this._segments.length);
            var segments = this._segments, curves = this._curves, count = segments.length, removed = segments.splice(start, end - start), amount = removed.length;
            if (!amount) return removed;
            for(var i = 0; i < amount; i++){
                var segment = removed[i];
                if (segment._selection) this._updateSelection(segment, segment._selection, 0);
                segment._index = segment._path = null;
            }
            for(var i = start, l = segments.length; i < l; i++)segments[i]._index = i;
            if (curves) {
                var index = start > 0 && end === count + (this._closed ? 1 : 0) ? start - 1 : start, curves = curves.splice(index, amount);
                for(var i = curves.length - 1; i >= 0; i--)curves[i]._path = null;
                if (_includeCurves) removed._curves = curves.slice(1);
                this._adjustCurves(index, index);
            }
            this._changed(41);
            return removed;
        },
        clear: '#removeSegments',
        hasHandles: function() {
            var segments = this._segments;
            for(var i = 0, l = segments.length; i < l; i++){
                if (segments[i].hasHandles()) return true;
            }
            return false;
        },
        clearHandles: function() {
            var segments = this._segments;
            for(var i = 0, l = segments.length; i < l; i++)segments[i].clearHandles();
        },
        getLength: function() {
            if (this._length == null) {
                var curves = this.getCurves(), length = 0;
                for(var i = 0, l = curves.length; i < l; i++)length += curves[i].getLength();
                this._length = length;
            }
            return this._length;
        },
        getArea: function() {
            var area = this._area;
            if (area == null) {
                var segments = this._segments, closed = this._closed;
                area = 0;
                for(var i = 0, l = segments.length; i < l; i++){
                    var last = i + 1 === l;
                    area += Curve.getArea(Curve.getValues(segments[i], segments[last ? 0 : i + 1], null, last && !closed));
                }
                this._area = area;
            }
            return area;
        },
        isFullySelected: function() {
            var length = this._segments.length;
            return this.isSelected() && length > 0 && this._segmentSelection === length * 7;
        },
        setFullySelected: function(selected) {
            if (selected) this._selectSegments(true);
            this.setSelected(selected);
        },
        setSelection: function setSelection(selection) {
            if (!(selection & 1)) this._selectSegments(false);
            setSelection.base.call(this, selection);
        },
        _selectSegments: function(selected) {
            var segments = this._segments, length = segments.length, selection = selected ? 7 : 0;
            this._segmentSelection = selection * length;
            for(var i = 0; i < length; i++)segments[i]._selection = selection;
        },
        _updateSelection: function(segment, oldSelection, newSelection) {
            segment._selection = newSelection;
            var selection = this._segmentSelection += newSelection - oldSelection;
            if (selection > 0) this.setSelected(true);
        },
        divideAt: function(location) {
            var loc = this.getLocationAt(location), curve;
            return loc && (curve = loc.getCurve().divideAt(loc.getCurveOffset())) ? curve._segment1 : null;
        },
        splitAt: function(location) {
            var loc = this.getLocationAt(location), index = loc && loc.index, time = loc && loc.time, tMin = 1e-8, tMax = 1 - tMin;
            if (time > tMax) {
                index++;
                time = 0;
            }
            var curves = this.getCurves();
            if (index >= 0 && index < curves.length) {
                if (time >= tMin) curves[index++].divideAtTime(time);
                var segs = this.removeSegments(index, this._segments.length, true), path;
                if (this._closed) {
                    this.setClosed(false);
                    path = this;
                } else {
                    path = new Path(Item.NO_INSERT);
                    path.insertAbove(this);
                    path.copyAttributes(this);
                }
                path._add(segs, 0);
                this.addSegment(segs[0]);
                return path;
            }
            return null;
        },
        split: function(index, time) {
            var curve, location = time === undefined ? index : (curve = this.getCurves()[index]) && curve.getLocationAtTime(time);
            return location != null ? this.splitAt(location) : null;
        },
        join: function(path, tolerance) {
            var epsilon = tolerance || 0;
            if (path && path !== this) {
                var segments = path._segments, last1 = this.getLastSegment(), last2 = path.getLastSegment();
                if (!last2) return this;
                if (last1 && last1._point.isClose(last2._point, epsilon)) path.reverse();
                var first2 = path.getFirstSegment();
                if (last1 && last1._point.isClose(first2._point, epsilon)) {
                    last1.setHandleOut(first2._handleOut);
                    this._add(segments.slice(1));
                } else {
                    var first1 = this.getFirstSegment();
                    if (first1 && first1._point.isClose(first2._point, epsilon)) path.reverse();
                    last2 = path.getLastSegment();
                    if (first1 && first1._point.isClose(last2._point, epsilon)) {
                        first1.setHandleIn(last2._handleIn);
                        this._add(segments.slice(0, segments.length - 1), 0);
                    } else this._add(segments.slice());
                }
                if (path._closed) this._add([
                    segments[0]
                ]);
                path.remove();
            }
            var first = this.getFirstSegment(), last = this.getLastSegment();
            if (first !== last && first._point.isClose(last._point, epsilon)) {
                first.setHandleIn(last._handleIn);
                last.remove();
                this.setClosed(true);
            }
            return this;
        },
        reduce: function(options) {
            var curves = this.getCurves(), simplify = options && options.simplify, tolerance = simplify ? 1e-7 : 0;
            for(var i = curves.length - 1; i >= 0; i--){
                var curve = curves[i];
                if (!curve.hasHandles() && (!curve.hasLength(tolerance) || simplify && curve.isCollinear(curve.getNext()))) curve.remove();
            }
            return this;
        },
        reverse: function() {
            this._segments.reverse();
            for(var i = 0, l = this._segments.length; i < l; i++){
                var segment = this._segments[i];
                var handleIn = segment._handleIn;
                segment._handleIn = segment._handleOut;
                segment._handleOut = handleIn;
                segment._index = i;
            }
            this._curves = null;
            this._changed(9);
        },
        flatten: function(flatness) {
            var flattener = new PathFlattener(this, flatness || 0.25, 256, true), parts = flattener.parts, length = parts.length, segments = [];
            for(var i = 0; i < length; i++)segments.push(new Segment(parts[i].curve.slice(0, 2)));
            if (!this._closed && length > 0) segments.push(new Segment(parts[length - 1].curve.slice(6)));
            this.setSegments(segments);
        },
        simplify: function(tolerance) {
            var segments = new PathFitter(this).fit(tolerance || 2.5);
            if (segments) this.setSegments(segments);
            return !!segments;
        },
        smooth: function(options) {
            var that = this, opts = options || {}, type = opts.type || 'asymmetric', segments = this._segments, length = segments.length, closed = this._closed;
            function getIndex(value, _default) {
                var index = value && value.index;
                if (index != null) {
                    var path = value.path;
                    if (path && path !== that) throw new Error(value._class + ' ' + index + ' of ' + path + ' is not part of ' + that);
                    if (_default && value instanceof Curve) index++;
                } else index = typeof value === 'number' ? value : _default;
                return Math.min(index < 0 && closed ? index % length : index < 0 ? index + length : index, length - 1);
            }
            var loop = closed && opts.from === undefined && opts.to === undefined, from = getIndex(opts.from, 0), to = getIndex(opts.to, length - 1);
            if (from > to) {
                if (closed) from -= length;
                else {
                    var tmp = from;
                    from = to;
                    to = tmp;
                }
            }
            if (/^(?:asymmetric|continuous)$/.test(type)) {
                var asymmetric = type === 'asymmetric', min = Math.min, amount = to - from + 1, n = amount - 1, padding = loop ? min(amount, 4) : 1, paddingLeft = padding, paddingRight = padding, knots = [];
                if (!closed) {
                    paddingLeft = min(1, from);
                    paddingRight = min(1, length - to - 1);
                }
                n += paddingLeft + paddingRight;
                if (n <= 1) return;
                for(var i = 0, j = from - paddingLeft; i <= n; i++, j++)knots[i] = segments[(j < 0 ? j + length : j) % length]._point;
                var x = knots[0]._x + 2 * knots[1]._x, y = knots[0]._y + 2 * knots[1]._y, f = 2, n_1 = n - 1, rx = [
                    x
                ], ry = [
                    y
                ], rf = [
                    f
                ], px = [], py = [];
                for(var i = 1; i < n; i++){
                    var internal = i < n_1, a = internal ? 1 : asymmetric ? 1 : 2, b = internal ? 4 : asymmetric ? 2 : 7, u = internal ? 4 : asymmetric ? 3 : 8, v = internal ? 2 : asymmetric ? 0 : 1, m = a / f;
                    f = rf[i] = b - m;
                    x = rx[i] = u * knots[i]._x + v * knots[i + 1]._x - m * x;
                    y = ry[i] = u * knots[i]._y + v * knots[i + 1]._y - m * y;
                }
                px[n_1] = rx[n_1] / rf[n_1];
                py[n_1] = ry[n_1] / rf[n_1];
                for(var i = n - 2; i >= 0; i--){
                    px[i] = (rx[i] - px[i + 1]) / rf[i];
                    py[i] = (ry[i] - py[i + 1]) / rf[i];
                }
                px[n] = (3 * knots[n]._x - px[n_1]) / 2;
                py[n] = (3 * knots[n]._y - py[n_1]) / 2;
                for(var i = paddingLeft, max = n - paddingRight, j = from; i <= max; i++, j++){
                    var segment = segments[j < 0 ? j + length : j], pt = segment._point, hx = px[i] - pt._x, hy = py[i] - pt._y;
                    if (loop || i < max) segment.setHandleOut(hx, hy);
                    if (loop || i > paddingLeft) segment.setHandleIn(-hx, -hy);
                }
            } else for(var i = from; i <= to; i++)segments[i < 0 ? i + length : i].smooth(opts, !loop && i === from, !loop && i === to);
        },
        toShape: function(insert) {
            if (!this._closed) return null;
            var segments = this._segments, type, size, radius, topCenter;
            function isCollinear(i, j) {
                var seg1 = segments[i], seg2 = seg1.getNext(), seg3 = segments[j], seg4 = seg3.getNext();
                return seg1._handleOut.isZero() && seg2._handleIn.isZero() && seg3._handleOut.isZero() && seg4._handleIn.isZero() && seg2._point.subtract(seg1._point).isCollinear(seg4._point.subtract(seg3._point));
            }
            function isOrthogonal(i) {
                var seg2 = segments[i], seg1 = seg2.getPrevious(), seg3 = seg2.getNext();
                return seg1._handleOut.isZero() && seg2._handleIn.isZero() && seg2._handleOut.isZero() && seg3._handleIn.isZero() && seg2._point.subtract(seg1._point).isOrthogonal(seg3._point.subtract(seg2._point));
            }
            function isArc(i) {
                var seg1 = segments[i], seg2 = seg1.getNext(), handle1 = seg1._handleOut, handle2 = seg2._handleIn, kappa = 0.5522847498307936;
                if (handle1.isOrthogonal(handle2)) {
                    var pt1 = seg1._point, pt2 = seg2._point, corner = new Line(pt1, handle1, true).intersect(new Line(pt2, handle2, true), true);
                    return corner && Numerical.isZero(handle1.getLength() / corner.subtract(pt1).getLength() - kappa) && Numerical.isZero(handle2.getLength() / corner.subtract(pt2).getLength() - kappa);
                }
                return false;
            }
            function getDistance(i, j) {
                return segments[i]._point.getDistance(segments[j]._point);
            }
            if (!this.hasHandles() && segments.length === 4 && isCollinear(0, 2) && isCollinear(1, 3) && isOrthogonal(1)) {
                type = Shape.Rectangle;
                size = new Size(getDistance(0, 3), getDistance(0, 1));
                topCenter = segments[1]._point.add(segments[2]._point).divide(2);
            } else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4) && isArc(6) && isCollinear(1, 5) && isCollinear(3, 7)) {
                type = Shape.Rectangle;
                size = new Size(getDistance(1, 6), getDistance(0, 3));
                radius = size.subtract(new Size(getDistance(0, 7), getDistance(1, 2))).divide(2);
                topCenter = segments[3]._point.add(segments[4]._point).divide(2);
            } else if (segments.length === 4 && isArc(0) && isArc(1) && isArc(2) && isArc(3)) {
                if (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {
                    type = Shape.Circle;
                    radius = getDistance(0, 2) / 2;
                } else {
                    type = Shape.Ellipse;
                    radius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);
                }
                topCenter = segments[1]._point;
            }
            if (type) {
                var center = this.getPosition(true), shape = new type({
                    center: center,
                    size: size,
                    radius: radius,
                    insert: false
                });
                shape.copyAttributes(this, true);
                shape._matrix.prepend(this._matrix);
                shape.rotate(topCenter.subtract(center).getAngle() + 90);
                if (insert === undefined || insert) shape.insertAbove(this);
                return shape;
            }
            return null;
        },
        toPath: '#clone',
        compare: function compare(path) {
            if (!path || path instanceof CompoundPath) return compare.base.call(this, path);
            var curves1 = this.getCurves(), curves2 = path.getCurves(), length1 = curves1.length, length2 = curves2.length;
            if (!length1 || !length2) return length1 == length2;
            var v1 = curves1[0].getValues(), values2 = [], pos1 = 0, pos2, end1 = 0, end2;
            for(var i = 0; i < length2; i++){
                var v2 = curves2[i].getValues();
                values2.push(v2);
                var overlaps = Curve.getOverlaps(v1, v2);
                if (overlaps) {
                    pos2 = !i && overlaps[0][0] > 0 ? length2 - 1 : i;
                    end2 = overlaps[0][1];
                    break;
                }
            }
            var abs = Math.abs, epsilon = 1e-8, v2 = values2[pos2], start2;
            while(v1 && v2){
                var overlaps = Curve.getOverlaps(v1, v2);
                if (overlaps) {
                    var t1 = overlaps[0][0];
                    if (abs(t1 - end1) < epsilon) {
                        end1 = overlaps[1][0];
                        if (end1 === 1) {
                            v1 = ++pos1 < length1 ? curves1[pos1].getValues() : null;
                            end1 = 0;
                        }
                        var t2 = overlaps[0][1];
                        if (abs(t2 - end2) < epsilon) {
                            if (!start2) start2 = [
                                pos2,
                                t2
                            ];
                            end2 = overlaps[1][1];
                            if (end2 === 1) {
                                if (++pos2 >= length2) pos2 = 0;
                                v2 = values2[pos2] || curves2[pos2].getValues();
                                end2 = 0;
                            }
                            if (!v1) return start2[0] === pos2 && start2[1] === end2;
                            continue;
                        }
                    }
                }
                break;
            }
            return false;
        },
        _hitTestSelf: function(point, options, viewMatrix, strokeMatrix) {
            var that = this, style = this.getStyle(), segments = this._segments, numSegments = segments.length, closed = this._closed, tolerancePadding = options._tolerancePadding, strokePadding = tolerancePadding, join, cap, miterLimit, area, loc, res, hitStroke = options.stroke && style.hasStroke(), hitFill = options.fill && style.hasFill(), hitCurves = options.curves, strokeRadius = hitStroke ? style.getStrokeWidth() / 2 : hitFill && options.tolerance > 0 || hitCurves ? 0 : null;
            if (strokeRadius !== null) {
                if (strokeRadius > 0) {
                    join = style.getStrokeJoin();
                    cap = style.getStrokeCap();
                    miterLimit = style.getMiterLimit();
                    strokePadding = strokePadding.add(Path._getStrokePadding(strokeRadius, strokeMatrix));
                } else join = cap = 'round';
            }
            function isCloseEnough(pt, padding) {
                return point.subtract(pt).divide(padding).length <= 1;
            }
            function checkSegmentPoint(seg, pt, name) {
                if (!options.selected || pt.isSelected()) {
                    var anchor = seg._point;
                    if (pt !== anchor) pt = pt.add(anchor);
                    if (isCloseEnough(pt, strokePadding)) return new HitResult(name, that, {
                        segment: seg,
                        point: pt
                    });
                }
            }
            function checkSegmentPoints(seg, ends) {
                return (ends || options.segments) && checkSegmentPoint(seg, seg._point, 'segment') || !ends && options.handles && (checkSegmentPoint(seg, seg._handleIn, 'handle-in') || checkSegmentPoint(seg, seg._handleOut, 'handle-out'));
            }
            function addToArea(point) {
                area.add(point);
            }
            function checkSegmentStroke(segment) {
                var isJoin = closed || segment._index > 0 && segment._index < numSegments - 1;
                if ((isJoin ? join : cap) === 'round') return isCloseEnough(segment._point, strokePadding);
                else {
                    area = new Path({
                        internal: true,
                        closed: true
                    });
                    if (isJoin) {
                        if (!segment.isSmooth()) Path._addBevelJoin(segment, join, strokeRadius, miterLimit, null, strokeMatrix, addToArea, true);
                    } else if (cap === 'square') Path._addSquareCap(segment, cap, strokeRadius, null, strokeMatrix, addToArea, true);
                    if (!area.isEmpty()) {
                        var loc;
                        return area.contains(point) || (loc = area.getNearestLocation(point)) && isCloseEnough(loc.getPoint(), tolerancePadding);
                    }
                }
            }
            if (options.ends && !options.segments && !closed) {
                if (res = checkSegmentPoints(segments[0], true) || checkSegmentPoints(segments[numSegments - 1], true)) return res;
            } else if (options.segments || options.handles) {
                for(var i = 0; i < numSegments; i++)if (res = checkSegmentPoints(segments[i])) return res;
            }
            if (strokeRadius !== null) {
                loc = this.getNearestLocation(point);
                if (loc) {
                    var time = loc.getTime();
                    if (time === 0 || time === 1 && numSegments > 1) {
                        if (!checkSegmentStroke(loc.getSegment())) loc = null;
                    } else if (!isCloseEnough(loc.getPoint(), strokePadding)) loc = null;
                }
                if (!loc && join === 'miter' && numSegments > 1) for(var i = 0; i < numSegments; i++){
                    var segment = segments[i];
                    if (point.getDistance(segment._point) <= miterLimit * strokeRadius && checkSegmentStroke(segment)) {
                        loc = segment.getLocation();
                        break;
                    }
                }
            }
            return !loc && hitFill && this._contains(point) || loc && !hitStroke && !hitCurves ? new HitResult('fill', this) : loc ? new HitResult(hitStroke ? 'stroke' : 'curve', this, {
                location: loc,
                point: loc.getPoint()
            }) : null;
        }
    }, Base.each(Curve._evaluateMethods, function(name) {
        this[name + 'At'] = function(offset) {
            var loc = this.getLocationAt(offset);
            return loc && loc[name]();
        };
    }, {
        beans: false,
        getLocationOf: function() {
            var point = Point.read(arguments), curves = this.getCurves();
            for(var i = 0, l = curves.length; i < l; i++){
                var loc = curves[i].getLocationOf(point);
                if (loc) return loc;
            }
            return null;
        },
        getOffsetOf: function() {
            var loc = this.getLocationOf.apply(this, arguments);
            return loc ? loc.getOffset() : null;
        },
        getLocationAt: function(offset) {
            if (typeof offset === 'number') {
                var curves = this.getCurves(), length = 0;
                for(var i = 0, l = curves.length; i < l; i++){
                    var start = length, curve = curves[i];
                    length += curve.getLength();
                    if (length > offset) return curve.getLocationAt(offset - start);
                }
                if (curves.length > 0 && offset <= this.getLength()) return new CurveLocation(curves[curves.length - 1], 1);
            } else if (offset && offset.getPath && offset.getPath() === this) return offset;
            return null;
        },
        getOffsetsWithTangent: function() {
            var tangent = Point.read(arguments);
            if (tangent.isZero()) return [];
            var offsets = [];
            var curveStart = 0;
            var curves = this.getCurves();
            for(var i = 0, l = curves.length; i < l; i++){
                var curve = curves[i];
                var curveTimes = curve.getTimesWithTangent(tangent);
                for(var j = 0, m = curveTimes.length; j < m; j++){
                    var offset = curveStart + curve.getOffsetAtTime(curveTimes[j]);
                    if (offsets.indexOf(offset) < 0) offsets.push(offset);
                }
                curveStart += curve.length;
            }
            return offsets;
        }
    }), new function() {
        function drawHandles(ctx, segments, matrix, size) {
            if (size <= 0) return;
            var half = size / 2, miniSize = size - 2, miniHalf = half - 1, coords = new Array(6), pX, pY;
            function drawHandle(index) {
                var hX = coords[index], hY = coords[index + 1];
                if (pX != hX || pY != hY) {
                    ctx.beginPath();
                    ctx.moveTo(pX, pY);
                    ctx.lineTo(hX, hY);
                    ctx.stroke();
                    ctx.beginPath();
                    ctx.arc(hX, hY, half, 0, Math.PI * 2, true);
                    ctx.fill();
                }
            }
            for(var i = 0, l = segments.length; i < l; i++){
                var segment = segments[i], selection = segment._selection;
                segment._transformCoordinates(matrix, coords);
                pX = coords[0];
                pY = coords[1];
                if (selection & 2) drawHandle(2);
                if (selection & 4) drawHandle(4);
                ctx.fillRect(pX - half, pY - half, size, size);
                if (miniSize > 0 && !(selection & 1)) {
                    var fillStyle = ctx.fillStyle;
                    ctx.fillStyle = '#ffffff';
                    ctx.fillRect(pX - miniHalf, pY - miniHalf, miniSize, miniSize);
                    ctx.fillStyle = fillStyle;
                }
            }
        }
        function drawSegments(ctx, path, matrix) {
            var segments = path._segments, length = segments.length, coords = new Array(6), first = true, curX, curY, prevX, prevY, inX, inY, outX, outY;
            function drawSegment(segment) {
                if (matrix) {
                    segment._transformCoordinates(matrix, coords);
                    curX = coords[0];
                    curY = coords[1];
                } else {
                    var point = segment._point;
                    curX = point._x;
                    curY = point._y;
                }
                if (first) {
                    ctx.moveTo(curX, curY);
                    first = false;
                } else {
                    if (matrix) {
                        inX = coords[2];
                        inY = coords[3];
                    } else {
                        var handle = segment._handleIn;
                        inX = curX + handle._x;
                        inY = curY + handle._y;
                    }
                    if (inX === curX && inY === curY && outX === prevX && outY === prevY) ctx.lineTo(curX, curY);
                    else ctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);
                }
                prevX = curX;
                prevY = curY;
                if (matrix) {
                    outX = coords[4];
                    outY = coords[5];
                } else {
                    var handle = segment._handleOut;
                    outX = prevX + handle._x;
                    outY = prevY + handle._y;
                }
            }
            for(var i = 0; i < length; i++)drawSegment(segments[i]);
            if (path._closed && length > 0) drawSegment(segments[0]);
        }
        return {
            _draw: function(ctx, param, viewMatrix, strokeMatrix) {
                var dontStart = param.dontStart, dontPaint = param.dontFinish || param.clip, style = this.getStyle(), hasFill = style.hasFill(), hasStroke = style.hasStroke(), dashArray = style.getDashArray(), dashLength = !paper.support.nativeDash && hasStroke && dashArray && dashArray.length;
                if (!dontStart) ctx.beginPath();
                if (hasFill || hasStroke && !dashLength || dontPaint) {
                    drawSegments(ctx, this, strokeMatrix);
                    if (this._closed) ctx.closePath();
                }
                function getOffset(i) {
                    return dashArray[(i % dashLength + dashLength) % dashLength];
                }
                if (!dontPaint && (hasFill || hasStroke)) {
                    this._setStyles(ctx, param, viewMatrix);
                    if (hasFill) {
                        ctx.fill(style.getFillRule());
                        ctx.shadowColor = 'rgba(0,0,0,0)';
                    }
                    if (hasStroke) {
                        if (dashLength) {
                            if (!dontStart) ctx.beginPath();
                            var flattener = new PathFlattener(this, 0.25, 32, false, strokeMatrix), length = flattener.length, from = -style.getDashOffset(), to, i = 0;
                            while(from > 0)from -= getOffset(i--) + getOffset(i--);
                            while(from < length){
                                to = from + getOffset(i++);
                                if (from > 0 || to > 0) flattener.drawPart(ctx, Math.max(from, 0), Math.max(to, 0));
                                from = to + getOffset(i++);
                            }
                        }
                        ctx.stroke();
                    }
                }
            },
            _drawSelected: function(ctx, matrix) {
                ctx.beginPath();
                drawSegments(ctx, this, matrix);
                ctx.stroke();
                drawHandles(ctx, this._segments, matrix, paper.settings.handleSize);
            }
        };
    }, new function() {
        function getCurrentSegment(that) {
            var segments = that._segments;
            if (!segments.length) throw new Error('Use a moveTo() command first');
            return segments[segments.length - 1];
        }
        return {
            moveTo: function() {
                var segments = this._segments;
                if (segments.length === 1) this.removeSegment(0);
                if (!segments.length) this._add([
                    new Segment(Point.read(arguments))
                ]);
            },
            moveBy: function() {
                throw new Error('moveBy() is unsupported on Path items.');
            },
            lineTo: function() {
                this._add([
                    new Segment(Point.read(arguments))
                ]);
            },
            cubicCurveTo: function() {
                var args = arguments, handle1 = Point.read(args), handle2 = Point.read(args), to = Point.read(args), current = getCurrentSegment(this);
                current.setHandleOut(handle1.subtract(current._point));
                this._add([
                    new Segment(to, handle2.subtract(to))
                ]);
            },
            quadraticCurveTo: function() {
                var args = arguments, handle = Point.read(args), to = Point.read(args), current = getCurrentSegment(this)._point;
                this.cubicCurveTo(handle.add(current.subtract(handle).multiply(1 / 3)), handle.add(to.subtract(handle).multiply(1 / 3)), to);
            },
            curveTo: function() {
                var args = arguments, through = Point.read(args), to = Point.read(args), t = Base.pick(Base.read(args), 0.5), t1 = 1 - t, current = getCurrentSegment(this)._point, handle = through.subtract(current.multiply(t1 * t1)).subtract(to.multiply(t * t)).divide(2 * t * t1);
                if (handle.isNaN()) throw new Error('Cannot put a curve through points with parameter = ' + t);
                this.quadraticCurveTo(handle, to);
            },
            arcTo: function() {
                var args = arguments, abs = Math.abs, sqrt = Math.sqrt, current = getCurrentSegment(this), from = current._point, to = Point.read(args), through, peek = Base.peek(args), clockwise = Base.pick(peek, true), center, extent, vector, matrix;
                if (typeof clockwise === 'boolean') var middle = from.add(to).divide(2), through = middle.add(middle.subtract(from).rotate(clockwise ? -90 : 90));
                else if (Base.remain(args) <= 2) {
                    through = to;
                    to = Point.read(args);
                } else if (!from.equals(to)) {
                    var radius = Size.read(args), isZero = Numerical.isZero;
                    if (isZero(radius.width) || isZero(radius.height)) return this.lineTo(to);
                    var rotation = Base.read(args), clockwise = !!Base.read(args), large = !!Base.read(args), middle = from.add(to).divide(2), pt = from.subtract(middle).rotate(-rotation), x = pt.x, y = pt.y, rx = abs(radius.width), ry = abs(radius.height), rxSq = rx * rx, rySq = ry * ry, xSq = x * x, ySq = y * y;
                    var factor = sqrt(xSq / rxSq + ySq / rySq);
                    if (factor > 1) {
                        rx *= factor;
                        ry *= factor;
                        rxSq = rx * rx;
                        rySq = ry * ry;
                    }
                    factor = (rxSq * rySq - rxSq * ySq - rySq * xSq) / (rxSq * ySq + rySq * xSq);
                    if (abs(factor) < 1e-12) factor = 0;
                    if (factor < 0) throw new Error('Cannot create an arc with the given arguments');
                    center = new Point(rx * y / ry, -ry * x / rx).multiply((large === clockwise ? -1 : 1) * sqrt(factor)).rotate(rotation).add(middle);
                    matrix = new Matrix().translate(center).rotate(rotation).scale(rx, ry);
                    vector = matrix._inverseTransform(from);
                    extent = vector.getDirectedAngle(matrix._inverseTransform(to));
                    if (!clockwise && extent > 0) extent -= 360;
                    else if (clockwise && extent < 0) extent += 360;
                }
                if (through) {
                    var l1 = new Line(from.add(through).divide(2), through.subtract(from).rotate(90), true), l2 = new Line(through.add(to).divide(2), to.subtract(through).rotate(90), true), line = new Line(from, to), throughSide = line.getSide(through);
                    center = l1.intersect(l2, true);
                    if (!center) {
                        if (!throughSide) return this.lineTo(to);
                        throw new Error('Cannot create an arc with the given arguments');
                    }
                    vector = from.subtract(center);
                    extent = vector.getDirectedAngle(to.subtract(center));
                    var centerSide = line.getSide(center, true);
                    if (centerSide === 0) extent = throughSide * abs(extent);
                    else if (throughSide === centerSide) extent += extent < 0 ? 360 : -360;
                }
                if (extent) {
                    var epsilon = 1e-5, ext = abs(extent), count = ext >= 360 ? 4 : Math.ceil((ext - epsilon) / 90), inc = extent / count, half = inc * Math.PI / 360, z = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)), segments = [];
                    for(var i = 0; i <= count; i++){
                        var pt = to, out = null;
                        if (i < count) {
                            out = vector.rotate(90).multiply(z);
                            if (matrix) {
                                pt = matrix._transformPoint(vector);
                                out = matrix._transformPoint(vector.add(out)).subtract(pt);
                            } else pt = center.add(vector);
                        }
                        if (!i) current.setHandleOut(out);
                        else {
                            var _in = vector.rotate(-90).multiply(z);
                            if (matrix) _in = matrix._transformPoint(vector.add(_in)).subtract(pt);
                            segments.push(new Segment(pt, _in, out));
                        }
                        vector = vector.rotate(inc);
                    }
                    this._add(segments);
                }
            },
            lineBy: function() {
                var to = Point.read(arguments), current = getCurrentSegment(this)._point;
                this.lineTo(current.add(to));
            },
            curveBy: function() {
                var args = arguments, through = Point.read(args), to = Point.read(args), parameter = Base.read(args), current = getCurrentSegment(this)._point;
                this.curveTo(current.add(through), current.add(to), parameter);
            },
            cubicCurveBy: function() {
                var args = arguments, handle1 = Point.read(args), handle2 = Point.read(args), to = Point.read(args), current = getCurrentSegment(this)._point;
                this.cubicCurveTo(current.add(handle1), current.add(handle2), current.add(to));
            },
            quadraticCurveBy: function() {
                var args = arguments, handle = Point.read(args), to = Point.read(args), current = getCurrentSegment(this)._point;
                this.quadraticCurveTo(current.add(handle), current.add(to));
            },
            arcBy: function() {
                var args = arguments, current = getCurrentSegment(this)._point, point = current.add(Point.read(args)), clockwise = Base.pick(Base.peek(args), true);
                if (typeof clockwise === 'boolean') this.arcTo(point, clockwise);
                else this.arcTo(point, current.add(Point.read(args)));
            },
            closePath: function(tolerance) {
                this.setClosed(true);
                this.join(this, tolerance);
            }
        };
    }, {
        _getBounds: function(matrix, options) {
            var method = options.handle ? 'getHandleBounds' : options.stroke ? 'getStrokeBounds' : 'getBounds';
            return Path[method](this._segments, this._closed, this, matrix, options);
        },
        statics: {
            getBounds: function(segments, closed, path, matrix, options, strokePadding) {
                var first = segments[0];
                if (!first) return new Rectangle();
                var coords = new Array(6), prevCoords = first._transformCoordinates(matrix, new Array(6)), min = prevCoords.slice(0, 2), max = min.slice(), roots = new Array(2);
                function processSegment(segment) {
                    segment._transformCoordinates(matrix, coords);
                    for(var i = 0; i < 2; i++)Curve._addBounds(prevCoords[i], prevCoords[i + 4], coords[i + 2], coords[i], i, strokePadding ? strokePadding[i] : 0, min, max, roots);
                    var tmp = prevCoords;
                    prevCoords = coords;
                    coords = tmp;
                }
                for(var i = 1, l = segments.length; i < l; i++)processSegment(segments[i]);
                if (closed) processSegment(first);
                return new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);
            },
            getStrokeBounds: function(segments, closed, path, matrix, options) {
                var style = path.getStyle(), stroke = style.hasStroke(), strokeWidth = style.getStrokeWidth(), strokeMatrix = stroke && path._getStrokeMatrix(matrix, options), strokePadding = stroke && Path._getStrokePadding(strokeWidth, strokeMatrix), bounds = Path.getBounds(segments, closed, path, matrix, options, strokePadding);
                if (!stroke) return bounds;
                var strokeRadius = strokeWidth / 2, join = style.getStrokeJoin(), cap = style.getStrokeCap(), miterLimit = style.getMiterLimit(), joinBounds = new Rectangle(new Size(strokePadding));
                function addPoint(point) {
                    bounds = bounds.include(point);
                }
                function addRound(segment) {
                    bounds = bounds.unite(joinBounds.setCenter(segment._point.transform(matrix)));
                }
                function addJoin(segment, join) {
                    if (join === 'round' || segment.isSmooth()) addRound(segment);
                    else Path._addBevelJoin(segment, join, strokeRadius, miterLimit, matrix, strokeMatrix, addPoint);
                }
                function addCap(segment, cap) {
                    if (cap === 'round') addRound(segment);
                    else Path._addSquareCap(segment, cap, strokeRadius, matrix, strokeMatrix, addPoint);
                }
                var length = segments.length - (closed ? 0 : 1);
                if (length > 0) {
                    for(var i = 1; i < length; i++)addJoin(segments[i], join);
                    if (closed) addJoin(segments[0], join);
                    else {
                        addCap(segments[0], cap);
                        addCap(segments[segments.length - 1], cap);
                    }
                }
                return bounds;
            },
            _getStrokePadding: function(radius, matrix) {
                if (!matrix) return [
                    radius,
                    radius
                ];
                var hor = new Point(radius, 0).transform(matrix), ver = new Point(0, radius).transform(matrix), phi = hor.getAngleInRadians(), a = hor.getLength(), b = ver.getLength();
                var sin = Math.sin(phi), cos = Math.cos(phi), tan = Math.tan(phi), tx = Math.atan2(b * tan, a), ty = Math.atan2(b, tan * a);
                return [
                    Math.abs(a * Math.cos(tx) * cos + b * Math.sin(tx) * sin),
                    Math.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)
                ];
            },
            _addBevelJoin: function(segment, join, radius, miterLimit, matrix, strokeMatrix, addPoint, isArea) {
                var curve2 = segment.getCurve(), curve1 = curve2.getPrevious(), point = curve2.getPoint1().transform(matrix), normal1 = curve1.getNormalAtTime(1).multiply(radius).transform(strokeMatrix), normal2 = curve2.getNormalAtTime(0).multiply(radius).transform(strokeMatrix), angle = normal1.getDirectedAngle(normal2);
                if (angle < 0 || angle >= 180) {
                    normal1 = normal1.negate();
                    normal2 = normal2.negate();
                }
                if (isArea) addPoint(point);
                addPoint(point.add(normal1));
                if (join === 'miter') {
                    var corner = new Line(point.add(normal1), new Point(-normal1.y, normal1.x), true).intersect(new Line(point.add(normal2), new Point(-normal2.y, normal2.x), true), true);
                    if (corner && point.getDistance(corner) <= miterLimit * radius) addPoint(corner);
                }
                addPoint(point.add(normal2));
            },
            _addSquareCap: function(segment, cap, radius, matrix, strokeMatrix, addPoint, isArea) {
                var point = segment._point.transform(matrix), loc = segment.getLocation(), normal = loc.getNormal().multiply(loc.getTime() === 0 ? radius : -radius).transform(strokeMatrix);
                if (cap === 'square') {
                    if (isArea) {
                        addPoint(point.subtract(normal));
                        addPoint(point.add(normal));
                    }
                    point = point.add(normal.rotate(-90));
                }
                addPoint(point.add(normal));
                addPoint(point.subtract(normal));
            },
            getHandleBounds: function(segments, closed, path, matrix, options) {
                var style = path.getStyle(), stroke = options.stroke && style.hasStroke(), strokePadding, joinPadding;
                if (stroke) {
                    var strokeMatrix = path._getStrokeMatrix(matrix, options), strokeRadius = style.getStrokeWidth() / 2, joinRadius = strokeRadius;
                    if (style.getStrokeJoin() === 'miter') joinRadius = strokeRadius * style.getMiterLimit();
                    if (style.getStrokeCap() === 'square') joinRadius = Math.max(joinRadius, strokeRadius * Math.SQRT2);
                    strokePadding = Path._getStrokePadding(strokeRadius, strokeMatrix);
                    joinPadding = Path._getStrokePadding(joinRadius, strokeMatrix);
                }
                var coords = new Array(6), x1 = Infinity, x2 = -x1, y1 = x1, y2 = x2;
                for(var i = 0, l = segments.length; i < l; i++){
                    var segment = segments[i];
                    segment._transformCoordinates(matrix, coords);
                    for(var j = 0; j < 6; j += 2){
                        var padding = !j ? joinPadding : strokePadding, paddingX = padding ? padding[0] : 0, paddingY = padding ? padding[1] : 0, x = coords[j], y = coords[j + 1], xn = x - paddingX, xx = x + paddingX, yn = y - paddingY, yx = y + paddingY;
                        if (xn < x1) x1 = xn;
                        if (xx > x2) x2 = xx;
                        if (yn < y1) y1 = yn;
                        if (yx > y2) y2 = yx;
                    }
                }
                return new Rectangle(x1, y1, x2 - x1, y2 - y1);
            }
        }
    });
    Path.inject({
        statics: new function() {
            var kappa = 0.5522847498307936, ellipseSegments = [
                new Segment([
                    -1,
                    0
                ], [
                    0,
                    kappa
                ], [
                    0,
                    -kappa
                ]),
                new Segment([
                    0,
                    -1
                ], [
                    -kappa,
                    0
                ], [
                    kappa,
                    0
                ]),
                new Segment([
                    1,
                    0
                ], [
                    0,
                    -kappa
                ], [
                    0,
                    kappa
                ]),
                new Segment([
                    0,
                    1
                ], [
                    kappa,
                    0
                ], [
                    -kappa,
                    0
                ])
            ];
            function createPath(segments, closed, args) {
                var props = Base.getNamed(args), path = new Path(props && (props.insert == true ? Item.INSERT : props.insert == false ? Item.NO_INSERT : null));
                path._add(segments);
                path._closed = closed;
                return path.set(props, Item.INSERT);
            }
            function createEllipse(center, radius, args) {
                var segments = new Array(4);
                for(var i = 0; i < 4; i++){
                    var segment = ellipseSegments[i];
                    segments[i] = new Segment(segment._point.multiply(radius).add(center), segment._handleIn.multiply(radius), segment._handleOut.multiply(radius));
                }
                return createPath(segments, true, args);
            }
            return {
                Line: function() {
                    var args = arguments;
                    return createPath([
                        new Segment(Point.readNamed(args, 'from')),
                        new Segment(Point.readNamed(args, 'to'))
                    ], false, args);
                },
                Circle: function() {
                    var args = arguments, center = Point.readNamed(args, 'center'), radius = Base.readNamed(args, 'radius');
                    return createEllipse(center, new Size(radius), args);
                },
                Rectangle: function() {
                    var args = arguments, rect = Rectangle.readNamed(args, 'rectangle'), radius = Size.readNamed(args, 'radius', 0, {
                        readNull: true
                    }), bl = rect.getBottomLeft(true), tl = rect.getTopLeft(true), tr = rect.getTopRight(true), br = rect.getBottomRight(true), segments;
                    if (!radius || radius.isZero()) segments = [
                        new Segment(bl),
                        new Segment(tl),
                        new Segment(tr),
                        new Segment(br)
                    ];
                    else {
                        radius = Size.min(radius, rect.getSize(true).divide(2));
                        var rx = radius.width, ry = radius.height, hx = rx * kappa, hy = ry * kappa;
                        segments = [
                            new Segment(bl.add(rx, 0), null, [
                                -hx,
                                0
                            ]),
                            new Segment(bl.subtract(0, ry), [
                                0,
                                hy
                            ]),
                            new Segment(tl.add(0, ry), null, [
                                0,
                                -hy
                            ]),
                            new Segment(tl.add(rx, 0), [
                                -hx,
                                0
                            ], null),
                            new Segment(tr.subtract(rx, 0), null, [
                                hx,
                                0
                            ]),
                            new Segment(tr.add(0, ry), [
                                0,
                                -hy
                            ], null),
                            new Segment(br.subtract(0, ry), null, [
                                0,
                                hy
                            ]),
                            new Segment(br.subtract(rx, 0), [
                                hx,
                                0
                            ])
                        ];
                    }
                    return createPath(segments, true, args);
                },
                RoundRectangle: '#Rectangle',
                Ellipse: function() {
                    var args = arguments, ellipse = Shape._readEllipse(args);
                    return createEllipse(ellipse.center, ellipse.radius, args);
                },
                Oval: '#Ellipse',
                Arc: function() {
                    var args = arguments, from = Point.readNamed(args, 'from'), through = Point.readNamed(args, 'through'), to = Point.readNamed(args, 'to'), props = Base.getNamed(args), path = new Path(props && props.insert == false && Item.NO_INSERT);
                    path.moveTo(from);
                    path.arcTo(through, to);
                    return path.set(props);
                },
                RegularPolygon: function() {
                    var args = arguments, center = Point.readNamed(args, 'center'), sides = Base.readNamed(args, 'sides'), radius = Base.readNamed(args, 'radius'), step = 360 / sides, three = sides % 3 === 0, vector = new Point(0, three ? -radius : radius), offset = three ? -1 : 0.5, segments = new Array(sides);
                    for(var i = 0; i < sides; i++)segments[i] = new Segment(center.add(vector.rotate((i + offset) * step)));
                    return createPath(segments, true, args);
                },
                Star: function() {
                    var args = arguments, center = Point.readNamed(args, 'center'), points = Base.readNamed(args, 'points') * 2, radius1 = Base.readNamed(args, 'radius1'), radius2 = Base.readNamed(args, 'radius2'), step = 360 / points, vector = new Point(0, -1), segments = new Array(points);
                    for(var i = 0; i < points; i++)segments[i] = new Segment(center.add(vector.rotate(step * i).multiply(i % 2 ? radius2 : radius1)));
                    return createPath(segments, true, args);
                }
            };
        }
    });
    var CompoundPath = PathItem.extend({
        _class: 'CompoundPath',
        _serializeFields: {
            children: []
        },
        beans: true,
        initialize: function CompoundPath(arg) {
            this._children = [];
            this._namedChildren = {};
            if (!this._initialize(arg)) {
                if (typeof arg === 'string') this.setPathData(arg);
                else this.addChildren(Array.isArray(arg) ? arg : arguments);
            }
        },
        insertChildren: function insertChildren(index, items) {
            var list = items, first = list[0];
            if (first && typeof first[0] === 'number') list = [
                list
            ];
            for(var i = items.length - 1; i >= 0; i--){
                var item = list[i];
                if (list === items && !(item instanceof Path)) list = Base.slice(list);
                if (Array.isArray(item)) list[i] = new Path({
                    segments: item,
                    insert: false
                });
                else if (item instanceof CompoundPath) {
                    list.splice.apply(list, [
                        i,
                        1
                    ].concat(item.removeChildren()));
                    item.remove();
                }
            }
            return insertChildren.base.call(this, index, list);
        },
        reduce: function reduce(options) {
            var children = this._children;
            for(var i = children.length - 1; i >= 0; i--){
                var path = children[i].reduce(options);
                if (path.isEmpty()) path.remove();
            }
            if (!children.length) {
                var path = new Path(Item.NO_INSERT);
                path.copyAttributes(this);
                path.insertAbove(this);
                this.remove();
                return path;
            }
            return reduce.base.call(this);
        },
        isClosed: function() {
            var children = this._children;
            for(var i = 0, l = children.length; i < l; i++){
                if (!children[i]._closed) return false;
            }
            return true;
        },
        setClosed: function(closed) {
            var children = this._children;
            for(var i = 0, l = children.length; i < l; i++)children[i].setClosed(closed);
        },
        getFirstSegment: function() {
            var first = this.getFirstChild();
            return first && first.getFirstSegment();
        },
        getLastSegment: function() {
            var last = this.getLastChild();
            return last && last.getLastSegment();
        },
        getCurves: function() {
            var children = this._children, curves = [];
            for(var i = 0, l = children.length; i < l; i++)Base.push(curves, children[i].getCurves());
            return curves;
        },
        getFirstCurve: function() {
            var first = this.getFirstChild();
            return first && first.getFirstCurve();
        },
        getLastCurve: function() {
            var last = this.getLastChild();
            return last && last.getLastCurve();
        },
        getArea: function() {
            var children = this._children, area = 0;
            for(var i = 0, l = children.length; i < l; i++)area += children[i].getArea();
            return area;
        },
        getLength: function() {
            var children = this._children, length = 0;
            for(var i = 0, l = children.length; i < l; i++)length += children[i].getLength();
            return length;
        },
        getPathData: function(_matrix, _precision) {
            var children = this._children, paths = [];
            for(var i = 0, l = children.length; i < l; i++){
                var child = children[i], mx = child._matrix;
                paths.push(child.getPathData(_matrix && !mx.isIdentity() ? _matrix.appended(mx) : _matrix, _precision));
            }
            return paths.join('');
        },
        _hitTestChildren: function _hitTestChildren(point, options, viewMatrix) {
            return _hitTestChildren.base.call(this, point, options.class === Path || options.type === 'path' ? options : Base.set({}, options, {
                fill: false
            }), viewMatrix);
        },
        _draw: function(ctx, param, viewMatrix, strokeMatrix) {
            var children = this._children;
            if (!children.length) return;
            param = param.extend({
                dontStart: true,
                dontFinish: true
            });
            ctx.beginPath();
            for(var i = 0, l = children.length; i < l; i++)children[i].draw(ctx, param, strokeMatrix);
            if (!param.clip) {
                this._setStyles(ctx, param, viewMatrix);
                var style = this._style;
                if (style.hasFill()) {
                    ctx.fill(style.getFillRule());
                    ctx.shadowColor = 'rgba(0,0,0,0)';
                }
                if (style.hasStroke()) ctx.stroke();
            }
        },
        _drawSelected: function(ctx, matrix, selectionItems) {
            var children = this._children;
            for(var i = 0, l = children.length; i < l; i++){
                var child = children[i], mx = child._matrix;
                if (!selectionItems[child._id]) child._drawSelected(ctx, mx.isIdentity() ? matrix : matrix.appended(mx));
            }
        }
    }, new function() {
        function getCurrentPath(that, check) {
            var children = that._children;
            if (check && !children.length) throw new Error('Use a moveTo() command first');
            return children[children.length - 1];
        }
        return Base.each([
            'lineTo',
            'cubicCurveTo',
            'quadraticCurveTo',
            'curveTo',
            'arcTo',
            'lineBy',
            'cubicCurveBy',
            'quadraticCurveBy',
            'curveBy',
            'arcBy'
        ], function(key) {
            this[key] = function() {
                var path = getCurrentPath(this, true);
                path[key].apply(path, arguments);
            };
        }, {
            moveTo: function() {
                var current = getCurrentPath(this), path = current && current.isEmpty() ? current : new Path(Item.NO_INSERT);
                if (path !== current) this.addChild(path);
                path.moveTo.apply(path, arguments);
            },
            moveBy: function() {
                var current = getCurrentPath(this, true), last = current && current.getLastSegment(), point = Point.read(arguments);
                this.moveTo(last ? point.add(last._point) : point);
            },
            closePath: function(tolerance) {
                getCurrentPath(this, true).closePath(tolerance);
            }
        });
    }, Base.each([
        'reverse',
        'flatten',
        'simplify',
        'smooth'
    ], function(key) {
        this[key] = function(param) {
            var children = this._children, res;
            for(var i = 0, l = children.length; i < l; i++)res = children[i][key](param) || res;
            return res;
        };
    }, {}));
    PathItem.inject(new function() {
        var min = Math.min, max = Math.max, abs = Math.abs, operators = {
            unite: {
                '1': true,
                '2': true
            },
            intersect: {
                '2': true
            },
            subtract: {
                '1': true
            },
            exclude: {
                '1': true,
                '-1': true
            }
        };
        function getPaths(path) {
            return path._children || [
                path
            ];
        }
        function preparePath(path, resolve) {
            var res = path.clone(false).reduce({
                simplify: true
            }).transform(null, true, true);
            if (resolve) {
                var paths = getPaths(res);
                for(var i = 0, l = paths.length; i < l; i++){
                    var path = paths[i];
                    if (!path._closed && !path.isEmpty()) {
                        path.closePath(1e-12);
                        path.getFirstSegment().setHandleIn(0, 0);
                        path.getLastSegment().setHandleOut(0, 0);
                    }
                }
                res = res.resolveCrossings().reorient(res.getFillRule() === 'nonzero', true);
            }
            return res;
        }
        function createResult(paths, simplify, path1, path2, options) {
            var result = new CompoundPath(Item.NO_INSERT);
            result.addChildren(paths, true);
            result = result.reduce({
                simplify: simplify
            });
            if (!(options && options.insert == false)) result.insertAbove(path2 && path1.isSibling(path2) && path1.getIndex() < path2.getIndex() ? path2 : path1);
            result.copyAttributes(path1, true);
            return result;
        }
        function filterIntersection(inter) {
            return inter.hasOverlap() || inter.isCrossing();
        }
        function traceBoolean(path1, path2, operation, options) {
            if (options && (options.trace == false || options.stroke) && /^(subtract|intersect)$/.test(operation)) return splitBoolean(path1, path2, operation);
            var _path1 = preparePath(path1, true), _path2 = path2 && path1 !== path2 && preparePath(path2, true), operator = operators[operation];
            operator[operation] = true;
            if (_path2 && (operator.subtract || operator.exclude) ^ (_path2.isClockwise() ^ _path1.isClockwise())) _path2.reverse();
            var crossings = divideLocations(CurveLocation.expand(_path1.getIntersections(_path2, filterIntersection))), paths1 = getPaths(_path1), paths2 = _path2 && getPaths(_path2), segments = [], curves = [], paths;
            function collectPaths(paths) {
                for(var i = 0, l = paths.length; i < l; i++){
                    var path = paths[i];
                    Base.push(segments, path._segments);
                    Base.push(curves, path.getCurves());
                    path._overlapsOnly = true;
                }
            }
            function getCurves(indices) {
                var list = [];
                for(var i = 0, l = indices && indices.length; i < l; i++)list.push(curves[indices[i]]);
                return list;
            }
            if (crossings.length) {
                collectPaths(paths1);
                if (paths2) collectPaths(paths2);
                var curvesValues = new Array(curves.length);
                for(var i = 0, l = curves.length; i < l; i++)curvesValues[i] = curves[i].getValues();
                var curveCollisions = CollisionDetection.findCurveBoundsCollisions(curvesValues, curvesValues, 0, true);
                var curveCollisionsMap = {};
                for(var i = 0; i < curves.length; i++){
                    var curve = curves[i], id = curve._path._id, map = curveCollisionsMap[id] = curveCollisionsMap[id] || {};
                    map[curve.getIndex()] = {
                        hor: getCurves(curveCollisions[i].hor),
                        ver: getCurves(curveCollisions[i].ver)
                    };
                }
                for(var i = 0, l = crossings.length; i < l; i++)propagateWinding(crossings[i]._segment, _path1, _path2, curveCollisionsMap, operator);
                for(var i = 0, l = segments.length; i < l; i++){
                    var segment = segments[i], inter = segment._intersection;
                    if (!segment._winding) propagateWinding(segment, _path1, _path2, curveCollisionsMap, operator);
                    if (!(inter && inter._overlap)) segment._path._overlapsOnly = false;
                }
                paths = tracePaths(segments, operator);
            } else paths = reorientPaths(paths2 ? paths1.concat(paths2) : paths1.slice(), function(w) {
                return !!operator[w];
            });
            return createResult(paths, true, path1, path2, options);
        }
        function splitBoolean(path1, path2, operation) {
            var _path1 = preparePath(path1), _path2 = preparePath(path2), crossings = _path1.getIntersections(_path2, filterIntersection), subtract = operation === 'subtract', divide = operation === 'divide', added = {}, paths = [];
            function addPath(path) {
                if (!added[path._id] && (divide || _path2.contains(path.getPointAt(path.getLength() / 2)) ^ subtract)) {
                    paths.unshift(path);
                    return added[path._id] = true;
                }
            }
            for(var i = crossings.length - 1; i >= 0; i--){
                var path = crossings[i].split();
                if (path) {
                    if (addPath(path)) path.getFirstSegment().setHandleIn(0, 0);
                    _path1.getLastSegment().setHandleOut(0, 0);
                }
            }
            addPath(_path1);
            return createResult(paths, false, path1, path2);
        }
        function linkIntersections(from, to) {
            var prev = from;
            while(prev){
                if (prev === to) return;
                prev = prev._previous;
            }
            while(from._next && from._next !== to)from = from._next;
            if (!from._next) {
                while(to._previous)to = to._previous;
                from._next = to;
                to._previous = from;
            }
        }
        function clearCurveHandles(curves) {
            for(var i = curves.length - 1; i >= 0; i--)curves[i].clearHandles();
        }
        function reorientPaths(paths, isInside, clockwise) {
            var length = paths && paths.length;
            if (length) {
                var lookup = Base.each(paths, function(path, i) {
                    this[path._id] = {
                        container: null,
                        winding: path.isClockwise() ? 1 : -1,
                        index: i
                    };
                }, {}), sorted = paths.slice().sort(function(a, b) {
                    return abs(b.getArea()) - abs(a.getArea());
                }), first = sorted[0];
                var collisions = CollisionDetection.findItemBoundsCollisions(sorted, null, Numerical.GEOMETRIC_EPSILON);
                if (clockwise == null) clockwise = first.isClockwise();
                for(var i = 0; i < length; i++){
                    var path1 = sorted[i], entry1 = lookup[path1._id], containerWinding = 0, indices = collisions[i];
                    if (indices) {
                        var point = null;
                        for(var j = indices.length - 1; j >= 0; j--)if (indices[j] < i) {
                            point = point || path1.getInteriorPoint();
                            var path2 = sorted[indices[j]];
                            if (path2.contains(point)) {
                                var entry2 = lookup[path2._id];
                                containerWinding = entry2.winding;
                                entry1.winding += containerWinding;
                                entry1.container = entry2.exclude ? entry2.container : path2;
                                break;
                            }
                        }
                    }
                    if (isInside(entry1.winding) === isInside(containerWinding)) {
                        entry1.exclude = true;
                        paths[entry1.index] = null;
                    } else {
                        var container = entry1.container;
                        path1.setClockwise(container ? !container.isClockwise() : clockwise);
                    }
                }
            }
            return paths;
        }
        function divideLocations(locations, include, clearLater) {
            var results = include && [], tMin = 1e-8, tMax = 1 - tMin, clearHandles = false, clearCurves = clearLater || [], clearLookup = clearLater && {}, renormalizeLocs, prevCurve, prevTime;
            function getId(curve) {
                return curve._path._id + '.' + curve._segment1._index;
            }
            for(var i = (clearLater && clearLater.length) - 1; i >= 0; i--){
                var curve = clearLater[i];
                if (curve._path) clearLookup[getId(curve)] = true;
            }
            for(var i = locations.length - 1; i >= 0; i--){
                var loc = locations[i], time = loc._time, origTime = time, exclude = include && !include(loc), curve = loc._curve, segment;
                if (curve) {
                    if (curve !== prevCurve) {
                        clearHandles = !curve.hasHandles() || clearLookup && clearLookup[getId(curve)];
                        renormalizeLocs = [];
                        prevTime = null;
                        prevCurve = curve;
                    } else if (prevTime >= tMin) time /= prevTime;
                }
                if (exclude) {
                    if (renormalizeLocs) renormalizeLocs.push(loc);
                    continue;
                } else if (include) results.unshift(loc);
                prevTime = origTime;
                if (time < tMin) segment = curve._segment1;
                else if (time > tMax) segment = curve._segment2;
                else {
                    var newCurve = curve.divideAtTime(time, true);
                    if (clearHandles) clearCurves.push(curve, newCurve);
                    segment = newCurve._segment1;
                    for(var j = renormalizeLocs.length - 1; j >= 0; j--){
                        var l = renormalizeLocs[j];
                        l._time = (l._time - time) / (1 - time);
                    }
                }
                loc._setSegment(segment);
                var inter = segment._intersection, dest = loc._intersection;
                if (inter) {
                    linkIntersections(inter, dest);
                    var other = inter;
                    while(other){
                        linkIntersections(other._intersection, inter);
                        other = other._next;
                    }
                } else segment._intersection = dest;
            }
            if (!clearLater) clearCurveHandles(clearCurves);
            return results || locations;
        }
        function getWinding(point, curves, dir, closed, dontFlip) {
            var curvesList = Array.isArray(curves) ? curves : curves[dir ? 'hor' : 'ver'];
            var ia = dir ? 1 : 0, io = ia ^ 1, pv = [
                point.x,
                point.y
            ], pa = pv[ia], po = pv[io], windingEpsilon = 1e-9, qualityEpsilon = 1e-6, paL = pa - windingEpsilon, paR = pa + windingEpsilon, windingL = 0, windingR = 0, pathWindingL = 0, pathWindingR = 0, onPath = false, onAnyPath = false, quality = 1, roots = [], vPrev, vClose;
            function addWinding(v) {
                var o0 = v[io + 0], o3 = v[io + 6];
                if (po < min(o0, o3) || po > max(o0, o3)) return;
                var a0 = v[ia + 0], a1 = v[ia + 2], a2 = v[ia + 4], a3 = v[ia + 6];
                if (o0 === o3) {
                    if (a0 < paR && a3 > paL || a3 < paR && a0 > paL) onPath = true;
                    return;
                }
                var t = po === o0 ? 0 : po === o3 ? 1 : paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3) ? 1 : Curve.solveCubic(v, io, po, roots, 0, 1) > 0 ? roots[0] : 1, a = t === 0 ? a0 : t === 1 ? a3 : Curve.getPoint(v, t)[dir ? 'y' : 'x'], winding = o0 > o3 ? 1 : -1, windingPrev = vPrev[io] > vPrev[io + 6] ? 1 : -1, a3Prev = vPrev[ia + 6];
                if (po !== o0) {
                    if (a < paL) pathWindingL += winding;
                    else if (a > paR) pathWindingR += winding;
                    else onPath = true;
                    if (a > pa - qualityEpsilon && a < pa + qualityEpsilon) quality /= 2;
                } else {
                    if (winding !== windingPrev) {
                        if (a0 < paL) pathWindingL += winding;
                        else if (a0 > paR) pathWindingR += winding;
                    } else if (a0 != a3Prev) {
                        if (a3Prev < paR && a > paR) {
                            pathWindingR += winding;
                            onPath = true;
                        } else if (a3Prev > paL && a < paL) {
                            pathWindingL += winding;
                            onPath = true;
                        }
                    }
                    quality /= 4;
                }
                vPrev = v;
                return !dontFlip && a > paL && a < paR && Curve.getTangent(v, t)[dir ? 'x' : 'y'] === 0 && getWinding(point, curves, !dir, closed, true);
            }
            function handleCurve(v) {
                var o0 = v[io + 0], o1 = v[io + 2], o2 = v[io + 4], o3 = v[io + 6];
                if (po <= max(o0, o1, o2, o3) && po >= min(o0, o1, o2, o3)) {
                    var a0 = v[ia + 0], a1 = v[ia + 2], a2 = v[ia + 4], a3 = v[ia + 6], monoCurves = paL > max(a0, a1, a2, a3) || paR < min(a0, a1, a2, a3) ? [
                        v
                    ] : Curve.getMonoCurves(v, dir), res;
                    for(var i = 0, l = monoCurves.length; i < l; i++){
                        if (res = addWinding(monoCurves[i])) return res;
                    }
                }
            }
            for(var i = 0, l = curvesList.length; i < l; i++){
                var curve = curvesList[i], path = curve._path, v = curve.getValues(), res;
                if (!i || curvesList[i - 1]._path !== path) {
                    vPrev = null;
                    if (!path._closed) {
                        vClose = Curve.getValues(path.getLastCurve().getSegment2(), curve.getSegment1(), null, !closed);
                        if (vClose[io] !== vClose[io + 6]) vPrev = vClose;
                    }
                    if (!vPrev) {
                        vPrev = v;
                        var prev = path.getLastCurve();
                        while(prev && prev !== curve){
                            var v2 = prev.getValues();
                            if (v2[io] !== v2[io + 6]) {
                                vPrev = v2;
                                break;
                            }
                            prev = prev.getPrevious();
                        }
                    }
                }
                if (res = handleCurve(v)) return res;
                if (i + 1 === l || curvesList[i + 1]._path !== path) {
                    if (vClose && (res = handleCurve(vClose))) return res;
                    if (onPath && !pathWindingL && !pathWindingR) pathWindingL = pathWindingR = path.isClockwise(closed) ^ dir ? 1 : -1;
                    windingL += pathWindingL;
                    windingR += pathWindingR;
                    pathWindingL = pathWindingR = 0;
                    if (onPath) {
                        onAnyPath = true;
                        onPath = false;
                    }
                    vClose = null;
                }
            }
            windingL = abs(windingL);
            windingR = abs(windingR);
            return {
                winding: max(windingL, windingR),
                windingL: windingL,
                windingR: windingR,
                quality: quality,
                onPath: onAnyPath
            };
        }
        function propagateWinding(segment, path1, path2, curveCollisionsMap, operator) {
            var chain = [], start = segment, totalLength = 0, winding;
            do {
                var curve = segment.getCurve();
                if (curve) {
                    var length = curve.getLength();
                    chain.push({
                        segment: segment,
                        curve: curve,
                        length: length
                    });
                    totalLength += length;
                }
                segment = segment.getNext();
            }while (segment && !segment._intersection && segment !== start);
            var offsets = [
                0.5,
                0.25,
                0.75
            ], winding = {
                winding: 0,
                quality: -1
            }, tMin = 1e-3, tMax = 1 - tMin;
            for(var i = 0; i < offsets.length && winding.quality < 0.5; i++){
                var length = totalLength * offsets[i];
                for(var j = 0, l = chain.length; j < l; j++){
                    var entry = chain[j], curveLength = entry.length;
                    if (length <= curveLength) {
                        var curve = entry.curve, path = curve._path, parent = path._parent, operand = parent instanceof CompoundPath ? parent : path, t = Numerical.clamp(curve.getTimeAt(length), tMin, tMax), pt = curve.getPointAtTime(t), dir = abs(curve.getTangentAtTime(t).y) < Math.SQRT1_2;
                        var wind = null;
                        if (operator.subtract && path2) {
                            var otherPath = operand === path1 ? path2 : path1, pathWinding = otherPath._getWinding(pt, dir, true);
                            if (operand === path1 && pathWinding.winding || operand === path2 && !pathWinding.winding) {
                                if (pathWinding.quality < 1) continue;
                                else wind = {
                                    winding: 0,
                                    quality: 1
                                };
                            }
                        }
                        wind = wind || getWinding(pt, curveCollisionsMap[path._id][curve.getIndex()], dir, true);
                        if (wind.quality > winding.quality) winding = wind;
                        break;
                    }
                    length -= curveLength;
                }
            }
            for(var j = chain.length - 1; j >= 0; j--)chain[j].segment._winding = winding;
        }
        function tracePaths(segments, operator) {
            var paths = [], starts;
            function isValid(seg) {
                var winding;
                return !!(seg && !seg._visited && (!operator || operator[(winding = seg._winding || {}).winding] && !(operator.unite && winding.winding === 2 && winding.windingL && winding.windingR)));
            }
            function isStart(seg) {
                if (seg) for(var i = 0, l = starts.length; i < l; i++){
                    if (seg === starts[i]) return true;
                }
                return false;
            }
            function visitPath(path) {
                var segments = path._segments;
                for(var i = 0, l = segments.length; i < l; i++)segments[i]._visited = true;
            }
            function getCrossingSegments(segment, collectStarts) {
                var inter = segment._intersection, start = inter, crossings = [];
                if (collectStarts) starts = [
                    segment
                ];
                function collect(inter, end) {
                    while(inter && inter !== end){
                        var other = inter._segment, path = other && other._path;
                        if (path) {
                            var next = other.getNext() || path.getFirstSegment(), nextInter = next._intersection;
                            if (other !== segment && (isStart(other) || isStart(next) || next && isValid(other) && (isValid(next) || nextInter && isValid(nextInter._segment)))) crossings.push(other);
                            if (collectStarts) starts.push(other);
                        }
                        inter = inter._next;
                    }
                }
                if (inter) {
                    collect(inter);
                    while(inter && inter._previous)inter = inter._previous;
                    collect(inter, start);
                }
                return crossings;
            }
            segments.sort(function(seg1, seg2) {
                var inter1 = seg1._intersection, inter2 = seg2._intersection, over1 = !!(inter1 && inter1._overlap), over2 = !!(inter2 && inter2._overlap), path1 = seg1._path, path2 = seg2._path;
                return over1 ^ over2 ? over1 ? 1 : -1 : !inter1 ^ !inter2 ? inter1 ? 1 : -1 : path1 !== path2 ? path1._id - path2._id : seg1._index - seg2._index;
            });
            for(var i = 0, l = segments.length; i < l; i++){
                var seg = segments[i], valid = isValid(seg), path = null, finished = false, closed = true, branches = [], branch, visited, handleIn;
                if (valid && seg._path._overlapsOnly) {
                    var path1 = seg._path, path2 = seg._intersection._segment._path;
                    if (path1.compare(path2)) {
                        if (path1.getArea()) paths.push(path1.clone(false));
                        visitPath(path1);
                        visitPath(path2);
                        valid = false;
                    }
                }
                while(valid){
                    var first = !path, crossings = getCrossingSegments(seg, first), other = crossings.shift(), finished = !first && (isStart(seg) || isStart(other)), cross = !finished && other;
                    if (first) {
                        path = new Path(Item.NO_INSERT);
                        branch = null;
                    }
                    if (finished) {
                        if (seg.isFirst() || seg.isLast()) closed = seg._path._closed;
                        seg._visited = true;
                        break;
                    }
                    if (cross && branch) {
                        branches.push(branch);
                        branch = null;
                    }
                    if (!branch) {
                        if (cross) crossings.push(seg);
                        branch = {
                            start: path._segments.length,
                            crossings: crossings,
                            visited: visited = [],
                            handleIn: handleIn
                        };
                    }
                    if (cross) seg = other;
                    if (!isValid(seg)) {
                        path.removeSegments(branch.start);
                        for(var j = 0, k = visited.length; j < k; j++)visited[j]._visited = false;
                        visited.length = 0;
                        do {
                            seg = branch && branch.crossings.shift();
                            if (!seg || !seg._path) {
                                seg = null;
                                branch = branches.pop();
                                if (branch) {
                                    visited = branch.visited;
                                    handleIn = branch.handleIn;
                                }
                            }
                        }while (branch && !isValid(seg));
                        if (!seg) break;
                    }
                    var next = seg.getNext();
                    path.add(new Segment(seg._point, handleIn, next && seg._handleOut));
                    seg._visited = true;
                    visited.push(seg);
                    seg = next || seg._path.getFirstSegment();
                    handleIn = next && next._handleIn;
                }
                if (finished) {
                    if (closed) {
                        path.getFirstSegment().setHandleIn(handleIn);
                        path.setClosed(closed);
                    }
                    if (path.getArea() !== 0) paths.push(path);
                }
            }
            return paths;
        }
        return {
            _getWinding: function(point, dir, closed) {
                return getWinding(point, this.getCurves(), dir, closed);
            },
            unite: function(path, options) {
                return traceBoolean(this, path, 'unite', options);
            },
            intersect: function(path, options) {
                return traceBoolean(this, path, 'intersect', options);
            },
            subtract: function(path, options) {
                return traceBoolean(this, path, 'subtract', options);
            },
            exclude: function(path, options) {
                return traceBoolean(this, path, 'exclude', options);
            },
            divide: function(path, options) {
                return options && (options.trace == false || options.stroke) ? splitBoolean(this, path, 'divide') : createResult([
                    this.subtract(path, options),
                    this.intersect(path, options)
                ], true, this, path, options);
            },
            resolveCrossings: function() {
                var children = this._children, paths = children || [
                    this
                ];
                function hasOverlap(seg, path) {
                    var inter = seg && seg._intersection;
                    return inter && inter._overlap && inter._path === path;
                }
                var hasOverlaps = false, hasCrossings = false, intersections = this.getIntersections(null, function(inter) {
                    return inter.hasOverlap() && (hasOverlaps = true) || inter.isCrossing() && (hasCrossings = true);
                }), clearCurves = hasOverlaps && hasCrossings && [];
                intersections = CurveLocation.expand(intersections);
                if (hasOverlaps) {
                    var overlaps = divideLocations(intersections, function(inter) {
                        return inter.hasOverlap();
                    }, clearCurves);
                    for(var i = overlaps.length - 1; i >= 0; i--){
                        var overlap = overlaps[i], path = overlap._path, seg = overlap._segment, prev = seg.getPrevious(), next = seg.getNext();
                        if (hasOverlap(prev, path) && hasOverlap(next, path)) {
                            seg.remove();
                            prev._handleOut._set(0, 0);
                            next._handleIn._set(0, 0);
                            if (prev !== seg && !prev.getCurve().hasLength()) {
                                next._handleIn.set(prev._handleIn);
                                prev.remove();
                            }
                        }
                    }
                }
                if (hasCrossings) {
                    divideLocations(intersections, hasOverlaps && function(inter) {
                        var curve1 = inter.getCurve(), seg1 = inter.getSegment(), other = inter._intersection, curve2 = other._curve, seg2 = other._segment;
                        if (curve1 && curve2 && curve1._path && curve2._path) return true;
                        if (seg1) seg1._intersection = null;
                        if (seg2) seg2._intersection = null;
                    }, clearCurves);
                    if (clearCurves) clearCurveHandles(clearCurves);
                    paths = tracePaths(Base.each(paths, function(path) {
                        Base.push(this, path._segments);
                    }, []));
                }
                var length = paths.length, item;
                if (length > 1 && children) {
                    if (paths !== children) this.setChildren(paths);
                    item = this;
                } else if (length === 1 && !children) {
                    if (paths[0] !== this) this.setSegments(paths[0].removeSegments());
                    item = this;
                }
                if (!item) {
                    item = new CompoundPath(Item.NO_INSERT);
                    item.addChildren(paths);
                    item = item.reduce();
                    item.copyAttributes(this);
                    this.replaceWith(item);
                }
                return item;
            },
            reorient: function(nonZero, clockwise) {
                var children = this._children;
                if (children && children.length) this.setChildren(reorientPaths(this.removeChildren(), function(w) {
                    return !!(nonZero ? w : w & 1);
                }, clockwise));
                else if (clockwise !== undefined) this.setClockwise(clockwise);
                return this;
            },
            getInteriorPoint: function() {
                var bounds = this.getBounds(), point = bounds.getCenter(true);
                if (!this.contains(point)) {
                    var curves = this.getCurves(), y = point.y, intercepts = [], roots = [];
                    for(var i = 0, l = curves.length; i < l; i++){
                        var v = curves[i].getValues(), o0 = v[1], o1 = v[3], o2 = v[5], o3 = v[7];
                        if (y >= min(o0, o1, o2, o3) && y <= max(o0, o1, o2, o3)) {
                            var monoCurves = Curve.getMonoCurves(v);
                            for(var j = 0, m = monoCurves.length; j < m; j++){
                                var mv = monoCurves[j], mo0 = mv[1], mo3 = mv[7];
                                if (mo0 !== mo3 && (y >= mo0 && y <= mo3 || y >= mo3 && y <= mo0)) {
                                    var x = y === mo0 ? mv[0] : y === mo3 ? mv[6] : Curve.solveCubic(mv, 1, y, roots, 0, 1) === 1 ? Curve.getPoint(mv, roots[0]).x : (mv[0] + mv[6]) / 2;
                                    intercepts.push(x);
                                }
                            }
                        }
                    }
                    if (intercepts.length > 1) {
                        intercepts.sort(function(a, b) {
                            return a - b;
                        });
                        point.x = (intercepts[0] + intercepts[1]) / 2;
                    }
                }
                return point;
            }
        };
    });
    var PathFlattener = Base.extend({
        _class: 'PathFlattener',
        initialize: function(path, flatness, maxRecursion, ignoreStraight, matrix) {
            var curves = [], parts = [], length = 0, minSpan = 1 / (maxRecursion || 32), segments = path._segments, segment1 = segments[0], segment2;
            function addCurve(segment1, segment2) {
                var curve = Curve.getValues(segment1, segment2, matrix);
                curves.push(curve);
                computeParts(curve, segment1._index, 0, 1);
            }
            function computeParts(curve, index, t1, t2) {
                if (t2 - t1 > minSpan && !(ignoreStraight && Curve.isStraight(curve)) && !Curve.isFlatEnough(curve, flatness || 0.25)) {
                    var halves = Curve.subdivide(curve, 0.5), tMid = (t1 + t2) / 2;
                    computeParts(halves[0], index, t1, tMid);
                    computeParts(halves[1], index, tMid, t2);
                } else {
                    var dx = curve[6] - curve[0], dy = curve[7] - curve[1], dist = Math.sqrt(dx * dx + dy * dy);
                    if (dist > 0) {
                        length += dist;
                        parts.push({
                            offset: length,
                            curve: curve,
                            index: index,
                            time: t2
                        });
                    }
                }
            }
            for(var i = 1, l = segments.length; i < l; i++){
                segment2 = segments[i];
                addCurve(segment1, segment2);
                segment1 = segment2;
            }
            if (path._closed) addCurve(segment2 || segment1, segments[0]);
            this.curves = curves;
            this.parts = parts;
            this.length = length;
            this.index = 0;
        },
        _get: function(offset) {
            var parts = this.parts, length = parts.length, start, i, j = this.index;
            for(;;){
                i = j;
                if (!j || parts[--j].offset < offset) break;
            }
            for(; i < length; i++){
                var part = parts[i];
                if (part.offset >= offset) {
                    this.index = i;
                    var prev = parts[i - 1], prevTime = prev && prev.index === part.index ? prev.time : 0, prevOffset = prev ? prev.offset : 0;
                    return {
                        index: part.index,
                        time: prevTime + (part.time - prevTime) * (offset - prevOffset) / (part.offset - prevOffset)
                    };
                }
            }
            return {
                index: parts[length - 1].index,
                time: 1
            };
        },
        drawPart: function(ctx, from, to) {
            var start = this._get(from), end = this._get(to);
            for(var i = start.index, l = end.index; i <= l; i++){
                var curve = Curve.getPart(this.curves[i], i === start.index ? start.time : 0, i === end.index ? end.time : 1);
                if (i === start.index) ctx.moveTo(curve[0], curve[1]);
                ctx.bezierCurveTo.apply(ctx, curve.slice(2));
            }
        }
    }, Base.each(Curve._evaluateMethods, function(name) {
        this[name + 'At'] = function(offset) {
            var param = this._get(offset);
            return Curve[name](this.curves[param.index], param.time);
        };
    }, {}));
    var PathFitter = Base.extend({
        initialize: function(path) {
            var points = this.points = [], segments = path._segments, closed = path._closed;
            for(var i = 0, prev, l = segments.length; i < l; i++){
                var point = segments[i].point;
                if (!prev || !prev.equals(point)) points.push(prev = point.clone());
            }
            if (closed) {
                points.unshift(points[points.length - 1]);
                points.push(points[1]);
            }
            this.closed = closed;
        },
        fit: function(error) {
            var points = this.points, length = points.length, segments = null;
            if (length > 0) {
                segments = [
                    new Segment(points[0])
                ];
                if (length > 1) {
                    this.fitCubic(segments, error, 0, length - 1, points[1].subtract(points[0]), points[length - 2].subtract(points[length - 1]));
                    if (this.closed) {
                        segments.shift();
                        segments.pop();
                    }
                }
            }
            return segments;
        },
        fitCubic: function(segments, error, first, last, tan1, tan2) {
            var points = this.points;
            if (last - first === 1) {
                var pt1 = points[first], pt2 = points[last], dist = pt1.getDistance(pt2) / 3;
                this.addCurve(segments, [
                    pt1,
                    pt1.add(tan1.normalize(dist)),
                    pt2.add(tan2.normalize(dist)),
                    pt2
                ]);
                return;
            }
            var uPrime = this.chordLengthParameterize(first, last), maxError = Math.max(error, error * error), split, parametersInOrder = true;
            for(var i = 0; i <= 4; i++){
                var curve = this.generateBezier(first, last, uPrime, tan1, tan2);
                var max = this.findMaxError(first, last, curve, uPrime);
                if (max.error < error && parametersInOrder) {
                    this.addCurve(segments, curve);
                    return;
                }
                split = max.index;
                if (max.error >= maxError) break;
                parametersInOrder = this.reparameterize(first, last, uPrime, curve);
                maxError = max.error;
            }
            var tanCenter = points[split - 1].subtract(points[split + 1]);
            this.fitCubic(segments, error, first, split, tan1, tanCenter);
            this.fitCubic(segments, error, split, last, tanCenter.negate(), tan2);
        },
        addCurve: function(segments, curve) {
            var prev = segments[segments.length - 1];
            prev.setHandleOut(curve[1].subtract(curve[0]));
            segments.push(new Segment(curve[3], curve[2].subtract(curve[3])));
        },
        generateBezier: function(first, last, uPrime, tan1, tan2) {
            var epsilon = 1e-12, abs = Math.abs, points = this.points, pt1 = points[first], pt2 = points[last], C = [
                [
                    0,
                    0
                ],
                [
                    0,
                    0
                ]
            ], X = [
                0,
                0
            ];
            for(var i = 0, l = last - first + 1; i < l; i++){
                var u = uPrime[i], t = 1 - u, b = 3 * u * t, b0 = t * t * t, b1 = b * t, b2 = b * u, b3 = u * u * u, a1 = tan1.normalize(b1), a2 = tan2.normalize(b2), tmp = points[first + i].subtract(pt1.multiply(b0 + b1)).subtract(pt2.multiply(b2 + b3));
                C[0][0] += a1.dot(a1);
                C[0][1] += a1.dot(a2);
                C[1][0] = C[0][1];
                C[1][1] += a2.dot(a2);
                X[0] += a1.dot(tmp);
                X[1] += a2.dot(tmp);
            }
            var detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1], alpha1, alpha2;
            if (abs(detC0C1) > epsilon) {
                var detC0X = C[0][0] * X[1] - C[1][0] * X[0], detXC1 = X[0] * C[1][1] - X[1] * C[0][1];
                alpha1 = detXC1 / detC0C1;
                alpha2 = detC0X / detC0C1;
            } else {
                var c0 = C[0][0] + C[0][1], c1 = C[1][0] + C[1][1];
                alpha1 = alpha2 = abs(c0) > epsilon ? X[0] / c0 : abs(c1) > epsilon ? X[1] / c1 : 0;
            }
            var segLength = pt2.getDistance(pt1), eps = epsilon * segLength, handle1, handle2;
            if (alpha1 < eps || alpha2 < eps) alpha1 = alpha2 = segLength / 3;
            else {
                var line = pt2.subtract(pt1);
                handle1 = tan1.normalize(alpha1);
                handle2 = tan2.normalize(alpha2);
                if (handle1.dot(line) - handle2.dot(line) > segLength * segLength) {
                    alpha1 = alpha2 = segLength / 3;
                    handle1 = handle2 = null;
                }
            }
            return [
                pt1,
                pt1.add(handle1 || tan1.normalize(alpha1)),
                pt2.add(handle2 || tan2.normalize(alpha2)),
                pt2
            ];
        },
        reparameterize: function(first, last, u, curve) {
            for(var i = first; i <= last; i++)u[i - first] = this.findRoot(curve, this.points[i], u[i - first]);
            for(var i = 1, l = u.length; i < l; i++){
                if (u[i] <= u[i - 1]) return false;
            }
            return true;
        },
        findRoot: function(curve, point, u) {
            var curve1 = [], curve2 = [];
            for(var i = 0; i <= 2; i++)curve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);
            for(var i = 0; i <= 1; i++)curve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);
            var pt = this.evaluate(3, curve, u), pt1 = this.evaluate(2, curve1, u), pt2 = this.evaluate(1, curve2, u), diff = pt.subtract(point), df = pt1.dot(pt1) + diff.dot(pt2);
            return Numerical.isMachineZero(df) ? u : u - diff.dot(pt1) / df;
        },
        evaluate: function(degree, curve, t) {
            var tmp = curve.slice();
            for(var i = 1; i <= degree; i++)for(var j = 0; j <= degree - i; j++)tmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));
            return tmp[0];
        },
        chordLengthParameterize: function(first, last) {
            var u = [
                0
            ];
            for(var i = first + 1; i <= last; i++)u[i - first] = u[i - first - 1] + this.points[i].getDistance(this.points[i - 1]);
            for(var i = 1, m = last - first; i <= m; i++)u[i] /= u[m];
            return u;
        },
        findMaxError: function(first, last, curve, u) {
            var index = Math.floor((last - first + 1) / 2), maxDist = 0;
            for(var i = first + 1; i < last; i++){
                var P = this.evaluate(3, curve, u[i - first]);
                var v = P.subtract(this.points[i]);
                var dist = v.x * v.x + v.y * v.y;
                if (dist >= maxDist) {
                    maxDist = dist;
                    index = i;
                }
            }
            return {
                error: maxDist,
                index: index
            };
        }
    });
    var TextItem = Item.extend({
        _class: 'TextItem',
        _applyMatrix: false,
        _canApplyMatrix: false,
        _serializeFields: {
            content: null
        },
        _boundsOptions: {
            stroke: false,
            handle: false
        },
        initialize: function TextItem(arg) {
            this._content = '';
            this._lines = [];
            var hasProps = arg && Base.isPlainObject(arg) && arg.x === undefined && arg.y === undefined;
            this._initialize(hasProps && arg, !hasProps && Point.read(arguments));
        },
        _equals: function(item) {
            return this._content === item._content;
        },
        copyContent: function(source) {
            this.setContent(source._content);
        },
        getContent: function() {
            return this._content;
        },
        setContent: function(content) {
            this._content = '' + content;
            this._lines = this._content.split(/\r\n|\n|\r/mg);
            this._changed(521);
        },
        isEmpty: function() {
            return !this._content;
        },
        getCharacterStyle: '#getStyle',
        setCharacterStyle: '#setStyle',
        getParagraphStyle: '#getStyle',
        setParagraphStyle: '#setStyle'
    });
    var PointText = TextItem.extend({
        _class: 'PointText',
        initialize: function PointText() {
            TextItem.apply(this, arguments);
        },
        getPoint: function() {
            var point = this._matrix.getTranslation();
            return new LinkedPoint(point.x, point.y, this, 'setPoint');
        },
        setPoint: function() {
            var point = Point.read(arguments);
            this.translate(point.subtract(this._matrix.getTranslation()));
        },
        _draw: function(ctx, param, viewMatrix) {
            if (!this._content) return;
            this._setStyles(ctx, param, viewMatrix);
            var lines = this._lines, style = this._style, hasFill = style.hasFill(), hasStroke = style.hasStroke(), leading = style.getLeading(), shadowColor = ctx.shadowColor;
            ctx.font = style.getFontStyle();
            ctx.textAlign = style.getJustification();
            for(var i = 0, l = lines.length; i < l; i++){
                ctx.shadowColor = shadowColor;
                var line = lines[i];
                if (hasFill) {
                    ctx.fillText(line, 0, 0);
                    ctx.shadowColor = 'rgba(0,0,0,0)';
                }
                if (hasStroke) ctx.strokeText(line, 0, 0);
                ctx.translate(0, leading);
            }
        },
        _getBounds: function(matrix, options) {
            var style = this._style, lines = this._lines, numLines = lines.length, justification = style.getJustification(), leading = style.getLeading(), width = this.getView().getTextWidth(style.getFontStyle(), lines), x = 0;
            if (justification !== 'left') x -= width / (justification === 'center' ? 2 : 1);
            var rect = new Rectangle(x, numLines ? -0.75 * leading : 0, width, numLines * leading);
            return matrix ? matrix._transformBounds(rect, rect) : rect;
        }
    });
    var Color = Base.extend(new function() {
        var types = {
            gray: [
                'gray'
            ],
            rgb: [
                'red',
                'green',
                'blue'
            ],
            hsb: [
                'hue',
                'saturation',
                'brightness'
            ],
            hsl: [
                'hue',
                'saturation',
                'lightness'
            ],
            gradient: [
                'gradient',
                'origin',
                'destination',
                'highlight'
            ]
        };
        var componentParsers = {}, namedColors = {
            transparent: [
                0,
                0,
                0,
                0
            ]
        }, colorCtx;
        function fromCSS(string) {
            var match = string.match(/^#([\da-f]{2})([\da-f]{2})([\da-f]{2})([\da-f]{2})?$/i) || string.match(/^#([\da-f])([\da-f])([\da-f])([\da-f])?$/i), type = 'rgb', components;
            if (match) {
                var amount = match[4] ? 4 : 3;
                components = new Array(amount);
                for(var i = 0; i < amount; i++){
                    var value = match[i + 1];
                    components[i] = parseInt(value.length == 1 ? value + value : value, 16) / 255;
                }
            } else if (match = string.match(/^(rgb|hsl)a?\((.*)\)$/)) {
                type = match[1];
                components = match[2].trim().split(/[,\s]+/g);
                var isHSL = type === 'hsl';
                for(var i = 0, l = Math.min(components.length, 4); i < l; i++){
                    var component = components[i];
                    var value = parseFloat(component);
                    if (isHSL) {
                        if (i === 0) {
                            var unit = component.match(/([a-z]*)$/)[1];
                            value *= ({
                                turn: 360,
                                rad: 180 / Math.PI,
                                grad: 0.9
                            })[unit] || 1;
                        } else if (i < 3) value /= 100;
                    } else if (i < 3) value /= /%$/.test(component) ? 100 : 255;
                    components[i] = value;
                }
            } else {
                var color = namedColors[string];
                if (!color) {
                    if (window) {
                        if (!colorCtx) {
                            colorCtx = CanvasProvider.getContext(1, 1, {
                                willReadFrequently: true
                            });
                            colorCtx.globalCompositeOperation = 'copy';
                        }
                        colorCtx.fillStyle = 'rgba(0,0,0,0)';
                        colorCtx.fillStyle = string;
                        colorCtx.fillRect(0, 0, 1, 1);
                        var data = colorCtx.getImageData(0, 0, 1, 1).data;
                        color = namedColors[string] = [
                            data[0] / 255,
                            data[1] / 255,
                            data[2] / 255
                        ];
                    } else color = [
                        0,
                        0,
                        0
                    ];
                }
                components = color.slice();
            }
            return [
                type,
                components
            ];
        }
        var hsbIndices = [
            [
                0,
                3,
                1
            ],
            [
                2,
                0,
                1
            ],
            [
                1,
                0,
                3
            ],
            [
                1,
                2,
                0
            ],
            [
                3,
                1,
                0
            ],
            [
                0,
                1,
                2
            ]
        ];
        var converters = {
            'rgb-hsb': function(r, g, b) {
                var max = Math.max(r, g, b), min = Math.min(r, g, b), delta = max - min, h = delta === 0 ? 0 : (max == r ? (g - b) / delta + (g < b ? 6 : 0) : max == g ? (b - r) / delta + 2 : (r - g) / delta + 4) * 60;
                return [
                    h,
                    max === 0 ? 0 : delta / max,
                    max
                ];
            },
            'hsb-rgb': function(h, s, b) {
                h = (h / 60 % 6 + 6) % 6;
                var i = Math.floor(h), f = h - i, i = hsbIndices[i], v = [
                    b,
                    b * (1 - s),
                    b * (1 - s * f),
                    b * (1 - s * (1 - f))
                ];
                return [
                    v[i[0]],
                    v[i[1]],
                    v[i[2]]
                ];
            },
            'rgb-hsl': function(r, g, b) {
                var max = Math.max(r, g, b), min = Math.min(r, g, b), delta = max - min, achromatic = delta === 0, h = achromatic ? 0 : (max == r ? (g - b) / delta + (g < b ? 6 : 0) : max == g ? (b - r) / delta + 2 : (r - g) / delta + 4) * 60, l = (max + min) / 2, s = achromatic ? 0 : l < 0.5 ? delta / (max + min) : delta / (2 - max - min);
                return [
                    h,
                    s,
                    l
                ];
            },
            'hsl-rgb': function(h, s, l) {
                h = (h / 360 % 1 + 1) % 1;
                if (s === 0) return [
                    l,
                    l,
                    l
                ];
                var t3s = [
                    h + 1 / 3,
                    h,
                    h - 1 / 3
                ], t2 = l < 0.5 ? l * (1 + s) : l + s - l * s, t1 = 2 * l - t2, c = [];
                for(var i = 0; i < 3; i++){
                    var t3 = t3s[i];
                    if (t3 < 0) t3 += 1;
                    if (t3 > 1) t3 -= 1;
                    c[i] = 6 * t3 < 1 ? t1 + (t2 - t1) * 6 * t3 : 2 * t3 < 1 ? t2 : 3 * t3 < 2 ? t1 + (t2 - t1) * (2 / 3 - t3) * 6 : t1;
                }
                return c;
            },
            'rgb-gray': function(r, g, b) {
                return [
                    r * 0.2989 + g * 0.587 + b * 0.114
                ];
            },
            'gray-rgb': function(g) {
                return [
                    g,
                    g,
                    g
                ];
            },
            'gray-hsb': function(g) {
                return [
                    0,
                    0,
                    g
                ];
            },
            'gray-hsl': function(g) {
                return [
                    0,
                    0,
                    g
                ];
            },
            'gradient-rgb': function() {
                return [];
            },
            'rgb-gradient': function() {
                return [];
            }
        };
        return Base.each(types, function(properties, type) {
            componentParsers[type] = [];
            Base.each(properties, function(name, index) {
                var part = Base.capitalize(name), hasOverlap = /^(hue|saturation)$/.test(name), parser = componentParsers[type][index] = type === 'gradient' ? name === 'gradient' ? function(value) {
                    var current = this._components[0];
                    value = Gradient.read(Array.isArray(value) ? value : arguments, 0, {
                        readNull: true
                    });
                    if (current !== value) {
                        if (current) current._removeOwner(this);
                        if (value) value._addOwner(this);
                    }
                    return value;
                } : function() {
                    return Point.read(arguments, 0, {
                        readNull: name === 'highlight',
                        clone: true
                    });
                } : function(value) {
                    return value == null || isNaN(value) ? 0 : +value;
                };
                this['get' + part] = function() {
                    return this._type === type || hasOverlap && /^hs[bl]$/.test(this._type) ? this._components[index] : this._convert(type)[index];
                };
                this['set' + part] = function(value) {
                    if (this._type !== type && !(hasOverlap && /^hs[bl]$/.test(this._type))) {
                        this._components = this._convert(type);
                        this._properties = types[type];
                        this._type = type;
                    }
                    this._components[index] = parser.call(this, value);
                    this._changed();
                };
            }, this);
        }, {
            _class: 'Color',
            _readIndex: true,
            initialize: function Color(arg) {
                var args = arguments, reading = this.__read, read = 0, type, components, alpha, values;
                if (Array.isArray(arg)) {
                    args = arg;
                    arg = args[0];
                }
                var argType = arg != null && typeof arg;
                if (argType === 'string' && arg in types) {
                    type = arg;
                    arg = args[1];
                    if (Array.isArray(arg)) {
                        components = arg;
                        alpha = args[2];
                    } else {
                        if (reading) read = 1;
                        args = Base.slice(args, 1);
                        argType = typeof arg;
                    }
                }
                if (!components) {
                    values = argType === 'number' ? args : argType === 'object' && arg.length != null ? arg : null;
                    if (values) {
                        if (!type) type = values.length >= 3 ? 'rgb' : 'gray';
                        var length = types[type].length;
                        alpha = values[length];
                        if (reading) read += values === arguments ? length + (alpha != null ? 1 : 0) : 1;
                        if (values.length > length) values = Base.slice(values, 0, length);
                    } else if (argType === 'string') {
                        var converted = fromCSS(arg);
                        type = converted[0];
                        components = converted[1];
                        if (components.length === 4) {
                            alpha = components[3];
                            components.length--;
                        }
                    } else if (argType === 'object') {
                        if (arg.constructor === Color) {
                            type = arg._type;
                            components = arg._components.slice();
                            alpha = arg._alpha;
                            if (type === 'gradient') for(var i = 1, l = components.length; i < l; i++){
                                var point = components[i];
                                if (point) components[i] = point.clone();
                            }
                        } else if (arg.constructor === Gradient) {
                            type = 'gradient';
                            values = args;
                        } else {
                            type = 'hue' in arg ? 'lightness' in arg ? 'hsl' : 'hsb' : 'gradient' in arg || 'stops' in arg || 'radial' in arg ? 'gradient' : 'gray' in arg ? 'gray' : 'rgb';
                            var properties = types[type], parsers = componentParsers[type];
                            this._components = components = [];
                            for(var i = 0, l = properties.length; i < l; i++){
                                var value = arg[properties[i]];
                                if (value == null && !i && type === 'gradient' && 'stops' in arg) value = {
                                    stops: arg.stops,
                                    radial: arg.radial
                                };
                                value = parsers[i].call(this, value);
                                if (value != null) components[i] = value;
                            }
                            alpha = arg.alpha;
                        }
                    }
                    if (reading && type) read = 1;
                }
                this._type = type || 'rgb';
                if (!components) {
                    this._components = components = [];
                    var parsers = componentParsers[this._type];
                    for(var i = 0, l = parsers.length; i < l; i++){
                        var value = parsers[i].call(this, values && values[i]);
                        if (value != null) components[i] = value;
                    }
                }
                this._components = components;
                this._properties = types[this._type];
                this._alpha = alpha;
                if (reading) this.__read = read;
                return this;
            },
            set: '#initialize',
            _serialize: function(options, dictionary) {
                var components = this.getComponents();
                return Base.serialize(/^(gray|rgb)$/.test(this._type) ? components : [
                    this._type
                ].concat(components), options, true, dictionary);
            },
            _changed: function() {
                this._canvasStyle = null;
                if (this._owner) {
                    if (this._setter) this._owner[this._setter](this);
                    else this._owner._changed(129);
                }
            },
            _convert: function(type) {
                var converter;
                return this._type === type ? this._components.slice() : (converter = converters[this._type + '-' + type]) ? converter.apply(this, this._components) : converters['rgb-' + type].apply(this, converters[this._type + '-rgb'].apply(this, this._components));
            },
            convert: function(type) {
                return new Color(type, this._convert(type), this._alpha);
            },
            getType: function() {
                return this._type;
            },
            setType: function(type) {
                this._components = this._convert(type);
                this._properties = types[type];
                this._type = type;
            },
            getComponents: function() {
                var components = this._components.slice();
                if (this._alpha != null) components.push(this._alpha);
                return components;
            },
            getAlpha: function() {
                return this._alpha != null ? this._alpha : 1;
            },
            setAlpha: function(alpha) {
                this._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);
                this._changed();
            },
            hasAlpha: function() {
                return this._alpha != null;
            },
            equals: function(color) {
                var col = Base.isPlainValue(color, true) ? Color.read(arguments) : color;
                return col === this || col && this._class === col._class && this._type === col._type && this.getAlpha() === col.getAlpha() && Base.equals(this._components, col._components) || false;
            },
            toString: function() {
                var properties = this._properties, parts = [], isGradient = this._type === 'gradient', f = Formatter.instance;
                for(var i = 0, l = properties.length; i < l; i++){
                    var value = this._components[i];
                    if (value != null) parts.push(properties[i] + ': ' + (isGradient ? value : f.number(value)));
                }
                if (this._alpha != null) parts.push('alpha: ' + f.number(this._alpha));
                return '{ ' + parts.join(', ') + ' }';
            },
            toCSS: function(hex) {
                var components = this._convert('rgb'), alpha = hex || this._alpha == null ? 1 : this._alpha;
                function convert(val) {
                    return Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);
                }
                components = [
                    convert(components[0]),
                    convert(components[1]),
                    convert(components[2])
                ];
                if (alpha < 1) components.push(alpha < 0 ? 0 : alpha);
                return hex ? '#' + (16777216 + (components[0] << 16) + (components[1] << 8) + components[2]).toString(16).slice(1) : (components.length == 4 ? 'rgba(' : 'rgb(') + components.join(',') + ')';
            },
            toCanvasStyle: function(ctx, matrix) {
                if (this._canvasStyle) return this._canvasStyle;
                if (this._type !== 'gradient') return this._canvasStyle = this.toCSS();
                var components = this._components, gradient = components[0], stops = gradient._stops, origin = components[1], destination = components[2], highlight = components[3], inverse = matrix && matrix.inverted(), canvasGradient;
                if (inverse) {
                    origin = inverse._transformPoint(origin);
                    destination = inverse._transformPoint(destination);
                    if (highlight) highlight = inverse._transformPoint(highlight);
                }
                if (gradient._radial) {
                    var radius = destination.getDistance(origin);
                    if (highlight) {
                        var vector = highlight.subtract(origin);
                        if (vector.getLength() > radius) highlight = origin.add(vector.normalize(radius - 0.1));
                    }
                    var start = highlight || origin;
                    canvasGradient = ctx.createRadialGradient(start.x, start.y, 0, origin.x, origin.y, radius);
                } else canvasGradient = ctx.createLinearGradient(origin.x, origin.y, destination.x, destination.y);
                for(var i = 0, l = stops.length; i < l; i++){
                    var stop = stops[i], offset = stop._offset;
                    canvasGradient.addColorStop(offset == null ? i / (l - 1) : offset, stop._color.toCanvasStyle());
                }
                return this._canvasStyle = canvasGradient;
            },
            transform: function(matrix) {
                if (this._type === 'gradient') {
                    var components = this._components;
                    for(var i = 1, l = components.length; i < l; i++){
                        var point = components[i];
                        matrix._transformPoint(point, point, true);
                    }
                    this._changed();
                }
            },
            statics: {
                _types: types,
                random: function() {
                    var random = Math.random;
                    return new Color(random(), random(), random());
                },
                _setOwner: function(color, owner, setter) {
                    if (color) {
                        if (color._owner && owner && color._owner !== owner) color = color.clone();
                        if (!color._owner ^ !owner) {
                            color._owner = owner || null;
                            color._setter = setter || null;
                        }
                    }
                    return color;
                }
            }
        });
    }, new function() {
        var operators = {
            add: function(a, b) {
                return a + b;
            },
            subtract: function(a, b) {
                return a - b;
            },
            multiply: function(a, b) {
                return a * b;
            },
            divide: function(a, b) {
                return a / b;
            }
        };
        return Base.each(operators, function(operator, name) {
            this[name] = function(color) {
                color = Color.read(arguments);
                var type = this._type, components1 = this._components, components2 = color._convert(type);
                for(var i = 0, l = components1.length; i < l; i++)components2[i] = operator(components1[i], components2[i]);
                return new Color(type, components2, this._alpha != null ? operator(this._alpha, color.getAlpha()) : null);
            };
        }, {});
    });
    var Gradient = Base.extend({
        _class: 'Gradient',
        initialize: function Gradient(stops, radial) {
            this._id = UID.get();
            if (stops && Base.isPlainObject(stops)) {
                this.set(stops);
                stops = radial = null;
            }
            if (this._stops == null) this.setStops(stops || [
                'white',
                'black'
            ]);
            if (this._radial == null) this.setRadial(typeof radial === 'string' && radial === 'radial' || radial || false);
        },
        _serialize: function(options, dictionary) {
            return dictionary.add(this, function() {
                return Base.serialize([
                    this._stops,
                    this._radial
                ], options, true, dictionary);
            });
        },
        _changed: function() {
            for(var i = 0, l = this._owners && this._owners.length; i < l; i++)this._owners[i]._changed();
        },
        _addOwner: function(color) {
            if (!this._owners) this._owners = [];
            this._owners.push(color);
        },
        _removeOwner: function(color) {
            var index = this._owners ? this._owners.indexOf(color) : -1;
            if (index != -1) {
                this._owners.splice(index, 1);
                if (!this._owners.length) this._owners = undefined;
            }
        },
        clone: function() {
            var stops = [];
            for(var i = 0, l = this._stops.length; i < l; i++)stops[i] = this._stops[i].clone();
            return new Gradient(stops, this._radial);
        },
        getStops: function() {
            return this._stops;
        },
        setStops: function(stops) {
            if (stops.length < 2) throw new Error('Gradient stop list needs to contain at least two stops.');
            var _stops = this._stops;
            if (_stops) for(var i = 0, l = _stops.length; i < l; i++)_stops[i]._owner = undefined;
            _stops = this._stops = GradientStop.readList(stops, 0, {
                clone: true
            });
            for(var i = 0, l = _stops.length; i < l; i++)_stops[i]._owner = this;
            this._changed();
        },
        getRadial: function() {
            return this._radial;
        },
        setRadial: function(radial) {
            this._radial = radial;
            this._changed();
        },
        equals: function(gradient) {
            if (gradient === this) return true;
            if (gradient && this._class === gradient._class) {
                var stops1 = this._stops, stops2 = gradient._stops, length = stops1.length;
                if (length === stops2.length) {
                    for(var i = 0; i < length; i++){
                        if (!stops1[i].equals(stops2[i])) return false;
                    }
                    return true;
                }
            }
            return false;
        }
    });
    var GradientStop = Base.extend({
        _class: 'GradientStop',
        initialize: function GradientStop(arg0, arg1) {
            var color = arg0, offset = arg1;
            if (typeof arg0 === 'object' && arg1 === undefined) {
                if (Array.isArray(arg0) && typeof arg0[0] !== 'number') {
                    color = arg0[0];
                    offset = arg0[1];
                } else if ('color' in arg0 || 'offset' in arg0 || 'rampPoint' in arg0) {
                    color = arg0.color;
                    offset = arg0.offset || arg0.rampPoint || 0;
                }
            }
            this.setColor(color);
            this.setOffset(offset);
        },
        clone: function() {
            return new GradientStop(this._color.clone(), this._offset);
        },
        _serialize: function(options, dictionary) {
            var color = this._color, offset = this._offset;
            return Base.serialize(offset == null ? [
                color
            ] : [
                color,
                offset
            ], options, true, dictionary);
        },
        _changed: function() {
            if (this._owner) this._owner._changed(129);
        },
        getOffset: function() {
            return this._offset;
        },
        setOffset: function(offset) {
            this._offset = offset;
            this._changed();
        },
        getRampPoint: '#getOffset',
        setRampPoint: '#setOffset',
        getColor: function() {
            return this._color;
        },
        setColor: function() {
            Color._setOwner(this._color, null);
            this._color = Color._setOwner(Color.read(arguments, 0), this, 'setColor');
            this._changed();
        },
        equals: function(stop) {
            return stop === this || stop && this._class === stop._class && this._color.equals(stop._color) && this._offset == stop._offset || false;
        }
    });
    var Style = Base.extend(new function() {
        var itemDefaults = {
            fillColor: null,
            fillRule: 'nonzero',
            strokeColor: null,
            strokeWidth: 1,
            strokeCap: 'butt',
            strokeJoin: 'miter',
            strokeScaling: true,
            miterLimit: 10,
            dashOffset: 0,
            dashArray: [],
            shadowColor: null,
            shadowBlur: 0,
            shadowOffset: new Point(),
            selectedColor: null
        }, groupDefaults = Base.set({}, itemDefaults, {
            fontFamily: 'sans-serif',
            fontWeight: 'normal',
            fontSize: 12,
            leading: null,
            justification: 'left'
        }), textDefaults = Base.set({}, groupDefaults, {
            fillColor: new Color()
        }), flags = {
            strokeWidth: 193,
            strokeCap: 193,
            strokeJoin: 193,
            strokeScaling: 201,
            miterLimit: 193,
            fontFamily: 9,
            fontWeight: 9,
            fontSize: 9,
            font: 9,
            leading: 9,
            justification: 9
        }, item = {
            beans: true
        }, fields = {
            _class: 'Style',
            beans: true,
            initialize: function Style(style, _owner, _project) {
                this._values = {};
                this._owner = _owner;
                this._project = _owner && _owner._project || _project || paper.project;
                this._defaults = !_owner || _owner instanceof Group ? groupDefaults : _owner instanceof TextItem ? textDefaults : itemDefaults;
                if (style) this.set(style);
            }
        };
        Base.each(groupDefaults, function(value, key) {
            var isColor = /Color$/.test(key), isPoint = key === 'shadowOffset', part = Base.capitalize(key), flag = flags[key], set = 'set' + part, get = 'get' + part;
            fields[set] = function(value) {
                var owner = this._owner, children = owner && owner._children, applyToChildren = children && children.length > 0 && !(owner instanceof CompoundPath);
                if (applyToChildren) for(var i = 0, l = children.length; i < l; i++)children[i]._style[set](value);
                if ((key === 'selectedColor' || !applyToChildren) && key in this._defaults) {
                    var old = this._values[key];
                    if (old !== value) {
                        if (isColor) {
                            if (old) {
                                Color._setOwner(old, null);
                                old._canvasStyle = null;
                            }
                            if (value && value.constructor === Color) value = Color._setOwner(value, owner, applyToChildren && set);
                        }
                        this._values[key] = value;
                        if (owner) owner._changed(flag || 129);
                    }
                }
            };
            fields[get] = function(_dontMerge) {
                var owner = this._owner, children = owner && owner._children, applyToChildren = children && children.length > 0 && !(owner instanceof CompoundPath), value;
                if (applyToChildren && !_dontMerge) for(var i = 0, l = children.length; i < l; i++){
                    var childValue = children[i]._style[get]();
                    if (!i) value = childValue;
                    else if (!Base.equals(value, childValue)) return undefined;
                }
                else if (key in this._defaults) {
                    var value = this._values[key];
                    if (value === undefined) {
                        value = this._defaults[key];
                        if (value && value.clone) value = value.clone();
                    } else {
                        var ctor = isColor ? Color : isPoint ? Point : null;
                        if (ctor && !(value && value.constructor === ctor)) this._values[key] = value = ctor.read([
                            value
                        ], 0, {
                            readNull: true,
                            clone: true
                        });
                    }
                }
                if (value && isColor) value = Color._setOwner(value, owner, applyToChildren && set);
                return value;
            };
            item[get] = function(_dontMerge) {
                return this._style[get](_dontMerge);
            };
            item[set] = function(value) {
                this._style[set](value);
            };
        });
        Base.each({
            Font: 'FontFamily',
            WindingRule: 'FillRule'
        }, function(value, key) {
            var get = 'get' + key, set = 'set' + key;
            fields[get] = item[get] = '#get' + value;
            fields[set] = item[set] = '#set' + value;
        });
        Item.inject(item);
        return fields;
    }, {
        set: function(style) {
            var isStyle = style instanceof Style, values = isStyle ? style._values : style;
            if (values) {
                for(var key in values)if (key in this._defaults) {
                    var value = values[key];
                    this[key] = value && isStyle && value.clone ? value.clone() : value;
                }
            }
        },
        equals: function(style) {
            function compare(style1, style2, secondary) {
                var values1 = style1._values, values2 = style2._values, defaults2 = style2._defaults;
                for(var key in values1){
                    var value1 = values1[key], value2 = values2[key];
                    if (!(secondary && key in values2) && !Base.equals(value1, value2 === undefined ? defaults2[key] : value2)) return false;
                }
                return true;
            }
            return style === this || style && this._class === style._class && compare(this, style) && compare(style, this, true) || false;
        },
        _dispose: function() {
            var color;
            color = this.getFillColor();
            if (color) color._canvasStyle = null;
            color = this.getStrokeColor();
            if (color) color._canvasStyle = null;
            color = this.getShadowColor();
            if (color) color._canvasStyle = null;
        },
        hasFill: function() {
            var color = this.getFillColor();
            return !!color && color.alpha > 0;
        },
        hasStroke: function() {
            var color = this.getStrokeColor();
            return !!color && color.alpha > 0 && this.getStrokeWidth() > 0;
        },
        hasShadow: function() {
            var color = this.getShadowColor();
            return !!color && color.alpha > 0 && (this.getShadowBlur() > 0 || !this.getShadowOffset().isZero());
        },
        getView: function() {
            return this._project._view;
        },
        getFontStyle: function() {
            var fontSize = this.getFontSize();
            return this.getFontWeight() + ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ') + this.getFontFamily();
        },
        getFont: '#getFontFamily',
        setFont: '#setFontFamily',
        getLeading: function getLeading() {
            var leading = getLeading.base.call(this), fontSize = this.getFontSize();
            if (/pt|em|%|px/.test(fontSize)) fontSize = this.getView().getPixelSize(fontSize);
            return leading != null ? leading : fontSize * 1.2;
        }
    });
    var DomElement = new function() {
        function handlePrefix(el, name, set, value) {
            var prefixes = [
                '',
                'webkit',
                'moz',
                'Moz',
                'ms',
                'o'
            ], suffix = name[0].toUpperCase() + name.substring(1);
            for(var i = 0; i < 6; i++){
                var prefix = prefixes[i], key = prefix ? prefix + suffix : name;
                if (key in el) {
                    if (set) el[key] = value;
                    else return el[key];
                    break;
                }
            }
        }
        return {
            getStyles: function(el) {
                var doc = el && el.nodeType !== 9 ? el.ownerDocument : el, view = doc && doc.defaultView;
                return view && view.getComputedStyle(el, '');
            },
            getBounds: function(el, viewport) {
                var doc = el.ownerDocument, body = doc.body, html = doc.documentElement, rect;
                try {
                    rect = el.getBoundingClientRect();
                } catch (e) {
                    rect = {
                        left: 0,
                        top: 0,
                        width: 0,
                        height: 0
                    };
                }
                var x = rect.left - (html.clientLeft || body.clientLeft || 0), y = rect.top - (html.clientTop || body.clientTop || 0);
                if (!viewport) {
                    var view = doc.defaultView;
                    x += view.pageXOffset || html.scrollLeft || body.scrollLeft;
                    y += view.pageYOffset || html.scrollTop || body.scrollTop;
                }
                return new Rectangle(x, y, rect.width, rect.height);
            },
            getViewportBounds: function(el) {
                var doc = el.ownerDocument, view = doc.defaultView, html = doc.documentElement;
                return new Rectangle(0, 0, view.innerWidth || html.clientWidth, view.innerHeight || html.clientHeight);
            },
            getOffset: function(el, viewport) {
                return DomElement.getBounds(el, viewport).getPoint();
            },
            getSize: function(el) {
                return DomElement.getBounds(el, true).getSize();
            },
            isInvisible: function(el) {
                return DomElement.getSize(el).equals(new Size(0, 0));
            },
            isInView: function(el) {
                return !DomElement.isInvisible(el) && DomElement.getViewportBounds(el).intersects(DomElement.getBounds(el, true));
            },
            isInserted: function(el) {
                return document.body.contains(el);
            },
            getPrefixed: function(el, name) {
                return el && handlePrefix(el, name);
            },
            setPrefixed: function(el, name, value) {
                if (typeof name === 'object') for(var key in name)handlePrefix(el, key, true, name[key]);
                else handlePrefix(el, name, true, value);
            }
        };
    };
    var DomEvent = {
        add: function(el, events) {
            if (el) for(var type in events){
                var func = events[type], parts = type.split(/[\s,]+/g);
                for(var i = 0, l = parts.length; i < l; i++){
                    var name = parts[i];
                    var options = el === document && (name === 'touchstart' || name === 'touchmove') ? {
                        passive: false
                    } : false;
                    el.addEventListener(name, func, options);
                }
            }
        },
        remove: function(el, events) {
            if (el) for(var type in events){
                var func = events[type], parts = type.split(/[\s,]+/g);
                for(var i = 0, l = parts.length; i < l; i++)el.removeEventListener(parts[i], func, false);
            }
        },
        getPoint: function(event) {
            var pos = event.targetTouches ? event.targetTouches.length ? event.targetTouches[0] : event.changedTouches[0] : event;
            return new Point(pos.pageX || pos.clientX + document.documentElement.scrollLeft, pos.pageY || pos.clientY + document.documentElement.scrollTop);
        },
        getTarget: function(event) {
            return event.target || event.srcElement;
        },
        getRelatedTarget: function(event) {
            return event.relatedTarget || event.toElement;
        },
        getOffset: function(event, target) {
            return DomEvent.getPoint(event).subtract(DomElement.getOffset(target || DomEvent.getTarget(event)));
        }
    };
    DomEvent.requestAnimationFrame = new function() {
        var nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'), requested = false, callbacks = [], timer;
        function handleCallbacks() {
            var functions = callbacks;
            callbacks = [];
            for(var i = 0, l = functions.length; i < l; i++)functions[i]();
            requested = nativeRequest && callbacks.length;
            if (requested) nativeRequest(handleCallbacks);
        }
        return function(callback) {
            callbacks.push(callback);
            if (nativeRequest) {
                if (!requested) {
                    nativeRequest(handleCallbacks);
                    requested = true;
                }
            } else if (!timer) timer = setInterval(handleCallbacks, 1000 / 60);
        };
    };
    var View = Base.extend(Emitter, {
        _class: 'View',
        initialize: function View(project, element) {
            function getSize(name) {
                return element[name] || parseInt(element.getAttribute(name), 10);
            }
            function getCanvasSize() {
                var size = DomElement.getSize(element);
                return size.isNaN() || size.isZero() ? new Size(getSize('width'), getSize('height')) : size;
            }
            var size;
            if (window && element) {
                this._id = element.getAttribute('id');
                if (this._id == null) element.setAttribute('id', this._id = 'paper-view-' + View._id++);
                DomEvent.add(element, this._viewEvents);
                var none = 'none';
                DomElement.setPrefixed(element.style, {
                    userDrag: none,
                    userSelect: none,
                    touchCallout: none,
                    contentZooming: none,
                    tapHighlightColor: 'rgba(0,0,0,0)'
                });
                if (PaperScope.hasAttribute(element, 'resize')) {
                    var that = this;
                    DomEvent.add(window, this._windowEvents = {
                        resize: function() {
                            that.setViewSize(getCanvasSize());
                        }
                    });
                }
                size = getCanvasSize();
                if (PaperScope.hasAttribute(element, 'stats') && typeof Stats !== 'undefined') {
                    this._stats = new Stats();
                    var stats = this._stats.domElement, style = stats.style, offset = DomElement.getOffset(element);
                    style.position = 'absolute';
                    style.left = offset.x + 'px';
                    style.top = offset.y + 'px';
                    document.body.appendChild(stats);
                }
            } else {
                size = new Size(element);
                element = null;
            }
            this._project = project;
            this._scope = project._scope;
            this._element = element;
            if (!this._pixelRatio) this._pixelRatio = window && window.devicePixelRatio || 1;
            this._setElementSize(size.width, size.height);
            this._viewSize = size;
            View._views.push(this);
            View._viewsById[this._id] = this;
            (this._matrix = new Matrix())._owner = this;
            if (!View._focused) View._focused = this;
            this._frameItems = {};
            this._frameItemCount = 0;
            this._itemEvents = {
                native: {},
                virtual: {}
            };
            this._autoUpdate = !paper.agent.node;
            this._needsUpdate = false;
        },
        remove: function() {
            if (!this._project) return false;
            if (View._focused === this) View._focused = null;
            View._views.splice(View._views.indexOf(this), 1);
            delete View._viewsById[this._id];
            var project = this._project;
            if (project._view === this) project._view = null;
            DomEvent.remove(this._element, this._viewEvents);
            DomEvent.remove(window, this._windowEvents);
            this._element = this._project = null;
            this.off('frame');
            this._animate = false;
            this._frameItems = {};
            return true;
        },
        _events: Base.each(Item._itemHandlers.concat([
            'onResize',
            'onKeyDown',
            'onKeyUp'
        ]), function(name) {
            this[name] = {};
        }, {
            onFrame: {
                install: function() {
                    this.play();
                },
                uninstall: function() {
                    this.pause();
                }
            }
        }),
        _animate: false,
        _time: 0,
        _count: 0,
        getAutoUpdate: function() {
            return this._autoUpdate;
        },
        setAutoUpdate: function(autoUpdate) {
            this._autoUpdate = autoUpdate;
            if (autoUpdate) this.requestUpdate();
        },
        update: function() {},
        draw: function() {
            this.update();
        },
        requestUpdate: function() {
            if (!this._requested) {
                var that = this;
                DomEvent.requestAnimationFrame(function() {
                    that._requested = false;
                    if (that._animate) {
                        that.requestUpdate();
                        var element = that._element;
                        if ((!DomElement.getPrefixed(document, 'hidden') || PaperScope.getAttribute(element, 'keepalive') === 'true') && DomElement.isInView(element)) that._handleFrame();
                    }
                    if (that._autoUpdate) that.update();
                });
                this._requested = true;
            }
        },
        play: function() {
            this._animate = true;
            this.requestUpdate();
        },
        pause: function() {
            this._animate = false;
        },
        _handleFrame: function() {
            paper = this._scope;
            var now = Date.now() / 1000, delta = this._last ? now - this._last : 0;
            this._last = now;
            this.emit('frame', new Base({
                delta: delta,
                time: this._time += delta,
                count: this._count++
            }));
            if (this._stats) this._stats.update();
        },
        _animateItem: function(item, animate) {
            var items = this._frameItems;
            if (animate) {
                items[item._id] = {
                    item: item,
                    time: 0,
                    count: 0
                };
                if (++this._frameItemCount === 1) this.on('frame', this._handleFrameItems);
            } else {
                delete items[item._id];
                if (--this._frameItemCount === 0) this.off('frame', this._handleFrameItems);
            }
        },
        _handleFrameItems: function(event) {
            for(var i in this._frameItems){
                var entry = this._frameItems[i];
                entry.item.emit('frame', new Base(event, {
                    time: entry.time += event.delta,
                    count: entry.count++
                }));
            }
        },
        _changed: function() {
            this._project._changed(4097);
            this._bounds = this._decomposed = undefined;
        },
        getElement: function() {
            return this._element;
        },
        getPixelRatio: function() {
            return this._pixelRatio;
        },
        getResolution: function() {
            return this._pixelRatio * 72;
        },
        getViewSize: function() {
            var size = this._viewSize;
            return new LinkedSize(size.width, size.height, this, 'setViewSize');
        },
        setViewSize: function() {
            var size = Size.read(arguments), delta = size.subtract(this._viewSize);
            if (delta.isZero()) return;
            this._setElementSize(size.width, size.height);
            this._viewSize.set(size);
            this._changed();
            this.emit('resize', {
                size: size,
                delta: delta
            });
            if (this._autoUpdate) this.update();
        },
        _setElementSize: function(width, height) {
            var element = this._element;
            if (element) {
                if (element.width !== width) element.width = width;
                if (element.height !== height) element.height = height;
            }
        },
        getBounds: function() {
            if (!this._bounds) this._bounds = this._matrix.inverted()._transformBounds(new Rectangle(new Point(), this._viewSize));
            return this._bounds;
        },
        getSize: function() {
            return this.getBounds().getSize();
        },
        isVisible: function() {
            return DomElement.isInView(this._element);
        },
        isInserted: function() {
            return DomElement.isInserted(this._element);
        },
        getPixelSize: function(size) {
            var element = this._element, pixels;
            if (element) {
                var parent = element.parentNode, temp = document.createElement('div');
                temp.style.fontSize = size;
                parent.appendChild(temp);
                pixels = parseFloat(DomElement.getStyles(temp).fontSize);
                parent.removeChild(temp);
            } else pixels = parseFloat(pixels);
            return pixels;
        },
        getTextWidth: function(font, lines) {
            return 0;
        }
    }, Base.each([
        'rotate',
        'scale',
        'shear',
        'skew'
    ], function(key) {
        var rotate = key === 'rotate';
        this[key] = function() {
            var args = arguments, value = (rotate ? Base : Point).read(args), center = Point.read(args, 0, {
                readNull: true
            });
            return this.transform(new Matrix()[key](value, center || this.getCenter(true)));
        };
    }, {
        _decompose: function() {
            return this._decomposed || (this._decomposed = this._matrix.decompose());
        },
        translate: function() {
            var mx = new Matrix();
            return this.transform(mx.translate.apply(mx, arguments));
        },
        getCenter: function() {
            return this.getBounds().getCenter();
        },
        setCenter: function() {
            var center = Point.read(arguments);
            this.translate(this.getCenter().subtract(center));
        },
        getZoom: function() {
            var scaling = this._decompose().scaling;
            return (scaling.x + scaling.y) / 2;
        },
        setZoom: function(zoom) {
            this.transform(new Matrix().scale(zoom / this.getZoom(), this.getCenter()));
        },
        getRotation: function() {
            return this._decompose().rotation;
        },
        setRotation: function(rotation) {
            var current = this.getRotation();
            if (current != null && rotation != null) this.rotate(rotation - current);
        },
        getScaling: function() {
            var scaling = this._decompose().scaling;
            return new LinkedPoint(scaling.x, scaling.y, this, 'setScaling');
        },
        setScaling: function() {
            var current = this.getScaling(), scaling = Point.read(arguments, 0, {
                clone: true,
                readNull: true
            });
            if (current && scaling) this.scale(scaling.x / current.x, scaling.y / current.y);
        },
        getMatrix: function() {
            return this._matrix;
        },
        setMatrix: function() {
            var matrix = this._matrix;
            matrix.set.apply(matrix, arguments);
        },
        transform: function(matrix) {
            this._matrix.append(matrix);
        },
        scrollBy: function() {
            this.translate(Point.read(arguments).negate());
        }
    }), {
        projectToView: function() {
            return this._matrix._transformPoint(Point.read(arguments));
        },
        viewToProject: function() {
            return this._matrix._inverseTransform(Point.read(arguments));
        },
        getEventPoint: function(event) {
            return this.viewToProject(DomEvent.getOffset(event, this._element));
        }
    }, {
        statics: {
            _views: [],
            _viewsById: {},
            _id: 0,
            create: function(project, element) {
                if (document && typeof element === 'string') element = document.getElementById(element);
                var ctor = window ? CanvasView : View;
                return new ctor(project, element);
            }
        }
    }, new function() {
        if (!window) return;
        var prevFocus, tempFocus, dragging = false, mouseDown = false;
        function getView(event) {
            var target = DomEvent.getTarget(event);
            return target.getAttribute && View._viewsById[target.getAttribute('id')];
        }
        function updateFocus() {
            var view = View._focused;
            if (!view || !view.isVisible()) {
                for(var i = 0, l = View._views.length; i < l; i++)if ((view = View._views[i]).isVisible()) {
                    View._focused = tempFocus = view;
                    break;
                }
            }
        }
        function handleMouseMove(view, event, point) {
            view._handleMouseEvent('mousemove', event, point);
        }
        var navigator = window.navigator, mousedown, mousemove, mouseup;
        if (navigator.pointerEnabled || navigator.msPointerEnabled) {
            mousedown = 'pointerdown MSPointerDown';
            mousemove = 'pointermove MSPointerMove';
            mouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';
        } else {
            mousedown = 'touchstart';
            mousemove = 'touchmove';
            mouseup = 'touchend touchcancel';
            if (!('ontouchstart' in window && navigator.userAgent.match(/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {
                mousedown += ' mousedown';
                mousemove += ' mousemove';
                mouseup += ' mouseup';
            }
        }
        var viewEvents = {}, docEvents = {
            mouseout: function(event) {
                var view = View._focused, target = DomEvent.getRelatedTarget(event);
                if (view && (!target || target.nodeName === 'HTML')) {
                    var offset = DomEvent.getOffset(event, view._element), x = offset.x, abs = Math.abs, ax = abs(x), max = 33554432, diff = ax - max;
                    offset.x = abs(diff) < ax ? diff * (x < 0 ? -1 : 1) : x;
                    handleMouseMove(view, event, view.viewToProject(offset));
                }
            },
            scroll: updateFocus
        };
        viewEvents[mousedown] = function(event) {
            var view = View._focused = getView(event);
            if (!dragging) {
                dragging = true;
                view._handleMouseEvent('mousedown', event);
            }
        };
        docEvents[mousemove] = function(event) {
            var view = View._focused;
            if (!mouseDown) {
                var target = getView(event);
                if (target) {
                    if (view !== target) {
                        if (view) handleMouseMove(view, event);
                        if (!prevFocus) prevFocus = view;
                        view = View._focused = tempFocus = target;
                    }
                } else if (tempFocus && tempFocus === view) {
                    if (prevFocus && !prevFocus.isInserted()) prevFocus = null;
                    view = View._focused = prevFocus;
                    prevFocus = null;
                    updateFocus();
                }
            }
            if (view) handleMouseMove(view, event);
        };
        docEvents[mousedown] = function() {
            mouseDown = true;
        };
        docEvents[mouseup] = function(event) {
            var view = View._focused;
            if (view && dragging) view._handleMouseEvent('mouseup', event);
            mouseDown = dragging = false;
        };
        DomEvent.add(document, docEvents);
        DomEvent.add(window, {
            load: updateFocus
        });
        var called = false, prevented = false, fallbacks = {
            doubleclick: 'click',
            mousedrag: 'mousemove'
        }, wasInView = false, overView, downPoint, lastPoint, downItem, overItem, dragItem, clickItem, clickTime, dblClick;
        function emitMouseEvent(obj, target, type, event, point, prevPoint, stopItem) {
            var stopped = false, mouseEvent;
            function emit(obj, type) {
                if (obj.responds(type)) {
                    if (!mouseEvent) mouseEvent = new MouseEvent(type, event, point, target || obj, prevPoint ? point.subtract(prevPoint) : null);
                    if (obj.emit(type, mouseEvent)) {
                        called = true;
                        if (mouseEvent.prevented) prevented = true;
                        if (mouseEvent.stopped) return stopped = true;
                    }
                } else {
                    var fallback = fallbacks[type];
                    if (fallback) return emit(obj, fallback);
                }
            }
            while(obj && obj !== stopItem){
                if (emit(obj, type)) break;
                obj = obj._parent;
            }
            return stopped;
        }
        function emitMouseEvents(view, hitItem, type, event, point, prevPoint) {
            view._project.removeOn(type);
            prevented = called = false;
            return dragItem && emitMouseEvent(dragItem, null, type, event, point, prevPoint) || hitItem && hitItem !== dragItem && !hitItem.isDescendant(dragItem) && emitMouseEvent(hitItem, null, type === 'mousedrag' ? 'mousemove' : type, event, point, prevPoint, dragItem) || emitMouseEvent(view, dragItem || hitItem || view, type, event, point, prevPoint);
        }
        var itemEventsMap = {
            mousedown: {
                mousedown: 1,
                mousedrag: 1,
                click: 1,
                doubleclick: 1
            },
            mouseup: {
                mouseup: 1,
                mousedrag: 1,
                click: 1,
                doubleclick: 1
            },
            mousemove: {
                mousedrag: 1,
                mousemove: 1,
                mouseenter: 1,
                mouseleave: 1
            }
        };
        return {
            _viewEvents: viewEvents,
            _handleMouseEvent: function(type, event, point) {
                var itemEvents = this._itemEvents, hitItems = itemEvents.native[type], nativeMove = type === 'mousemove', tool = this._scope.tool, view = this;
                function responds(type) {
                    return itemEvents.virtual[type] || view.responds(type) || tool && tool.responds(type);
                }
                if (nativeMove && dragging && responds('mousedrag')) type = 'mousedrag';
                if (!point) point = this.getEventPoint(event);
                var inView = this.getBounds().contains(point), hit = hitItems && inView && view._project.hitTest(point, {
                    tolerance: 0,
                    fill: true,
                    stroke: true
                }), hitItem = hit && hit.item || null, handle = false, mouse = {};
                mouse[type.substr(5)] = true;
                if (hitItems && hitItem !== overItem) {
                    if (overItem) emitMouseEvent(overItem, null, 'mouseleave', event, point);
                    if (hitItem) emitMouseEvent(hitItem, null, 'mouseenter', event, point);
                    overItem = hitItem;
                }
                if (wasInView ^ inView) {
                    emitMouseEvent(this, null, inView ? 'mouseenter' : 'mouseleave', event, point);
                    overView = inView ? this : null;
                    handle = true;
                }
                if ((inView || mouse.drag) && !point.equals(lastPoint)) {
                    emitMouseEvents(this, hitItem, nativeMove ? type : 'mousemove', event, point, lastPoint);
                    handle = true;
                }
                wasInView = inView;
                if (mouse.down && inView || mouse.up && downPoint) {
                    emitMouseEvents(this, hitItem, type, event, point, downPoint);
                    if (mouse.down) {
                        dblClick = hitItem === clickItem && Date.now() - clickTime < 300;
                        downItem = clickItem = hitItem;
                        if (!prevented && hitItem) {
                            var item = hitItem;
                            while(item && !item.responds('mousedrag'))item = item._parent;
                            if (item) dragItem = hitItem;
                        }
                        downPoint = point;
                    } else if (mouse.up) {
                        if (!prevented && hitItem === downItem) {
                            clickTime = Date.now();
                            emitMouseEvents(this, hitItem, dblClick ? 'doubleclick' : 'click', event, point, downPoint);
                            dblClick = false;
                        }
                        downItem = dragItem = null;
                    }
                    wasInView = false;
                    handle = true;
                }
                lastPoint = point;
                if (handle && tool) called = tool._handleMouseEvent(type, event, point, mouse) || called;
                if (event.cancelable !== false && (called && !mouse.move || mouse.down && responds('mouseup'))) event.preventDefault();
            },
            _handleKeyEvent: function(type, event, key, character) {
                var scope = this._scope, tool = scope.tool, keyEvent;
                function emit(obj) {
                    if (obj.responds(type)) {
                        paper = scope;
                        obj.emit(type, keyEvent = keyEvent || new KeyEvent(type, event, key, character));
                    }
                }
                if (this.isVisible()) {
                    emit(this);
                    if (tool && tool.responds(type)) emit(tool);
                }
            },
            _countItemEvent: function(type, sign) {
                var itemEvents = this._itemEvents, native = itemEvents.native, virtual = itemEvents.virtual;
                for(var key in itemEventsMap)native[key] = (native[key] || 0) + (itemEventsMap[key][type] || 0) * sign;
                virtual[type] = (virtual[type] || 0) + sign;
            },
            statics: {
                updateFocus: updateFocus,
                _resetState: function() {
                    dragging = mouseDown = called = wasInView = false;
                    prevFocus = tempFocus = overView = downPoint = lastPoint = downItem = overItem = dragItem = clickItem = clickTime = dblClick = null;
                }
            }
        };
    });
    var CanvasView = View.extend({
        _class: 'CanvasView',
        initialize: function CanvasView(project, canvas) {
            if (!(canvas instanceof window.HTMLCanvasElement)) {
                var size = Size.read(arguments, 1);
                if (size.isZero()) throw new Error('Cannot create CanvasView with the provided argument: ' + Base.slice(arguments, 1));
                canvas = CanvasProvider.getCanvas(size);
            }
            var ctx = this._context = canvas.getContext('2d');
            ctx.save();
            this._pixelRatio = 1;
            if (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {
                var deviceRatio = window.devicePixelRatio || 1, backingStoreRatio = DomElement.getPrefixed(ctx, 'backingStorePixelRatio') || 1;
                this._pixelRatio = deviceRatio / backingStoreRatio;
            }
            View.call(this, project, canvas);
            this._needsUpdate = true;
        },
        remove: function remove() {
            this._context.restore();
            return remove.base.call(this);
        },
        _setElementSize: function _setElementSize(width, height) {
            var pixelRatio = this._pixelRatio;
            _setElementSize.base.call(this, width * pixelRatio, height * pixelRatio);
            if (pixelRatio !== 1) {
                var element = this._element, ctx = this._context;
                if (!PaperScope.hasAttribute(element, 'resize')) {
                    var style = element.style;
                    style.width = width + 'px';
                    style.height = height + 'px';
                }
                ctx.restore();
                ctx.save();
                ctx.scale(pixelRatio, pixelRatio);
            }
        },
        getContext: function() {
            return this._context;
        },
        getPixelSize: function getPixelSize(size) {
            var agent = paper.agent, pixels;
            if (agent && agent.firefox) pixels = getPixelSize.base.call(this, size);
            else {
                var ctx = this._context, prevFont = ctx.font;
                ctx.font = size + ' serif';
                pixels = parseFloat(ctx.font);
                ctx.font = prevFont;
            }
            return pixels;
        },
        getTextWidth: function(font, lines) {
            var ctx = this._context, prevFont = ctx.font, width = 0;
            ctx.font = font;
            for(var i = 0, l = lines.length; i < l; i++)width = Math.max(width, ctx.measureText(lines[i]).width);
            ctx.font = prevFont;
            return width;
        },
        update: function() {
            if (!this._needsUpdate) return false;
            var project = this._project, ctx = this._context, size = this._viewSize;
            ctx.clearRect(0, 0, size.width + 1, size.height + 1);
            if (project) project.draw(ctx, this._matrix, this._pixelRatio);
            this._needsUpdate = false;
            return true;
        }
    });
    var Event = Base.extend({
        _class: 'Event',
        initialize: function Event(event) {
            this.event = event;
            this.type = event && event.type;
        },
        prevented: false,
        stopped: false,
        preventDefault: function() {
            this.prevented = true;
            this.event.preventDefault();
        },
        stopPropagation: function() {
            this.stopped = true;
            this.event.stopPropagation();
        },
        stop: function() {
            this.stopPropagation();
            this.preventDefault();
        },
        getTimeStamp: function() {
            return this.event.timeStamp;
        },
        getModifiers: function() {
            return Key.modifiers;
        }
    });
    var KeyEvent = Event.extend({
        _class: 'KeyEvent',
        initialize: function KeyEvent(type, event, key, character) {
            this.type = type;
            this.event = event;
            this.key = key;
            this.character = character;
        },
        toString: function() {
            return "{ type: '" + this.type + "', key: '" + this.key + "', character: '" + this.character + "', modifiers: " + this.getModifiers() + " }";
        }
    });
    var Key = new function() {
        var keyLookup = {
            '\t': 'tab',
            ' ': 'space',
            '\b': 'backspace',
            '\x7f': 'delete',
            'Spacebar': 'space',
            'Del': 'delete',
            'Win': 'meta',
            'Esc': 'escape'
        }, charLookup = {
            'tab': '\t',
            'space': ' ',
            'enter': '\r'
        }, keyMap = {}, charMap = {}, metaFixMap, downKey, modifiers = new Base({
            shift: false,
            control: false,
            alt: false,
            meta: false,
            capsLock: false,
            space: false
        }).inject({
            option: {
                get: function() {
                    return this.alt;
                }
            },
            command: {
                get: function() {
                    var agent = paper && paper.agent;
                    return agent && agent.mac ? this.meta : this.control;
                }
            }
        });
        function getKey(event) {
            var key = event.key || event.keyIdentifier;
            key = /^U\+/.test(key) ? String.fromCharCode(parseInt(key.substr(2), 16)) : /^Arrow[A-Z]/.test(key) ? key.substr(5) : key === 'Unidentified' || key === undefined ? String.fromCharCode(event.keyCode) : key;
            return keyLookup[key] || (key.length > 1 ? Base.hyphenate(key) : key.toLowerCase());
        }
        function handleKey(down, key, character, event) {
            var type = down ? 'keydown' : 'keyup', view = View._focused, name;
            keyMap[key] = down;
            if (down) charMap[key] = character;
            else delete charMap[key];
            if (key.length > 1 && (name = Base.camelize(key)) in modifiers) {
                modifiers[name] = down;
                var agent = paper && paper.agent;
                if (name === 'meta' && agent && agent.mac) {
                    if (down) metaFixMap = {};
                    else {
                        for(var k in metaFixMap)if (k in charMap) handleKey(false, k, metaFixMap[k], event);
                        metaFixMap = null;
                    }
                }
            } else if (down && metaFixMap) metaFixMap[key] = character;
            if (view) view._handleKeyEvent(down ? 'keydown' : 'keyup', event, key, character);
        }
        DomEvent.add(document, {
            keydown: function(event) {
                var key = getKey(event), agent = paper && paper.agent;
                if (key.length > 1 || agent && agent.chrome && (event.altKey || agent.mac && event.metaKey || !agent.mac && event.ctrlKey)) handleKey(true, key, charLookup[key] || (key.length > 1 ? '' : key), event);
                else downKey = key;
            },
            keypress: function(event) {
                if (downKey) {
                    var key = getKey(event), code = event.charCode, character = code >= 32 ? String.fromCharCode(code) : key.length > 1 ? '' : key;
                    if (key !== downKey) key = character.toLowerCase();
                    handleKey(true, key, character, event);
                    downKey = null;
                }
            },
            keyup: function(event) {
                var key = getKey(event);
                if (key in charMap) handleKey(false, key, charMap[key], event);
            }
        });
        DomEvent.add(window, {
            blur: function(event) {
                for(var key in charMap)handleKey(false, key, charMap[key], event);
            }
        });
        return {
            modifiers: modifiers,
            isDown: function(key) {
                return !!keyMap[key];
            }
        };
    };
    var MouseEvent = Event.extend({
        _class: 'MouseEvent',
        initialize: function MouseEvent(type, event, point, target, delta) {
            this.type = type;
            this.event = event;
            this.point = point;
            this.target = target;
            this.delta = delta;
        },
        toString: function() {
            return "{ type: '" + this.type + "', point: " + this.point + ', target: ' + this.target + (this.delta ? ', delta: ' + this.delta : '') + ', modifiers: ' + this.getModifiers() + ' }';
        }
    });
    var ToolEvent = Event.extend({
        _class: 'ToolEvent',
        _item: null,
        initialize: function ToolEvent(tool, type, event) {
            this.tool = tool;
            this.type = type;
            this.event = event;
        },
        _choosePoint: function(point, toolPoint) {
            return point ? point : toolPoint ? toolPoint.clone() : null;
        },
        getPoint: function() {
            return this._choosePoint(this._point, this.tool._point);
        },
        setPoint: function(point) {
            this._point = point;
        },
        getLastPoint: function() {
            return this._choosePoint(this._lastPoint, this.tool._lastPoint);
        },
        setLastPoint: function(lastPoint) {
            this._lastPoint = lastPoint;
        },
        getDownPoint: function() {
            return this._choosePoint(this._downPoint, this.tool._downPoint);
        },
        setDownPoint: function(downPoint) {
            this._downPoint = downPoint;
        },
        getMiddlePoint: function() {
            if (!this._middlePoint && this.tool._lastPoint) return this.tool._point.add(this.tool._lastPoint).divide(2);
            return this._middlePoint;
        },
        setMiddlePoint: function(middlePoint) {
            this._middlePoint = middlePoint;
        },
        getDelta: function() {
            return !this._delta && this.tool._lastPoint ? this.tool._point.subtract(this.tool._lastPoint) : this._delta;
        },
        setDelta: function(delta) {
            this._delta = delta;
        },
        getCount: function() {
            return this.tool[/^mouse(down|up)$/.test(this.type) ? '_downCount' : '_moveCount'];
        },
        setCount: function(count) {
            this.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count'] = count;
        },
        getItem: function() {
            if (!this._item) {
                var result = this.tool._scope.project.hitTest(this.getPoint());
                if (result) {
                    var item = result.item, parent = item._parent;
                    while(/^(Group|CompoundPath)$/.test(parent._class)){
                        item = parent;
                        parent = parent._parent;
                    }
                    this._item = item;
                }
            }
            return this._item;
        },
        setItem: function(item) {
            this._item = item;
        },
        toString: function() {
            return '{ type: ' + this.type + ', point: ' + this.getPoint() + ', count: ' + this.getCount() + ', modifiers: ' + this.getModifiers() + ' }';
        }
    });
    var Tool = PaperScopeItem.extend({
        _class: 'Tool',
        _list: 'tools',
        _reference: 'tool',
        _events: [
            'onMouseDown',
            'onMouseUp',
            'onMouseDrag',
            'onMouseMove',
            'onActivate',
            'onDeactivate',
            'onEditOptions',
            'onKeyDown',
            'onKeyUp'
        ],
        initialize: function Tool(props) {
            PaperScopeItem.call(this);
            this._moveCount = -1;
            this._downCount = -1;
            this.set(props);
        },
        getMinDistance: function() {
            return this._minDistance;
        },
        setMinDistance: function(minDistance) {
            this._minDistance = minDistance;
            if (minDistance != null && this._maxDistance != null && minDistance > this._maxDistance) this._maxDistance = minDistance;
        },
        getMaxDistance: function() {
            return this._maxDistance;
        },
        setMaxDistance: function(maxDistance) {
            this._maxDistance = maxDistance;
            if (this._minDistance != null && maxDistance != null && maxDistance < this._minDistance) this._minDistance = maxDistance;
        },
        getFixedDistance: function() {
            return this._minDistance == this._maxDistance ? this._minDistance : null;
        },
        setFixedDistance: function(distance) {
            this._minDistance = this._maxDistance = distance;
        },
        _handleMouseEvent: function(type, event, point, mouse) {
            paper = this._scope;
            if (mouse.drag && !this.responds(type)) type = 'mousemove';
            var move = mouse.move || mouse.drag, responds = this.responds(type), called = false, tool = this;
            function update(minDistance, maxDistance) {
                var pt = point, toolPoint = move ? tool._point : tool._downPoint || pt;
                if (move) {
                    if (tool._moveCount >= 0 && pt.equals(toolPoint)) return false;
                    if (toolPoint && (minDistance != null || maxDistance != null)) {
                        var vector = pt.subtract(toolPoint), distance = vector.getLength();
                        if (distance < (minDistance || 0)) return false;
                        if (maxDistance) pt = toolPoint.add(vector.normalize(Math.min(distance, maxDistance)));
                    }
                    tool._moveCount++;
                }
                tool._point = pt;
                tool._lastPoint = toolPoint || pt;
                if (mouse.down) {
                    tool._moveCount = -1;
                    tool._downPoint = pt;
                    tool._downCount++;
                }
                return true;
            }
            function emit() {
                if (responds) called = tool.emit(type, new ToolEvent(tool, type, event)) || called;
            }
            if (mouse.down) {
                update();
                emit();
            } else if (mouse.up) {
                update(null, this._maxDistance);
                emit();
            } else if (responds) while(update(this._minDistance, this._maxDistance))emit();
            return called;
        }
    });
    var Tween = Base.extend(Emitter, {
        _class: 'Tween',
        statics: {
            easings: new Base({
                linear: function(t) {
                    return t;
                },
                easeInQuad: function(t) {
                    return t * t;
                },
                easeOutQuad: function(t) {
                    return t * (2 - t);
                },
                easeInOutQuad: function(t) {
                    return t < 0.5 ? 2 * t * t : -1 + 2 * (2 - t) * t;
                },
                easeInCubic: function(t) {
                    return t * t * t;
                },
                easeOutCubic: function(t) {
                    return --t * t * t + 1;
                },
                easeInOutCubic: function(t) {
                    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;
                },
                easeInQuart: function(t) {
                    return t * t * t * t;
                },
                easeOutQuart: function(t) {
                    return 1 - --t * t * t * t;
                },
                easeInOutQuart: function(t) {
                    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;
                },
                easeInQuint: function(t) {
                    return t * t * t * t * t;
                },
                easeOutQuint: function(t) {
                    return 1 + --t * t * t * t * t;
                },
                easeInOutQuint: function(t) {
                    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;
                }
            })
        },
        initialize: function Tween(object, from, to, duration, easing, start) {
            this.object = object;
            var type = typeof easing;
            var isFunction = type === 'function';
            this.type = isFunction ? type : type === 'string' ? easing : 'linear';
            this.easing = isFunction ? easing : Tween.easings[this.type];
            this.duration = duration;
            this.running = false;
            this._then = null;
            this._startTime = null;
            var state = from || to;
            this._keys = state ? Object.keys(state) : [];
            this._parsedKeys = this._parseKeys(this._keys);
            this._from = state && this._getState(from);
            this._to = state && this._getState(to);
            if (start !== false) this.start();
        },
        then: function(then) {
            this._then = then;
            return this;
        },
        start: function() {
            this._startTime = null;
            this.running = true;
            return this;
        },
        stop: function() {
            this.running = false;
            return this;
        },
        update: function(progress) {
            if (this.running) {
                if (progress >= 1) {
                    progress = 1;
                    this.running = false;
                }
                var factor = this.easing(progress), keys = this._keys, getValue = function(value) {
                    return typeof value === 'function' ? value(factor, progress) : value;
                };
                for(var i = 0, l = keys && keys.length; i < l; i++){
                    var key = keys[i], from = getValue(this._from[key]), to = getValue(this._to[key]), value = from && to && from.__add && to.__add ? to.__subtract(from).__multiply(factor).__add(from) : (to - from) * factor + from;
                    this._setProperty(this._parsedKeys[key], value);
                }
                if (this.responds('update')) this.emit('update', new Base({
                    progress: progress,
                    factor: factor
                }));
                if (!this.running && this._then) this._then(this.object);
            }
            return this;
        },
        _events: {
            onUpdate: {}
        },
        _handleFrame: function(time) {
            var startTime = this._startTime, progress = startTime ? (time - startTime) / this.duration : 0;
            if (!startTime) this._startTime = time;
            this.update(progress);
        },
        _getState: function(state) {
            var keys = this._keys, result = {};
            for(var i = 0, l = keys.length; i < l; i++){
                var key = keys[i], path = this._parsedKeys[key], current = this._getProperty(path), value;
                if (state) {
                    var resolved = this._resolveValue(current, state[key]);
                    this._setProperty(path, resolved);
                    value = this._getProperty(path);
                    value = value && value.clone ? value.clone() : value;
                    this._setProperty(path, current);
                } else value = current && current.clone ? current.clone() : current;
                result[key] = value;
            }
            return result;
        },
        _resolveValue: function(current, value) {
            if (value) {
                if (Array.isArray(value) && value.length === 2) {
                    var operator = value[0];
                    return operator && operator.match && operator.match(/^[+\-\*\/]=/) ? this._calculate(current, operator[0], value[1]) : value;
                } else if (typeof value === 'string') {
                    var match = value.match(/^[+\-*/]=(.*)/);
                    if (match) {
                        var parsed = JSON.parse(match[1].replace(/(['"])?([a-zA-Z0-9_]+)(['"])?:/g, '"$2": '));
                        return this._calculate(current, value[0], parsed);
                    }
                }
            }
            return value;
        },
        _calculate: function(left, operator, right) {
            return paper.PaperScript.calculateBinary(left, operator, right);
        },
        _parseKeys: function(keys) {
            var parsed = {};
            for(var i = 0, l = keys.length; i < l; i++){
                var key = keys[i], path = key.replace(/\.([^.]*)/g, '/$1').replace(/\[['"]?([^'"\]]*)['"]?\]/g, '/$1');
                parsed[key] = path.split('/');
            }
            return parsed;
        },
        _getProperty: function(path, offset) {
            var obj = this.object;
            for(var i = 0, l = path.length - (offset || 0); i < l && obj; i++)obj = obj[path[i]];
            return obj;
        },
        _setProperty: function(path, value) {
            var dest = this._getProperty(path, 1);
            if (dest) dest[path[path.length - 1]] = value;
        }
    });
    var Http = {
        request: function(options) {
            var xhr = new self1.XMLHttpRequest();
            xhr.open((options.method || 'get').toUpperCase(), options.url, Base.pick(options.async, true));
            if (options.mimeType) xhr.overrideMimeType(options.mimeType);
            xhr.onload = function() {
                var status = xhr.status;
                if (status === 0 || status === 200) {
                    if (options.onLoad) options.onLoad.call(xhr, xhr.responseText);
                } else xhr.onerror();
            };
            xhr.onerror = function() {
                var status = xhr.status, message = 'Could not load "' + options.url + '" (Status: ' + status + ')';
                if (options.onError) options.onError(message, status);
                else throw new Error(message);
            };
            return xhr.send(null);
        }
    };
    var CanvasProvider = Base.exports.CanvasProvider = {
        canvases: [],
        getCanvas: function(width, height, options) {
            if (!window) return null;
            var canvas, clear = true;
            if (typeof width === 'object') {
                height = width.height;
                width = width.width;
            }
            if (this.canvases.length) canvas = this.canvases.pop();
            else {
                canvas = document.createElement('canvas');
                clear = false;
            }
            var ctx = canvas.getContext('2d', options || {});
            if (!ctx) throw new Error('Canvas ' + canvas + ' is unable to provide a 2D context.');
            if (canvas.width === width && canvas.height === height) {
                if (clear) ctx.clearRect(0, 0, width + 1, height + 1);
            } else {
                canvas.width = width;
                canvas.height = height;
            }
            ctx.save();
            return canvas;
        },
        getContext: function(width, height, options) {
            var canvas = this.getCanvas(width, height, options);
            return canvas ? canvas.getContext('2d', options || {}) : null;
        },
        release: function(obj) {
            var canvas = obj && obj.canvas ? obj.canvas : obj;
            if (canvas && canvas.getContext) {
                canvas.getContext('2d').restore();
                this.canvases.push(canvas);
            }
        }
    };
    var BlendMode = new function() {
        var min = Math.min, max = Math.max, abs = Math.abs, sr, sg, sb, sa, br, bg, bb, ba, dr, dg, db;
        function getLum(r, g, b) {
            return 0.2989 * r + 0.587 * g + 0.114 * b;
        }
        function setLum(r, g, b, l) {
            var d = l - getLum(r, g, b);
            dr = r + d;
            dg = g + d;
            db = b + d;
            var l = getLum(dr, dg, db), mn = min(dr, dg, db), mx = max(dr, dg, db);
            if (mn < 0) {
                var lmn = l - mn;
                dr = l + (dr - l) * l / lmn;
                dg = l + (dg - l) * l / lmn;
                db = l + (db - l) * l / lmn;
            }
            if (mx > 255) {
                var ln = 255 - l, mxl = mx - l;
                dr = l + (dr - l) * ln / mxl;
                dg = l + (dg - l) * ln / mxl;
                db = l + (db - l) * ln / mxl;
            }
        }
        function getSat(r, g, b) {
            return max(r, g, b) - min(r, g, b);
        }
        function setSat(r, g, b, s) {
            var col = [
                r,
                g,
                b
            ], mx = max(r, g, b), mn = min(r, g, b), md;
            mn = mn === r ? 0 : mn === g ? 1 : 2;
            mx = mx === r ? 0 : mx === g ? 1 : 2;
            md = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;
            if (col[mx] > col[mn]) {
                col[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);
                col[mx] = s;
            } else col[md] = col[mx] = 0;
            col[mn] = 0;
            dr = col[0];
            dg = col[1];
            db = col[2];
        }
        var modes = {
            multiply: function() {
                dr = br * sr / 255;
                dg = bg * sg / 255;
                db = bb * sb / 255;
            },
            screen: function() {
                dr = br + sr - br * sr / 255;
                dg = bg + sg - bg * sg / 255;
                db = bb + sb - bb * sb / 255;
            },
            overlay: function() {
                dr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;
                dg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;
                db = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;
            },
            'soft-light': function() {
                var t = sr * br / 255;
                dr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;
                t = sg * bg / 255;
                dg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;
                t = sb * bb / 255;
                db = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;
            },
            'hard-light': function() {
                dr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;
                dg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;
                db = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;
            },
            'color-dodge': function() {
                dr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));
                dg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));
                db = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));
            },
            'color-burn': function() {
                dr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);
                dg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);
                db = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);
            },
            darken: function() {
                dr = br < sr ? br : sr;
                dg = bg < sg ? bg : sg;
                db = bb < sb ? bb : sb;
            },
            lighten: function() {
                dr = br > sr ? br : sr;
                dg = bg > sg ? bg : sg;
                db = bb > sb ? bb : sb;
            },
            difference: function() {
                dr = br - sr;
                if (dr < 0) dr = -dr;
                dg = bg - sg;
                if (dg < 0) dg = -dg;
                db = bb - sb;
                if (db < 0) db = -db;
            },
            exclusion: function() {
                dr = br + sr * (255 - br - br) / 255;
                dg = bg + sg * (255 - bg - bg) / 255;
                db = bb + sb * (255 - bb - bb) / 255;
            },
            hue: function() {
                setSat(sr, sg, sb, getSat(br, bg, bb));
                setLum(dr, dg, db, getLum(br, bg, bb));
            },
            saturation: function() {
                setSat(br, bg, bb, getSat(sr, sg, sb));
                setLum(dr, dg, db, getLum(br, bg, bb));
            },
            luminosity: function() {
                setLum(br, bg, bb, getLum(sr, sg, sb));
            },
            color: function() {
                setLum(sr, sg, sb, getLum(br, bg, bb));
            },
            add: function() {
                dr = min(br + sr, 255);
                dg = min(bg + sg, 255);
                db = min(bb + sb, 255);
            },
            subtract: function() {
                dr = max(br - sr, 0);
                dg = max(bg - sg, 0);
                db = max(bb - sb, 0);
            },
            average: function() {
                dr = (br + sr) / 2;
                dg = (bg + sg) / 2;
                db = (bb + sb) / 2;
            },
            negation: function() {
                dr = 255 - abs(255 - sr - br);
                dg = 255 - abs(255 - sg - bg);
                db = 255 - abs(255 - sb - bb);
            }
        };
        var nativeModes = this.nativeModes = Base.each([
            'source-over',
            'source-in',
            'source-out',
            'source-atop',
            'destination-over',
            'destination-in',
            'destination-out',
            'destination-atop',
            'lighter',
            'darker',
            'copy',
            'xor'
        ], function(mode) {
            this[mode] = true;
        }, {});
        var ctx = CanvasProvider.getContext(1, 1, {
            willReadFrequently: true
        });
        if (ctx) {
            Base.each(modes, function(func, mode) {
                var darken = mode === 'darken', ok = false;
                ctx.save();
                try {
                    ctx.fillStyle = darken ? '#300' : '#a00';
                    ctx.fillRect(0, 0, 1, 1);
                    ctx.globalCompositeOperation = mode;
                    if (ctx.globalCompositeOperation === mode) {
                        ctx.fillStyle = darken ? '#a00' : '#300';
                        ctx.fillRect(0, 0, 1, 1);
                        ok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken ? 170 : 51;
                    }
                } catch (e) {}
                ctx.restore();
                nativeModes[mode] = ok;
            });
            CanvasProvider.release(ctx);
        }
        this.process = function(mode, srcContext, dstContext, alpha, offset) {
            var srcCanvas = srcContext.canvas, normal = mode === 'normal';
            if (normal || nativeModes[mode]) {
                dstContext.save();
                dstContext.setTransform(1, 0, 0, 1, 0, 0);
                dstContext.globalAlpha = alpha;
                if (!normal) dstContext.globalCompositeOperation = mode;
                dstContext.drawImage(srcCanvas, offset.x, offset.y);
                dstContext.restore();
            } else {
                var process = modes[mode];
                if (!process) return;
                var dstData = dstContext.getImageData(offset.x, offset.y, srcCanvas.width, srcCanvas.height), dst = dstData.data, src = srcContext.getImageData(0, 0, srcCanvas.width, srcCanvas.height).data;
                for(var i = 0, l = dst.length; i < l; i += 4){
                    sr = src[i];
                    br = dst[i];
                    sg = src[i + 1];
                    bg = dst[i + 1];
                    sb = src[i + 2];
                    bb = dst[i + 2];
                    sa = src[i + 3];
                    ba = dst[i + 3];
                    process();
                    var a1 = sa * alpha / 255, a2 = 1 - a1;
                    dst[i] = a1 * dr + a2 * br;
                    dst[i + 1] = a1 * dg + a2 * bg;
                    dst[i + 2] = a1 * db + a2 * bb;
                    dst[i + 3] = sa * alpha + a2 * ba;
                }
                dstContext.putImageData(dstData, offset.x, offset.y);
            }
        };
    };
    var SvgElement = new function() {
        var svg = 'http://www.w3.org/2000/svg', xmlns = 'http://www.w3.org/2000/xmlns', xlink = 'http://www.w3.org/1999/xlink', attributeNamespace = {
            href: xlink,
            xlink: xmlns,
            xmlns: xmlns + '/',
            'xmlns:xlink': xmlns + '/'
        };
        function create(tag, attributes, formatter) {
            return set(document.createElementNS(svg, tag), attributes, formatter);
        }
        function get(node, name) {
            var namespace = attributeNamespace[name], value = namespace ? node.getAttributeNS(namespace, name) : node.getAttribute(name);
            return value === 'null' ? null : value;
        }
        function set(node, attributes, formatter) {
            for(var name in attributes){
                var value = attributes[name], namespace = attributeNamespace[name];
                if (typeof value === 'number' && formatter) value = formatter.number(value);
                if (namespace) node.setAttributeNS(namespace, name, value);
                else node.setAttribute(name, value);
            }
            return node;
        }
        return {
            svg: svg,
            xmlns: xmlns,
            xlink: xlink,
            create: create,
            get: get,
            set: set
        };
    };
    var SvgStyles = Base.each({
        fillColor: [
            'fill',
            'color'
        ],
        fillRule: [
            'fill-rule',
            'string'
        ],
        strokeColor: [
            'stroke',
            'color'
        ],
        strokeWidth: [
            'stroke-width',
            'number'
        ],
        strokeCap: [
            'stroke-linecap',
            'string'
        ],
        strokeJoin: [
            'stroke-linejoin',
            'string'
        ],
        strokeScaling: [
            'vector-effect',
            'lookup',
            {
                true: 'none',
                false: 'non-scaling-stroke'
            },
            function(item, value) {
                return !value && (item instanceof PathItem || item instanceof Shape || item instanceof TextItem);
            }
        ],
        miterLimit: [
            'stroke-miterlimit',
            'number'
        ],
        dashArray: [
            'stroke-dasharray',
            'array'
        ],
        dashOffset: [
            'stroke-dashoffset',
            'number'
        ],
        fontFamily: [
            'font-family',
            'string'
        ],
        fontWeight: [
            'font-weight',
            'string'
        ],
        fontSize: [
            'font-size',
            'number'
        ],
        justification: [
            'text-anchor',
            'lookup',
            {
                left: 'start',
                center: 'middle',
                right: 'end'
            }
        ],
        opacity: [
            'opacity',
            'number'
        ],
        blendMode: [
            'mix-blend-mode',
            'style'
        ]
    }, function(entry, key) {
        var part = Base.capitalize(key), lookup = entry[2];
        this[key] = {
            type: entry[1],
            property: key,
            attribute: entry[0],
            toSVG: lookup,
            fromSVG: lookup && Base.each(lookup, function(value, name) {
                this[value] = name;
            }, {}),
            exportFilter: entry[3],
            get: 'get' + part,
            set: 'set' + part
        };
    }, {});
    new function() {
        var formatter;
        function getTransform(matrix, coordinates, center) {
            var attrs = new Base(), trans = matrix.getTranslation();
            if (coordinates) {
                var point;
                if (matrix.isInvertible()) {
                    matrix = matrix._shiftless();
                    point = matrix._inverseTransform(trans);
                    trans = null;
                } else point = new Point();
                attrs[center ? 'cx' : 'x'] = point.x;
                attrs[center ? 'cy' : 'y'] = point.y;
            }
            if (!matrix.isIdentity()) {
                var decomposed = matrix.decompose();
                if (decomposed) {
                    var parts = [], angle = decomposed.rotation, scale = decomposed.scaling, skew = decomposed.skewing;
                    if (trans && !trans.isZero()) parts.push('translate(' + formatter.point(trans) + ')');
                    if (angle) parts.push('rotate(' + formatter.number(angle) + ')');
                    if (!Numerical.isZero(scale.x - 1) || !Numerical.isZero(scale.y - 1)) parts.push('scale(' + formatter.point(scale) + ')');
                    if (skew.x) parts.push('skewX(' + formatter.number(skew.x) + ')');
                    if (skew.y) parts.push('skewY(' + formatter.number(skew.y) + ')');
                    attrs.transform = parts.join(' ');
                } else attrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';
            }
            return attrs;
        }
        function exportGroup(item, options) {
            var attrs = getTransform(item._matrix), children = item._children;
            var node = SvgElement.create('g', attrs, formatter);
            for(var i = 0, l = children.length; i < l; i++){
                var child = children[i];
                var childNode = exportSVG(child, options);
                if (childNode) {
                    if (child.isClipMask()) {
                        var clip = SvgElement.create('clipPath');
                        clip.appendChild(childNode);
                        setDefinition(child, clip, 'clip');
                        SvgElement.set(node, {
                            'clip-path': 'url(#' + clip.id + ')'
                        });
                    } else node.appendChild(childNode);
                }
            }
            return node;
        }
        function exportRaster(item, options) {
            var attrs = getTransform(item._matrix, true), size = item.getSize(), image = item.getImage();
            attrs.x -= size.width / 2;
            attrs.y -= size.height / 2;
            attrs.width = size.width;
            attrs.height = size.height;
            attrs.href = options.embedImages == false && image && image.src || item.toDataURL();
            return SvgElement.create('image', attrs, formatter);
        }
        function exportPath(item, options) {
            var matchShapes = options.matchShapes;
            if (matchShapes) {
                var shape = item.toShape(false);
                if (shape) return exportShape(shape, options);
            }
            var segments = item._segments, length = segments.length, type, attrs = getTransform(item._matrix);
            if (matchShapes && length >= 2 && !item.hasHandles()) {
                if (length > 2) {
                    type = item._closed ? 'polygon' : 'polyline';
                    var parts = [];
                    for(var i = 0; i < length; i++)parts.push(formatter.point(segments[i]._point));
                    attrs.points = parts.join(' ');
                } else {
                    type = 'line';
                    var start = segments[0]._point, end = segments[1]._point;
                    attrs.set({
                        x1: start.x,
                        y1: start.y,
                        x2: end.x,
                        y2: end.y
                    });
                }
            } else {
                type = 'path';
                attrs.d = item.getPathData(null, options.precision);
            }
            return SvgElement.create(type, attrs, formatter);
        }
        function exportShape(item) {
            var type = item._type, radius = item._radius, attrs = getTransform(item._matrix, true, type !== 'rectangle');
            if (type === 'rectangle') {
                type = 'rect';
                var size = item._size, width = size.width, height = size.height;
                attrs.x -= width / 2;
                attrs.y -= height / 2;
                attrs.width = width;
                attrs.height = height;
                if (radius.isZero()) radius = null;
            }
            if (radius) {
                if (type === 'circle') attrs.r = radius;
                else {
                    attrs.rx = radius.width;
                    attrs.ry = radius.height;
                }
            }
            return SvgElement.create(type, attrs, formatter);
        }
        function exportCompoundPath(item, options) {
            var attrs = getTransform(item._matrix);
            var data = item.getPathData(null, options.precision);
            if (data) attrs.d = data;
            return SvgElement.create('path', attrs, formatter);
        }
        function exportSymbolItem(item, options) {
            var attrs = getTransform(item._matrix, true), definition = item._definition, node = getDefinition(definition, 'symbol'), definitionItem = definition._item, bounds = definitionItem.getStrokeBounds();
            if (!node) {
                node = SvgElement.create('symbol', {
                    viewBox: formatter.rectangle(bounds)
                });
                node.appendChild(exportSVG(definitionItem, options));
                setDefinition(definition, node, 'symbol');
            }
            attrs.href = '#' + node.id;
            attrs.x += bounds.x;
            attrs.y += bounds.y;
            attrs.width = bounds.width;
            attrs.height = bounds.height;
            attrs.overflow = 'visible';
            return SvgElement.create('use', attrs, formatter);
        }
        function exportGradient(color) {
            var gradientNode = getDefinition(color, 'color');
            if (!gradientNode) {
                var gradient = color.getGradient(), radial = gradient._radial, origin = color.getOrigin(), destination = color.getDestination(), attrs;
                if (radial) {
                    attrs = {
                        cx: origin.x,
                        cy: origin.y,
                        r: origin.getDistance(destination)
                    };
                    var highlight = color.getHighlight();
                    if (highlight) {
                        attrs.fx = highlight.x;
                        attrs.fy = highlight.y;
                    }
                } else attrs = {
                    x1: origin.x,
                    y1: origin.y,
                    x2: destination.x,
                    y2: destination.y
                };
                attrs.gradientUnits = 'userSpaceOnUse';
                gradientNode = SvgElement.create((radial ? 'radial' : 'linear') + 'Gradient', attrs, formatter);
                var stops = gradient._stops;
                for(var i = 0, l = stops.length; i < l; i++){
                    var stop = stops[i], stopColor = stop._color, alpha = stopColor.getAlpha(), offset = stop._offset;
                    attrs = {
                        offset: offset == null ? i / (l - 1) : offset
                    };
                    if (stopColor) attrs['stop-color'] = stopColor.toCSS(true);
                    if (alpha < 1) attrs['stop-opacity'] = alpha;
                    gradientNode.appendChild(SvgElement.create('stop', attrs, formatter));
                }
                setDefinition(color, gradientNode, 'color');
            }
            return 'url(#' + gradientNode.id + ')';
        }
        function exportText(item) {
            var node = SvgElement.create('text', getTransform(item._matrix, true), formatter);
            node.textContent = item._content;
            return node;
        }
        var exporters = {
            Group: exportGroup,
            Layer: exportGroup,
            Raster: exportRaster,
            Path: exportPath,
            Shape: exportShape,
            CompoundPath: exportCompoundPath,
            SymbolItem: exportSymbolItem,
            PointText: exportText
        };
        function applyStyle(item, node, options, isRoot) {
            var attrs = {}, parent = !isRoot && item.getParent(), style = [];
            if (item._name != null) attrs.id = item._name;
            Base.each(SvgStyles, function(entry) {
                var get = entry.get, type = entry.type, value = item[get]();
                if (entry.exportFilter ? entry.exportFilter(item, value) : options.reduceAttributes == false || !parent || !Base.equals(parent[get](), value)) {
                    if (type === 'color' && value != null) {
                        var alpha = value.getAlpha();
                        if (alpha < 1) attrs[entry.attribute + '-opacity'] = alpha;
                    }
                    if (type === 'style') style.push(entry.attribute + ': ' + value);
                    else attrs[entry.attribute] = value == null ? 'none' : type === 'color' ? value.gradient ? exportGradient(value, item) : value.toCSS(true) : type === 'array' ? value.join(',') : type === 'lookup' ? entry.toSVG[value] : value;
                }
            });
            if (style.length) attrs.style = style.join(';');
            if (attrs.opacity === 1) delete attrs.opacity;
            if (!item._visible) attrs.visibility = 'hidden';
            return SvgElement.set(node, attrs, formatter);
        }
        var definitions;
        function getDefinition(item, type) {
            if (!definitions) definitions = {
                ids: {},
                svgs: {}
            };
            return item && definitions.svgs[type + '-' + (item._id || item.__id || (item.__id = UID.get('svg')))];
        }
        function setDefinition(item, node, type) {
            if (!definitions) getDefinition();
            var typeId = definitions.ids[type] = (definitions.ids[type] || 0) + 1;
            node.id = type + '-' + typeId;
            definitions.svgs[type + '-' + (item._id || item.__id)] = node;
        }
        function exportDefinitions(node, options) {
            var svg = node, defs = null;
            if (definitions) {
                svg = node.nodeName.toLowerCase() === 'svg' && node;
                for(var i in definitions.svgs){
                    if (!defs) {
                        if (!svg) {
                            svg = SvgElement.create('svg');
                            svg.appendChild(node);
                        }
                        defs = svg.insertBefore(SvgElement.create('defs'), svg.firstChild);
                    }
                    defs.appendChild(definitions.svgs[i]);
                }
                definitions = null;
            }
            return options.asString ? new self1.XMLSerializer().serializeToString(svg) : svg;
        }
        function exportSVG(item, options, isRoot) {
            var exporter = exporters[item._class], node = exporter && exporter(item, options);
            if (node) {
                var onExport = options.onExport;
                if (onExport) node = onExport(item, node, options) || node;
                var data = JSON.stringify(item._data);
                if (data && data !== '{}' && data !== 'null') node.setAttribute('data-paper-data', data);
            }
            return node && applyStyle(item, node, options, isRoot);
        }
        function setOptions(options) {
            if (!options) options = {};
            formatter = new Formatter(options.precision);
            return options;
        }
        Item.inject({
            exportSVG: function(options) {
                options = setOptions(options);
                return exportDefinitions(exportSVG(this, options, true), options);
            }
        });
        Project.inject({
            exportSVG: function(options) {
                options = setOptions(options);
                var children = this._children, view = this.getView(), bounds = Base.pick(options.bounds, 'view'), mx = options.matrix || bounds === 'view' && view._matrix, matrix = mx && Matrix.read([
                    mx
                ]), rect = bounds === 'view' ? new Rectangle([
                    0,
                    0
                ], view.getViewSize()) : bounds === 'content' ? Item._getBounds(children, matrix, {
                    stroke: true
                }).rect : Rectangle.read([
                    bounds
                ], 0, {
                    readNull: true
                }), attrs = {
                    version: '1.1',
                    xmlns: SvgElement.svg,
                    'xmlns:xlink': SvgElement.xlink
                };
                if (rect) {
                    attrs.width = rect.width;
                    attrs.height = rect.height;
                    if (rect.x || rect.x === 0 || rect.y || rect.y === 0) attrs.viewBox = formatter.rectangle(rect);
                }
                var node = SvgElement.create('svg', attrs, formatter), parent = node;
                if (matrix && !matrix.isIdentity()) parent = node.appendChild(SvgElement.create('g', getTransform(matrix), formatter));
                for(var i = 0, l = children.length; i < l; i++)parent.appendChild(exportSVG(children[i], options, true));
                return exportDefinitions(node, options);
            }
        });
    };
    new function() {
        var definitions = {}, rootSize;
        function getValue(node, name, isString, allowNull, allowPercent, defaultValue) {
            var value = SvgElement.get(node, name) || defaultValue, res = value == null ? allowNull ? null : isString ? '' : 0 : isString ? value : parseFloat(value);
            return /%\s*$/.test(value) ? res / 100 * (allowPercent ? 1 : rootSize[/x|^width/.test(name) ? 'width' : 'height']) : res;
        }
        function getPoint(node, x, y, allowNull, allowPercent, defaultX, defaultY) {
            x = getValue(node, x || 'x', false, allowNull, allowPercent, defaultX);
            y = getValue(node, y || 'y', false, allowNull, allowPercent, defaultY);
            return allowNull && (x == null || y == null) ? null : new Point(x, y);
        }
        function getSize(node, w, h, allowNull, allowPercent) {
            w = getValue(node, w || 'width', false, allowNull, allowPercent);
            h = getValue(node, h || 'height', false, allowNull, allowPercent);
            return allowNull && (w == null || h == null) ? null : new Size(w, h);
        }
        function convertValue(value, type, lookup) {
            return value === 'none' ? null : type === 'number' ? parseFloat(value) : type === 'array' ? value ? value.split(/[\s,]+/g).map(parseFloat) : [] : type === 'color' ? getDefinition(value) || value : type === 'lookup' ? lookup[value] : value;
        }
        function importGroup(node, type, options, isRoot) {
            var nodes = node.childNodes, isClip = type === 'clippath', isDefs = type === 'defs', item = new Group(), project = item._project, currentStyle = project._currentStyle, children = [];
            if (!isClip && !isDefs) {
                item = applyAttributes(item, node, isRoot);
                project._currentStyle = item._style.clone();
            }
            if (isRoot) {
                var defs = node.querySelectorAll('defs');
                for(var i = 0, l = defs.length; i < l; i++)importNode(defs[i], options, false);
            }
            for(var i = 0, l = nodes.length; i < l; i++){
                var childNode = nodes[i], child;
                if (childNode.nodeType === 1 && !/^defs$/i.test(childNode.nodeName) && (child = importNode(childNode, options, false)) && !(child instanceof SymbolDefinition)) children.push(child);
            }
            item.addChildren(children);
            if (isClip) item = applyAttributes(item.reduce(), node, isRoot);
            project._currentStyle = currentStyle;
            if (isClip || isDefs) {
                item.remove();
                item = null;
            }
            return item;
        }
        function importPoly(node, type) {
            var coords = node.getAttribute('points').match(/[+-]?(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?/g), points = [];
            for(var i = 0, l = coords.length; i < l; i += 2)points.push(new Point(parseFloat(coords[i]), parseFloat(coords[i + 1])));
            var path = new Path(points);
            if (type === 'polygon') path.closePath();
            return path;
        }
        function importPath(node) {
            return PathItem.create(node.getAttribute('d'));
        }
        function importGradient(node, type) {
            var id = (getValue(node, 'href', true) || '').substring(1), radial = type === 'radialgradient', gradient;
            if (id) {
                gradient = definitions[id].getGradient();
                if (gradient._radial ^ radial) {
                    gradient = gradient.clone();
                    gradient._radial = radial;
                }
            } else {
                var nodes = node.childNodes, stops = [];
                for(var i = 0, l = nodes.length; i < l; i++){
                    var child = nodes[i];
                    if (child.nodeType === 1) stops.push(applyAttributes(new GradientStop(), child));
                }
                gradient = new Gradient(stops, radial);
            }
            var origin, destination, highlight, scaleToBounds = getValue(node, 'gradientUnits', true) !== 'userSpaceOnUse';
            if (radial) {
                origin = getPoint(node, 'cx', 'cy', false, scaleToBounds, '50%', '50%');
                destination = origin.add(getValue(node, 'r', false, false, scaleToBounds, '50%'), 0);
                highlight = getPoint(node, 'fx', 'fy', true, scaleToBounds);
            } else {
                origin = getPoint(node, 'x1', 'y1', false, scaleToBounds, '0%', '0%');
                destination = getPoint(node, 'x2', 'y2', false, scaleToBounds, '100%', '0%');
            }
            var color = applyAttributes(new Color(gradient, origin, destination, highlight), node);
            color._scaleToBounds = scaleToBounds;
            return null;
        }
        var importers = {
            '#document': function(node, type, options, isRoot) {
                var nodes = node.childNodes;
                for(var i = 0, l = nodes.length; i < l; i++){
                    var child = nodes[i];
                    if (child.nodeType === 1) return importNode(child, options, isRoot);
                }
            },
            g: importGroup,
            svg: importGroup,
            clippath: importGroup,
            polygon: importPoly,
            polyline: importPoly,
            path: importPath,
            lineargradient: importGradient,
            radialgradient: importGradient,
            image: function(node) {
                var raster = new Raster(getValue(node, 'href', true));
                raster.on('load', function() {
                    var size = getSize(node);
                    this.setSize(size);
                    var center = getPoint(node).add(size.divide(2));
                    this._matrix.append(new Matrix().translate(center));
                });
                return raster;
            },
            symbol: function(node, type, options, isRoot) {
                return new SymbolDefinition(importGroup(node, type, options, isRoot), true);
            },
            defs: importGroup,
            use: function(node) {
                var id = (getValue(node, 'href', true) || '').substring(1), definition = definitions[id], point = getPoint(node);
                return definition ? definition instanceof SymbolDefinition ? definition.place(point) : definition.clone().translate(point) : null;
            },
            circle: function(node) {
                return new Shape.Circle(getPoint(node, 'cx', 'cy'), getValue(node, 'r'));
            },
            ellipse: function(node) {
                return new Shape.Ellipse({
                    center: getPoint(node, 'cx', 'cy'),
                    radius: getSize(node, 'rx', 'ry')
                });
            },
            rect: function(node) {
                return new Shape.Rectangle(new Rectangle(getPoint(node), getSize(node)), getSize(node, 'rx', 'ry'));
            },
            line: function(node) {
                return new Path.Line(getPoint(node, 'x1', 'y1'), getPoint(node, 'x2', 'y2'));
            },
            text: function(node) {
                var text = new PointText(getPoint(node).add(getPoint(node, 'dx', 'dy')));
                text.setContent(node.textContent.trim() || '');
                return text;
            },
            switch: importGroup
        };
        function applyTransform(item, value, name, node) {
            if (item.transform) {
                var transforms = (node.getAttribute(name) || '').split(/\)\s*/g), matrix = new Matrix();
                for(var i = 0, l = transforms.length; i < l; i++){
                    var transform = transforms[i];
                    if (!transform) break;
                    var parts = transform.split(/\(\s*/), command = parts[0].trim(), v = parts[1].split(/[\s,]+/g);
                    for(var j = 0, m = v.length; j < m; j++)v[j] = parseFloat(v[j]);
                    switch(command){
                        case 'matrix':
                            matrix.append(new Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));
                            break;
                        case 'rotate':
                            matrix.rotate(v[0], v[1] || 0, v[2] || 0);
                            break;
                        case 'translate':
                            matrix.translate(v[0], v[1] || 0);
                            break;
                        case 'scale':
                            matrix.scale(v);
                            break;
                        case 'skewX':
                            matrix.skew(v[0], 0);
                            break;
                        case 'skewY':
                            matrix.skew(0, v[0]);
                            break;
                    }
                }
                item.transform(matrix);
            }
        }
        function applyOpacity(item, value, name) {
            var key = name === 'fill-opacity' ? 'getFillColor' : 'getStrokeColor', color = item[key] && item[key]();
            if (color) color.setAlpha(parseFloat(value));
        }
        var attributes = Base.set(Base.each(SvgStyles, function(entry) {
            this[entry.attribute] = function(item, value) {
                if (item[entry.set]) {
                    item[entry.set](convertValue(value, entry.type, entry.fromSVG));
                    if (entry.type === 'color') {
                        var color = item[entry.get]();
                        if (color) {
                            if (color._scaleToBounds) {
                                var bounds = item.getBounds();
                                color.transform(new Matrix().translate(bounds.getPoint()).scale(bounds.getSize()));
                            }
                        }
                    }
                }
            };
        }, {}), {
            id: function(item, value) {
                definitions[value] = item;
                if (item.setName) item.setName(value);
            },
            'clip-path': function(item, value) {
                var clip = getDefinition(value);
                if (clip) {
                    clip = clip.clone();
                    clip.setClipMask(true);
                    if (item instanceof Group) item.insertChild(0, clip);
                    else return new Group(clip, item);
                }
            },
            gradientTransform: applyTransform,
            transform: applyTransform,
            'fill-opacity': applyOpacity,
            'stroke-opacity': applyOpacity,
            visibility: function(item, value) {
                if (item.setVisible) item.setVisible(value === 'visible');
            },
            display: function(item, value) {
                if (item.setVisible) item.setVisible(value !== null);
            },
            'stop-color': function(item, value) {
                if (item.setColor) item.setColor(value);
            },
            'stop-opacity': function(item, value) {
                if (item._color) item._color.setAlpha(parseFloat(value));
            },
            offset: function(item, value) {
                if (item.setOffset) {
                    var percent = value.match(/(.*)%$/);
                    item.setOffset(percent ? percent[1] / 100 : parseFloat(value));
                }
            },
            viewBox: function(item, value, name, node, styles) {
                var rect = new Rectangle(convertValue(value, 'array')), size = getSize(node, null, null, true), group, matrix;
                if (item instanceof Group) {
                    var scale = size ? size.divide(rect.getSize()) : 1, matrix = new Matrix().scale(scale).translate(rect.getPoint().negate());
                    group = item;
                } else if (item instanceof SymbolDefinition) {
                    if (size) rect.setSize(size);
                    group = item._item;
                }
                if (group) {
                    if (getAttribute(node, 'overflow', styles) !== 'visible') {
                        var clip = new Shape.Rectangle(rect);
                        clip.setClipMask(true);
                        group.addChild(clip);
                    }
                    if (matrix) group.transform(matrix);
                }
            }
        });
        function getAttribute(node, name, styles) {
            var attr = node.attributes[name], value = attr && attr.value;
            if (!value && node.style) {
                var style = Base.camelize(name);
                value = node.style[style];
                if (!value && styles.node[style] !== styles.parent[style]) value = styles.node[style];
            }
            return !value ? undefined : value === 'none' ? null : value;
        }
        function applyAttributes(item, node, isRoot) {
            var parent = node.parentNode, styles = {
                node: DomElement.getStyles(node) || {},
                parent: !isRoot && !/^defs$/i.test(parent.tagName) && DomElement.getStyles(parent) || {}
            };
            Base.each(attributes, function(apply, name) {
                var value = getAttribute(node, name, styles);
                item = value !== undefined && apply(item, value, name, node, styles) || item;
            });
            return item;
        }
        function getDefinition(value) {
            var match = value && value.match(/\((?:["'#]*)([^"')]+)/), name = match && match[1], res = name && definitions[window ? name.replace(window.location.href.split('#')[0] + '#', '') : name];
            if (res && res._scaleToBounds) {
                res = res.clone();
                res._scaleToBounds = true;
            }
            return res;
        }
        function importNode(node, options, isRoot) {
            var type = node.nodeName.toLowerCase(), isElement = type !== '#document', body = document.body, container, parent, next;
            if (isRoot && isElement) {
                rootSize = paper.getView().getSize();
                rootSize = getSize(node, null, null, true) || rootSize;
                container = SvgElement.create('svg', {
                    style: 'stroke-width: 1px; stroke-miterlimit: 10'
                });
                parent = node.parentNode;
                next = node.nextSibling;
                container.appendChild(node);
                body.appendChild(container);
            }
            var settings = paper.settings, applyMatrix = settings.applyMatrix, insertItems = settings.insertItems;
            settings.applyMatrix = false;
            settings.insertItems = false;
            var importer = importers[type], item = importer && importer(node, type, options, isRoot) || null;
            settings.insertItems = insertItems;
            settings.applyMatrix = applyMatrix;
            if (item) {
                if (isElement && !(item instanceof Group)) item = applyAttributes(item, node, isRoot);
                var onImport = options.onImport, data = isElement && node.getAttribute('data-paper-data');
                if (onImport) item = onImport(node, item, options) || item;
                if (options.expandShapes && item instanceof Shape) {
                    item.remove();
                    item = item.toPath();
                }
                if (data) item._data = JSON.parse(data);
            }
            if (container) {
                body.removeChild(container);
                if (parent) {
                    if (next) parent.insertBefore(node, next);
                    else parent.appendChild(node);
                }
            }
            if (isRoot) {
                definitions = {};
                if (item && Base.pick(options.applyMatrix, applyMatrix)) item.matrix.apply(true, true);
            }
            return item;
        }
        function importSVG(source, options, owner) {
            if (!source) return null;
            options = typeof options === 'function' ? {
                onLoad: options
            } : options || {};
            var scope = paper, item = null;
            function onLoad(svg) {
                try {
                    var node = typeof svg === 'object' ? svg : new self1.DOMParser().parseFromString(svg.trim(), 'image/svg+xml');
                    if (!node.nodeName) {
                        node = null;
                        throw new Error('Unsupported SVG source: ' + source);
                    }
                    paper = scope;
                    item = importNode(node, options, true);
                    if (!options || options.insert !== false) owner._insertItem(undefined, item);
                    var onLoad = options.onLoad;
                    if (onLoad) onLoad(item, svg);
                } catch (e) {
                    onError(e);
                }
            }
            function onError(message, status) {
                var onError = options.onError;
                if (onError) onError(message, status);
                else throw new Error(message);
            }
            if (typeof source === 'string' && !/^[\s\S]*</.test(source)) {
                var node = document.getElementById(source);
                if (node) onLoad(node);
                else Http.request({
                    url: source,
                    async: true,
                    onLoad: onLoad,
                    onError: onError
                });
            } else if (typeof File !== 'undefined' && source instanceof File) {
                var reader = new FileReader();
                reader.onload = function() {
                    onLoad(reader.result);
                };
                reader.onerror = function() {
                    onError(reader.error);
                };
                return reader.readAsText(source);
            } else onLoad(source);
            return item;
        }
        Item.inject({
            importSVG: function(node, options) {
                return importSVG(node, options, this);
            }
        });
        Project.inject({
            importSVG: function(node, options) {
                this.activate();
                return importSVG(node, options, this);
            }
        });
    };
    Base.exports.PaperScript = (function() {
        var global = this, acorn = global.acorn;
        if (!acorn && true) try {
            acorn = require("11295205e93cee06");
        } catch (e) {}
        if (!acorn) {
            var exports, module1;
            acorn = exports = module1 = {};
            (function(root, mod) {
                if (typeof exports == "object" && typeof module1 == "object") return mod(exports);
                if (typeof define == "function" && define.amd) return define([
                    "exports"
                ], mod);
                mod(root.acorn || (root.acorn = {}));
            })(this, function(exports) {
                "use strict";
                exports.version = "0.5.0";
                var options, input, inputLen, sourceFile;
                exports.parse = function(inpt, opts) {
                    input = String(inpt);
                    inputLen = input.length;
                    setOptions(opts);
                    initTokenState();
                    return parseTopLevel(options.program);
                };
                var defaultOptions = exports.defaultOptions = {
                    ecmaVersion: 5,
                    strictSemicolons: false,
                    allowTrailingCommas: true,
                    forbidReserved: false,
                    allowReturnOutsideFunction: false,
                    locations: false,
                    onComment: null,
                    ranges: false,
                    program: null,
                    sourceFile: null,
                    directSourceFile: null
                };
                function setOptions(opts) {
                    options = opts || {};
                    for(var opt in defaultOptions)if (!Object.prototype.hasOwnProperty.call(options, opt)) options[opt] = defaultOptions[opt];
                    sourceFile = options.sourceFile || null;
                }
                var getLineInfo = exports.getLineInfo = function(input, offset) {
                    for(var line = 1, cur = 0;;){
                        lineBreak.lastIndex = cur;
                        var match = lineBreak.exec(input);
                        if (match && match.index < offset) {
                            ++line;
                            cur = match.index + match[0].length;
                        } else break;
                    }
                    return {
                        line: line,
                        column: offset - cur
                    };
                };
                exports.tokenize = function(inpt, opts) {
                    input = String(inpt);
                    inputLen = input.length;
                    setOptions(opts);
                    initTokenState();
                    var t = {};
                    function getToken(forceRegexp) {
                        lastEnd = tokEnd;
                        readToken(forceRegexp);
                        t.start = tokStart;
                        t.end = tokEnd;
                        t.startLoc = tokStartLoc;
                        t.endLoc = tokEndLoc;
                        t.type = tokType;
                        t.value = tokVal;
                        return t;
                    }
                    getToken.jumpTo = function(pos, reAllowed) {
                        tokPos = pos;
                        if (options.locations) {
                            tokCurLine = 1;
                            tokLineStart = lineBreak.lastIndex = 0;
                            var match;
                            while((match = lineBreak.exec(input)) && match.index < pos){
                                ++tokCurLine;
                                tokLineStart = match.index + match[0].length;
                            }
                        }
                        tokRegexpAllowed = reAllowed;
                        skipSpace();
                    };
                    return getToken;
                };
                var tokPos;
                var tokStart, tokEnd;
                var tokStartLoc, tokEndLoc;
                var tokType, tokVal;
                var tokRegexpAllowed;
                var tokCurLine, tokLineStart;
                var lastStart, lastEnd, lastEndLoc;
                var inFunction, labels, strict;
                function raise(pos, message) {
                    var loc = getLineInfo(input, pos);
                    message += " (" + loc.line + ":" + loc.column + ")";
                    var err = new SyntaxError(message);
                    err.pos = pos;
                    err.loc = loc;
                    err.raisedAt = tokPos;
                    throw err;
                }
                var empty = [];
                var _num = {
                    type: "num"
                }, _regexp = {
                    type: "regexp"
                }, _string = {
                    type: "string"
                };
                var _name = {
                    type: "name"
                }, _eof = {
                    type: "eof"
                };
                var _break = {
                    keyword: "break"
                }, _case = {
                    keyword: "case",
                    beforeExpr: true
                }, _catch = {
                    keyword: "catch"
                };
                var _continue = {
                    keyword: "continue"
                }, _debugger = {
                    keyword: "debugger"
                }, _default = {
                    keyword: "default"
                };
                var _do = {
                    keyword: "do",
                    isLoop: true
                }, _else = {
                    keyword: "else",
                    beforeExpr: true
                };
                var _finally = {
                    keyword: "finally"
                }, _for = {
                    keyword: "for",
                    isLoop: true
                }, _function = {
                    keyword: "function"
                };
                var _if = {
                    keyword: "if"
                }, _return = {
                    keyword: "return",
                    beforeExpr: true
                }, _switch = {
                    keyword: "switch"
                };
                var _throw = {
                    keyword: "throw",
                    beforeExpr: true
                }, _try = {
                    keyword: "try"
                }, _var = {
                    keyword: "var"
                };
                var _while = {
                    keyword: "while",
                    isLoop: true
                }, _with = {
                    keyword: "with"
                }, _new = {
                    keyword: "new",
                    beforeExpr: true
                };
                var _this = {
                    keyword: "this"
                };
                var _null = {
                    keyword: "null",
                    atomValue: null
                }, _true = {
                    keyword: "true",
                    atomValue: true
                };
                var _false = {
                    keyword: "false",
                    atomValue: false
                };
                var _in = {
                    keyword: "in",
                    binop: 7,
                    beforeExpr: true
                };
                var keywordTypes = {
                    "break": _break,
                    "case": _case,
                    "catch": _catch,
                    "continue": _continue,
                    "debugger": _debugger,
                    "default": _default,
                    "do": _do,
                    "else": _else,
                    "finally": _finally,
                    "for": _for,
                    "function": _function,
                    "if": _if,
                    "return": _return,
                    "switch": _switch,
                    "throw": _throw,
                    "try": _try,
                    "var": _var,
                    "while": _while,
                    "with": _with,
                    "null": _null,
                    "true": _true,
                    "false": _false,
                    "new": _new,
                    "in": _in,
                    "instanceof": {
                        keyword: "instanceof",
                        binop: 7,
                        beforeExpr: true
                    },
                    "this": _this,
                    "typeof": {
                        keyword: "typeof",
                        prefix: true,
                        beforeExpr: true
                    },
                    "void": {
                        keyword: "void",
                        prefix: true,
                        beforeExpr: true
                    },
                    "delete": {
                        keyword: "delete",
                        prefix: true,
                        beforeExpr: true
                    }
                };
                var _bracketL = {
                    type: "[",
                    beforeExpr: true
                }, _bracketR = {
                    type: "]"
                }, _braceL = {
                    type: "{",
                    beforeExpr: true
                };
                var _braceR = {
                    type: "}"
                }, _parenL = {
                    type: "(",
                    beforeExpr: true
                }, _parenR = {
                    type: ")"
                };
                var _comma = {
                    type: ",",
                    beforeExpr: true
                }, _semi = {
                    type: ";",
                    beforeExpr: true
                };
                var _colon = {
                    type: ":",
                    beforeExpr: true
                }, _dot = {
                    type: "."
                }, _question = {
                    type: "?",
                    beforeExpr: true
                };
                var _slash = {
                    binop: 10,
                    beforeExpr: true
                }, _eq = {
                    isAssign: true,
                    beforeExpr: true
                };
                var _assign = {
                    isAssign: true,
                    beforeExpr: true
                };
                var _incDec = {
                    postfix: true,
                    prefix: true,
                    isUpdate: true
                }, _prefix = {
                    prefix: true,
                    beforeExpr: true
                };
                var _logicalOR = {
                    binop: 1,
                    beforeExpr: true
                };
                var _logicalAND = {
                    binop: 2,
                    beforeExpr: true
                };
                var _bitwiseOR = {
                    binop: 3,
                    beforeExpr: true
                };
                var _bitwiseXOR = {
                    binop: 4,
                    beforeExpr: true
                };
                var _bitwiseAND = {
                    binop: 5,
                    beforeExpr: true
                };
                var _equality = {
                    binop: 6,
                    beforeExpr: true
                };
                var _relational = {
                    binop: 7,
                    beforeExpr: true
                };
                var _bitShift = {
                    binop: 8,
                    beforeExpr: true
                };
                var _plusMin = {
                    binop: 9,
                    prefix: true,
                    beforeExpr: true
                };
                var _multiplyModulo = {
                    binop: 10,
                    beforeExpr: true
                };
                exports.tokTypes = {
                    bracketL: _bracketL,
                    bracketR: _bracketR,
                    braceL: _braceL,
                    braceR: _braceR,
                    parenL: _parenL,
                    parenR: _parenR,
                    comma: _comma,
                    semi: _semi,
                    colon: _colon,
                    dot: _dot,
                    question: _question,
                    slash: _slash,
                    eq: _eq,
                    name: _name,
                    eof: _eof,
                    num: _num,
                    regexp: _regexp,
                    string: _string
                };
                for(var kw in keywordTypes)exports.tokTypes["_" + kw] = keywordTypes[kw];
                function makePredicate(words) {
                    words = words.split(" ");
                    var f = "", cats = [];
                    out: for(var i = 0; i < words.length; ++i){
                        for(var j = 0; j < cats.length; ++j)if (cats[j][0].length == words[i].length) {
                            cats[j].push(words[i]);
                            continue out;
                        }
                        cats.push([
                            words[i]
                        ]);
                    }
                    function compareTo(arr) {
                        if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
                        f += "switch(str){";
                        for(var i = 0; i < arr.length; ++i)f += "case " + JSON.stringify(arr[i]) + ":";
                        f += "return true}return false;";
                    }
                    if (cats.length > 3) {
                        cats.sort(function(a, b) {
                            return b.length - a.length;
                        });
                        f += "switch(str.length){";
                        for(var i = 0; i < cats.length; ++i){
                            var cat = cats[i];
                            f += "case " + cat[0].length + ":";
                            compareTo(cat);
                        }
                        f += "}";
                    } else compareTo(words);
                    return new Function("str", f);
                }
                var isReservedWord3 = makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");
                var isReservedWord5 = makePredicate("class enum extends super const export import");
                var isStrictReservedWord = makePredicate("implements interface let package private protected public static yield");
                var isStrictBadIdWord = makePredicate("eval arguments");
                var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this");
                var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
                var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
                var nonASCIIidentifierChars = "\u0300-\u036f\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u0620-\u0649\u0672-\u06d3\u06e7-\u06e8\u06fb-\u06fc\u0730-\u074a\u0800-\u0814\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0840-\u0857\u08e4-\u08fe\u0900-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962-\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09d7\u09df-\u09e0\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5f-\u0b60\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2-\u0ce3\u0ce6-\u0cef\u0d02\u0d03\u0d46-\u0d48\u0d57\u0d62-\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e34-\u0e3a\u0e40-\u0e45\u0e50-\u0e59\u0eb4-\u0eb9\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f41-\u0f47\u0f71-\u0f84\u0f86-\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1029\u1040-\u1049\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u170e-\u1710\u1720-\u1730\u1740-\u1750\u1772\u1773\u1780-\u17b2\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1920-\u192b\u1930-\u193b\u1951-\u196d\u19b0-\u19c0\u19c8-\u19c9\u19d0-\u19d9\u1a00-\u1a15\u1a20-\u1a53\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1b46-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1bb0-\u1bb9\u1be6-\u1bf3\u1c00-\u1c22\u1c40-\u1c49\u1c5b-\u1c7d\u1cd0-\u1cd2\u1d00-\u1dbe\u1e01-\u1f15\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2d81-\u2d96\u2de0-\u2dff\u3021-\u3028\u3099\u309a\ua640-\ua66d\ua674-\ua67d\ua69f\ua6f0-\ua6f1\ua7f8-\ua800\ua806\ua80b\ua823-\ua827\ua880-\ua881\ua8b4-\ua8c4\ua8d0-\ua8d9\ua8f3-\ua8f7\ua900-\ua909\ua926-\ua92d\ua930-\ua945\ua980-\ua983\ua9b3-\ua9c0\uaa00-\uaa27\uaa40-\uaa41\uaa4c-\uaa4d\uaa50-\uaa59\uaa7b\uaae0-\uaae9\uaaf2-\uaaf3\uabc0-\uabe1\uabec\uabed\uabf0-\uabf9\ufb20-\ufb28\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";
                var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
                var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
                var newline = /[\n\r\u2028\u2029]/;
                var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;
                var isIdentifierStart = exports.isIdentifierStart = function(code) {
                    if (code < 65) return code === 36;
                    if (code < 91) return true;
                    if (code < 97) return code === 95;
                    if (code < 123) return true;
                    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
                };
                var isIdentifierChar = exports.isIdentifierChar = function(code) {
                    if (code < 48) return code === 36;
                    if (code < 58) return true;
                    if (code < 65) return false;
                    if (code < 91) return true;
                    if (code < 97) return code === 95;
                    if (code < 123) return true;
                    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
                };
                function line_loc_t() {
                    this.line = tokCurLine;
                    this.column = tokPos - tokLineStart;
                }
                function initTokenState() {
                    tokCurLine = 1;
                    tokPos = tokLineStart = 0;
                    tokRegexpAllowed = true;
                    skipSpace();
                }
                function finishToken(type, val) {
                    tokEnd = tokPos;
                    if (options.locations) tokEndLoc = new line_loc_t;
                    tokType = type;
                    skipSpace();
                    tokVal = val;
                    tokRegexpAllowed = type.beforeExpr;
                }
                function skipBlockComment() {
                    var startLoc = options.onComment && options.locations && new line_loc_t;
                    var start = tokPos, end = input.indexOf("*/", tokPos += 2);
                    if (end === -1) raise(tokPos - 2, "Unterminated comment");
                    tokPos = end + 2;
                    if (options.locations) {
                        lineBreak.lastIndex = start;
                        var match;
                        while((match = lineBreak.exec(input)) && match.index < tokPos){
                            ++tokCurLine;
                            tokLineStart = match.index + match[0].length;
                        }
                    }
                    if (options.onComment) options.onComment(true, input.slice(start + 2, end), start, tokPos, startLoc, options.locations && new line_loc_t);
                }
                function skipLineComment() {
                    var start = tokPos;
                    var startLoc = options.onComment && options.locations && new line_loc_t;
                    var ch = input.charCodeAt(tokPos += 2);
                    while(tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233){
                        ++tokPos;
                        ch = input.charCodeAt(tokPos);
                    }
                    if (options.onComment) options.onComment(false, input.slice(start + 2, tokPos), start, tokPos, startLoc, options.locations && new line_loc_t);
                }
                function skipSpace() {
                    while(tokPos < inputLen){
                        var ch = input.charCodeAt(tokPos);
                        if (ch === 32) ++tokPos;
                        else if (ch === 13) {
                            ++tokPos;
                            var next = input.charCodeAt(tokPos);
                            if (next === 10) ++tokPos;
                            if (options.locations) {
                                ++tokCurLine;
                                tokLineStart = tokPos;
                            }
                        } else if (ch === 10 || ch === 8232 || ch === 8233) {
                            ++tokPos;
                            if (options.locations) {
                                ++tokCurLine;
                                tokLineStart = tokPos;
                            }
                        } else if (ch > 8 && ch < 14) ++tokPos;
                        else if (ch === 47) {
                            var next = input.charCodeAt(tokPos + 1);
                            if (next === 42) skipBlockComment();
                            else if (next === 47) skipLineComment();
                            else break;
                        } else if (ch === 160) ++tokPos;
                        else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) ++tokPos;
                        else break;
                    }
                }
                function readToken_dot() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next >= 48 && next <= 57) return readNumber(true);
                    ++tokPos;
                    return finishToken(_dot);
                }
                function readToken_slash() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (tokRegexpAllowed) {
                        ++tokPos;
                        return readRegexp();
                    }
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_slash, 1);
                }
                function readToken_mult_modulo() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_multiplyModulo, 1);
                }
                function readToken_pipe_amp(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);
                }
                function readToken_caret() {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_bitwiseXOR, 1);
                }
                function readToken_plus_min(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === code) {
                        if (next == 45 && input.charCodeAt(tokPos + 2) == 62 && newline.test(input.slice(lastEnd, tokPos))) {
                            tokPos += 3;
                            skipLineComment();
                            skipSpace();
                            return readToken();
                        }
                        return finishOp(_incDec, 2);
                    }
                    if (next === 61) return finishOp(_assign, 2);
                    return finishOp(_plusMin, 1);
                }
                function readToken_lt_gt(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    var size = 1;
                    if (next === code) {
                        size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;
                        if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);
                        return finishOp(_bitShift, size);
                    }
                    if (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 && input.charCodeAt(tokPos + 3) == 45) {
                        tokPos += 4;
                        skipLineComment();
                        skipSpace();
                        return readToken();
                    }
                    if (next === 61) size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;
                    return finishOp(_relational, size);
                }
                function readToken_eq_excl(code) {
                    var next = input.charCodeAt(tokPos + 1);
                    if (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);
                    return finishOp(code === 61 ? _eq : _prefix, 1);
                }
                function getTokenFromCode(code) {
                    switch(code){
                        case 46:
                            return readToken_dot();
                        case 40:
                            ++tokPos;
                            return finishToken(_parenL);
                        case 41:
                            ++tokPos;
                            return finishToken(_parenR);
                        case 59:
                            ++tokPos;
                            return finishToken(_semi);
                        case 44:
                            ++tokPos;
                            return finishToken(_comma);
                        case 91:
                            ++tokPos;
                            return finishToken(_bracketL);
                        case 93:
                            ++tokPos;
                            return finishToken(_bracketR);
                        case 123:
                            ++tokPos;
                            return finishToken(_braceL);
                        case 125:
                            ++tokPos;
                            return finishToken(_braceR);
                        case 58:
                            ++tokPos;
                            return finishToken(_colon);
                        case 63:
                            ++tokPos;
                            return finishToken(_question);
                        case 48:
                            var next = input.charCodeAt(tokPos + 1);
                            if (next === 120 || next === 88) return readHexNumber();
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            return readNumber(false);
                        case 34:
                        case 39:
                            return readString(code);
                        case 47:
                            return readToken_slash(code);
                        case 37:
                        case 42:
                            return readToken_mult_modulo();
                        case 124:
                        case 38:
                            return readToken_pipe_amp(code);
                        case 94:
                            return readToken_caret();
                        case 43:
                        case 45:
                            return readToken_plus_min(code);
                        case 60:
                        case 62:
                            return readToken_lt_gt(code);
                        case 61:
                        case 33:
                            return readToken_eq_excl(code);
                        case 126:
                            return finishOp(_prefix, 1);
                    }
                    return false;
                }
                function readToken(forceRegexp) {
                    if (!forceRegexp) tokStart = tokPos;
                    else tokPos = tokStart + 1;
                    if (options.locations) tokStartLoc = new line_loc_t;
                    if (forceRegexp) return readRegexp();
                    if (tokPos >= inputLen) return finishToken(_eof);
                    var code = input.charCodeAt(tokPos);
                    if (isIdentifierStart(code) || code === 92) return readWord();
                    var tok = getTokenFromCode(code);
                    if (tok === false) {
                        var ch = String.fromCharCode(code);
                        if (ch === "\\" || nonASCIIidentifierStart.test(ch)) return readWord();
                        raise(tokPos, "Unexpected character '" + ch + "'");
                    }
                    return tok;
                }
                function finishOp(type, size) {
                    var str = input.slice(tokPos, tokPos + size);
                    tokPos += size;
                    finishToken(type, str);
                }
                function readRegexp() {
                    var content = "", escaped, inClass, start = tokPos;
                    for(;;){
                        if (tokPos >= inputLen) raise(start, "Unterminated regular expression");
                        var ch = input.charAt(tokPos);
                        if (newline.test(ch)) raise(start, "Unterminated regular expression");
                        if (!escaped) {
                            if (ch === "[") inClass = true;
                            else if (ch === "]" && inClass) inClass = false;
                            else if (ch === "/" && !inClass) break;
                            escaped = ch === "\\";
                        } else escaped = false;
                        ++tokPos;
                    }
                    var content = input.slice(start, tokPos);
                    ++tokPos;
                    var mods = readWord1();
                    if (mods && !/^[gmsiy]*$/.test(mods)) raise(start, "Invalid regexp flag");
                    try {
                        var value = new RegExp(content, mods);
                    } catch (e) {
                        if (e instanceof SyntaxError) raise(start, e.message);
                        raise(e);
                    }
                    return finishToken(_regexp, value);
                }
                function readInt(radix, len) {
                    var start = tokPos, total = 0;
                    for(var i = 0, e = len == null ? Infinity : len; i < e; ++i){
                        var code = input.charCodeAt(tokPos), val;
                        if (code >= 97) val = code - 97 + 10;
                        else if (code >= 65) val = code - 65 + 10;
                        else if (code >= 48 && code <= 57) val = code - 48;
                        else val = Infinity;
                        if (val >= radix) break;
                        ++tokPos;
                        total = total * radix + val;
                    }
                    if (tokPos === start || len != null && tokPos - start !== len) return null;
                    return total;
                }
                function readHexNumber() {
                    tokPos += 2;
                    var val = readInt(16);
                    if (val == null) raise(tokStart + 2, "Expected hexadecimal number");
                    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
                    return finishToken(_num, val);
                }
                function readNumber(startsWithDot) {
                    var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;
                    if (!startsWithDot && readInt(10) === null) raise(start, "Invalid number");
                    if (input.charCodeAt(tokPos) === 46) {
                        ++tokPos;
                        readInt(10);
                        isFloat = true;
                    }
                    var next = input.charCodeAt(tokPos);
                    if (next === 69 || next === 101) {
                        next = input.charCodeAt(++tokPos);
                        if (next === 43 || next === 45) ++tokPos;
                        if (readInt(10) === null) raise(start, "Invalid number");
                        isFloat = true;
                    }
                    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
                    var str = input.slice(start, tokPos), val;
                    if (isFloat) val = parseFloat(str);
                    else if (!octal || str.length === 1) val = parseInt(str, 10);
                    else if (/[89]/.test(str) || strict) raise(start, "Invalid number");
                    else val = parseInt(str, 8);
                    return finishToken(_num, val);
                }
                function readString(quote) {
                    tokPos++;
                    var out = "";
                    for(;;){
                        if (tokPos >= inputLen) raise(tokStart, "Unterminated string constant");
                        var ch = input.charCodeAt(tokPos);
                        if (ch === quote) {
                            ++tokPos;
                            return finishToken(_string, out);
                        }
                        if (ch === 92) {
                            ch = input.charCodeAt(++tokPos);
                            var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));
                            if (octal) octal = octal[0];
                            while(octal && parseInt(octal, 8) > 255)octal = octal.slice(0, -1);
                            if (octal === "0") octal = null;
                            ++tokPos;
                            if (octal) {
                                if (strict) raise(tokPos - 2, "Octal literal in strict mode");
                                out += String.fromCharCode(parseInt(octal, 8));
                                tokPos += octal.length - 1;
                            } else switch(ch){
                                case 110:
                                    out += "\n";
                                    break;
                                case 114:
                                    out += "\r";
                                    break;
                                case 120:
                                    out += String.fromCharCode(readHexChar(2));
                                    break;
                                case 117:
                                    out += String.fromCharCode(readHexChar(4));
                                    break;
                                case 85:
                                    out += String.fromCharCode(readHexChar(8));
                                    break;
                                case 116:
                                    out += "\t";
                                    break;
                                case 98:
                                    out += "\b";
                                    break;
                                case 118:
                                    out += "\u000b";
                                    break;
                                case 102:
                                    out += "\f";
                                    break;
                                case 48:
                                    out += "\0";
                                    break;
                                case 13:
                                    if (input.charCodeAt(tokPos) === 10) ++tokPos;
                                case 10:
                                    if (options.locations) {
                                        tokLineStart = tokPos;
                                        ++tokCurLine;
                                    }
                                    break;
                                default:
                                    out += String.fromCharCode(ch);
                                    break;
                            }
                        } else {
                            if (ch === 13 || ch === 10 || ch === 8232 || ch === 8233) raise(tokStart, "Unterminated string constant");
                            out += String.fromCharCode(ch);
                            ++tokPos;
                        }
                    }
                }
                function readHexChar(len) {
                    var n = readInt(16, len);
                    if (n === null) raise(tokStart, "Bad character escape sequence");
                    return n;
                }
                var containsEsc;
                function readWord1() {
                    containsEsc = false;
                    var word, first = true, start = tokPos;
                    for(;;){
                        var ch = input.charCodeAt(tokPos);
                        if (isIdentifierChar(ch)) {
                            if (containsEsc) word += input.charAt(tokPos);
                            ++tokPos;
                        } else if (ch === 92) {
                            if (!containsEsc) word = input.slice(start, tokPos);
                            containsEsc = true;
                            if (input.charCodeAt(++tokPos) != 117) raise(tokPos, "Expecting Unicode escape sequence \\uXXXX");
                            ++tokPos;
                            var esc = readHexChar(4);
                            var escStr = String.fromCharCode(esc);
                            if (!escStr) raise(tokPos - 1, "Invalid Unicode escape");
                            if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc))) raise(tokPos - 4, "Invalid Unicode escape");
                            word += escStr;
                        } else break;
                        first = false;
                    }
                    return containsEsc ? word : input.slice(start, tokPos);
                }
                function readWord() {
                    var word = readWord1();
                    var type = _name;
                    if (!containsEsc && isKeyword(word)) type = keywordTypes[word];
                    return finishToken(type, word);
                }
                function next() {
                    lastStart = tokStart;
                    lastEnd = tokEnd;
                    lastEndLoc = tokEndLoc;
                    readToken();
                }
                function setStrict(strct) {
                    strict = strct;
                    tokPos = tokStart;
                    if (options.locations) while(tokPos < tokLineStart){
                        tokLineStart = input.lastIndexOf("\n", tokLineStart - 2) + 1;
                        --tokCurLine;
                    }
                    skipSpace();
                    readToken();
                }
                function node_t() {
                    this.type = null;
                    this.start = tokStart;
                    this.end = null;
                }
                function node_loc_t() {
                    this.start = tokStartLoc;
                    this.end = null;
                    if (sourceFile !== null) this.source = sourceFile;
                }
                function startNode() {
                    var node = new node_t();
                    if (options.locations) node.loc = new node_loc_t();
                    if (options.directSourceFile) node.sourceFile = options.directSourceFile;
                    if (options.ranges) node.range = [
                        tokStart,
                        0
                    ];
                    return node;
                }
                function startNodeFrom(other) {
                    var node = new node_t();
                    node.start = other.start;
                    if (options.locations) {
                        node.loc = new node_loc_t();
                        node.loc.start = other.loc.start;
                    }
                    if (options.ranges) node.range = [
                        other.range[0],
                        0
                    ];
                    return node;
                }
                function finishNode(node, type) {
                    node.type = type;
                    node.end = lastEnd;
                    if (options.locations) node.loc.end = lastEndLoc;
                    if (options.ranges) node.range[1] = lastEnd;
                    return node;
                }
                function isUseStrict(stmt) {
                    return options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && stmt.expression.value === "use strict";
                }
                function eat(type) {
                    if (tokType === type) {
                        next();
                        return true;
                    }
                }
                function canInsertSemicolon() {
                    return !options.strictSemicolons && (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));
                }
                function semicolon() {
                    if (!eat(_semi) && !canInsertSemicolon()) unexpected();
                }
                function expect(type) {
                    if (tokType === type) next();
                    else unexpected();
                }
                function unexpected() {
                    raise(tokStart, "Unexpected token");
                }
                function checkLVal(expr) {
                    if (expr.type !== "Identifier" && expr.type !== "MemberExpression") raise(expr.start, "Assigning to rvalue");
                    if (strict && expr.type === "Identifier" && isStrictBadIdWord(expr.name)) raise(expr.start, "Assigning to " + expr.name + " in strict mode");
                }
                function parseTopLevel(program) {
                    lastStart = lastEnd = tokPos;
                    if (options.locations) lastEndLoc = new line_loc_t;
                    inFunction = strict = null;
                    labels = [];
                    readToken();
                    var node = program || startNode(), first = true;
                    if (!program) node.body = [];
                    while(tokType !== _eof){
                        var stmt = parseStatement();
                        node.body.push(stmt);
                        if (first && isUseStrict(stmt)) setStrict(true);
                        first = false;
                    }
                    return finishNode(node, "Program");
                }
                var loopLabel = {
                    kind: "loop"
                }, switchLabel = {
                    kind: "switch"
                };
                function parseStatement() {
                    if (tokType === _slash || tokType === _assign && tokVal == "/=") readToken(true);
                    var starttype = tokType, node = startNode();
                    switch(starttype){
                        case _break:
                        case _continue:
                            next();
                            var isBreak = starttype === _break;
                            if (eat(_semi) || canInsertSemicolon()) node.label = null;
                            else if (tokType !== _name) unexpected();
                            else {
                                node.label = parseIdent();
                                semicolon();
                            }
                            for(var i = 0; i < labels.length; ++i){
                                var lab = labels[i];
                                if (node.label == null || lab.name === node.label.name) {
                                    if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
                                    if (node.label && isBreak) break;
                                }
                            }
                            if (i === labels.length) raise(node.start, "Unsyntactic " + starttype.keyword);
                            return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
                        case _debugger:
                            next();
                            semicolon();
                            return finishNode(node, "DebuggerStatement");
                        case _do:
                            next();
                            labels.push(loopLabel);
                            node.body = parseStatement();
                            labels.pop();
                            expect(_while);
                            node.test = parseParenExpression();
                            semicolon();
                            return finishNode(node, "DoWhileStatement");
                        case _for:
                            next();
                            labels.push(loopLabel);
                            expect(_parenL);
                            if (tokType === _semi) return parseFor(node, null);
                            if (tokType === _var) {
                                var init = startNode();
                                next();
                                parseVar(init, true);
                                finishNode(init, "VariableDeclaration");
                                if (init.declarations.length === 1 && eat(_in)) return parseForIn(node, init);
                                return parseFor(node, init);
                            }
                            var init = parseExpression(false, true);
                            if (eat(_in)) {
                                checkLVal(init);
                                return parseForIn(node, init);
                            }
                            return parseFor(node, init);
                        case _function:
                            next();
                            return parseFunction(node, true);
                        case _if:
                            next();
                            node.test = parseParenExpression();
                            node.consequent = parseStatement();
                            node.alternate = eat(_else) ? parseStatement() : null;
                            return finishNode(node, "IfStatement");
                        case _return:
                            if (!inFunction && !options.allowReturnOutsideFunction) raise(tokStart, "'return' outside of function");
                            next();
                            if (eat(_semi) || canInsertSemicolon()) node.argument = null;
                            else {
                                node.argument = parseExpression();
                                semicolon();
                            }
                            return finishNode(node, "ReturnStatement");
                        case _switch:
                            next();
                            node.discriminant = parseParenExpression();
                            node.cases = [];
                            expect(_braceL);
                            labels.push(switchLabel);
                            for(var cur, sawDefault; tokType != _braceR;)if (tokType === _case || tokType === _default) {
                                var isCase = tokType === _case;
                                if (cur) finishNode(cur, "SwitchCase");
                                node.cases.push(cur = startNode());
                                cur.consequent = [];
                                next();
                                if (isCase) cur.test = parseExpression();
                                else {
                                    if (sawDefault) raise(lastStart, "Multiple default clauses");
                                    sawDefault = true;
                                    cur.test = null;
                                }
                                expect(_colon);
                            } else {
                                if (!cur) unexpected();
                                cur.consequent.push(parseStatement());
                            }
                            if (cur) finishNode(cur, "SwitchCase");
                            next();
                            labels.pop();
                            return finishNode(node, "SwitchStatement");
                        case _throw:
                            next();
                            if (newline.test(input.slice(lastEnd, tokStart))) raise(lastEnd, "Illegal newline after throw");
                            node.argument = parseExpression();
                            semicolon();
                            return finishNode(node, "ThrowStatement");
                        case _try:
                            next();
                            node.block = parseBlock();
                            node.handler = null;
                            if (tokType === _catch) {
                                var clause = startNode();
                                next();
                                expect(_parenL);
                                clause.param = parseIdent();
                                if (strict && isStrictBadIdWord(clause.param.name)) raise(clause.param.start, "Binding " + clause.param.name + " in strict mode");
                                expect(_parenR);
                                clause.guard = null;
                                clause.body = parseBlock();
                                node.handler = finishNode(clause, "CatchClause");
                            }
                            node.guardedHandlers = empty;
                            node.finalizer = eat(_finally) ? parseBlock() : null;
                            if (!node.handler && !node.finalizer) raise(node.start, "Missing catch or finally clause");
                            return finishNode(node, "TryStatement");
                        case _var:
                            next();
                            parseVar(node);
                            semicolon();
                            return finishNode(node, "VariableDeclaration");
                        case _while:
                            next();
                            node.test = parseParenExpression();
                            labels.push(loopLabel);
                            node.body = parseStatement();
                            labels.pop();
                            return finishNode(node, "WhileStatement");
                        case _with:
                            if (strict) raise(tokStart, "'with' in strict mode");
                            next();
                            node.object = parseParenExpression();
                            node.body = parseStatement();
                            return finishNode(node, "WithStatement");
                        case _braceL:
                            return parseBlock();
                        case _semi:
                            next();
                            return finishNode(node, "EmptyStatement");
                        default:
                            var maybeName = tokVal, expr = parseExpression();
                            if (starttype === _name && expr.type === "Identifier" && eat(_colon)) {
                                for(var i = 0; i < labels.length; ++i)if (labels[i].name === maybeName) raise(expr.start, "Label '" + maybeName + "' is already declared");
                                var kind = tokType.isLoop ? "loop" : tokType === _switch ? "switch" : null;
                                labels.push({
                                    name: maybeName,
                                    kind: kind
                                });
                                node.body = parseStatement();
                                labels.pop();
                                node.label = expr;
                                return finishNode(node, "LabeledStatement");
                            } else {
                                node.expression = expr;
                                semicolon();
                                return finishNode(node, "ExpressionStatement");
                            }
                    }
                }
                function parseParenExpression() {
                    expect(_parenL);
                    var val = parseExpression();
                    expect(_parenR);
                    return val;
                }
                function parseBlock(allowStrict) {
                    var node = startNode(), first = true, strict = false, oldStrict;
                    node.body = [];
                    expect(_braceL);
                    while(!eat(_braceR)){
                        var stmt = parseStatement();
                        node.body.push(stmt);
                        if (first && allowStrict && isUseStrict(stmt)) {
                            oldStrict = strict;
                            setStrict(strict = true);
                        }
                        first = false;
                    }
                    if (strict && !oldStrict) setStrict(false);
                    return finishNode(node, "BlockStatement");
                }
                function parseFor(node, init) {
                    node.init = init;
                    expect(_semi);
                    node.test = tokType === _semi ? null : parseExpression();
                    expect(_semi);
                    node.update = tokType === _parenR ? null : parseExpression();
                    expect(_parenR);
                    node.body = parseStatement();
                    labels.pop();
                    return finishNode(node, "ForStatement");
                }
                function parseForIn(node, init) {
                    node.left = init;
                    node.right = parseExpression();
                    expect(_parenR);
                    node.body = parseStatement();
                    labels.pop();
                    return finishNode(node, "ForInStatement");
                }
                function parseVar(node, noIn) {
                    node.declarations = [];
                    node.kind = "var";
                    for(;;){
                        var decl = startNode();
                        decl.id = parseIdent();
                        if (strict && isStrictBadIdWord(decl.id.name)) raise(decl.id.start, "Binding " + decl.id.name + " in strict mode");
                        decl.init = eat(_eq) ? parseExpression(true, noIn) : null;
                        node.declarations.push(finishNode(decl, "VariableDeclarator"));
                        if (!eat(_comma)) break;
                    }
                    return node;
                }
                function parseExpression(noComma, noIn) {
                    var expr = parseMaybeAssign(noIn);
                    if (!noComma && tokType === _comma) {
                        var node = startNodeFrom(expr);
                        node.expressions = [
                            expr
                        ];
                        while(eat(_comma))node.expressions.push(parseMaybeAssign(noIn));
                        return finishNode(node, "SequenceExpression");
                    }
                    return expr;
                }
                function parseMaybeAssign(noIn) {
                    var left = parseMaybeConditional(noIn);
                    if (tokType.isAssign) {
                        var node = startNodeFrom(left);
                        node.operator = tokVal;
                        node.left = left;
                        next();
                        node.right = parseMaybeAssign(noIn);
                        checkLVal(left);
                        return finishNode(node, "AssignmentExpression");
                    }
                    return left;
                }
                function parseMaybeConditional(noIn) {
                    var expr = parseExprOps(noIn);
                    if (eat(_question)) {
                        var node = startNodeFrom(expr);
                        node.test = expr;
                        node.consequent = parseExpression(true);
                        expect(_colon);
                        node.alternate = parseExpression(true, noIn);
                        return finishNode(node, "ConditionalExpression");
                    }
                    return expr;
                }
                function parseExprOps(noIn) {
                    return parseExprOp(parseMaybeUnary(), -1, noIn);
                }
                function parseExprOp(left, minPrec, noIn) {
                    var prec = tokType.binop;
                    if (prec != null && (!noIn || tokType !== _in)) {
                        if (prec > minPrec) {
                            var node = startNodeFrom(left);
                            node.left = left;
                            node.operator = tokVal;
                            var op = tokType;
                            next();
                            node.right = parseExprOp(parseMaybeUnary(), prec, noIn);
                            var exprNode = finishNode(node, op === _logicalOR || op === _logicalAND ? "LogicalExpression" : "BinaryExpression");
                            return parseExprOp(exprNode, minPrec, noIn);
                        }
                    }
                    return left;
                }
                function parseMaybeUnary() {
                    if (tokType.prefix) {
                        var node = startNode(), update = tokType.isUpdate;
                        node.operator = tokVal;
                        node.prefix = true;
                        tokRegexpAllowed = true;
                        next();
                        node.argument = parseMaybeUnary();
                        if (update) checkLVal(node.argument);
                        else if (strict && node.operator === "delete" && node.argument.type === "Identifier") raise(node.start, "Deleting local variable in strict mode");
                        return finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
                    }
                    var expr = parseExprSubscripts();
                    while(tokType.postfix && !canInsertSemicolon()){
                        var node = startNodeFrom(expr);
                        node.operator = tokVal;
                        node.prefix = false;
                        node.argument = expr;
                        checkLVal(expr);
                        next();
                        expr = finishNode(node, "UpdateExpression");
                    }
                    return expr;
                }
                function parseExprSubscripts() {
                    return parseSubscripts(parseExprAtom());
                }
                function parseSubscripts(base, noCalls) {
                    if (eat(_dot)) {
                        var node = startNodeFrom(base);
                        node.object = base;
                        node.property = parseIdent(true);
                        node.computed = false;
                        return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                    } else if (eat(_bracketL)) {
                        var node = startNodeFrom(base);
                        node.object = base;
                        node.property = parseExpression();
                        node.computed = true;
                        expect(_bracketR);
                        return parseSubscripts(finishNode(node, "MemberExpression"), noCalls);
                    } else if (!noCalls && eat(_parenL)) {
                        var node = startNodeFrom(base);
                        node.callee = base;
                        node.arguments = parseExprList(_parenR, false);
                        return parseSubscripts(finishNode(node, "CallExpression"), noCalls);
                    } else return base;
                }
                function parseExprAtom() {
                    switch(tokType){
                        case _this:
                            var node = startNode();
                            next();
                            return finishNode(node, "ThisExpression");
                        case _name:
                            return parseIdent();
                        case _num:
                        case _string:
                        case _regexp:
                            var node = startNode();
                            node.value = tokVal;
                            node.raw = input.slice(tokStart, tokEnd);
                            next();
                            return finishNode(node, "Literal");
                        case _null:
                        case _true:
                        case _false:
                            var node = startNode();
                            node.value = tokType.atomValue;
                            node.raw = tokType.keyword;
                            next();
                            return finishNode(node, "Literal");
                        case _parenL:
                            var tokStartLoc1 = tokStartLoc, tokStart1 = tokStart;
                            next();
                            var val = parseExpression();
                            val.start = tokStart1;
                            val.end = tokEnd;
                            if (options.locations) {
                                val.loc.start = tokStartLoc1;
                                val.loc.end = tokEndLoc;
                            }
                            if (options.ranges) val.range = [
                                tokStart1,
                                tokEnd
                            ];
                            expect(_parenR);
                            return val;
                        case _bracketL:
                            var node = startNode();
                            next();
                            node.elements = parseExprList(_bracketR, true, true);
                            return finishNode(node, "ArrayExpression");
                        case _braceL:
                            return parseObj();
                        case _function:
                            var node = startNode();
                            next();
                            return parseFunction(node, false);
                        case _new:
                            return parseNew();
                        default:
                            unexpected();
                    }
                }
                function parseNew() {
                    var node = startNode();
                    next();
                    node.callee = parseSubscripts(parseExprAtom(), true);
                    if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);
                    else node.arguments = empty;
                    return finishNode(node, "NewExpression");
                }
                function parseObj() {
                    var node = startNode(), first = true, sawGetSet = false;
                    node.properties = [];
                    next();
                    while(!eat(_braceR)){
                        if (!first) {
                            expect(_comma);
                            if (options.allowTrailingCommas && eat(_braceR)) break;
                        } else first = false;
                        var prop = {
                            key: parsePropertyName()
                        }, isGetSet = false, kind;
                        if (eat(_colon)) {
                            prop.value = parseExpression(true);
                            kind = prop.kind = "init";
                        } else if (options.ecmaVersion >= 5 && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set")) {
                            isGetSet = sawGetSet = true;
                            kind = prop.kind = prop.key.name;
                            prop.key = parsePropertyName();
                            if (tokType !== _parenL) unexpected();
                            prop.value = parseFunction(startNode(), false);
                        } else unexpected();
                        if (prop.key.type === "Identifier" && (strict || sawGetSet)) for(var i = 0; i < node.properties.length; ++i){
                            var other = node.properties[i];
                            if (other.key.name === prop.key.name) {
                                var conflict = kind == other.kind || isGetSet && other.kind === "init" || kind === "init" && (other.kind === "get" || other.kind === "set");
                                if (conflict && !strict && kind === "init" && other.kind === "init") conflict = false;
                                if (conflict) raise(prop.key.start, "Redefinition of property");
                            }
                        }
                        node.properties.push(prop);
                    }
                    return finishNode(node, "ObjectExpression");
                }
                function parsePropertyName() {
                    if (tokType === _num || tokType === _string) return parseExprAtom();
                    return parseIdent(true);
                }
                function parseFunction(node, isStatement) {
                    if (tokType === _name) node.id = parseIdent();
                    else if (isStatement) unexpected();
                    else node.id = null;
                    node.params = [];
                    var first = true;
                    expect(_parenL);
                    while(!eat(_parenR)){
                        if (!first) expect(_comma);
                        else first = false;
                        node.params.push(parseIdent());
                    }
                    var oldInFunc = inFunction, oldLabels = labels;
                    inFunction = true;
                    labels = [];
                    node.body = parseBlock(true);
                    inFunction = oldInFunc;
                    labels = oldLabels;
                    if (strict || node.body.body.length && isUseStrict(node.body.body[0])) for(var i = node.id ? -1 : 0; i < node.params.length; ++i){
                        var id = i < 0 ? node.id : node.params[i];
                        if (isStrictReservedWord(id.name) || isStrictBadIdWord(id.name)) raise(id.start, "Defining '" + id.name + "' in strict mode");
                        if (i >= 0) {
                            for(var j = 0; j < i; ++j)if (id.name === node.params[j].name) raise(id.start, "Argument name clash in strict mode");
                        }
                    }
                    return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
                }
                function parseExprList(close, allowTrailingComma, allowEmpty) {
                    var elts = [], first = true;
                    while(!eat(close)){
                        if (!first) {
                            expect(_comma);
                            if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;
                        } else first = false;
                        if (allowEmpty && tokType === _comma) elts.push(null);
                        else elts.push(parseExpression(true));
                    }
                    return elts;
                }
                function parseIdent(liberal) {
                    var node = startNode();
                    if (liberal && options.forbidReserved == "everywhere") liberal = false;
                    if (tokType === _name) {
                        if (!liberal && (options.forbidReserved && (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) || strict && isStrictReservedWord(tokVal)) && input.slice(tokStart, tokEnd).indexOf("\\") == -1) raise(tokStart, "The keyword '" + tokVal + "' is reserved");
                        node.name = tokVal;
                    } else if (liberal && tokType.keyword) node.name = tokType.keyword;
                    else unexpected();
                    tokRegexpAllowed = false;
                    next();
                    return finishNode(node, "Identifier");
                }
            });
            if (!acorn.version) acorn = null;
        }
        function parse(code, options) {
            return (global.acorn || acorn).parse(code, options);
        }
        var binaryOperators = {
            '+': '__add',
            '-': '__subtract',
            '*': '__multiply',
            '/': '__divide',
            '%': '__modulo',
            '==': '__equals',
            '!=': '__equals'
        };
        var unaryOperators = {
            '-': '__negate',
            '+': '__self'
        };
        var fields = Base.each([
            'add',
            'subtract',
            'multiply',
            'divide',
            'modulo',
            'equals',
            'negate'
        ], function(name) {
            this['__' + name] = '#' + name;
        }, {
            __self: function() {
                return this;
            }
        });
        Point.inject(fields);
        Size.inject(fields);
        Color.inject(fields);
        function __$__(left, operator, right) {
            var handler = binaryOperators[operator];
            if (left && left[handler]) {
                var res = left[handler](right);
                return operator === '!=' ? !res : res;
            }
            switch(operator){
                case '+':
                    return left + right;
                case '-':
                    return left - right;
                case '*':
                    return left * right;
                case '/':
                    return left / right;
                case '%':
                    return left % right;
                case '==':
                    return left == right;
                case '!=':
                    return left != right;
            }
        }
        function $__(operator, value) {
            var handler = unaryOperators[operator];
            if (value && value[handler]) return value[handler]();
            switch(operator){
                case '+':
                    return +value;
                case '-':
                    return -value;
            }
        }
        function compile(code, options) {
            if (!code) return '';
            options = options || {};
            var insertions = [];
            function getOffset(offset) {
                for(var i = 0, l = insertions.length; i < l; i++){
                    var insertion = insertions[i];
                    if (insertion[0] >= offset) break;
                    offset += insertion[1];
                }
                return offset;
            }
            function getCode(node) {
                return code.substring(getOffset(node.range[0]), getOffset(node.range[1]));
            }
            function getBetween(left, right) {
                return code.substring(getOffset(left.range[1]), getOffset(right.range[0]));
            }
            function replaceCode(node, str) {
                var start = getOffset(node.range[0]), end = getOffset(node.range[1]), insert = 0;
                for(var i = insertions.length - 1; i >= 0; i--)if (start > insertions[i][0]) {
                    insert = i + 1;
                    break;
                }
                insertions.splice(insert, 0, [
                    start,
                    str.length - end + start
                ]);
                code = code.substring(0, start) + str + code.substring(end);
            }
            function handleOverloading(node, parent) {
                switch(node.type){
                    case 'UnaryExpression':
                        if (node.operator in unaryOperators && node.argument.type !== 'Literal') {
                            var arg = getCode(node.argument);
                            replaceCode(node, '$__("' + node.operator + '", ' + arg + ')');
                        }
                        break;
                    case 'BinaryExpression':
                        if (node.operator in binaryOperators && node.left.type !== 'Literal') {
                            var left = getCode(node.left), right = getCode(node.right), between = getBetween(node.left, node.right), operator = node.operator;
                            replaceCode(node, '__$__(' + left + ',' + between.replace(new RegExp('\\' + operator), '"' + operator + '"') + ', ' + right + ')');
                        }
                        break;
                    case 'UpdateExpression':
                    case 'AssignmentExpression':
                        var parentType = parent && parent.type;
                        if (!(parentType === 'ForStatement' || parentType === 'BinaryExpression' && /^[=!<>]/.test(parent.operator) || parentType === 'MemberExpression' && parent.computed)) {
                            if (node.type === 'UpdateExpression') {
                                var arg = getCode(node.argument), exp = '__$__(' + arg + ', "' + node.operator[0] + '", 1)', str = arg + ' = ' + exp;
                                if (node.prefix) str = '(' + str + ')';
                                else if (parentType === 'AssignmentExpression' || parentType === 'VariableDeclarator' || parentType === 'BinaryExpression') {
                                    if (getCode(parent.left || parent.id) === arg) str = exp;
                                    str = arg + '; ' + str;
                                }
                                replaceCode(node, str);
                            } else if (/^.=$/.test(node.operator) && node.left.type !== 'Literal') {
                                var left = getCode(node.left), right = getCode(node.right), exp = left + ' = __$__(' + left + ', "' + node.operator[0] + '", ' + right + ')';
                                replaceCode(node, /^\(.*\)$/.test(getCode(node)) ? '(' + exp + ')' : exp);
                            }
                        }
                        break;
                }
            }
            function handleExports(node) {
                switch(node.type){
                    case 'ExportDefaultDeclaration':
                        replaceCode({
                            range: [
                                node.start,
                                node.declaration.start
                            ]
                        }, 'module.exports = ');
                        break;
                    case 'ExportNamedDeclaration':
                        var declaration = node.declaration;
                        var specifiers = node.specifiers;
                        if (declaration) {
                            var declarations = declaration.declarations;
                            if (declarations) {
                                declarations.forEach(function(dec) {
                                    replaceCode(dec, 'module.exports.' + getCode(dec));
                                });
                                replaceCode({
                                    range: [
                                        node.start,
                                        declaration.start + declaration.kind.length
                                    ]
                                }, '');
                            }
                        } else if (specifiers) {
                            var exports = specifiers.map(function(specifier) {
                                var name = getCode(specifier);
                                return 'module.exports.' + name + ' = ' + name + '; ';
                            }).join('');
                            if (exports) replaceCode(node, exports);
                        }
                        break;
                }
            }
            function walkAST(node, parent, paperFeatures) {
                if (node) {
                    for(var key in node)if (key !== 'range' && key !== 'loc') {
                        var value = node[key];
                        if (Array.isArray(value)) for(var i = 0, l = value.length; i < l; i++)walkAST(value[i], node, paperFeatures);
                        else if (value && typeof value === 'object') walkAST(value, node, paperFeatures);
                    }
                    if (paperFeatures.operatorOverloading !== false) handleOverloading(node, parent);
                    if (paperFeatures.moduleExports !== false) handleExports(node);
                }
            }
            function encodeVLQ(value) {
                var res = '', base64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                value = (Math.abs(value) << 1) + (value < 0 ? 1 : 0);
                while(value || !res){
                    var next = value & 31;
                    value >>= 5;
                    if (value) next |= 32;
                    res += base64[next];
                }
                return res;
            }
            var url = options.url || '', sourceMaps = options.sourceMaps, paperFeatures = options.paperFeatures || {}, source = options.source || code, offset = options.offset || 0, agent = paper.agent, version = agent.versionNumber, offsetCode = false, lineBreaks = /\r\n|\n|\r/mg, map;
            if (sourceMaps && (agent.chrome && version >= 30 || agent.webkit && version >= 537.76 || agent.firefox && version >= 23 || agent.node)) {
                if (agent.node) offset -= 2;
                else if (window && url && !window.location.href.indexOf(url)) {
                    var html = document.getElementsByTagName('html')[0].innerHTML;
                    offset = html.substr(0, html.indexOf(code) + 1).match(lineBreaks).length + 1;
                }
                offsetCode = offset > 0 && !(agent.chrome && version >= 36 || agent.safari && version >= 600 || agent.firefox && version >= 40 || agent.node);
                var mappings = [
                    'AA' + encodeVLQ(offsetCode ? 0 : offset) + 'A'
                ];
                mappings.length = (code.match(lineBreaks) || []).length + 1 + (offsetCode ? offset : 0);
                map = {
                    version: 3,
                    file: url,
                    names: [],
                    mappings: mappings.join(';AACA'),
                    sourceRoot: '',
                    sources: [
                        url
                    ],
                    sourcesContent: [
                        source
                    ]
                };
            }
            if (paperFeatures.operatorOverloading !== false || paperFeatures.moduleExports !== false) walkAST(parse(code, {
                ranges: true,
                preserveParens: true,
                sourceType: 'module'
            }), null, paperFeatures);
            if (map) {
                if (offsetCode) code = new Array(offset + 1).join('\n') + code;
                if (/^(inline|both)$/.test(sourceMaps)) code += "\n//# sourceMappingURL=data:application/json;base64," + self1.btoa(unescape(encodeURIComponent(JSON.stringify(map))));
                code += "\n//# sourceURL=" + (url || 'paperscript');
            }
            return {
                url: url,
                source: source,
                code: code,
                map: map
            };
        }
        function execute(code, scope, options) {
            paper = scope;
            var view = scope.getView(), tool = /\btool\.\w+|\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\b/.test(code) && !/\bnew\s+Tool\b/.test(code) ? new Tool() : null, toolHandlers = tool ? tool._events : [], handlers = [
                'onFrame',
                'onResize'
            ].concat(toolHandlers), params = [], args = [], func, compiled = typeof code === 'object' ? code : compile(code, options);
            code = compiled.code;
            function expose(scope, hidden) {
                for(var key in scope)if ((hidden || !/^_/.test(key)) && new RegExp('([\\b\\s\\W]|^)' + key.replace(/\$/g, '\\$') + '\\b').test(code)) {
                    params.push(key);
                    args.push(scope[key]);
                }
            }
            expose({
                __$__: __$__,
                $__: $__,
                paper: scope,
                tool: tool
            }, true);
            expose(scope);
            code = 'var module = { exports: {} }; ' + code;
            var exports = Base.each(handlers, function(key) {
                if (new RegExp('\\s+' + key + '\\b').test(code)) {
                    params.push(key);
                    this.push('module.exports.' + key + ' = ' + key + ';');
                }
            }, []).join('\n');
            if (exports) code += '\n' + exports;
            code += '\nreturn module.exports;';
            var agent = paper.agent;
            if (document && (agent.chrome || agent.firefox && agent.versionNumber < 40)) {
                var script = document.createElement('script'), head = document.head || document.getElementsByTagName('head')[0];
                if (agent.firefox) code = '\n' + code;
                script.appendChild(document.createTextNode('document.__paperscript__ = function(' + params + ') {' + code + '\n}'));
                head.appendChild(script);
                func = document.__paperscript__;
                delete document.__paperscript__;
                head.removeChild(script);
            } else func = Function(params, code);
            var exports = func && func.apply(scope, args);
            var obj = exports || {};
            Base.each(toolHandlers, function(key) {
                var value = obj[key];
                if (value) tool[key] = value;
            });
            if (view) {
                if (obj.onResize) view.setOnResize(obj.onResize);
                view.emit('resize', {
                    size: view.size,
                    delta: new Point()
                });
                if (obj.onFrame) view.setOnFrame(obj.onFrame);
                view.requestUpdate();
            }
            return exports;
        }
        function loadScript(script) {
            if (/^text\/(?:x-|)paperscript$/.test(script.type) && PaperScope.getAttribute(script, 'ignore') !== 'true') {
                var canvasId = PaperScope.getAttribute(script, 'canvas'), canvas = document.getElementById(canvasId), src = script.src || script.getAttribute('data-src'), async = PaperScope.hasAttribute(script, 'async'), scopeAttribute = 'data-paper-scope';
                if (!canvas) throw new Error('Unable to find canvas with id "' + canvasId + '"');
                var scope = PaperScope.get(canvas.getAttribute(scopeAttribute)) || new PaperScope().setup(canvas);
                canvas.setAttribute(scopeAttribute, scope._id);
                if (src) Http.request({
                    url: src,
                    async: async,
                    mimeType: 'text/plain',
                    onLoad: function(code) {
                        execute(code, scope, src);
                    }
                });
                else execute(script.innerHTML, scope, script.baseURI);
                script.setAttribute('data-paper-ignore', 'true');
                return scope;
            }
        }
        function loadAll() {
            Base.each(document && document.getElementsByTagName('script'), loadScript);
        }
        function load(script) {
            return script ? loadScript(script) : loadAll();
        }
        if (window) {
            if (document.readyState === 'complete') setTimeout(loadAll);
            else DomEvent.add(window, {
                load: loadAll
            });
        }
        return {
            compile: compile,
            execute: execute,
            load: load,
            parse: parse,
            calculateBinary: __$__,
            calculateUnary: $__
        };
    }).call(this);
    var paper = new (PaperScope.inject(Base.exports, {
        Base: Base,
        Numerical: Numerical,
        Key: Key,
        DomEvent: DomEvent,
        DomElement: DomElement,
        document: document,
        window: window,
        Symbol: SymbolDefinition,
        PlacedSymbol: SymbolItem
    }))();
    if (paper.agent.node) require("f9f4e5c10f0cbdd7")(paper);
    if (typeof define === 'function' && define.amd) define('paper', paper);
    else if (module) module.exports = paper;
    return paper;
}).call(this, typeof self === 'object' ? self : null);

},{"10b6d6e628bbae73":"jhUEF","11295205e93cee06":"h2wbx","f9f4e5c10f0cbdd7":"jhUEF"}],"jhUEF":[function(require,module,exports,__globalThis) {
"use strict";

},{}],"h2wbx":[function(require,module,exports,__globalThis) {
// This file was generated. Do not modify manually!
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Node", ()=>Node);
parcelHelpers.export(exports, "Parser", ()=>Parser);
parcelHelpers.export(exports, "Position", ()=>Position);
parcelHelpers.export(exports, "SourceLocation", ()=>SourceLocation);
parcelHelpers.export(exports, "TokContext", ()=>TokContext);
parcelHelpers.export(exports, "Token", ()=>Token);
parcelHelpers.export(exports, "TokenType", ()=>TokenType);
parcelHelpers.export(exports, "defaultOptions", ()=>defaultOptions);
parcelHelpers.export(exports, "getLineInfo", ()=>getLineInfo);
parcelHelpers.export(exports, "isIdentifierChar", ()=>isIdentifierChar);
parcelHelpers.export(exports, "isIdentifierStart", ()=>isIdentifierStart);
parcelHelpers.export(exports, "isNewLine", ()=>isNewLine);
parcelHelpers.export(exports, "keywordTypes", ()=>keywords);
parcelHelpers.export(exports, "lineBreak", ()=>lineBreak);
parcelHelpers.export(exports, "lineBreakG", ()=>lineBreakG);
parcelHelpers.export(exports, "nonASCIIwhitespace", ()=>nonASCIIwhitespace);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "parseExpressionAt", ()=>parseExpressionAt);
parcelHelpers.export(exports, "tokContexts", ()=>types);
parcelHelpers.export(exports, "tokTypes", ()=>types$1);
parcelHelpers.export(exports, "tokenizer", ()=>tokenizer);
parcelHelpers.export(exports, "version", ()=>version);
var astralIdentifierCodes = [
    509,
    0,
    227,
    0,
    150,
    4,
    294,
    9,
    1368,
    2,
    2,
    1,
    6,
    3,
    41,
    2,
    5,
    0,
    166,
    1,
    574,
    3,
    9,
    9,
    7,
    9,
    32,
    4,
    318,
    1,
    80,
    3,
    71,
    10,
    50,
    3,
    123,
    2,
    54,
    14,
    32,
    10,
    3,
    1,
    11,
    3,
    46,
    10,
    8,
    0,
    46,
    9,
    7,
    2,
    37,
    13,
    2,
    9,
    6,
    1,
    45,
    0,
    13,
    2,
    49,
    13,
    9,
    3,
    2,
    11,
    83,
    11,
    7,
    0,
    3,
    0,
    158,
    11,
    6,
    9,
    7,
    3,
    56,
    1,
    2,
    6,
    3,
    1,
    3,
    2,
    10,
    0,
    11,
    1,
    3,
    6,
    4,
    4,
    68,
    8,
    2,
    0,
    3,
    0,
    2,
    3,
    2,
    4,
    2,
    0,
    15,
    1,
    83,
    17,
    10,
    9,
    5,
    0,
    82,
    19,
    13,
    9,
    214,
    6,
    3,
    8,
    28,
    1,
    83,
    16,
    16,
    9,
    82,
    12,
    9,
    9,
    7,
    19,
    58,
    14,
    5,
    9,
    243,
    14,
    166,
    9,
    71,
    5,
    2,
    1,
    3,
    3,
    2,
    0,
    2,
    1,
    13,
    9,
    120,
    6,
    3,
    6,
    4,
    0,
    29,
    9,
    41,
    6,
    2,
    3,
    9,
    0,
    10,
    10,
    47,
    15,
    343,
    9,
    54,
    7,
    2,
    7,
    17,
    9,
    57,
    21,
    2,
    13,
    123,
    5,
    4,
    0,
    2,
    1,
    2,
    6,
    2,
    0,
    9,
    9,
    49,
    4,
    2,
    1,
    2,
    4,
    9,
    9,
    330,
    3,
    10,
    1,
    2,
    0,
    49,
    6,
    4,
    4,
    14,
    10,
    5350,
    0,
    7,
    14,
    11465,
    27,
    2343,
    9,
    87,
    9,
    39,
    4,
    60,
    6,
    26,
    9,
    535,
    9,
    470,
    0,
    2,
    54,
    8,
    3,
    82,
    0,
    12,
    1,
    19628,
    1,
    4178,
    9,
    519,
    45,
    3,
    22,
    543,
    4,
    4,
    5,
    9,
    7,
    3,
    6,
    31,
    3,
    149,
    2,
    1418,
    49,
    513,
    54,
    5,
    49,
    9,
    0,
    15,
    0,
    23,
    4,
    2,
    14,
    1361,
    6,
    2,
    16,
    3,
    6,
    2,
    1,
    2,
    4,
    101,
    0,
    161,
    6,
    10,
    9,
    357,
    0,
    62,
    13,
    499,
    13,
    245,
    1,
    2,
    9,
    726,
    6,
    110,
    6,
    6,
    9,
    4759,
    9,
    787719,
    239
];
// This file was generated. Do not modify manually!
var astralIdentifierStartCodes = [
    0,
    11,
    2,
    25,
    2,
    18,
    2,
    1,
    2,
    14,
    3,
    13,
    35,
    122,
    70,
    52,
    268,
    28,
    4,
    48,
    48,
    31,
    14,
    29,
    6,
    37,
    11,
    29,
    3,
    35,
    5,
    7,
    2,
    4,
    43,
    157,
    19,
    35,
    5,
    35,
    5,
    39,
    9,
    51,
    13,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    2,
    10,
    2,
    14,
    2,
    6,
    2,
    1,
    4,
    51,
    13,
    310,
    10,
    21,
    11,
    7,
    25,
    5,
    2,
    41,
    2,
    8,
    70,
    5,
    3,
    0,
    2,
    43,
    2,
    1,
    4,
    0,
    3,
    22,
    11,
    22,
    10,
    30,
    66,
    18,
    2,
    1,
    11,
    21,
    11,
    25,
    71,
    55,
    7,
    1,
    65,
    0,
    16,
    3,
    2,
    2,
    2,
    28,
    43,
    28,
    4,
    28,
    36,
    7,
    2,
    27,
    28,
    53,
    11,
    21,
    11,
    18,
    14,
    17,
    111,
    72,
    56,
    50,
    14,
    50,
    14,
    35,
    39,
    27,
    10,
    22,
    251,
    41,
    7,
    1,
    17,
    2,
    60,
    28,
    11,
    0,
    9,
    21,
    43,
    17,
    47,
    20,
    28,
    22,
    13,
    52,
    58,
    1,
    3,
    0,
    14,
    44,
    33,
    24,
    27,
    35,
    30,
    0,
    3,
    0,
    9,
    34,
    4,
    0,
    13,
    47,
    15,
    3,
    22,
    0,
    2,
    0,
    36,
    17,
    2,
    24,
    20,
    1,
    64,
    6,
    2,
    0,
    2,
    3,
    2,
    14,
    2,
    9,
    8,
    46,
    39,
    7,
    3,
    1,
    3,
    21,
    2,
    6,
    2,
    1,
    2,
    4,
    4,
    0,
    19,
    0,
    13,
    4,
    31,
    9,
    2,
    0,
    3,
    0,
    2,
    37,
    2,
    0,
    26,
    0,
    2,
    0,
    45,
    52,
    19,
    3,
    21,
    2,
    31,
    47,
    21,
    1,
    2,
    0,
    185,
    46,
    42,
    3,
    37,
    47,
    21,
    0,
    60,
    42,
    14,
    0,
    72,
    26,
    38,
    6,
    186,
    43,
    117,
    63,
    32,
    7,
    3,
    0,
    3,
    7,
    2,
    1,
    2,
    23,
    16,
    0,
    2,
    0,
    95,
    7,
    3,
    38,
    17,
    0,
    2,
    0,
    29,
    0,
    11,
    39,
    8,
    0,
    22,
    0,
    12,
    45,
    20,
    0,
    19,
    72,
    200,
    32,
    32,
    8,
    2,
    36,
    18,
    0,
    50,
    29,
    113,
    6,
    2,
    1,
    2,
    37,
    22,
    0,
    26,
    5,
    2,
    1,
    2,
    31,
    15,
    0,
    328,
    18,
    16,
    0,
    2,
    12,
    2,
    33,
    125,
    0,
    80,
    921,
    103,
    110,
    18,
    195,
    2637,
    96,
    16,
    1071,
    18,
    5,
    26,
    3994,
    6,
    582,
    6842,
    29,
    1763,
    568,
    8,
    30,
    18,
    78,
    18,
    29,
    19,
    47,
    17,
    3,
    32,
    20,
    6,
    18,
    433,
    44,
    212,
    63,
    129,
    74,
    6,
    0,
    67,
    12,
    65,
    1,
    2,
    0,
    29,
    6135,
    9,
    1237,
    42,
    9,
    8936,
    3,
    2,
    6,
    2,
    1,
    2,
    290,
    16,
    0,
    30,
    2,
    3,
    0,
    15,
    3,
    9,
    395,
    2309,
    106,
    6,
    12,
    4,
    8,
    8,
    9,
    5991,
    84,
    2,
    70,
    2,
    1,
    3,
    0,
    3,
    1,
    3,
    3,
    2,
    11,
    2,
    0,
    2,
    6,
    2,
    64,
    2,
    3,
    3,
    7,
    2,
    6,
    2,
    27,
    2,
    3,
    2,
    4,
    2,
    0,
    4,
    6,
    2,
    339,
    3,
    24,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    30,
    2,
    24,
    2,
    7,
    1845,
    30,
    7,
    5,
    262,
    61,
    147,
    44,
    11,
    6,
    17,
    0,
    322,
    29,
    19,
    43,
    485,
    27,
    229,
    29,
    3,
    0,
    496,
    6,
    2,
    3,
    2,
    1,
    2,
    14,
    2,
    196,
    60,
    67,
    8,
    0,
    1205,
    3,
    2,
    26,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    9,
    2,
    3,
    2,
    0,
    2,
    0,
    7,
    0,
    5,
    0,
    2,
    0,
    2,
    0,
    2,
    2,
    2,
    1,
    2,
    0,
    3,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    0,
    2,
    1,
    2,
    0,
    3,
    3,
    2,
    6,
    2,
    3,
    2,
    3,
    2,
    0,
    2,
    9,
    2,
    16,
    6,
    2,
    2,
    4,
    2,
    16,
    4421,
    42719,
    33,
    4153,
    7,
    221,
    3,
    5761,
    15,
    7472,
    16,
    621,
    2467,
    541,
    1507,
    4938,
    6,
    4191
];
// This file was generated. Do not modify manually!
var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u07fd\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u0897-\u089f\u08ca-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u09fe\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0afa-\u0aff\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b55-\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c04\u0c3c\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0cf3\u0d00-\u0d03\u0d3b\u0d3c\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d81-\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0ebc\u0ec8-\u0ece\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u180f-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1abf-\u1ace\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf4\u1cf7-\u1cf9\u1dc0-\u1dff\u200c\u200d\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\u30fb\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua82c\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua8ff-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f\uff65";
// This file was generated. Do not modify manually!
var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0560-\u0588\u05d0-\u05ea\u05ef-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u0860-\u086a\u0870-\u0887\u0889-\u088e\u08a0-\u08c9\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u09fc\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c5d\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cdd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d04-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e86-\u0e8a\u0e8c-\u0ea3\u0ea5\u0ea7-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u1711\u171f-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1878\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4c\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c8a\u1c90-\u1cba\u1cbd-\u1cbf\u1ce9-\u1cec\u1cee-\u1cf3\u1cf5\u1cf6\u1cfa\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312f\u3131-\u318e\u31a0-\u31bf\u31f0-\u31ff\u3400-\u4dbf\u4e00-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7cd\ua7d0\ua7d1\ua7d3\ua7d5-\ua7dc\ua7f2-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua8fe\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab69\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
// These are a run-length and offset encoded representation of the
// >0xffff code points that are a valid part of identifiers. The
// offset starts at 0x10000, and each pair of numbers represents an
// offset to the next range, and then a size of the range.
// Reserved word lists for various dialects of the language
var reservedWords = {
    3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
    5: "class enum extends super const export import",
    6: "enum",
    strict: "implements interface let package private protected public static yield",
    strictBind: "eval arguments"
};
// And the keywords
var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var keywords$1 = {
    5: ecma5AndLessKeywords,
    "5module": ecma5AndLessKeywords + " export import",
    6: ecma5AndLessKeywords + " const class extends export import super"
};
var keywordRelationalOperator = /^in(stanceof)?$/;
// ## Character categories
var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
// This has a complexity linear to the value of the code. The
// assumption is that looking up astral identifier characters is
// rare.
function isInAstralSet(code, set) {
    var pos = 0x10000;
    for(var i = 0; i < set.length; i += 2){
        pos += set[i];
        if (pos > code) return false;
        pos += set[i + 1];
        if (pos >= code) return true;
    }
    return false;
}
// Test whether a given character code starts an identifier.
function isIdentifierStart(code, astral) {
    if (code < 65) return code === 36;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123) return true;
    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
    if (astral === false) return false;
    return isInAstralSet(code, astralIdentifierStartCodes);
}
// Test whether a given character is part of an identifier.
function isIdentifierChar(code, astral) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code < 91) return true;
    if (code < 97) return code === 95;
    if (code < 123) return true;
    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
    if (astral === false) return false;
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
// ## Token types
// The assignment of fine-grained, information-carrying type objects
// allows the tokenizer to store the information it has about a
// token in a way that is very cheap for the parser to look up.
// All token type variables start with an underscore, to make them
// easy to recognize.
// The `beforeExpr` property is used to disambiguate between regular
// expressions and divisions. It is set on all token types that can
// be followed by an expression (thus, a slash after them would be a
// regular expression).
//
// The `startsExpr` property is used to check if the token ends a
// `yield` expression. It is set on all token types that either can
// directly start an expression (like a quotation mark) or can
// continue an expression (like the body of a string).
//
// `isLoop` marks a keyword as starting a loop, which is important
// to know when parsing a label, in order to allow or disallow
// continue jumps to that label.
var TokenType = function TokenType(label, conf) {
    if (conf === void 0) conf = {};
    this.label = label;
    this.keyword = conf.keyword;
    this.beforeExpr = !!conf.beforeExpr;
    this.startsExpr = !!conf.startsExpr;
    this.isLoop = !!conf.isLoop;
    this.isAssign = !!conf.isAssign;
    this.prefix = !!conf.prefix;
    this.postfix = !!conf.postfix;
    this.binop = conf.binop || null;
    this.updateContext = null;
};
function binop(name, prec) {
    return new TokenType(name, {
        beforeExpr: true,
        binop: prec
    });
}
var beforeExpr = {
    beforeExpr: true
}, startsExpr = {
    startsExpr: true
};
// Map keyword names to token types.
var keywords = {};
// Succinct definitions of keyword token types
function kw(name, options) {
    if (options === void 0) options = {};
    options.keyword = name;
    return keywords[name] = new TokenType(name, options);
}
var types$1 = {
    num: new TokenType("num", startsExpr),
    regexp: new TokenType("regexp", startsExpr),
    string: new TokenType("string", startsExpr),
    name: new TokenType("name", startsExpr),
    privateId: new TokenType("privateId", startsExpr),
    eof: new TokenType("eof"),
    // Punctuation token types.
    bracketL: new TokenType("[", {
        beforeExpr: true,
        startsExpr: true
    }),
    bracketR: new TokenType("]"),
    braceL: new TokenType("{", {
        beforeExpr: true,
        startsExpr: true
    }),
    braceR: new TokenType("}"),
    parenL: new TokenType("(", {
        beforeExpr: true,
        startsExpr: true
    }),
    parenR: new TokenType(")"),
    comma: new TokenType(",", beforeExpr),
    semi: new TokenType(";", beforeExpr),
    colon: new TokenType(":", beforeExpr),
    dot: new TokenType("."),
    question: new TokenType("?", beforeExpr),
    questionDot: new TokenType("?."),
    arrow: new TokenType("=>", beforeExpr),
    template: new TokenType("template"),
    invalidTemplate: new TokenType("invalidTemplate"),
    ellipsis: new TokenType("...", beforeExpr),
    backQuote: new TokenType("`", startsExpr),
    dollarBraceL: new TokenType("${", {
        beforeExpr: true,
        startsExpr: true
    }),
    // Operators. These carry several kinds of properties to help the
    // parser use them properly (the presence of these properties is
    // what categorizes them as operators).
    //
    // `binop`, when present, specifies that this operator is a binary
    // operator, and will refer to its precedence.
    //
    // `prefix` and `postfix` mark the operator as a prefix or postfix
    // unary operator.
    //
    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
    // binary operators with a very low precedence, that should result
    // in AssignmentExpression nodes.
    eq: new TokenType("=", {
        beforeExpr: true,
        isAssign: true
    }),
    assign: new TokenType("_=", {
        beforeExpr: true,
        isAssign: true
    }),
    incDec: new TokenType("++/--", {
        prefix: true,
        postfix: true,
        startsExpr: true
    }),
    prefix: new TokenType("!/~", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    logicalOR: binop("||", 1),
    logicalAND: binop("&&", 2),
    bitwiseOR: binop("|", 3),
    bitwiseXOR: binop("^", 4),
    bitwiseAND: binop("&", 5),
    equality: binop("==/!=/===/!==", 6),
    relational: binop("</>/<=/>=", 7),
    bitShift: binop("<</>>/>>>", 8),
    plusMin: new TokenType("+/-", {
        beforeExpr: true,
        binop: 9,
        prefix: true,
        startsExpr: true
    }),
    modulo: binop("%", 10),
    star: binop("*", 10),
    slash: binop("/", 10),
    starstar: new TokenType("**", {
        beforeExpr: true
    }),
    coalesce: binop("??", 1),
    // Keyword token types.
    _break: kw("break"),
    _case: kw("case", beforeExpr),
    _catch: kw("catch"),
    _continue: kw("continue"),
    _debugger: kw("debugger"),
    _default: kw("default", beforeExpr),
    _do: kw("do", {
        isLoop: true,
        beforeExpr: true
    }),
    _else: kw("else", beforeExpr),
    _finally: kw("finally"),
    _for: kw("for", {
        isLoop: true
    }),
    _function: kw("function", startsExpr),
    _if: kw("if"),
    _return: kw("return", beforeExpr),
    _switch: kw("switch"),
    _throw: kw("throw", beforeExpr),
    _try: kw("try"),
    _var: kw("var"),
    _const: kw("const"),
    _while: kw("while", {
        isLoop: true
    }),
    _with: kw("with"),
    _new: kw("new", {
        beforeExpr: true,
        startsExpr: true
    }),
    _this: kw("this", startsExpr),
    _super: kw("super", startsExpr),
    _class: kw("class", startsExpr),
    _extends: kw("extends", beforeExpr),
    _export: kw("export"),
    _import: kw("import", startsExpr),
    _null: kw("null", startsExpr),
    _true: kw("true", startsExpr),
    _false: kw("false", startsExpr),
    _in: kw("in", {
        beforeExpr: true,
        binop: 7
    }),
    _instanceof: kw("instanceof", {
        beforeExpr: true,
        binop: 7
    }),
    _typeof: kw("typeof", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _void: kw("void", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    }),
    _delete: kw("delete", {
        beforeExpr: true,
        prefix: true,
        startsExpr: true
    })
};
// Matches a whole line break (where CRLF is considered a single
// line break). Used to count lines.
var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
}
function nextLineBreak(code, from, end) {
    if (end === void 0) end = code.length;
    for(var i = from; i < end; i++){
        var next = code.charCodeAt(i);
        if (isNewLine(next)) return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;
    }
    return -1;
}
var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString;
var hasOwn = Object.hasOwn || function(obj, propName) {
    return hasOwnProperty.call(obj, propName);
};
var isArray = Array.isArray || function(obj) {
    return toString.call(obj) === "[object Array]";
};
var regexpCache = Object.create(null);
function wordsRegexp(words) {
    return regexpCache[words] || (regexpCache[words] = new RegExp("^(?:" + words.replace(/ /g, "|") + ")$"));
}
function codePointToString(code) {
    // UTF-16 Decoding
    if (code <= 0xFFFF) return String.fromCharCode(code);
    code -= 0x10000;
    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
}
var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
// These are used when `options.locations` is on, for the
// `startLoc` and `endLoc` properties.
var Position = function Position(line, col) {
    this.line = line;
    this.column = col;
};
Position.prototype.offset = function offset(n) {
    return new Position(this.line, this.column + n);
};
var SourceLocation = function SourceLocation(p, start, end) {
    this.start = start;
    this.end = end;
    if (p.sourceFile !== null) this.source = p.sourceFile;
};
// The `getLineInfo` function is mostly useful when the
// `locations` option is off (for performance reasons) and you
// want to find the line/column position for a given character
// offset. `input` should be the code string that the offset refers
// into.
function getLineInfo(input, offset) {
    for(var line = 1, cur = 0;;){
        var nextBreak = nextLineBreak(input, cur, offset);
        if (nextBreak < 0) return new Position(line, offset - cur);
        ++line;
        cur = nextBreak;
    }
}
// A second argument must be given to configure the parser process.
// These options are recognized (only `ecmaVersion` is required):
var defaultOptions = {
    // `ecmaVersion` indicates the ECMAScript version to parse. Must be
    // either 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10
    // (2019), 11 (2020), 12 (2021), 13 (2022), 14 (2023), or `"latest"`
    // (the latest version the library supports). This influences
    // support for strict mode, the set of reserved words, and support
    // for new syntax features.
    ecmaVersion: null,
    // `sourceType` indicates the mode the code should be parsed in.
    // Can be either `"script"` or `"module"`. This influences global
    // strict mode and parsing of `import` and `export` declarations.
    sourceType: "script",
    // `onInsertedSemicolon` can be a callback that will be called when
    // a semicolon is automatically inserted. It will be passed the
    // position of the inserted semicolon as an offset, and if
    // `locations` is enabled, it is given the location as a `{line,
    // column}` object as second argument.
    onInsertedSemicolon: null,
    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
    // trailing commas.
    onTrailingComma: null,
    // By default, reserved words are only enforced if ecmaVersion >= 5.
    // Set `allowReserved` to a boolean value to explicitly turn this on
    // an off. When this option has the value "never", reserved words
    // and keywords can also not be used as property names.
    allowReserved: null,
    // When enabled, a return at the top level is not considered an
    // error.
    allowReturnOutsideFunction: false,
    // When enabled, import/export statements are not constrained to
    // appearing at the top of the program, and an import.meta expression
    // in a script isn't considered an error.
    allowImportExportEverywhere: false,
    // By default, await identifiers are allowed to appear at the top-level scope only if ecmaVersion >= 2022.
    // When enabled, await identifiers are allowed to appear at the top-level scope,
    // but they are still not allowed in non-async functions.
    allowAwaitOutsideFunction: null,
    // When enabled, super identifiers are not constrained to
    // appearing in methods and do not raise an error when they appear elsewhere.
    allowSuperOutsideMethod: null,
    // When enabled, hashbang directive in the beginning of file is
    // allowed and treated as a line comment. Enabled by default when
    // `ecmaVersion` >= 2023.
    allowHashBang: false,
    // By default, the parser will verify that private properties are
    // only used in places where they are valid and have been declared.
    // Set this to false to turn such checks off.
    checkPrivateFields: true,
    // When `locations` is on, `loc` properties holding objects with
    // `start` and `end` properties in `{line, column}` form (with
    // line being 1-based and column 0-based) will be attached to the
    // nodes.
    locations: false,
    // A function can be passed as `onToken` option, which will
    // cause Acorn to call that function with object in the same
    // format as tokens returned from `tokenizer().getToken()`. Note
    // that you are not allowed to call the parser from the
    // callback—that will corrupt its internal state.
    onToken: null,
    // A function can be passed as `onComment` option, which will
    // cause Acorn to call that function with `(block, text, start,
    // end)` parameters whenever a comment is skipped. `block` is a
    // boolean indicating whether this is a block (`/* */`) comment,
    // `text` is the content of the comment, and `start` and `end` are
    // character offsets that denote the start and end of the comment.
    // When the `locations` option is on, two more parameters are
    // passed, the full `{line, column}` locations of the start and
    // end of the comments. Note that you are not allowed to call the
    // parser from the callback—that will corrupt its internal state.
    // When this option has an array as value, objects representing the
    // comments are pushed to it.
    onComment: null,
    // Nodes have their start and end characters offsets recorded in
    // `start` and `end` properties (directly on the node, rather than
    // the `loc` object, which holds line/column data. To also add a
    // [semi-standardized][range] `range` property holding a `[start,
    // end]` array with the same numbers, set the `ranges` option to
    // `true`.
    //
    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
    ranges: false,
    // It is possible to parse multiple files into a single AST by
    // passing the tree produced by parsing the first file as
    // `program` option in subsequent parses. This will add the
    // toplevel forms of the parsed file to the `Program` (top) node
    // of an existing parse tree.
    program: null,
    // When `locations` is on, you can pass this to record the source
    // file in every node's `loc` object.
    sourceFile: null,
    // This value, if given, is stored in every node, whether
    // `locations` is on or off.
    directSourceFile: null,
    // When enabled, parenthesized expressions are represented by
    // (non-standard) ParenthesizedExpression nodes
    preserveParens: false
};
// Interpret and default an options object
var warnedAboutEcmaVersion = false;
function getOptions(opts) {
    var options = {};
    for(var opt in defaultOptions)options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
    if (options.ecmaVersion === "latest") options.ecmaVersion = 1e8;
    else if (options.ecmaVersion == null) {
        if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
            warnedAboutEcmaVersion = true;
            console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
        }
        options.ecmaVersion = 11;
    } else if (options.ecmaVersion >= 2015) options.ecmaVersion -= 2009;
    if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;
    if (!opts || opts.allowHashBang == null) options.allowHashBang = options.ecmaVersion >= 14;
    if (isArray(options.onToken)) {
        var tokens = options.onToken;
        options.onToken = function(token) {
            return tokens.push(token);
        };
    }
    if (isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);
    return options;
}
function pushComment(options, array) {
    return function(block, text, start, end, startLoc, endLoc) {
        var comment = {
            type: block ? "Block" : "Line",
            value: text,
            start: start,
            end: end
        };
        if (options.locations) comment.loc = new SourceLocation(this, startLoc, endLoc);
        if (options.ranges) comment.range = [
            start,
            end
        ];
        array.push(comment);
    };
}
// Each scope gets a bitset that may contain these flags
var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128, SCOPE_CLASS_STATIC_BLOCK = 256, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
function functionFlags(async, generator) {
    return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
}
// Used in checkLVal* and declareName to determine the type of a binding
var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5; // Special case for function names as bound inside the function
var Parser = function Parser(options, input, startPos) {
    this.options = options = getOptions(options);
    this.sourceFile = options.sourceFile;
    this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
    var reserved = "";
    if (options.allowReserved !== true) {
        reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
        if (options.sourceType === "module") reserved += " await";
    }
    this.reservedWords = wordsRegexp(reserved);
    var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
    this.reservedWordsStrict = wordsRegexp(reservedStrict);
    this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
    this.input = String(input);
    // Used to signal to callers of `readWord1` whether the word
    // contained any escape sequences. This is needed because words with
    // escape sequences must not be interpreted as keywords.
    this.containsEsc = false;
    // Set up token state
    // The current position of the tokenizer in the input.
    if (startPos) {
        this.pos = startPos;
        this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
        this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
    } else {
        this.pos = this.lineStart = 0;
        this.curLine = 1;
    }
    // Properties of the current token:
    // Its type
    this.type = types$1.eof;
    // For tokens that include more information than their type, the value
    this.value = null;
    // Its start and end offset
    this.start = this.end = this.pos;
    // And, if locations are used, the {line, column} object
    // corresponding to those offsets
    this.startLoc = this.endLoc = this.curPosition();
    // Position information for the previous token
    this.lastTokEndLoc = this.lastTokStartLoc = null;
    this.lastTokStart = this.lastTokEnd = this.pos;
    // The context stack is used to superficially track syntactic
    // context to predict whether a regular expression is allowed in a
    // given position.
    this.context = this.initialContext();
    this.exprAllowed = true;
    // Figure out if it's a module code.
    this.inModule = options.sourceType === "module";
    this.strict = this.inModule || this.strictDirective(this.pos);
    // Used to signify the start of a potential arrow function
    this.potentialArrowAt = -1;
    this.potentialArrowInForAwait = false;
    // Positions to delayed-check that yield/await does not exist in default parameters.
    this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
    // Labels in scope.
    this.labels = [];
    // Thus-far undefined exports.
    this.undefinedExports = Object.create(null);
    // If enabled, skip leading hashbang line.
    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") this.skipLineComment(2);
    // Scope tracking for duplicate variable names (see scope.js)
    this.scopeStack = [];
    this.enterScope(SCOPE_TOP);
    // For RegExp validation
    this.regexpState = null;
    // The stack of private names.
    // Each element has two properties: 'declared' and 'used'.
    // When it exited from the outermost class definition, all used private names must be declared.
    this.privateNameStack = [];
};
var prototypeAccessors = {
    inFunction: {
        configurable: true
    },
    inGenerator: {
        configurable: true
    },
    inAsync: {
        configurable: true
    },
    canAwait: {
        configurable: true
    },
    allowSuper: {
        configurable: true
    },
    allowDirectSuper: {
        configurable: true
    },
    treatFunctionsAsVar: {
        configurable: true
    },
    allowNewDotTarget: {
        configurable: true
    },
    inClassStaticBlock: {
        configurable: true
    }
};
Parser.prototype.parse = function parse() {
    var node = this.options.program || this.startNode();
    this.nextToken();
    return this.parseTopLevel(node);
};
prototypeAccessors.inFunction.get = function() {
    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
};
prototypeAccessors.inGenerator.get = function() {
    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.inAsync.get = function() {
    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.canAwait.get = function() {
    for(var i = this.scopeStack.length - 1; i >= 0; i--){
        var scope = this.scopeStack[i];
        if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) return false;
        if (scope.flags & SCOPE_FUNCTION) return (scope.flags & SCOPE_ASYNC) > 0;
    }
    return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
};
prototypeAccessors.allowSuper.get = function() {
    var ref = this.currentThisScope();
    var flags = ref.flags;
    var inClassFieldInit = ref.inClassFieldInit;
    return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
};
prototypeAccessors.allowDirectSuper.get = function() {
    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
};
prototypeAccessors.treatFunctionsAsVar.get = function() {
    return this.treatFunctionsAsVarInScope(this.currentScope());
};
prototypeAccessors.allowNewDotTarget.get = function() {
    var ref = this.currentThisScope();
    var flags = ref.flags;
    var inClassFieldInit = ref.inClassFieldInit;
    return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
};
prototypeAccessors.inClassStaticBlock.get = function() {
    return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
};
Parser.extend = function extend() {
    var plugins = [], len = arguments.length;
    while(len--)plugins[len] = arguments[len];
    var cls = this;
    for(var i = 0; i < plugins.length; i++)cls = plugins[i](cls);
    return cls;
};
Parser.parse = function parse(input, options) {
    return new this(options, input).parse();
};
Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
    var parser = new this(options, input, pos);
    parser.nextToken();
    return parser.parseExpression();
};
Parser.tokenizer = function tokenizer(input, options) {
    return new this(options, input);
};
Object.defineProperties(Parser.prototype, prototypeAccessors);
var pp$9 = Parser.prototype;
// ## Parser utilities
var literal = /^(?:'((?:\\[^]|[^'\\])*?)'|"((?:\\[^]|[^"\\])*?)")/;
pp$9.strictDirective = function(start) {
    if (this.options.ecmaVersion < 5) return false;
    for(;;){
        // Try to find string literal.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        var match = literal.exec(this.input.slice(start));
        if (!match) return false;
        if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
        }
        start += match[0].length;
        // Skip semicolon, if any.
        skipWhiteSpace.lastIndex = start;
        start += skipWhiteSpace.exec(this.input)[0].length;
        if (this.input[start] === ";") start++;
    }
};
// Predicate that tests whether the next token is of the given
// type, and if yes, consumes it as a side effect.
pp$9.eat = function(type) {
    if (this.type === type) {
        this.next();
        return true;
    } else return false;
};
// Tests whether parsed token is a contextual keyword.
pp$9.isContextual = function(name) {
    return this.type === types$1.name && this.value === name && !this.containsEsc;
};
// Consumes contextual keyword if possible.
pp$9.eatContextual = function(name) {
    if (!this.isContextual(name)) return false;
    this.next();
    return true;
};
// Asserts that following token is given contextual keyword.
pp$9.expectContextual = function(name) {
    if (!this.eatContextual(name)) this.unexpected();
};
// Test whether a semicolon can be inserted at the current position.
pp$9.canInsertSemicolon = function() {
    return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
pp$9.insertSemicolon = function() {
    if (this.canInsertSemicolon()) {
        if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
        return true;
    }
};
// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.
pp$9.semicolon = function() {
    if (!this.eat(types$1.semi) && !this.insertSemicolon()) this.unexpected();
};
pp$9.afterTrailingComma = function(tokType, notNext) {
    if (this.type === tokType) {
        if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
        if (!notNext) this.next();
        return true;
    }
};
// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error.
pp$9.expect = function(type) {
    this.eat(type) || this.unexpected();
};
// Raise an unexpected token error.
pp$9.unexpected = function(pos) {
    this.raise(pos != null ? pos : this.start, "Unexpected token");
};
var DestructuringErrors = function DestructuringErrors() {
    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
};
pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
    if (!refDestructuringErrors) return;
    if (refDestructuringErrors.trailingComma > -1) this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
    var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
    if (parens > -1) this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
};
pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
    if (!refDestructuringErrors) return false;
    var shorthandAssign = refDestructuringErrors.shorthandAssign;
    var doubleProto = refDestructuringErrors.doubleProto;
    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;
    if (shorthandAssign >= 0) this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
    if (doubleProto >= 0) this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
};
pp$9.checkYieldAwaitInDefaultParams = function() {
    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) this.raise(this.yieldPos, "Yield expression cannot be a default value");
    if (this.awaitPos) this.raise(this.awaitPos, "Await expression cannot be a default value");
};
pp$9.isSimpleAssignTarget = function(expr) {
    if (expr.type === "ParenthesizedExpression") return this.isSimpleAssignTarget(expr.expression);
    return expr.type === "Identifier" || expr.type === "MemberExpression";
};
var pp$8 = Parser.prototype;
// ### Statement parsing
// Parse a program. Initializes the parser, reads any number of
// statements, and wraps them in a Program node.  Optionally takes a
// `program` argument.  If present, the statements will be appended
// to its body instead of creating a new node.
pp$8.parseTopLevel = function(node) {
    var exports = Object.create(null);
    if (!node.body) node.body = [];
    while(this.type !== types$1.eof){
        var stmt = this.parseStatement(null, true, exports);
        node.body.push(stmt);
    }
    if (this.inModule) for(var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1){
        var name = list[i];
        this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
    }
    this.adaptDirectivePrologue(node.body);
    this.next();
    node.sourceType = this.options.sourceType;
    return this.finishNode(node, "Program");
};
var loopLabel = {
    kind: "loop"
}, switchLabel = {
    kind: "switch"
};
pp$8.isLet = function(context) {
    if (this.options.ecmaVersion < 6 || !this.isContextual("let")) return false;
    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
    // For ambiguous cases, determine if a LexicalDeclaration (or only a
    // Statement) is allowed here. If context is not empty then only a Statement
    // is allowed. However, `let [` is an explicit negative lookahead for
    // ExpressionStatement, so special-case it first.
    if (nextCh === 91 || nextCh === 92) return true;
     // '[', '\'
    if (context) return false;
    if (nextCh === 123 || nextCh > 0xd7ff && nextCh < 0xdc00) return true;
     // '{', astral
    if (isIdentifierStart(nextCh, true)) {
        var pos = next + 1;
        while(isIdentifierChar(nextCh = this.input.charCodeAt(pos), true))++pos;
        if (nextCh === 92 || nextCh > 0xd7ff && nextCh < 0xdc00) return true;
        var ident = this.input.slice(next, pos);
        if (!keywordRelationalOperator.test(ident)) return true;
    }
    return false;
};
// check 'async [no LineTerminator here] function'
// - 'async /*foo*/ function' is OK.
// - 'async /*\n*/ function' is invalid.
pp$8.isAsyncFunction = function() {
    if (this.options.ecmaVersion < 8 || !this.isContextual("async")) return false;
    skipWhiteSpace.lastIndex = this.pos;
    var skip = skipWhiteSpace.exec(this.input);
    var next = this.pos + skip[0].length, after;
    return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 0xd7ff && after < 0xdc00));
};
// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.
pp$8.parseStatement = function(context, topLevel, exports) {
    var starttype = this.type, node = this.startNode(), kind;
    if (this.isLet(context)) {
        starttype = types$1._var;
        kind = "let";
    }
    // Most types of statements are recognized by the keyword they
    // start with. Many are trivial to parse, some require a bit of
    // complexity.
    switch(starttype){
        case types$1._break:
        case types$1._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
        case types$1._debugger:
            return this.parseDebuggerStatement(node);
        case types$1._do:
            return this.parseDoStatement(node);
        case types$1._for:
            return this.parseForStatement(node);
        case types$1._function:
            // Function as sole body of either an if statement or a labeled statement
            // works, but not when it is part of a labeled statement that is the sole
            // body of an if statement.
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) this.unexpected();
            return this.parseFunctionStatement(node, false, !context);
        case types$1._class:
            if (context) this.unexpected();
            return this.parseClass(node, true);
        case types$1._if:
            return this.parseIfStatement(node);
        case types$1._return:
            return this.parseReturnStatement(node);
        case types$1._switch:
            return this.parseSwitchStatement(node);
        case types$1._throw:
            return this.parseThrowStatement(node);
        case types$1._try:
            return this.parseTryStatement(node);
        case types$1._const:
        case types$1._var:
            kind = kind || this.value;
            if (context && kind !== "var") this.unexpected();
            return this.parseVarStatement(node, kind);
        case types$1._while:
            return this.parseWhileStatement(node);
        case types$1._with:
            return this.parseWithStatement(node);
        case types$1.braceL:
            return this.parseBlock(true, node);
        case types$1.semi:
            return this.parseEmptyStatement(node);
        case types$1._export:
        case types$1._import:
            if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input);
                var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (nextCh === 40 || nextCh === 46) return this.parseExpressionStatement(node, this.parseExpression());
            }
            if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) this.raise(this.start, "'import' and 'export' may only appear at the top level");
                if (!this.inModule) this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
            }
            return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports);
        // If the statement does not start with a statement keyword or a
        // brace, it's an ExpressionStatement or LabeledStatement. We
        // simply start parsing an expression, and afterwards, if the
        // next token is a colon and the expression was a simple
        // Identifier node, we switch to interpreting it as a label.
        default:
            if (this.isAsyncFunction()) {
                if (context) this.unexpected();
                this.next();
                return this.parseFunctionStatement(node, true, !context);
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) return this.parseLabeledStatement(node, maybeName, expr, context);
            else return this.parseExpressionStatement(node, expr);
    }
};
pp$8.parseBreakContinueStatement = function(node, keyword) {
    var isBreak = keyword === "break";
    this.next();
    if (this.eat(types$1.semi) || this.insertSemicolon()) node.label = null;
    else if (this.type !== types$1.name) this.unexpected();
    else {
        node.label = this.parseIdent();
        this.semicolon();
    }
    // Verify that there is an actual destination to break or
    // continue to.
    var i = 0;
    for(; i < this.labels.length; ++i){
        var lab = this.labels[i];
        if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
            if (node.label && isBreak) break;
        }
    }
    if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
};
pp$8.parseDebuggerStatement = function(node) {
    this.next();
    this.semicolon();
    return this.finishNode(node, "DebuggerStatement");
};
pp$8.parseDoStatement = function(node) {
    this.next();
    this.labels.push(loopLabel);
    node.body = this.parseStatement("do");
    this.labels.pop();
    this.expect(types$1._while);
    node.test = this.parseParenExpression();
    if (this.options.ecmaVersion >= 6) this.eat(types$1.semi);
    else this.semicolon();
    return this.finishNode(node, "DoWhileStatement");
};
// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.
pp$8.parseForStatement = function(node) {
    this.next();
    var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
    this.labels.push(loopLabel);
    this.enterScope(0);
    this.expect(types$1.parenL);
    if (this.type === types$1.semi) {
        if (awaitAt > -1) this.unexpected(awaitAt);
        return this.parseFor(node, null);
    }
    var isLet = this.isLet();
    if (this.type === types$1._var || this.type === types$1._const || isLet) {
        var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
        this.next();
        this.parseVar(init$1, true, kind);
        this.finishNode(init$1, "VariableDeclaration");
        if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
            if (this.options.ecmaVersion >= 9) {
                if (this.type === types$1._in) {
                    if (awaitAt > -1) this.unexpected(awaitAt);
                } else node.await = awaitAt > -1;
            }
            return this.parseForIn(node, init$1);
        }
        if (awaitAt > -1) this.unexpected(awaitAt);
        return this.parseFor(node, init$1);
    }
    var startsWithLet = this.isContextual("let"), isForOf = false;
    var containsEsc = this.containsEsc;
    var refDestructuringErrors = new DestructuringErrors;
    var initPos = this.start;
    var init = awaitAt > -1 ? this.parseExprSubscripts(refDestructuringErrors, "await") : this.parseExpression(true, refDestructuringErrors);
    if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
        if (awaitAt > -1) {
            if (this.type === types$1._in) this.unexpected(awaitAt);
            node.await = true;
        } else if (isForOf && this.options.ecmaVersion >= 8) {
            if (init.start === initPos && !containsEsc && init.type === "Identifier" && init.name === "async") this.unexpected();
            else if (this.options.ecmaVersion >= 9) node.await = false;
        }
        if (startsWithLet && isForOf) this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
        this.toAssignable(init, false, refDestructuringErrors);
        this.checkLValPattern(init);
        return this.parseForIn(node, init);
    } else this.checkExpressionErrors(refDestructuringErrors, true);
    if (awaitAt > -1) this.unexpected(awaitAt);
    return this.parseFor(node, init);
};
pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
    this.next();
    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
};
pp$8.parseIfStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    // allow function declarations in branches, but only in non-strict mode
    node.consequent = this.parseStatement("if");
    node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
    return this.finishNode(node, "IfStatement");
};
pp$8.parseReturnStatement = function(node) {
    if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, "'return' outside of function");
    this.next();
    // In `return` (and `break`/`continue`), the keywords with
    // optional arguments, we eagerly look for a semicolon or the
    // possibility to insert one.
    if (this.eat(types$1.semi) || this.insertSemicolon()) node.argument = null;
    else {
        node.argument = this.parseExpression();
        this.semicolon();
    }
    return this.finishNode(node, "ReturnStatement");
};
pp$8.parseSwitchStatement = function(node) {
    this.next();
    node.discriminant = this.parseParenExpression();
    node.cases = [];
    this.expect(types$1.braceL);
    this.labels.push(switchLabel);
    this.enterScope(0);
    // Statements under must be grouped (by label) in SwitchCase
    // nodes. `cur` is used to keep the node that we are currently
    // adding statements to.
    var cur;
    for(var sawDefault = false; this.type !== types$1.braceR;)if (this.type === types$1._case || this.type === types$1._default) {
        var isCase = this.type === types$1._case;
        if (cur) this.finishNode(cur, "SwitchCase");
        node.cases.push(cur = this.startNode());
        cur.consequent = [];
        this.next();
        if (isCase) cur.test = this.parseExpression();
        else {
            if (sawDefault) this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
            sawDefault = true;
            cur.test = null;
        }
        this.expect(types$1.colon);
    } else {
        if (!cur) this.unexpected();
        cur.consequent.push(this.parseStatement(null));
    }
    this.exitScope();
    if (cur) this.finishNode(cur, "SwitchCase");
    this.next(); // Closing brace
    this.labels.pop();
    return this.finishNode(node, "SwitchStatement");
};
pp$8.parseThrowStatement = function(node) {
    this.next();
    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, "Illegal newline after throw");
    node.argument = this.parseExpression();
    this.semicolon();
    return this.finishNode(node, "ThrowStatement");
};
// Reused empty array added for node fields that are always empty.
var empty$1 = [];
pp$8.parseCatchClauseParam = function() {
    var param = this.parseBindingAtom();
    var simple = param.type === "Identifier";
    this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
    this.checkLValPattern(param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
    this.expect(types$1.parenR);
    return param;
};
pp$8.parseTryStatement = function(node) {
    this.next();
    node.block = this.parseBlock();
    node.handler = null;
    if (this.type === types$1._catch) {
        var clause = this.startNode();
        this.next();
        if (this.eat(types$1.parenL)) clause.param = this.parseCatchClauseParam();
        else {
            if (this.options.ecmaVersion < 10) this.unexpected();
            clause.param = null;
            this.enterScope(0);
        }
        clause.body = this.parseBlock(false);
        this.exitScope();
        node.handler = this.finishNode(clause, "CatchClause");
    }
    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
    if (!node.handler && !node.finalizer) this.raise(node.start, "Missing catch or finally clause");
    return this.finishNode(node, "TryStatement");
};
pp$8.parseVarStatement = function(node, kind, allowMissingInitializer) {
    this.next();
    this.parseVar(node, false, kind, allowMissingInitializer);
    this.semicolon();
    return this.finishNode(node, "VariableDeclaration");
};
pp$8.parseWhileStatement = function(node) {
    this.next();
    node.test = this.parseParenExpression();
    this.labels.push(loopLabel);
    node.body = this.parseStatement("while");
    this.labels.pop();
    return this.finishNode(node, "WhileStatement");
};
pp$8.parseWithStatement = function(node) {
    if (this.strict) this.raise(this.start, "'with' in strict mode");
    this.next();
    node.object = this.parseParenExpression();
    node.body = this.parseStatement("with");
    return this.finishNode(node, "WithStatement");
};
pp$8.parseEmptyStatement = function(node) {
    this.next();
    return this.finishNode(node, "EmptyStatement");
};
pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
    for(var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1){
        var label = list[i$1];
        if (label.name === maybeName) this.raise(expr.start, "Label '" + maybeName + "' is already declared");
    }
    var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
    for(var i = this.labels.length - 1; i >= 0; i--){
        var label$1 = this.labels[i];
        if (label$1.statementStart === node.start) {
            // Update information about previous labels on this node
            label$1.statementStart = this.start;
            label$1.kind = kind;
        } else break;
    }
    this.labels.push({
        name: maybeName,
        kind: kind,
        statementStart: this.start
    });
    node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
    this.labels.pop();
    node.label = expr;
    return this.finishNode(node, "LabeledStatement");
};
pp$8.parseExpressionStatement = function(node, expr) {
    node.expression = expr;
    this.semicolon();
    return this.finishNode(node, "ExpressionStatement");
};
// Parse a semicolon-enclosed block of statements, handling `"use
// strict"` declarations when `allowStrict` is true (used for
// function bodies).
pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
    if (createNewLexicalScope === void 0) createNewLexicalScope = true;
    if (node === void 0) node = this.startNode();
    node.body = [];
    this.expect(types$1.braceL);
    if (createNewLexicalScope) this.enterScope(0);
    while(this.type !== types$1.braceR){
        var stmt = this.parseStatement(null);
        node.body.push(stmt);
    }
    if (exitStrict) this.strict = false;
    this.next();
    if (createNewLexicalScope) this.exitScope();
    return this.finishNode(node, "BlockStatement");
};
// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.
pp$8.parseFor = function(node, init) {
    node.init = init;
    this.expect(types$1.semi);
    node.test = this.type === types$1.semi ? null : this.parseExpression();
    this.expect(types$1.semi);
    node.update = this.type === types$1.parenR ? null : this.parseExpression();
    this.expect(types$1.parenR);
    node.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node, "ForStatement");
};
// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.
pp$8.parseForIn = function(node, init) {
    var isForIn = this.type === types$1._in;
    this.next();
    if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
    node.left = init;
    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
    this.expect(types$1.parenR);
    node.body = this.parseStatement("for");
    this.exitScope();
    this.labels.pop();
    return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
};
// Parse a list of variable declarations.
pp$8.parseVar = function(node, isFor, kind, allowMissingInitializer) {
    node.declarations = [];
    node.kind = kind;
    for(;;){
        var decl = this.startNode();
        this.parseVarId(decl, kind);
        if (this.eat(types$1.eq)) decl.init = this.parseMaybeAssign(isFor);
        else if (!allowMissingInitializer && kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) this.unexpected();
        else if (!allowMissingInitializer && decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
        else decl.init = null;
        node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(types$1.comma)) break;
    }
    return node;
};
pp$8.parseVarId = function(decl, kind) {
    decl.id = this.parseBindingAtom();
    this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
};
var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
// Parse a function declaration or literal (depending on the
// `statement & FUNC_STATEMENT`).
// Remove `allowExpressionBody` for 7.0.0, as it is only called with false
pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
    this.initFunction(node);
    if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
        if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) this.unexpected();
        node.generator = this.eat(types$1.star);
    }
    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;
    if (statement & FUNC_STATEMENT) {
        node.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
        if (node.id && !(statement & FUNC_HANGING_STATEMENT)) this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
    }
    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(node.async, node.generator));
    if (!(statement & FUNC_STATEMENT)) node.id = this.type === types$1.name ? this.parseIdent() : null;
    this.parseFunctionParams(node);
    this.parseFunctionBody(node, allowExpressionBody, false, forInit);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
};
pp$8.parseFunctionParams = function(node) {
    this.expect(types$1.parenL);
    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
};
// Parse a class declaration or literal (depending on the
// `isStatement` parameter).
pp$8.parseClass = function(node, isStatement) {
    this.next();
    // ecma-262 14.6 Class Definitions
    // A class definition is always strict mode code.
    var oldStrict = this.strict;
    this.strict = true;
    this.parseClassId(node, isStatement);
    this.parseClassSuper(node);
    var privateNameMap = this.enterClassBody();
    var classBody = this.startNode();
    var hadConstructor = false;
    classBody.body = [];
    this.expect(types$1.braceL);
    while(this.type !== types$1.braceR){
        var element = this.parseClassElement(node.superClass !== null);
        if (element) {
            classBody.body.push(element);
            if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) this.raiseRecoverable(element.start, "Duplicate constructor in the same class");
                hadConstructor = true;
            } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
        }
    }
    this.strict = oldStrict;
    this.next();
    node.body = this.finishNode(classBody, "ClassBody");
    this.exitClassBody();
    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
};
pp$8.parseClassElement = function(constructorAllowsSuper) {
    if (this.eat(types$1.semi)) return null;
    var ecmaVersion = this.options.ecmaVersion;
    var node = this.startNode();
    var keyName = "";
    var isGenerator = false;
    var isAsync = false;
    var kind = "method";
    var isStatic = false;
    if (this.eatContextual("static")) {
        // Parse static init block
        if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
            this.parseClassStaticBlock(node);
            return node;
        }
        if (this.isClassElementNameStart() || this.type === types$1.star) isStatic = true;
        else keyName = "static";
    }
    node.static = isStatic;
    if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
        if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) isAsync = true;
        else keyName = "async";
    }
    if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) isGenerator = true;
    if (!keyName && !isAsync && !isGenerator) {
        var lastValue = this.value;
        if (this.eatContextual("get") || this.eatContextual("set")) {
            if (this.isClassElementNameStart()) kind = lastValue;
            else keyName = lastValue;
        }
    }
    // Parse element name
    if (keyName) {
        // 'async', 'get', 'set', or 'static' were not a keyword contextually.
        // The last token is any of those. Make it the element name.
        node.computed = false;
        node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
        node.key.name = keyName;
        this.finishNode(node.key, "Identifier");
    } else this.parseClassElementName(node);
    // Parse element value
    if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
        var isConstructor = !node.static && checkKeyName(node, "constructor");
        var allowsDirectSuper = isConstructor && constructorAllowsSuper;
        // Couldn't move this check into the 'parseClassMethod' method for backward compatibility.
        if (isConstructor && kind !== "method") this.raise(node.key.start, "Constructor can't have get/set modifier");
        node.kind = isConstructor ? "constructor" : kind;
        this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
    } else this.parseClassField(node);
    return node;
};
pp$8.isClassElementNameStart = function() {
    return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
};
pp$8.parseClassElementName = function(element) {
    if (this.type === types$1.privateId) {
        if (this.value === "constructor") this.raise(this.start, "Classes can't have an element named '#constructor'");
        element.computed = false;
        element.key = this.parsePrivateIdent();
    } else this.parsePropertyName(element);
};
pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
    // Check key and flags
    var key = method.key;
    if (method.kind === "constructor") {
        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
        if (isAsync) this.raise(key.start, "Constructor can't be an async method");
    } else if (method.static && checkKeyName(method, "prototype")) this.raise(key.start, "Classes may not have a static property named prototype");
    // Parse value
    var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
    // Check value
    if (method.kind === "get" && value.params.length !== 0) this.raiseRecoverable(value.start, "getter should have no params");
    if (method.kind === "set" && value.params.length !== 1) this.raiseRecoverable(value.start, "setter should have exactly one param");
    if (method.kind === "set" && value.params[0].type === "RestElement") this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
    return this.finishNode(method, "MethodDefinition");
};
pp$8.parseClassField = function(field) {
    if (checkKeyName(field, "constructor")) this.raise(field.key.start, "Classes can't have a field named 'constructor'");
    else if (field.static && checkKeyName(field, "prototype")) this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
    if (this.eat(types$1.eq)) {
        // To raise SyntaxError if 'arguments' exists in the initializer.
        var scope = this.currentThisScope();
        var inClassFieldInit = scope.inClassFieldInit;
        scope.inClassFieldInit = true;
        field.value = this.parseMaybeAssign();
        scope.inClassFieldInit = inClassFieldInit;
    } else field.value = null;
    this.semicolon();
    return this.finishNode(field, "PropertyDefinition");
};
pp$8.parseClassStaticBlock = function(node) {
    node.body = [];
    var oldLabels = this.labels;
    this.labels = [];
    this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
    while(this.type !== types$1.braceR){
        var stmt = this.parseStatement(null);
        node.body.push(stmt);
    }
    this.next();
    this.exitScope();
    this.labels = oldLabels;
    return this.finishNode(node, "StaticBlock");
};
pp$8.parseClassId = function(node, isStatement) {
    if (this.type === types$1.name) {
        node.id = this.parseIdent();
        if (isStatement) this.checkLValSimple(node.id, BIND_LEXICAL, false);
    } else {
        if (isStatement === true) this.unexpected();
        node.id = null;
    }
};
pp$8.parseClassSuper = function(node) {
    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(null, false) : null;
};
pp$8.enterClassBody = function() {
    var element = {
        declared: Object.create(null),
        used: []
    };
    this.privateNameStack.push(element);
    return element.declared;
};
pp$8.exitClassBody = function() {
    var ref = this.privateNameStack.pop();
    var declared = ref.declared;
    var used = ref.used;
    if (!this.options.checkPrivateFields) return;
    var len = this.privateNameStack.length;
    var parent = len === 0 ? null : this.privateNameStack[len - 1];
    for(var i = 0; i < used.length; ++i){
        var id = used[i];
        if (!hasOwn(declared, id.name)) {
            if (parent) parent.used.push(id);
            else this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
        }
    }
};
function isPrivateNameConflicted(privateNameMap, element) {
    var name = element.key.name;
    var curr = privateNameMap[name];
    var next = "true";
    if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) next = (element.static ? "s" : "i") + element.kind;
    // `class { get #a(){}; static set #a(_){} }` is also conflict.
    if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
        privateNameMap[name] = "true";
        return false;
    } else if (!curr) {
        privateNameMap[name] = next;
        return false;
    } else return true;
}
function checkKeyName(node, name) {
    var computed = node.computed;
    var key = node.key;
    return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
}
// Parses module export declaration.
pp$8.parseExportAllDeclaration = function(node, exports) {
    if (this.options.ecmaVersion >= 11) {
        if (this.eatContextual("as")) {
            node.exported = this.parseModuleExportName();
            this.checkExport(exports, node.exported, this.lastTokStart);
        } else node.exported = null;
    }
    this.expectContextual("from");
    if (this.type !== types$1.string) this.unexpected();
    node.source = this.parseExprAtom();
    if (this.options.ecmaVersion >= 16) node.attributes = this.parseWithClause();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration");
};
pp$8.parseExport = function(node, exports) {
    this.next();
    // export * from '...'
    if (this.eat(types$1.star)) return this.parseExportAllDeclaration(node, exports);
    if (this.eat(types$1._default)) {
        this.checkExport(exports, "default", this.lastTokStart);
        node.declaration = this.parseExportDefaultDeclaration();
        return this.finishNode(node, "ExportDefaultDeclaration");
    }
    // export var|const|let|function|class ...
    if (this.shouldParseExportStatement()) {
        node.declaration = this.parseExportDeclaration(node);
        if (node.declaration.type === "VariableDeclaration") this.checkVariableExport(exports, node.declaration.declarations);
        else this.checkExport(exports, node.declaration.id, node.declaration.id.start);
        node.specifiers = [];
        node.source = null;
    } else {
        node.declaration = null;
        node.specifiers = this.parseExportSpecifiers(exports);
        if (this.eatContextual("from")) {
            if (this.type !== types$1.string) this.unexpected();
            node.source = this.parseExprAtom();
            if (this.options.ecmaVersion >= 16) node.attributes = this.parseWithClause();
        } else {
            for(var i = 0, list = node.specifiers; i < list.length; i += 1){
                // check for keywords used as local names
                var spec = list[i];
                this.checkUnreserved(spec.local);
                // check if export is defined
                this.checkLocalExport(spec.local);
                if (spec.local.type === "Literal") this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
            }
            node.source = null;
        }
        this.semicolon();
    }
    return this.finishNode(node, "ExportNamedDeclaration");
};
pp$8.parseExportDeclaration = function(node) {
    return this.parseStatement(null);
};
pp$8.parseExportDefaultDeclaration = function() {
    var isAsync;
    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
        var fNode = this.startNode();
        this.next();
        if (isAsync) this.next();
        return this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
    } else if (this.type === types$1._class) {
        var cNode = this.startNode();
        return this.parseClass(cNode, "nullableID");
    } else {
        var declaration = this.parseMaybeAssign();
        this.semicolon();
        return declaration;
    }
};
pp$8.checkExport = function(exports, name, pos) {
    if (!exports) return;
    if (typeof name !== "string") name = name.type === "Identifier" ? name.name : name.value;
    if (hasOwn(exports, name)) this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
    exports[name] = true;
};
pp$8.checkPatternExport = function(exports, pat) {
    var type = pat.type;
    if (type === "Identifier") this.checkExport(exports, pat, pat.start);
    else if (type === "ObjectPattern") for(var i = 0, list = pat.properties; i < list.length; i += 1){
        var prop = list[i];
        this.checkPatternExport(exports, prop);
    }
    else if (type === "ArrayPattern") for(var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1){
        var elt = list$1[i$1];
        if (elt) this.checkPatternExport(exports, elt);
    }
    else if (type === "Property") this.checkPatternExport(exports, pat.value);
    else if (type === "AssignmentPattern") this.checkPatternExport(exports, pat.left);
    else if (type === "RestElement") this.checkPatternExport(exports, pat.argument);
};
pp$8.checkVariableExport = function(exports, decls) {
    if (!exports) return;
    for(var i = 0, list = decls; i < list.length; i += 1){
        var decl = list[i];
        this.checkPatternExport(exports, decl.id);
    }
};
pp$8.shouldParseExportStatement = function() {
    return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
// Parses a comma-separated list of module exports.
pp$8.parseExportSpecifier = function(exports) {
    var node = this.startNode();
    node.local = this.parseModuleExportName();
    node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
    this.checkExport(exports, node.exported, node.exported.start);
    return this.finishNode(node, "ExportSpecifier");
};
pp$8.parseExportSpecifiers = function(exports) {
    var nodes = [], first = true;
    // export { x, y as z } [from '...']
    this.expect(types$1.braceL);
    while(!this.eat(types$1.braceR)){
        if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) break;
        } else first = false;
        nodes.push(this.parseExportSpecifier(exports));
    }
    return nodes;
};
// Parses import declaration.
pp$8.parseImport = function(node) {
    this.next();
    // import '...'
    if (this.type === types$1.string) {
        node.specifiers = empty$1;
        node.source = this.parseExprAtom();
    } else {
        node.specifiers = this.parseImportSpecifiers();
        this.expectContextual("from");
        node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
    }
    if (this.options.ecmaVersion >= 16) node.attributes = this.parseWithClause();
    this.semicolon();
    return this.finishNode(node, "ImportDeclaration");
};
// Parses a comma-separated list of module imports.
pp$8.parseImportSpecifier = function() {
    var node = this.startNode();
    node.imported = this.parseModuleExportName();
    if (this.eatContextual("as")) node.local = this.parseIdent();
    else {
        this.checkUnreserved(node.imported);
        node.local = node.imported;
    }
    this.checkLValSimple(node.local, BIND_LEXICAL);
    return this.finishNode(node, "ImportSpecifier");
};
pp$8.parseImportDefaultSpecifier = function() {
    // import defaultObj, { x, y as z } from '...'
    var node = this.startNode();
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, BIND_LEXICAL);
    return this.finishNode(node, "ImportDefaultSpecifier");
};
pp$8.parseImportNamespaceSpecifier = function() {
    var node = this.startNode();
    this.next();
    this.expectContextual("as");
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, BIND_LEXICAL);
    return this.finishNode(node, "ImportNamespaceSpecifier");
};
pp$8.parseImportSpecifiers = function() {
    var nodes = [], first = true;
    if (this.type === types$1.name) {
        nodes.push(this.parseImportDefaultSpecifier());
        if (!this.eat(types$1.comma)) return nodes;
    }
    if (this.type === types$1.star) {
        nodes.push(this.parseImportNamespaceSpecifier());
        return nodes;
    }
    this.expect(types$1.braceL);
    while(!this.eat(types$1.braceR)){
        if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) break;
        } else first = false;
        nodes.push(this.parseImportSpecifier());
    }
    return nodes;
};
pp$8.parseWithClause = function() {
    var nodes = [];
    if (!this.eat(types$1._with)) return nodes;
    this.expect(types$1.braceL);
    var attributeKeys = {};
    var first = true;
    while(!this.eat(types$1.braceR)){
        if (!first) {
            this.expect(types$1.comma);
            if (this.afterTrailingComma(types$1.braceR)) break;
        } else first = false;
        var attr = this.parseImportAttribute();
        var keyName = attr.key.type === "Identifier" ? attr.key.name : attr.key.value;
        if (hasOwn(attributeKeys, keyName)) this.raiseRecoverable(attr.key.start, "Duplicate attribute key '" + keyName + "'");
        attributeKeys[keyName] = true;
        nodes.push(attr);
    }
    return nodes;
};
pp$8.parseImportAttribute = function() {
    var node = this.startNode();
    node.key = this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
    this.expect(types$1.colon);
    if (this.type !== types$1.string) this.unexpected();
    node.value = this.parseExprAtom();
    return this.finishNode(node, "ImportAttribute");
};
pp$8.parseModuleExportName = function() {
    if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
        var stringLiteral = this.parseLiteral(this.value);
        if (loneSurrogate.test(stringLiteral.value)) this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
        return stringLiteral;
    }
    return this.parseIdent(true);
};
// Set `ExpressionStatement#directive` property for directive prologues.
pp$8.adaptDirectivePrologue = function(statements) {
    for(var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i)statements[i].directive = statements[i].expression.raw.slice(1, -1);
};
pp$8.isDirectiveCandidate = function(statement) {
    return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && // Reject parenthesized strings.
    (this.input[statement.start] === "\"" || this.input[statement.start] === "'");
};
var pp$7 = Parser.prototype;
// Convert existing expression atom to assignable pattern
// if possible.
pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 6 && node) switch(node.type){
        case "Identifier":
            if (this.inAsync && node.name === "await") this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
            break;
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
            break;
        case "ObjectExpression":
            node.type = "ObjectPattern";
            if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);
            for(var i = 0, list = node.properties; i < list.length; i += 1){
                var prop = list[i];
                this.toAssignable(prop, isBinding);
                // Early error:
                //   AssignmentRestProperty[Yield, Await] :
                //     `...` DestructuringAssignmentTarget[Yield, Await]
                //
                //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) this.raise(prop.argument.start, "Unexpected token");
            }
            break;
        case "Property":
            // AssignmentProperty has type === "Property"
            if (node.kind !== "init") this.raise(node.key.start, "Object pattern can't contain getter or setter");
            this.toAssignable(node.value, isBinding);
            break;
        case "ArrayExpression":
            node.type = "ArrayPattern";
            if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);
            this.toAssignableList(node.elements, isBinding);
            break;
        case "SpreadElement":
            node.type = "RestElement";
            this.toAssignable(node.argument, isBinding);
            if (node.argument.type === "AssignmentPattern") this.raise(node.argument.start, "Rest elements cannot have a default value");
            break;
        case "AssignmentExpression":
            if (node.operator !== "=") this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
            node.type = "AssignmentPattern";
            delete node.operator;
            this.toAssignable(node.left, isBinding);
            break;
        case "ParenthesizedExpression":
            this.toAssignable(node.expression, isBinding, refDestructuringErrors);
            break;
        case "ChainExpression":
            this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
            break;
        case "MemberExpression":
            if (!isBinding) break;
        default:
            this.raise(node.start, "Assigning to rvalue");
    }
    else if (refDestructuringErrors) this.checkPatternErrors(refDestructuringErrors, true);
    return node;
};
// Convert list of expression atoms to binding list.
pp$7.toAssignableList = function(exprList, isBinding) {
    var end = exprList.length;
    for(var i = 0; i < end; i++){
        var elt = exprList[i];
        if (elt) this.toAssignable(elt, isBinding);
    }
    if (end) {
        var last = exprList[end - 1];
        if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") this.unexpected(last.argument.start);
    }
    return exprList;
};
// Parses spread element.
pp$7.parseSpread = function(refDestructuringErrors) {
    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    return this.finishNode(node, "SpreadElement");
};
pp$7.parseRestBinding = function() {
    var node = this.startNode();
    this.next();
    // RestElement inside of a function parameter must be an identifier
    if (this.options.ecmaVersion === 6 && this.type !== types$1.name) this.unexpected();
    node.argument = this.parseBindingAtom();
    return this.finishNode(node, "RestElement");
};
// Parses lvalue (assignable) atom.
pp$7.parseBindingAtom = function() {
    if (this.options.ecmaVersion >= 6) switch(this.type){
        case types$1.bracketL:
            var node = this.startNode();
            this.next();
            node.elements = this.parseBindingList(types$1.bracketR, true, true);
            return this.finishNode(node, "ArrayPattern");
        case types$1.braceL:
            return this.parseObj(true);
    }
    return this.parseIdent();
};
pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowModifiers) {
    var elts = [], first = true;
    while(!this.eat(close)){
        if (first) first = false;
        else this.expect(types$1.comma);
        if (allowEmpty && this.type === types$1.comma) elts.push(null);
        else if (allowTrailingComma && this.afterTrailingComma(close)) break;
        else if (this.type === types$1.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types$1.comma) this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            this.expect(close);
            break;
        } else elts.push(this.parseAssignableListItem(allowModifiers));
    }
    return elts;
};
pp$7.parseAssignableListItem = function(allowModifiers) {
    var elem = this.parseMaybeDefault(this.start, this.startLoc);
    this.parseBindingListItem(elem);
    return elem;
};
pp$7.parseBindingListItem = function(param) {
    return param;
};
// Parses assignment pattern around given atom if possible.
pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
    left = left || this.parseBindingAtom();
    if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) return left;
    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.right = this.parseMaybeAssign();
    return this.finishNode(node, "AssignmentPattern");
};
// The following three functions all verify that a node is an lvalue —
// something that can be bound, or assigned to. In order to do so, they perform
// a variety of checks:
//
// - Check that none of the bound/assigned-to identifiers are reserved words.
// - Record name declarations for bindings in the appropriate scope.
// - Check duplicate argument names, if checkClashes is set.
//
// If a complex binding pattern is encountered (e.g., object and array
// destructuring), the entire pattern is recursively checked.
//
// There are three versions of checkLVal*() appropriate for different
// circumstances:
//
// - checkLValSimple() shall be used if the syntactic construct supports
//   nothing other than identifiers and member expressions. Parenthesized
//   expressions are also correctly handled. This is generally appropriate for
//   constructs for which the spec says
//
//   > It is a Syntax Error if AssignmentTargetType of [the production] is not
//   > simple.
//
//   It is also appropriate for checking if an identifier is valid and not
//   defined elsewhere, like import declarations or function/class identifiers.
//
//   Examples where this is used include:
//     a += …;
//     import a from '…';
//   where a is the node to be checked.
//
// - checkLValPattern() shall be used if the syntactic construct supports
//   anything checkLValSimple() supports, as well as object and array
//   destructuring patterns. This is generally appropriate for constructs for
//   which the spec says
//
//   > It is a Syntax Error if [the production] is neither an ObjectLiteral nor
//   > an ArrayLiteral and AssignmentTargetType of [the production] is not
//   > simple.
//
//   Examples where this is used include:
//     (a = …);
//     const a = …;
//     try { … } catch (a) { … }
//   where a is the node to be checked.
//
// - checkLValInnerPattern() shall be used if the syntactic construct supports
//   anything checkLValPattern() supports, as well as default assignment
//   patterns, rest elements, and other constructs that may appear within an
//   object or array destructuring pattern.
//
//   As a special case, function parameters also use checkLValInnerPattern(),
//   as they also support defaults and rest constructs.
//
// These functions deliberately support both assignment and binding constructs,
// as the logic for both is exceedingly similar. If the node is the target of
// an assignment, then bindingType should be set to BIND_NONE. Otherwise, it
// should be set to the appropriate BIND_* constant, like BIND_VAR or
// BIND_LEXICAL.
//
// If the function is called with a non-BIND_NONE bindingType, then
// additionally a checkClashes object may be specified to allow checking for
// duplicate argument names. checkClashes is ignored if the provided construct
// is an assignment (i.e., bindingType is BIND_NONE).
pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0) bindingType = BIND_NONE;
    var isBind = bindingType !== BIND_NONE;
    switch(expr.type){
        case "Identifier":
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            if (isBind) {
                if (bindingType === BIND_LEXICAL && expr.name === "let") this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
                if (checkClashes) {
                    if (hasOwn(checkClashes, expr.name)) this.raiseRecoverable(expr.start, "Argument name clash");
                    checkClashes[expr.name] = true;
                }
                if (bindingType !== BIND_OUTSIDE) this.declareName(expr.name, bindingType, expr.start);
            }
            break;
        case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
        case "MemberExpression":
            if (isBind) this.raiseRecoverable(expr.start, "Binding member expression");
            break;
        case "ParenthesizedExpression":
            if (isBind) this.raiseRecoverable(expr.start, "Binding parenthesized expression");
            return this.checkLValSimple(expr.expression, bindingType, checkClashes);
        default:
            this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
    }
};
pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0) bindingType = BIND_NONE;
    switch(expr.type){
        case "ObjectPattern":
            for(var i = 0, list = expr.properties; i < list.length; i += 1){
                var prop = list[i];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
            }
            break;
        case "ArrayPattern":
            for(var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1){
                var elem = list$1[i$1];
                if (elem) this.checkLValInnerPattern(elem, bindingType, checkClashes);
            }
            break;
        default:
            this.checkLValSimple(expr, bindingType, checkClashes);
    }
};
pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
    if (bindingType === void 0) bindingType = BIND_NONE;
    switch(expr.type){
        case "Property":
            // AssignmentProperty has type === "Property"
            this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
            break;
        case "AssignmentPattern":
            this.checkLValPattern(expr.left, bindingType, checkClashes);
            break;
        case "RestElement":
            this.checkLValPattern(expr.argument, bindingType, checkClashes);
            break;
        default:
            this.checkLValPattern(expr, bindingType, checkClashes);
    }
};
// The algorithm used to determine whether a regexp can appear at a
// given point in the program is loosely based on sweet.js' approach.
// See https://github.com/mozilla/sweet.js/wiki/design
var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
    this.token = token;
    this.isExpr = !!isExpr;
    this.preserveSpace = !!preserveSpace;
    this.override = override;
    this.generator = !!generator;
};
var types = {
    b_stat: new TokContext("{", false),
    b_expr: new TokContext("{", true),
    b_tmpl: new TokContext("${", false),
    p_stat: new TokContext("(", false),
    p_expr: new TokContext("(", true),
    q_tmpl: new TokContext("`", true, true, function(p) {
        return p.tryReadTemplateToken();
    }),
    f_stat: new TokContext("function", false),
    f_expr: new TokContext("function", true),
    f_expr_gen: new TokContext("function", true, false, null, true),
    f_gen: new TokContext("function", false, false, null, true)
};
var pp$6 = Parser.prototype;
pp$6.initialContext = function() {
    return [
        types.b_stat
    ];
};
pp$6.curContext = function() {
    return this.context[this.context.length - 1];
};
pp$6.braceIsBlock = function(prevType) {
    var parent = this.curContext();
    if (parent === types.f_expr || parent === types.f_stat) return true;
    if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) return !parent.isExpr;
    // The check for `tt.name && exprAllowed` detects whether we are
    // after a `yield` or `of` construct. See the `updateContext` for
    // `tt.name`.
    if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
    if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) return true;
    if (prevType === types$1.braceL) return parent === types.b_stat;
    if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) return false;
    return !this.exprAllowed;
};
pp$6.inGeneratorContext = function() {
    for(var i = this.context.length - 1; i >= 1; i--){
        var context = this.context[i];
        if (context.token === "function") return context.generator;
    }
    return false;
};
pp$6.updateContext = function(prevType) {
    var update, type = this.type;
    if (type.keyword && prevType === types$1.dot) this.exprAllowed = false;
    else if (update = type.updateContext) update.call(this, prevType);
    else this.exprAllowed = type.beforeExpr;
};
// Used to handle edge cases when token context could not be inferred correctly during tokenization phase
pp$6.overrideContext = function(tokenCtx) {
    if (this.curContext() !== tokenCtx) this.context[this.context.length - 1] = tokenCtx;
};
// Token-specific context update code
types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
    if (this.context.length === 1) {
        this.exprAllowed = true;
        return;
    }
    var out = this.context.pop();
    if (out === types.b_stat && this.curContext().token === "function") out = this.context.pop();
    this.exprAllowed = !out.isExpr;
};
types$1.braceL.updateContext = function(prevType) {
    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
    this.exprAllowed = true;
};
types$1.dollarBraceL.updateContext = function() {
    this.context.push(types.b_tmpl);
    this.exprAllowed = true;
};
types$1.parenL.updateContext = function(prevType) {
    var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
    this.context.push(statementParens ? types.p_stat : types.p_expr);
    this.exprAllowed = true;
};
types$1.incDec.updateContext = function() {
// tokExprAllowed stays unchanged
};
types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
    if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) this.context.push(types.f_expr);
    else this.context.push(types.f_stat);
    this.exprAllowed = false;
};
types$1.colon.updateContext = function() {
    if (this.curContext().token === "function") this.context.pop();
    this.exprAllowed = true;
};
types$1.backQuote.updateContext = function() {
    if (this.curContext() === types.q_tmpl) this.context.pop();
    else this.context.push(types.q_tmpl);
    this.exprAllowed = false;
};
types$1.star.updateContext = function(prevType) {
    if (prevType === types$1._function) {
        var index = this.context.length - 1;
        if (this.context[index] === types.f_expr) this.context[index] = types.f_expr_gen;
        else this.context[index] = types.f_gen;
    }
    this.exprAllowed = true;
};
types$1.name.updateContext = function(prevType) {
    var allowed = false;
    if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
        if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) allowed = true;
    }
    this.exprAllowed = allowed;
};
// A recursive descent parser operates by defining functions for all
// syntactic elements, and recursively calling those, each function
// advancing the input stream and returning an AST node. Precedence
// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
// instead of `(!x)[1]` is handled by the fact that the parser
// function that parses unary prefix operators is called first, and
// in turn calls the function that parses `[]` subscripts — that
// way, it'll receive the node for `x[1]` already parsed, and wraps
// *that* in the unary operator node.
//
// Acorn uses an [operator precedence parser][opp] to handle binary
// operator precedence, because it is much more compact than using
// the technique outlined above, which uses different, nesting
// functions to specify precedence, for all of the ten binary
// precedence levels that JavaScript defines.
//
// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser
var pp$5 = Parser.prototype;
// Check if property name clashes with already added.
// Object/class getters and setters are not allowed to clash —
// either with each other or with an init property — and in
// strict mode, init properties are also not allowed to be repeated.
pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
    if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") return;
    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;
    var key = prop.key;
    var name;
    switch(key.type){
        case "Identifier":
            name = key.name;
            break;
        case "Literal":
            name = String(key.value);
            break;
        default:
            return;
    }
    var kind = prop.kind;
    if (this.options.ecmaVersion >= 6) {
        if (name === "__proto__" && kind === "init") {
            if (propHash.proto) {
                if (refDestructuringErrors) {
                    if (refDestructuringErrors.doubleProto < 0) refDestructuringErrors.doubleProto = key.start;
                } else this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
            }
            propHash.proto = true;
        }
        return;
    }
    name = "$" + name;
    var other = propHash[name];
    if (other) {
        var redefinition;
        if (kind === "init") redefinition = this.strict && other.init || other.get || other.set;
        else redefinition = other.init || other[kind];
        if (redefinition) this.raiseRecoverable(key.start, "Redefinition of property");
    } else other = propHash[name] = {
        init: false,
        get: false,
        set: false
    };
    other[kind] = true;
};
// ### Expression parsing
// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function(s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.
// Parse a full expression. The optional arguments are used to
// forbid the `in` operator (in for loops initalization expressions)
// and provide reference for storing '=' operator inside shorthand
// property assignment in contexts where both object expression
// and object pattern might appear (so it's possible to raise
// delayed syntax error at correct position).
pp$5.parseExpression = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
    if (this.type === types$1.comma) {
        var node = this.startNodeAt(startPos, startLoc);
        node.expressions = [
            expr
        ];
        while(this.eat(types$1.comma))node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
        return this.finishNode(node, "SequenceExpression");
    }
    return expr;
};
// Parse an assignment expression. This includes applications of
// operators like `+=`.
pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
    if (this.isContextual("yield")) {
        if (this.inGenerator) return this.parseYield(forInit);
        else this.exprAllowed = false;
    }
    var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
    if (refDestructuringErrors) {
        oldParenAssign = refDestructuringErrors.parenthesizedAssign;
        oldTrailingComma = refDestructuringErrors.trailingComma;
        oldDoubleProto = refDestructuringErrors.doubleProto;
        refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
    } else {
        refDestructuringErrors = new DestructuringErrors;
        ownDestructuringErrors = true;
    }
    var startPos = this.start, startLoc = this.startLoc;
    if (this.type === types$1.parenL || this.type === types$1.name) {
        this.potentialArrowAt = this.start;
        this.potentialArrowInForAwait = forInit === "await";
    }
    var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
    if (this.type.isAssign) {
        var node = this.startNodeAt(startPos, startLoc);
        node.operator = this.value;
        if (this.type === types$1.eq) left = this.toAssignable(left, false, refDestructuringErrors);
        if (!ownDestructuringErrors) refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
        if (refDestructuringErrors.shorthandAssign >= left.start) refDestructuringErrors.shorthandAssign = -1;
         // reset because shorthand default was used correctly
        if (this.type === types$1.eq) this.checkLValPattern(left);
        else this.checkLValSimple(left);
        node.left = left;
        this.next();
        node.right = this.parseMaybeAssign(forInit);
        if (oldDoubleProto > -1) refDestructuringErrors.doubleProto = oldDoubleProto;
        return this.finishNode(node, "AssignmentExpression");
    } else if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true);
    if (oldParenAssign > -1) refDestructuringErrors.parenthesizedAssign = oldParenAssign;
    if (oldTrailingComma > -1) refDestructuringErrors.trailingComma = oldTrailingComma;
    return left;
};
// Parse a ternary conditional (`?:`) operator.
pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprOps(forInit, refDestructuringErrors);
    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
    if (this.eat(types$1.question)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.test = expr;
        node.consequent = this.parseMaybeAssign();
        this.expect(types$1.colon);
        node.alternate = this.parseMaybeAssign(forInit);
        return this.finishNode(node, "ConditionalExpression");
    }
    return expr;
};
// Start the precedence parser.
pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
    return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
};
// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.
pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
    var prec = this.type.binop;
    if (prec != null && (!forInit || this.type !== types$1._in)) {
        if (prec > minPrec) {
            var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
            var coalesce = this.type === types$1.coalesce;
            if (coalesce) // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.
            // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.
            prec = types$1.logicalAND.binop;
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
            var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
        }
    }
    return left;
};
pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
    if (right.type === "PrivateIdentifier") this.raise(right.start, "Private identifier can only be left side of binary expression");
    var node = this.startNodeAt(startPos, startLoc);
    node.left = left;
    node.operator = op;
    node.right = right;
    return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
};
// Parse unary operators, both prefix and postfix.
pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
    var startPos = this.start, startLoc = this.startLoc, expr;
    if (this.isContextual("await") && this.canAwait) {
        expr = this.parseAwait(forInit);
        sawUnary = true;
    } else if (this.type.prefix) {
        var node = this.startNode(), update = this.type === types$1.incDec;
        node.operator = this.value;
        node.prefix = true;
        this.next();
        node.argument = this.parseMaybeUnary(null, true, update, forInit);
        this.checkExpressionErrors(refDestructuringErrors, true);
        if (update) this.checkLValSimple(node.argument);
        else if (this.strict && node.operator === "delete" && isLocalVariableAccess(node.argument)) this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
        else if (node.operator === "delete" && isPrivateFieldAccess(node.argument)) this.raiseRecoverable(node.start, "Private fields can not be deleted");
        else sawUnary = true;
        expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
    } else if (!sawUnary && this.type === types$1.privateId) {
        if ((forInit || this.privateNameStack.length === 0) && this.options.checkPrivateFields) this.unexpected();
        expr = this.parsePrivateIdent();
        // only could be private fields in 'in', such as #x in obj
        if (this.type !== types$1._in) this.unexpected();
    } else {
        expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
        if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
        while(this.type.postfix && !this.canInsertSemicolon()){
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value;
            node$1.prefix = false;
            node$1.argument = expr;
            this.checkLValSimple(expr);
            this.next();
            expr = this.finishNode(node$1, "UpdateExpression");
        }
    }
    if (!incDec && this.eat(types$1.starstar)) {
        if (sawUnary) this.unexpected(this.lastTokStart);
        else return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
    } else return expr;
};
function isLocalVariableAccess(node) {
    return node.type === "Identifier" || node.type === "ParenthesizedExpression" && isLocalVariableAccess(node.expression);
}
function isPrivateFieldAccess(node) {
    return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression) || node.type === "ParenthesizedExpression" && isPrivateFieldAccess(node.expression);
}
// Parse call, dot, and `[]`-subscript expressions.
pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
    var startPos = this.start, startLoc = this.startLoc;
    var expr = this.parseExprAtom(refDestructuringErrors, forInit);
    if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") return expr;
    var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
    if (refDestructuringErrors && result.type === "MemberExpression") {
        if (refDestructuringErrors.parenthesizedAssign >= result.start) refDestructuringErrors.parenthesizedAssign = -1;
        if (refDestructuringErrors.parenthesizedBind >= result.start) refDestructuringErrors.parenthesizedBind = -1;
        if (refDestructuringErrors.trailingComma >= result.start) refDestructuringErrors.trailingComma = -1;
    }
    return result;
};
pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
    var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
    var optionalChained = false;
    while(true){
        var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
        if (element.optional) optionalChained = true;
        if (element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element;
                element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
        }
        base = element;
    }
};
pp$5.shouldParseAsyncArrow = function() {
    return !this.canInsertSemicolon() && this.eat(types$1.arrow);
};
pp$5.parseSubscriptAsyncArrow = function(startPos, startLoc, exprList, forInit) {
    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
};
pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
    var optionalSupported = this.options.ecmaVersion >= 11;
    var optional = optionalSupported && this.eat(types$1.questionDot);
    if (noCalls && optional) this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
    var computed = this.eat(types$1.bracketL);
    if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
        var node = this.startNodeAt(startPos, startLoc);
        node.object = base;
        if (computed) {
            node.property = this.parseExpression();
            this.expect(types$1.bracketR);
        } else if (this.type === types$1.privateId && base.type !== "Super") node.property = this.parsePrivateIdent();
        else node.property = this.parseIdent(this.options.allowReserved !== "never");
        node.computed = !!computed;
        if (optionalSupported) node.optional = optional;
        base = this.finishNode(node, "MemberExpression");
    } else if (!noCalls && this.eat(types$1.parenL)) {
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
        if (maybeAsyncArrow && !optional && this.shouldParseAsyncArrow()) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseSubscriptAsyncArrow(startPos, startLoc, exprList, forInit);
        }
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;
        this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
        var node$1 = this.startNodeAt(startPos, startLoc);
        node$1.callee = base;
        node$1.arguments = exprList;
        if (optionalSupported) node$1.optional = optional;
        base = this.finishNode(node$1, "CallExpression");
    } else if (this.type === types$1.backQuote) {
        if (optional || optionalChained) this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
        var node$2 = this.startNodeAt(startPos, startLoc);
        node$2.tag = base;
        node$2.quasi = this.parseTemplate({
            isTagged: true
        });
        base = this.finishNode(node$2, "TaggedTemplateExpression");
    }
    return base;
};
// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.
pp$5.parseExprAtom = function(refDestructuringErrors, forInit, forNew) {
    // If a division operator appears in an expression position, the
    // tokenizer got confused, and we force it to read a regexp instead.
    if (this.type === types$1.slash) this.readRegexp();
    var node, canBeArrow = this.potentialArrowAt === this.start;
    switch(this.type){
        case types$1._super:
            if (!this.allowSuper) this.raise(this.start, "'super' keyword outside a method");
            node = this.startNode();
            this.next();
            if (this.type === types$1.parenL && !this.allowDirectSuper) this.raise(node.start, "super() call outside constructor of a subclass");
            // The `super` keyword can appear at below:
            // SuperProperty:
            //     super [ Expression ]
            //     super . IdentifierName
            // SuperCall:
            //     super ( Arguments )
            if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) this.unexpected();
            return this.finishNode(node, "Super");
        case types$1._this:
            node = this.startNode();
            this.next();
            return this.finishNode(node, "ThisExpression");
        case types$1.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
                this.overrideContext(types.f_expr);
                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$1.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [
                    id
                ], false, forInit);
                if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
                    id = this.parseIdent(false);
                    if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) this.unexpected();
                    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [
                        id
                    ], true, forInit);
                }
            }
            return id;
        case types$1.regexp:
            var value = this.value;
            node = this.parseLiteral(value.value);
            node.regex = {
                pattern: value.pattern,
                flags: value.flags
            };
            return node;
        case types$1.num:
        case types$1.string:
            return this.parseLiteral(this.value);
        case types$1._null:
        case types$1._true:
        case types$1._false:
            node = this.startNode();
            node.value = this.type === types$1._null ? null : this.type === types$1._true;
            node.raw = this.type.keyword;
            this.next();
            return this.finishNode(node, "Literal");
        case types$1.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
            if (refDestructuringErrors) {
                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) refDestructuringErrors.parenthesizedAssign = start;
                if (refDestructuringErrors.parenthesizedBind < 0) refDestructuringErrors.parenthesizedBind = start;
            }
            return expr;
        case types$1.bracketL:
            node = this.startNode();
            this.next();
            node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node, "ArrayExpression");
        case types$1.braceL:
            this.overrideContext(types.b_expr);
            return this.parseObj(false, refDestructuringErrors);
        case types$1._function:
            node = this.startNode();
            this.next();
            return this.parseFunction(node, 0);
        case types$1._class:
            return this.parseClass(this.startNode(), false);
        case types$1._new:
            return this.parseNew();
        case types$1.backQuote:
            return this.parseTemplate();
        case types$1._import:
            if (this.options.ecmaVersion >= 11) return this.parseExprImport(forNew);
            else return this.unexpected();
        default:
            return this.parseExprAtomDefault();
    }
};
pp$5.parseExprAtomDefault = function() {
    this.unexpected();
};
pp$5.parseExprImport = function(forNew) {
    var node = this.startNode();
    // Consume `import` as an identifier for `import.meta`.
    // Because `this.parseIdent(true)` doesn't check escape sequences, it needs the check of `this.containsEsc`.
    if (this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword import");
    this.next();
    if (this.type === types$1.parenL && !forNew) return this.parseDynamicImport(node);
    else if (this.type === types$1.dot) {
        var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
        meta.name = "import";
        node.meta = this.finishNode(meta, "Identifier");
        return this.parseImportMeta(node);
    } else this.unexpected();
};
pp$5.parseDynamicImport = function(node) {
    this.next(); // skip `(`
    // Parse node.source.
    node.source = this.parseMaybeAssign();
    if (this.options.ecmaVersion >= 16) {
        if (!this.eat(types$1.parenR)) {
            this.expect(types$1.comma);
            if (!this.afterTrailingComma(types$1.parenR)) {
                node.options = this.parseMaybeAssign();
                if (!this.eat(types$1.parenR)) {
                    this.expect(types$1.comma);
                    if (!this.afterTrailingComma(types$1.parenR)) this.unexpected();
                }
            } else node.options = null;
        } else node.options = null;
    } else // Verify ending.
    if (!this.eat(types$1.parenR)) {
        var errorPos = this.start;
        if (this.eat(types$1.comma) && this.eat(types$1.parenR)) this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
        else this.unexpected(errorPos);
    }
    return this.finishNode(node, "ImportExpression");
};
pp$5.parseImportMeta = function(node) {
    this.next(); // skip `.`
    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);
    if (node.property.name !== "meta") this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
    if (containsEsc) this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
    if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
    return this.finishNode(node, "MetaProperty");
};
pp$5.parseLiteral = function(value) {
    var node = this.startNode();
    node.value = value;
    node.raw = this.input.slice(this.start, this.end);
    if (node.raw.charCodeAt(node.raw.length - 1) === 110) node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
    this.next();
    return this.finishNode(node, "Literal");
};
pp$5.parseParenExpression = function() {
    this.expect(types$1.parenL);
    var val = this.parseExpression();
    this.expect(types$1.parenR);
    return val;
};
pp$5.shouldParseArrow = function(exprList) {
    return !this.canInsertSemicolon();
};
pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
    if (this.options.ecmaVersion >= 6) {
        this.next();
        var innerStartPos = this.start, innerStartLoc = this.startLoc;
        var exprList = [], first = true, lastIsComma = false;
        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
        this.yieldPos = 0;
        this.awaitPos = 0;
        // Do not save awaitIdentPos to allow checking awaits nested in parameters
        while(this.type !== types$1.parenR){
            first ? first = false : this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
                lastIsComma = true;
                break;
            } else if (this.type === types$1.ellipsis) {
                spreadStart = this.start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));
                if (this.type === types$1.comma) this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
                break;
            } else exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
        }
        var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
        this.expect(types$1.parenR);
        if (canBeArrow && this.shouldParseArrow(exprList) && this.eat(types$1.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
        }
        if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart);
        if (spreadStart) this.unexpected(spreadStart);
        this.checkExpressionErrors(refDestructuringErrors, true);
        this.yieldPos = oldYieldPos || this.yieldPos;
        this.awaitPos = oldAwaitPos || this.awaitPos;
        if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
        } else val = exprList[0];
    } else val = this.parseParenExpression();
    if (this.options.preserveParens) {
        var par = this.startNodeAt(startPos, startLoc);
        par.expression = val;
        return this.finishNode(par, "ParenthesizedExpression");
    } else return val;
};
pp$5.parseParenItem = function(item) {
    return item;
};
pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
};
// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.
var empty = [];
pp$5.parseNew = function() {
    if (this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword new");
    var node = this.startNode();
    this.next();
    if (this.options.ecmaVersion >= 6 && this.type === types$1.dot) {
        var meta = this.startNodeAt(node.start, node.loc && node.loc.start);
        meta.name = "new";
        node.meta = this.finishNode(meta, "Identifier");
        this.next();
        var containsEsc = this.containsEsc;
        node.property = this.parseIdent(true);
        if (node.property.name !== "target") this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
        if (containsEsc) this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
        if (!this.allowNewDotTarget) this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block");
        return this.finishNode(node, "MetaProperty");
    }
    var startPos = this.start, startLoc = this.startLoc;
    node.callee = this.parseSubscripts(this.parseExprAtom(null, false, true), startPos, startLoc, true, false);
    if (this.eat(types$1.parenL)) node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
    else node.arguments = empty;
    return this.finishNode(node, "NewExpression");
};
// Parse template expression.
pp$5.parseTemplateElement = function(ref) {
    var isTagged = ref.isTagged;
    var elem = this.startNode();
    if (this.type === types$1.invalidTemplate) {
        if (!isTagged) this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
        elem.value = {
            raw: this.value.replace(/\r\n?/g, "\n"),
            cooked: null
        };
    } else elem.value = {
        raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
        cooked: this.value
    };
    this.next();
    elem.tail = this.type === types$1.backQuote;
    return this.finishNode(elem, "TemplateElement");
};
pp$5.parseTemplate = function(ref) {
    if (ref === void 0) ref = {};
    var isTagged = ref.isTagged;
    if (isTagged === void 0) isTagged = false;
    var node = this.startNode();
    this.next();
    node.expressions = [];
    var curElt = this.parseTemplateElement({
        isTagged: isTagged
    });
    node.quasis = [
        curElt
    ];
    while(!curElt.tail){
        if (this.type === types$1.eof) this.raise(this.pos, "Unterminated template literal");
        this.expect(types$1.dollarBraceL);
        node.expressions.push(this.parseExpression());
        this.expect(types$1.braceR);
        node.quasis.push(curElt = this.parseTemplateElement({
            isTagged: isTagged
        }));
    }
    this.next();
    return this.finishNode(node, "TemplateLiteral");
};
pp$5.isAsyncProp = function(prop) {
    return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
// Parse an object literal or binding pattern.
pp$5.parseObj = function(isPattern, refDestructuringErrors) {
    var node = this.startNode(), first = true, propHash = {};
    node.properties = [];
    this.next();
    while(!this.eat(types$1.braceR)){
        if (!first) {
            this.expect(types$1.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) break;
        } else first = false;
        var prop = this.parseProperty(isPattern, refDestructuringErrors);
        if (!isPattern) this.checkPropClash(prop, propHash, refDestructuringErrors);
        node.properties.push(prop);
    }
    return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
};
pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
    var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
    if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
        if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types$1.comma) this.raiseRecoverable(this.start, "Comma is not permitted after the rest element");
            return this.finishNode(prop, "RestElement");
        }
        // Parse argument.
        prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        // To disallow trailing comma via `this.toAssignable()`.
        if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;
        // Finish
        return this.finishNode(prop, "SpreadElement");
    }
    if (this.options.ecmaVersion >= 6) {
        prop.method = false;
        prop.shorthand = false;
        if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
        }
        if (!isPattern) isGenerator = this.eat(types$1.star);
    }
    var containsEsc = this.containsEsc;
    this.parsePropertyName(prop);
    if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
        isAsync = true;
        isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
        this.parsePropertyName(prop);
    } else isAsync = false;
    this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
    return this.finishNode(prop, "Property");
};
pp$5.parseGetterSetter = function(prop) {
    prop.kind = prop.key.name;
    this.parsePropertyName(prop);
    prop.value = this.parseMethod(false);
    var paramCount = prop.kind === "get" ? 0 : 1;
    if (prop.value.params.length !== paramCount) {
        var start = prop.value.start;
        if (prop.kind === "get") this.raiseRecoverable(start, "getter should have no params");
        else this.raiseRecoverable(start, "setter should have exactly one param");
    } else if (prop.kind === "set" && prop.value.params[0].type === "RestElement") this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
};
pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
    if ((isGenerator || isAsync) && this.type === types$1.colon) this.unexpected();
    if (this.eat(types$1.colon)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
        prop.kind = "init";
    } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
        if (isPattern) this.unexpected();
        prop.kind = "init";
        prop.method = true;
        prop.value = this.parseMethod(isGenerator, isAsync);
    } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq) {
        if (isGenerator || isAsync) this.unexpected();
        this.parseGetterSetter(prop);
    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
        if (isGenerator || isAsync) this.unexpected();
        this.checkUnreserved(prop.key);
        if (prop.key.name === "await" && !this.awaitIdentPos) this.awaitIdentPos = startPos;
        prop.kind = "init";
        if (isPattern) prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
        else if (this.type === types$1.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) refDestructuringErrors.shorthandAssign = this.start;
            prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
        } else prop.value = this.copyNode(prop.key);
        prop.shorthand = true;
    } else this.unexpected();
};
pp$5.parsePropertyName = function(prop) {
    if (this.options.ecmaVersion >= 6) {
        if (this.eat(types$1.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types$1.bracketR);
            return prop.key;
        } else prop.computed = false;
    }
    return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
// Initialize empty function node.
pp$5.initFunction = function(node) {
    node.id = null;
    if (this.options.ecmaVersion >= 6) node.generator = node.expression = false;
    if (this.options.ecmaVersion >= 8) node.async = false;
};
// Parse object or class method.
pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
    var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.initFunction(node);
    if (this.options.ecmaVersion >= 6) node.generator = isGenerator;
    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
    this.expect(types$1.parenL);
    node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
    this.checkYieldAwaitInDefaultParams();
    this.parseFunctionBody(node, false, true, false);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, "FunctionExpression");
};
// Parse arrow function expression with given parameters.
pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
    var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
    this.initFunction(node);
    if (this.options.ecmaVersion >= 8) node.async = !!isAsync;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    node.params = this.toAssignableList(params, true);
    this.parseFunctionBody(node, true, false, forInit);
    this.yieldPos = oldYieldPos;
    this.awaitPos = oldAwaitPos;
    this.awaitIdentPos = oldAwaitIdentPos;
    return this.finishNode(node, "ArrowFunctionExpression");
};
// Parse function body and check parameters.
pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
    var isExpression = isArrowFunction && this.type !== types$1.braceL;
    var oldStrict = this.strict, useStrict = false;
    if (isExpression) {
        node.body = this.parseMaybeAssign(forInit);
        node.expression = true;
        this.checkParams(node, false);
    } else {
        var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
        if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            // If this is a strict mode function, verify that argument names
            // are not repeated, and it does not try to bind the words `eval`
            // or `arguments`.
            if (useStrict && nonSimple) this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
        }
        // Start a new scope with regard to labels and the `inFunction`
        // flag (restore them to their old value afterwards).
        var oldLabels = this.labels;
        this.labels = [];
        if (useStrict) this.strict = true;
        // Add the params to varDeclaredNames to ensure that an error is thrown
        // if a let/const declaration in the function clashes with one of the params.
        this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
        // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'
        if (this.strict && node.id) this.checkLValSimple(node.id, BIND_OUTSIDE);
        node.body = this.parseBlock(false, undefined, useStrict && !oldStrict);
        node.expression = false;
        this.adaptDirectivePrologue(node.body.body);
        this.labels = oldLabels;
    }
    this.exitScope();
};
pp$5.isSimpleParamList = function(params) {
    for(var i = 0, list = params; i < list.length; i += 1){
        var param = list[i];
        if (param.type !== "Identifier") return false;
    }
    return true;
};
// Checks function params for various disallowed patterns such as using "eval"
// or "arguments" and duplicate parameters.
pp$5.checkParams = function(node, allowDuplicates) {
    var nameHash = Object.create(null);
    for(var i = 0, list = node.params; i < list.length; i += 1){
        var param = list[i];
        this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
    }
};
// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).
pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
    var elts = [], first = true;
    while(!this.eat(close)){
        if (!first) {
            this.expect(types$1.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) break;
        } else first = false;
        var elt = void 0;
        if (allowEmpty && this.type === types$1.comma) elt = null;
        else if (this.type === types$1.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) refDestructuringErrors.trailingComma = this.start;
        } else elt = this.parseMaybeAssign(false, refDestructuringErrors);
        elts.push(elt);
    }
    return elts;
};
pp$5.checkUnreserved = function(ref) {
    var start = ref.start;
    var end = ref.end;
    var name = ref.name;
    if (this.inGenerator && name === "yield") this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
    if (this.inAsync && name === "await") this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
    if (this.currentThisScope().inClassFieldInit && name === "arguments") this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
    if (this.inClassStaticBlock && (name === "arguments" || name === "await")) this.raise(start, "Cannot use " + name + " in class static initialization block");
    if (this.keywords.test(name)) this.raise(start, "Unexpected keyword '" + name + "'");
    if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) return;
    var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
    if (re.test(name)) {
        if (!this.inAsync && name === "await") this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
        this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
    }
};
// Parse the next token as an identifier. If `liberal` is true (used
// when parsing properties), it will also convert keywords into
// identifiers.
pp$5.parseIdent = function(liberal) {
    var node = this.parseIdentNode();
    this.next(!!liberal);
    this.finishNode(node, "Identifier");
    if (!liberal) {
        this.checkUnreserved(node);
        if (node.name === "await" && !this.awaitIdentPos) this.awaitIdentPos = node.start;
    }
    return node;
};
pp$5.parseIdentNode = function() {
    var node = this.startNode();
    if (this.type === types$1.name) node.name = this.value;
    else if (this.type.keyword) {
        node.name = this.type.keyword;
        // To fix https://github.com/acornjs/acorn/issues/575
        // `class` and `function` keywords push new context into this.context.
        // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.
        // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword
        if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) this.context.pop();
        this.type = types$1.name;
    } else this.unexpected();
    return node;
};
pp$5.parsePrivateIdent = function() {
    var node = this.startNode();
    if (this.type === types$1.privateId) node.name = this.value;
    else this.unexpected();
    this.next();
    this.finishNode(node, "PrivateIdentifier");
    // For validating existence
    if (this.options.checkPrivateFields) {
        if (this.privateNameStack.length === 0) this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class");
        else this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
    }
    return node;
};
// Parses yield expression inside generator.
pp$5.parseYield = function(forInit) {
    if (!this.yieldPos) this.yieldPos = this.start;
    var node = this.startNode();
    this.next();
    if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
        node.delegate = false;
        node.argument = null;
    } else {
        node.delegate = this.eat(types$1.star);
        node.argument = this.parseMaybeAssign(forInit);
    }
    return this.finishNode(node, "YieldExpression");
};
pp$5.parseAwait = function(forInit) {
    if (!this.awaitPos) this.awaitPos = this.start;
    var node = this.startNode();
    this.next();
    node.argument = this.parseMaybeUnary(null, true, false, forInit);
    return this.finishNode(node, "AwaitExpression");
};
var pp$4 = Parser.prototype;
// This function is used to raise exceptions on parse errors. It
// takes an offset integer (into the current `input`) to indicate
// the location of the error, attaches the position to the end
// of the error message, and then raises a `SyntaxError` with that
// message.
pp$4.raise = function(pos, message) {
    var loc = getLineInfo(this.input, pos);
    message += " (" + loc.line + ":" + loc.column + ")";
    var err = new SyntaxError(message);
    err.pos = pos;
    err.loc = loc;
    err.raisedAt = this.pos;
    throw err;
};
pp$4.raiseRecoverable = pp$4.raise;
pp$4.curPosition = function() {
    if (this.options.locations) return new Position(this.curLine, this.pos - this.lineStart);
};
var pp$3 = Parser.prototype;
var Scope = function Scope(flags) {
    this.flags = flags;
    // A list of var-declared names in the current lexical scope
    this.var = [];
    // A list of lexically-declared names in the current lexical scope
    this.lexical = [];
    // A list of lexically-declared FunctionDeclaration names in the current lexical scope
    this.functions = [];
    // A switch to disallow the identifier reference 'arguments'
    this.inClassFieldInit = false;
};
// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.
pp$3.enterScope = function(flags) {
    this.scopeStack.push(new Scope(flags));
};
pp$3.exitScope = function() {
    this.scopeStack.pop();
};
// The spec says:
// > At the top level of a function, or script, function declarations are
// > treated like var declarations rather than like lexical declarations.
pp$3.treatFunctionsAsVarInScope = function(scope) {
    return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
};
pp$3.declareName = function(name, bindingType, pos) {
    var redeclared = false;
    if (bindingType === BIND_LEXICAL) {
        var scope = this.currentScope();
        redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
        scope.lexical.push(name);
        if (this.inModule && scope.flags & SCOPE_TOP) delete this.undefinedExports[name];
    } else if (bindingType === BIND_SIMPLE_CATCH) {
        var scope$1 = this.currentScope();
        scope$1.lexical.push(name);
    } else if (bindingType === BIND_FUNCTION) {
        var scope$2 = this.currentScope();
        if (this.treatFunctionsAsVar) redeclared = scope$2.lexical.indexOf(name) > -1;
        else redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
        scope$2.functions.push(name);
    } else for(var i = this.scopeStack.length - 1; i >= 0; --i){
        var scope$3 = this.scopeStack[i];
        if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
            redeclared = true;
            break;
        }
        scope$3.var.push(name);
        if (this.inModule && scope$3.flags & SCOPE_TOP) delete this.undefinedExports[name];
        if (scope$3.flags & SCOPE_VAR) break;
    }
    if (redeclared) this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
};
pp$3.checkLocalExport = function(id) {
    // scope.functions must be empty as Module code is always strict.
    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) this.undefinedExports[id.name] = id;
};
pp$3.currentScope = function() {
    return this.scopeStack[this.scopeStack.length - 1];
};
pp$3.currentVarScope = function() {
    for(var i = this.scopeStack.length - 1;; i--){
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR) return scope;
    }
};
// Could be useful for `this`, `new.target`, `super()`, `super.property`, and `super[property]`.
pp$3.currentThisScope = function() {
    for(var i = this.scopeStack.length - 1;; i--){
        var scope = this.scopeStack[i];
        if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) return scope;
    }
};
var Node = function Node(parser, pos, loc) {
    this.type = "";
    this.start = pos;
    this.end = 0;
    if (parser.options.locations) this.loc = new SourceLocation(parser, loc);
    if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;
    if (parser.options.ranges) this.range = [
        pos,
        0
    ];
};
// Start an AST node, attaching a start offset.
var pp$2 = Parser.prototype;
pp$2.startNode = function() {
    return new Node(this, this.start, this.startLoc);
};
pp$2.startNodeAt = function(pos, loc) {
    return new Node(this, pos, loc);
};
// Finish an AST node, adding `type` and `end` properties.
function finishNodeAt(node, type, pos, loc) {
    node.type = type;
    node.end = pos;
    if (this.options.locations) node.loc.end = loc;
    if (this.options.ranges) node.range[1] = pos;
    return node;
}
pp$2.finishNode = function(node, type) {
    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
};
// Finish node at given position
pp$2.finishNodeAt = function(node, type, pos, loc) {
    return finishNodeAt.call(this, node, type, pos, loc);
};
pp$2.copyNode = function(node) {
    var newNode = new Node(this, node.start, this.startLoc);
    for(var prop in node)newNode[prop] = node[prop];
    return newNode;
};
// This file was generated by "bin/generate-unicode-script-values.js". Do not modify manually!
var scriptValuesAddedInUnicode = "Gara Garay Gukh Gurung_Khema Hrkt Katakana_Or_Hiragana Kawi Kirat_Rai Krai Nag_Mundari Nagm Ol_Onal Onao Sunu Sunuwar Todhri Todr Tulu_Tigalari Tutg Unknown Zzzz";
// This file contains Unicode properties extracted from the ECMAScript specification.
// The lists are extracted like so:
// $$('#table-binary-unicode-properties > figure > table > tbody > tr > td:nth-child(1) code').map(el => el.innerText)
// #table-binary-unicode-properties
var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
var ecma11BinaryProperties = ecma10BinaryProperties;
var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
var ecma13BinaryProperties = ecma12BinaryProperties;
var ecma14BinaryProperties = ecma13BinaryProperties;
var unicodeBinaryProperties = {
    9: ecma9BinaryProperties,
    10: ecma10BinaryProperties,
    11: ecma11BinaryProperties,
    12: ecma12BinaryProperties,
    13: ecma13BinaryProperties,
    14: ecma14BinaryProperties
};
// #table-binary-unicode-properties-of-strings
var ecma14BinaryPropertiesOfStrings = "Basic_Emoji Emoji_Keycap_Sequence RGI_Emoji_Modifier_Sequence RGI_Emoji_Flag_Sequence RGI_Emoji_Tag_Sequence RGI_Emoji_ZWJ_Sequence RGI_Emoji";
var unicodeBinaryPropertiesOfStrings = {
    9: "",
    10: "",
    11: "",
    12: "",
    13: "",
    14: ecma14BinaryPropertiesOfStrings
};
// #table-unicode-general-category-values
var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
// #table-unicode-script-values
var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
var ecma14ScriptValues = ecma13ScriptValues + " " + scriptValuesAddedInUnicode;
var unicodeScriptValues = {
    9: ecma9ScriptValues,
    10: ecma10ScriptValues,
    11: ecma11ScriptValues,
    12: ecma12ScriptValues,
    13: ecma13ScriptValues,
    14: ecma14ScriptValues
};
var data = {};
function buildUnicodeData(ecmaVersion) {
    var d = data[ecmaVersion] = {
        binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
        binaryOfStrings: wordsRegexp(unicodeBinaryPropertiesOfStrings[ecmaVersion]),
        nonBinary: {
            General_Category: wordsRegexp(unicodeGeneralCategoryValues),
            Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
        }
    };
    d.nonBinary.Script_Extensions = d.nonBinary.Script;
    d.nonBinary.gc = d.nonBinary.General_Category;
    d.nonBinary.sc = d.nonBinary.Script;
    d.nonBinary.scx = d.nonBinary.Script_Extensions;
}
for(var i = 0, list = [
    9,
    10,
    11,
    12,
    13,
    14
]; i < list.length; i += 1){
    var ecmaVersion = list[i];
    buildUnicodeData(ecmaVersion);
}
var pp$1 = Parser.prototype;
// Track disjunction structure to determine whether a duplicate
// capture group name is allowed because it is in a separate branch.
var BranchID = function BranchID(parent, base) {
    // Parent disjunction branch
    this.parent = parent;
    // Identifies this set of sibling branches
    this.base = base || this;
};
BranchID.prototype.separatedFrom = function separatedFrom(alt) {
    // A branch is separate from another branch if they or any of
    // their parents are siblings in a given disjunction
    for(var self = this; self; self = self.parent)for(var other = alt; other; other = other.parent){
        if (self.base === other.base && self !== other) return true;
    }
    return false;
};
BranchID.prototype.sibling = function sibling() {
    return new BranchID(this.parent, this.base);
};
var RegExpValidationState = function RegExpValidationState(parser) {
    this.parser = parser;
    this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "") + (parser.options.ecmaVersion >= 15 ? "v" : "");
    this.unicodeProperties = data[parser.options.ecmaVersion >= 14 ? 14 : parser.options.ecmaVersion];
    this.source = "";
    this.flags = "";
    this.start = 0;
    this.switchU = false;
    this.switchV = false;
    this.switchN = false;
    this.pos = 0;
    this.lastIntValue = 0;
    this.lastStringValue = "";
    this.lastAssertionIsQuantifiable = false;
    this.numCapturingParens = 0;
    this.maxBackReference = 0;
    this.groupNames = Object.create(null);
    this.backReferenceNames = [];
    this.branchID = null;
};
RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
    var unicodeSets = flags.indexOf("v") !== -1;
    var unicode = flags.indexOf("u") !== -1;
    this.start = start | 0;
    this.source = pattern + "";
    this.flags = flags;
    if (unicodeSets && this.parser.options.ecmaVersion >= 15) {
        this.switchU = true;
        this.switchV = true;
        this.switchN = true;
    } else {
        this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
        this.switchV = false;
        this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
    }
};
RegExpValidationState.prototype.raise = function raise(message) {
    this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
};
// If u flag is given, this returns the code point at the index (it combines a surrogate pair).
// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).
RegExpValidationState.prototype.at = function at(i, forceU) {
    if (forceU === void 0) forceU = false;
    var s = this.source;
    var l = s.length;
    if (i >= l) return -1;
    var c = s.charCodeAt(i);
    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) return c;
    var next = s.charCodeAt(i + 1);
    return next >= 0xDC00 && next <= 0xDFFF ? (c << 10) + next - 0x35FDC00 : c;
};
RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
    if (forceU === void 0) forceU = false;
    var s = this.source;
    var l = s.length;
    if (i >= l) return l;
    var c = s.charCodeAt(i), next;
    if (!(forceU || this.switchU) || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 0xDC00 || next > 0xDFFF) return i + 1;
    return i + 2;
};
RegExpValidationState.prototype.current = function current(forceU) {
    if (forceU === void 0) forceU = false;
    return this.at(this.pos, forceU);
};
RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
    if (forceU === void 0) forceU = false;
    return this.at(this.nextIndex(this.pos, forceU), forceU);
};
RegExpValidationState.prototype.advance = function advance(forceU) {
    if (forceU === void 0) forceU = false;
    this.pos = this.nextIndex(this.pos, forceU);
};
RegExpValidationState.prototype.eat = function eat(ch, forceU) {
    if (forceU === void 0) forceU = false;
    if (this.current(forceU) === ch) {
        this.advance(forceU);
        return true;
    }
    return false;
};
RegExpValidationState.prototype.eatChars = function eatChars(chs, forceU) {
    if (forceU === void 0) forceU = false;
    var pos = this.pos;
    for(var i = 0, list = chs; i < list.length; i += 1){
        var ch = list[i];
        var current = this.at(pos, forceU);
        if (current === -1 || current !== ch) return false;
        pos = this.nextIndex(pos, forceU);
    }
    this.pos = pos;
    return true;
};
/**
 * Validate the flags part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */ pp$1.validateRegExpFlags = function(state) {
    var validFlags = state.validFlags;
    var flags = state.flags;
    var u = false;
    var v = false;
    for(var i = 0; i < flags.length; i++){
        var flag = flags.charAt(i);
        if (validFlags.indexOf(flag) === -1) this.raise(state.start, "Invalid regular expression flag");
        if (flags.indexOf(flag, i + 1) > -1) this.raise(state.start, "Duplicate regular expression flag");
        if (flag === "u") u = true;
        if (flag === "v") v = true;
    }
    if (this.options.ecmaVersion >= 15 && u && v) this.raise(state.start, "Invalid regular expression flag");
};
function hasProp(obj) {
    for(var _ in obj)return true;
    return false;
}
/**
 * Validate the pattern part of a given RegExpLiteral.
 *
 * @param {RegExpValidationState} state The state to validate RegExp.
 * @returns {void}
 */ pp$1.validateRegExpPattern = function(state) {
    this.regexp_pattern(state);
    // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of
    // parsing contains a |GroupName|, reparse with the goal symbol
    // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*
    // exception if _P_ did not conform to the grammar, if any elements of _P_
    // were not matched by the parse, or if any Early Error conditions exist.
    if (!state.switchN && this.options.ecmaVersion >= 9 && hasProp(state.groupNames)) {
        state.switchN = true;
        this.regexp_pattern(state);
    }
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern
pp$1.regexp_pattern = function(state) {
    state.pos = 0;
    state.lastIntValue = 0;
    state.lastStringValue = "";
    state.lastAssertionIsQuantifiable = false;
    state.numCapturingParens = 0;
    state.maxBackReference = 0;
    state.groupNames = Object.create(null);
    state.backReferenceNames.length = 0;
    state.branchID = null;
    this.regexp_disjunction(state);
    if (state.pos !== state.source.length) {
        // Make the same messages as V8.
        if (state.eat(0x29 /* ) */ )) state.raise("Unmatched ')'");
        if (state.eat(0x5D /* ] */ ) || state.eat(0x7D /* } */ )) state.raise("Lone quantifier brackets");
    }
    if (state.maxBackReference > state.numCapturingParens) state.raise("Invalid escape");
    for(var i = 0, list = state.backReferenceNames; i < list.length; i += 1){
        var name = list[i];
        if (!state.groupNames[name]) state.raise("Invalid named capture referenced");
    }
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction
pp$1.regexp_disjunction = function(state) {
    var trackDisjunction = this.options.ecmaVersion >= 16;
    if (trackDisjunction) state.branchID = new BranchID(state.branchID, null);
    this.regexp_alternative(state);
    while(state.eat(0x7C /* | */ )){
        if (trackDisjunction) state.branchID = state.branchID.sibling();
        this.regexp_alternative(state);
    }
    if (trackDisjunction) state.branchID = state.branchID.parent;
    // Make the same message as V8.
    if (this.regexp_eatQuantifier(state, true)) state.raise("Nothing to repeat");
    if (state.eat(0x7B /* { */ )) state.raise("Lone quantifier brackets");
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative
pp$1.regexp_alternative = function(state) {
    while(state.pos < state.source.length && this.regexp_eatTerm(state));
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term
pp$1.regexp_eatTerm = function(state) {
    if (this.regexp_eatAssertion(state)) {
        // Handle `QuantifiableAssertion Quantifier` alternative.
        // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion
        // is a QuantifiableAssertion.
        if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) // Make the same message as V8.
        {
            if (state.switchU) state.raise("Invalid quantifier");
        }
        return true;
    }
    if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
        this.regexp_eatQuantifier(state);
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion
pp$1.regexp_eatAssertion = function(state) {
    var start = state.pos;
    state.lastAssertionIsQuantifiable = false;
    // ^, $
    if (state.eat(0x5E /* ^ */ ) || state.eat(0x24 /* $ */ )) return true;
    // \b \B
    if (state.eat(0x5C /* \ */ )) {
        if (state.eat(0x42 /* B */ ) || state.eat(0x62 /* b */ )) return true;
        state.pos = start;
    }
    // Lookahead / Lookbehind
    if (state.eat(0x28 /* ( */ ) && state.eat(0x3F /* ? */ )) {
        var lookbehind = false;
        if (this.options.ecmaVersion >= 9) lookbehind = state.eat(0x3C /* < */ );
        if (state.eat(0x3D /* = */ ) || state.eat(0x21 /* ! */ )) {
            this.regexp_disjunction(state);
            if (!state.eat(0x29 /* ) */ )) state.raise("Unterminated group");
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
        }
    }
    state.pos = start;
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier
pp$1.regexp_eatQuantifier = function(state, noError) {
    if (noError === void 0) noError = false;
    if (this.regexp_eatQuantifierPrefix(state, noError)) {
        state.eat(0x3F /* ? */ );
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix
pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
    return state.eat(0x2A /* * */ ) || state.eat(0x2B /* + */ ) || state.eat(0x3F /* ? */ ) || this.regexp_eatBracedQuantifier(state, noError);
};
pp$1.regexp_eatBracedQuantifier = function(state, noError) {
    var start = state.pos;
    if (state.eat(0x7B /* { */ )) {
        var min = 0, max = -1;
        if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(0x2C /* , */ ) && this.regexp_eatDecimalDigits(state)) max = state.lastIntValue;
            if (state.eat(0x7D /* } */ )) {
                // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term
                if (max !== -1 && max < min && !noError) state.raise("numbers out of order in {} quantifier");
                return true;
            }
        }
        if (state.switchU && !noError) state.raise("Incomplete quantifier");
        state.pos = start;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom
pp$1.regexp_eatAtom = function(state) {
    return this.regexp_eatPatternCharacters(state) || state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
};
pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
    var start = state.pos;
    if (state.eat(0x5C /* \ */ )) {
        if (this.regexp_eatAtomEscape(state)) return true;
        state.pos = start;
    }
    return false;
};
pp$1.regexp_eatUncapturingGroup = function(state) {
    var start = state.pos;
    if (state.eat(0x28 /* ( */ )) {
        if (state.eat(0x3F /* ? */ )) {
            if (this.options.ecmaVersion >= 16) {
                var addModifiers = this.regexp_eatModifiers(state);
                var hasHyphen = state.eat(0x2D /* - */ );
                if (addModifiers || hasHyphen) {
                    for(var i = 0; i < addModifiers.length; i++){
                        var modifier = addModifiers.charAt(i);
                        if (addModifiers.indexOf(modifier, i + 1) > -1) state.raise("Duplicate regular expression modifiers");
                    }
                    if (hasHyphen) {
                        var removeModifiers = this.regexp_eatModifiers(state);
                        if (!addModifiers && !removeModifiers && state.current() === 0x3A /* : */ ) state.raise("Invalid regular expression modifiers");
                        for(var i$1 = 0; i$1 < removeModifiers.length; i$1++){
                            var modifier$1 = removeModifiers.charAt(i$1);
                            if (removeModifiers.indexOf(modifier$1, i$1 + 1) > -1 || addModifiers.indexOf(modifier$1) > -1) state.raise("Duplicate regular expression modifiers");
                        }
                    }
                }
            }
            if (state.eat(0x3A /* : */ )) {
                this.regexp_disjunction(state);
                if (state.eat(0x29 /* ) */ )) return true;
                state.raise("Unterminated group");
            }
        }
        state.pos = start;
    }
    return false;
};
pp$1.regexp_eatCapturingGroup = function(state) {
    if (state.eat(0x28 /* ( */ )) {
        if (this.options.ecmaVersion >= 9) this.regexp_groupSpecifier(state);
        else if (state.current() === 0x3F /* ? */ ) state.raise("Invalid group");
        this.regexp_disjunction(state);
        if (state.eat(0x29 /* ) */ )) {
            state.numCapturingParens += 1;
            return true;
        }
        state.raise("Unterminated group");
    }
    return false;
};
// RegularExpressionModifiers ::
//   [empty]
//   RegularExpressionModifiers RegularExpressionModifier
pp$1.regexp_eatModifiers = function(state) {
    var modifiers = "";
    var ch = 0;
    while((ch = state.current()) !== -1 && isRegularExpressionModifier(ch)){
        modifiers += codePointToString(ch);
        state.advance();
    }
    return modifiers;
};
// RegularExpressionModifier :: one of
//   `i` `m` `s`
function isRegularExpressionModifier(ch) {
    return ch === 0x69 /* i */  || ch === 0x6d /* m */  || ch === 0x73 /* s */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom
pp$1.regexp_eatExtendedAtom = function(state) {
    return state.eat(0x2E /* . */ ) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier
pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
    if (this.regexp_eatBracedQuantifier(state, true)) state.raise("Nothing to repeat");
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter
pp$1.regexp_eatSyntaxCharacter = function(state) {
    var ch = state.current();
    if (isSyntaxCharacter(ch)) {
        state.lastIntValue = ch;
        state.advance();
        return true;
    }
    return false;
};
function isSyntaxCharacter(ch) {
    return ch === 0x24 /* $ */  || ch >= 0x28 /* ( */  && ch <= 0x2B /* + */  || ch === 0x2E /* . */  || ch === 0x3F /* ? */  || ch >= 0x5B /* [ */  && ch <= 0x5E /* ^ */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter
// But eat eager.
pp$1.regexp_eatPatternCharacters = function(state) {
    var start = state.pos;
    var ch = 0;
    while((ch = state.current()) !== -1 && !isSyntaxCharacter(ch))state.advance();
    return state.pos !== start;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter
pp$1.regexp_eatExtendedPatternCharacter = function(state) {
    var ch = state.current();
    if (ch !== -1 && ch !== 0x24 /* $ */  && !(ch >= 0x28 /* ( */  && ch <= 0x2B /* + */ ) && ch !== 0x2E /* . */  && ch !== 0x3F /* ? */  && ch !== 0x5B /* [ */  && ch !== 0x5E /* ^ */  && ch !== 0x7C /* | */ ) {
        state.advance();
        return true;
    }
    return false;
};
// GroupSpecifier ::
//   [empty]
//   `?` GroupName
pp$1.regexp_groupSpecifier = function(state) {
    if (state.eat(0x3F /* ? */ )) {
        if (!this.regexp_eatGroupName(state)) state.raise("Invalid group");
        var trackDisjunction = this.options.ecmaVersion >= 16;
        var known = state.groupNames[state.lastStringValue];
        if (known) {
            if (trackDisjunction) for(var i = 0, list = known; i < list.length; i += 1){
                var altID = list[i];
                if (!altID.separatedFrom(state.branchID)) state.raise("Duplicate capture group name");
            }
            else state.raise("Duplicate capture group name");
        }
        if (trackDisjunction) (known || (state.groupNames[state.lastStringValue] = [])).push(state.branchID);
        else state.groupNames[state.lastStringValue] = true;
    }
};
// GroupName ::
//   `<` RegExpIdentifierName `>`
// Note: this updates `state.lastStringValue` property with the eaten name.
pp$1.regexp_eatGroupName = function(state) {
    state.lastStringValue = "";
    if (state.eat(0x3C /* < */ )) {
        if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */ )) return true;
        state.raise("Invalid capture group name");
    }
    return false;
};
// RegExpIdentifierName ::
//   RegExpIdentifierStart
//   RegExpIdentifierName RegExpIdentifierPart
// Note: this updates `state.lastStringValue` property with the eaten name.
pp$1.regexp_eatRegExpIdentifierName = function(state) {
    state.lastStringValue = "";
    if (this.regexp_eatRegExpIdentifierStart(state)) {
        state.lastStringValue += codePointToString(state.lastIntValue);
        while(this.regexp_eatRegExpIdentifierPart(state))state.lastStringValue += codePointToString(state.lastIntValue);
        return true;
    }
    return false;
};
// RegExpIdentifierStart ::
//   UnicodeIDStart
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]
pp$1.regexp_eatRegExpIdentifierStart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch = state.current(forceU);
    state.advance(forceU);
    if (ch === 0x5C /* \ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) ch = state.lastIntValue;
    if (isRegExpIdentifierStart(ch)) {
        state.lastIntValue = ch;
        return true;
    }
    state.pos = start;
    return false;
};
function isRegExpIdentifierStart(ch) {
    return isIdentifierStart(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */ ;
}
// RegExpIdentifierPart ::
//   UnicodeIDContinue
//   `$`
//   `_`
//   `\` RegExpUnicodeEscapeSequence[+U]
//   <ZWNJ>
//   <ZWJ>
pp$1.regexp_eatRegExpIdentifierPart = function(state) {
    var start = state.pos;
    var forceU = this.options.ecmaVersion >= 11;
    var ch = state.current(forceU);
    state.advance(forceU);
    if (ch === 0x5C /* \ */  && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) ch = state.lastIntValue;
    if (isRegExpIdentifierPart(ch)) {
        state.lastIntValue = ch;
        return true;
    }
    state.pos = start;
    return false;
};
function isRegExpIdentifierPart(ch) {
    return isIdentifierChar(ch, true) || ch === 0x24 /* $ */  || ch === 0x5F /* _ */  || ch === 0x200C /* <ZWNJ> */  || ch === 0x200D /* <ZWJ> */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape
pp$1.regexp_eatAtomEscape = function(state) {
    if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) return true;
    if (state.switchU) {
        // Make the same message as V8.
        if (state.current() === 0x63 /* c */ ) state.raise("Invalid unicode escape");
        state.raise("Invalid escape");
    }
    return false;
};
pp$1.regexp_eatBackReference = function(state) {
    var start = state.pos;
    if (this.regexp_eatDecimalEscape(state)) {
        var n = state.lastIntValue;
        if (state.switchU) {
            // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape
            if (n > state.maxBackReference) state.maxBackReference = n;
            return true;
        }
        if (n <= state.numCapturingParens) return true;
        state.pos = start;
    }
    return false;
};
pp$1.regexp_eatKGroupName = function(state) {
    if (state.eat(0x6B /* k */ )) {
        if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
        }
        state.raise("Invalid named reference");
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape
pp$1.regexp_eatCharacterEscape = function(state) {
    return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
};
pp$1.regexp_eatCControlLetter = function(state) {
    var start = state.pos;
    if (state.eat(0x63 /* c */ )) {
        if (this.regexp_eatControlLetter(state)) return true;
        state.pos = start;
    }
    return false;
};
pp$1.regexp_eatZero = function(state) {
    if (state.current() === 0x30 /* 0 */  && !isDecimalDigit(state.lookahead())) {
        state.lastIntValue = 0;
        state.advance();
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape
pp$1.regexp_eatControlEscape = function(state) {
    var ch = state.current();
    if (ch === 0x74 /* t */ ) {
        state.lastIntValue = 0x09; /* \t */ 
        state.advance();
        return true;
    }
    if (ch === 0x6E /* n */ ) {
        state.lastIntValue = 0x0A; /* \n */ 
        state.advance();
        return true;
    }
    if (ch === 0x76 /* v */ ) {
        state.lastIntValue = 0x0B; /* \v */ 
        state.advance();
        return true;
    }
    if (ch === 0x66 /* f */ ) {
        state.lastIntValue = 0x0C; /* \f */ 
        state.advance();
        return true;
    }
    if (ch === 0x72 /* r */ ) {
        state.lastIntValue = 0x0D; /* \r */ 
        state.advance();
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter
pp$1.regexp_eatControlLetter = function(state) {
    var ch = state.current();
    if (isControlLetter(ch)) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true;
    }
    return false;
};
function isControlLetter(ch) {
    return ch >= 0x41 /* A */  && ch <= 0x5A /* Z */  || ch >= 0x61 /* a */  && ch <= 0x7A /* z */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence
pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
    if (forceU === void 0) forceU = false;
    var start = state.pos;
    var switchU = forceU || state.switchU;
    if (state.eat(0x75 /* u */ )) {
        if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 0xD800 && lead <= 0xDBFF) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(0x5C /* \ */ ) && state.eat(0x75 /* u */ ) && this.regexp_eatFixedHexDigits(state, 4)) {
                    var trail = state.lastIntValue;
                    if (trail >= 0xDC00 && trail <= 0xDFFF) {
                        state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                        return true;
                    }
                }
                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
            }
            return true;
        }
        if (switchU && state.eat(0x7B /* { */ ) && this.regexp_eatHexDigits(state) && state.eat(0x7D /* } */ ) && isValidUnicode(state.lastIntValue)) return true;
        if (switchU) state.raise("Invalid unicode escape");
        state.pos = start;
    }
    return false;
};
function isValidUnicode(ch) {
    return ch >= 0 && ch <= 0x10FFFF;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape
pp$1.regexp_eatIdentityEscape = function(state) {
    if (state.switchU) {
        if (this.regexp_eatSyntaxCharacter(state)) return true;
        if (state.eat(0x2F /* / */ )) {
            state.lastIntValue = 0x2F; /* / */ 
            return true;
        }
        return false;
    }
    var ch = state.current();
    if (ch !== 0x63 /* c */  && (!state.switchN || ch !== 0x6B /* k */ )) {
        state.lastIntValue = ch;
        state.advance();
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape
pp$1.regexp_eatDecimalEscape = function(state) {
    state.lastIntValue = 0;
    var ch = state.current();
    if (ch >= 0x31 /* 1 */  && ch <= 0x39 /* 9 */ ) {
        do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );
            state.advance();
        }while ((ch = state.current()) >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ );
        return true;
    }
    return false;
};
// Return values used by character set parsing methods, needed to
// forbid negation of sets that can match strings.
var CharSetNone = 0; // Nothing parsed
var CharSetOk = 1; // Construct parsed, cannot contain strings
var CharSetString = 2; // Construct parsed, can contain strings
// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape
pp$1.regexp_eatCharacterClassEscape = function(state) {
    var ch = state.current();
    if (isCharacterClassEscape(ch)) {
        state.lastIntValue = -1;
        state.advance();
        return CharSetOk;
    }
    var negate = false;
    if (state.switchU && this.options.ecmaVersion >= 9 && ((negate = ch === 0x50 /* P */ ) || ch === 0x70 /* p */ )) {
        state.lastIntValue = -1;
        state.advance();
        var result;
        if (state.eat(0x7B /* { */ ) && (result = this.regexp_eatUnicodePropertyValueExpression(state)) && state.eat(0x7D /* } */ )) {
            if (negate && result === CharSetString) state.raise("Invalid property name");
            return result;
        }
        state.raise("Invalid property name");
    }
    return CharSetNone;
};
function isCharacterClassEscape(ch) {
    return ch === 0x64 /* d */  || ch === 0x44 /* D */  || ch === 0x73 /* s */  || ch === 0x53 /* S */  || ch === 0x77 /* w */  || ch === 0x57 /* W */ ;
}
// UnicodePropertyValueExpression ::
//   UnicodePropertyName `=` UnicodePropertyValue
//   LoneUnicodePropertyNameOrValue
pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
    var start = state.pos;
    // UnicodePropertyName `=` UnicodePropertyValue
    if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */ )) {
        var name = state.lastStringValue;
        if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
            return CharSetOk;
        }
    }
    state.pos = start;
    // LoneUnicodePropertyNameOrValue
    if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
        var nameOrValue = state.lastStringValue;
        return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
    }
    return CharSetNone;
};
pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
    if (!hasOwn(state.unicodeProperties.nonBinary, name)) state.raise("Invalid property name");
    if (!state.unicodeProperties.nonBinary[name].test(value)) state.raise("Invalid property value");
};
pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
    if (state.unicodeProperties.binary.test(nameOrValue)) return CharSetOk;
    if (state.switchV && state.unicodeProperties.binaryOfStrings.test(nameOrValue)) return CharSetString;
    state.raise("Invalid property name");
};
// UnicodePropertyName ::
//   UnicodePropertyNameCharacters
pp$1.regexp_eatUnicodePropertyName = function(state) {
    var ch = 0;
    state.lastStringValue = "";
    while(isUnicodePropertyNameCharacter(ch = state.current())){
        state.lastStringValue += codePointToString(ch);
        state.advance();
    }
    return state.lastStringValue !== "";
};
function isUnicodePropertyNameCharacter(ch) {
    return isControlLetter(ch) || ch === 0x5F /* _ */ ;
}
// UnicodePropertyValue ::
//   UnicodePropertyValueCharacters
pp$1.regexp_eatUnicodePropertyValue = function(state) {
    var ch = 0;
    state.lastStringValue = "";
    while(isUnicodePropertyValueCharacter(ch = state.current())){
        state.lastStringValue += codePointToString(ch);
        state.advance();
    }
    return state.lastStringValue !== "";
};
function isUnicodePropertyValueCharacter(ch) {
    return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
}
// LoneUnicodePropertyNameOrValue ::
//   UnicodePropertyValueCharacters
pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
    return this.regexp_eatUnicodePropertyValue(state);
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass
pp$1.regexp_eatCharacterClass = function(state) {
    if (state.eat(0x5B /* [ */ )) {
        var negate = state.eat(0x5E /* ^ */ );
        var result = this.regexp_classContents(state);
        if (!state.eat(0x5D /* ] */ )) state.raise("Unterminated character class");
        if (negate && result === CharSetString) state.raise("Negated character class may contain strings");
        return true;
    }
    return false;
};
// https://tc39.es/ecma262/#prod-ClassContents
// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges
pp$1.regexp_classContents = function(state) {
    if (state.current() === 0x5D /* ] */ ) return CharSetOk;
    if (state.switchV) return this.regexp_classSetExpression(state);
    this.regexp_nonEmptyClassRanges(state);
    return CharSetOk;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges
// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash
pp$1.regexp_nonEmptyClassRanges = function(state) {
    while(this.regexp_eatClassAtom(state)){
        var left = state.lastIntValue;
        if (state.eat(0x2D /* - */ ) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) state.raise("Invalid character class");
            if (left !== -1 && right !== -1 && left > right) state.raise("Range out of order in character class");
        }
    }
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom
// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash
pp$1.regexp_eatClassAtom = function(state) {
    var start = state.pos;
    if (state.eat(0x5C /* \ */ )) {
        if (this.regexp_eatClassEscape(state)) return true;
        if (state.switchU) {
            // Make the same message as V8.
            var ch$1 = state.current();
            if (ch$1 === 0x63 /* c */  || isOctalDigit(ch$1)) state.raise("Invalid class escape");
            state.raise("Invalid escape");
        }
        state.pos = start;
    }
    var ch = state.current();
    if (ch !== 0x5D /* ] */ ) {
        state.lastIntValue = ch;
        state.advance();
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape
pp$1.regexp_eatClassEscape = function(state) {
    var start = state.pos;
    if (state.eat(0x62 /* b */ )) {
        state.lastIntValue = 0x08; /* <BS> */ 
        return true;
    }
    if (state.switchU && state.eat(0x2D /* - */ )) {
        state.lastIntValue = 0x2D; /* - */ 
        return true;
    }
    if (!state.switchU && state.eat(0x63 /* c */ )) {
        if (this.regexp_eatClassControlLetter(state)) return true;
        state.pos = start;
    }
    return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
};
// https://tc39.es/ecma262/#prod-ClassSetExpression
// https://tc39.es/ecma262/#prod-ClassUnion
// https://tc39.es/ecma262/#prod-ClassIntersection
// https://tc39.es/ecma262/#prod-ClassSubtraction
pp$1.regexp_classSetExpression = function(state) {
    var result = CharSetOk, subResult;
    if (this.regexp_eatClassSetRange(state)) ;
    else if (subResult = this.regexp_eatClassSetOperand(state)) {
        if (subResult === CharSetString) result = CharSetString;
        // https://tc39.es/ecma262/#prod-ClassIntersection
        var start = state.pos;
        while(state.eatChars([
            0x26,
            0x26
        ])){
            if (state.current() !== 0x26 /* & */  && (subResult = this.regexp_eatClassSetOperand(state))) {
                if (subResult !== CharSetString) result = CharSetOk;
                continue;
            }
            state.raise("Invalid character in character class");
        }
        if (start !== state.pos) return result;
        // https://tc39.es/ecma262/#prod-ClassSubtraction
        while(state.eatChars([
            0x2D,
            0x2D
        ])){
            if (this.regexp_eatClassSetOperand(state)) continue;
            state.raise("Invalid character in character class");
        }
        if (start !== state.pos) return result;
    } else state.raise("Invalid character in character class");
    // https://tc39.es/ecma262/#prod-ClassUnion
    for(;;){
        if (this.regexp_eatClassSetRange(state)) continue;
        subResult = this.regexp_eatClassSetOperand(state);
        if (!subResult) return result;
        if (subResult === CharSetString) result = CharSetString;
    }
};
// https://tc39.es/ecma262/#prod-ClassSetRange
pp$1.regexp_eatClassSetRange = function(state) {
    var start = state.pos;
    if (this.regexp_eatClassSetCharacter(state)) {
        var left = state.lastIntValue;
        if (state.eat(0x2D /* - */ ) && this.regexp_eatClassSetCharacter(state)) {
            var right = state.lastIntValue;
            if (left !== -1 && right !== -1 && left > right) state.raise("Range out of order in character class");
            return true;
        }
        state.pos = start;
    }
    return false;
};
// https://tc39.es/ecma262/#prod-ClassSetOperand
pp$1.regexp_eatClassSetOperand = function(state) {
    if (this.regexp_eatClassSetCharacter(state)) return CharSetOk;
    return this.regexp_eatClassStringDisjunction(state) || this.regexp_eatNestedClass(state);
};
// https://tc39.es/ecma262/#prod-NestedClass
pp$1.regexp_eatNestedClass = function(state) {
    var start = state.pos;
    if (state.eat(0x5B /* [ */ )) {
        var negate = state.eat(0x5E /* ^ */ );
        var result = this.regexp_classContents(state);
        if (state.eat(0x5D /* ] */ )) {
            if (negate && result === CharSetString) state.raise("Negated character class may contain strings");
            return result;
        }
        state.pos = start;
    }
    if (state.eat(0x5C /* \ */ )) {
        var result$1 = this.regexp_eatCharacterClassEscape(state);
        if (result$1) return result$1;
        state.pos = start;
    }
    return null;
};
// https://tc39.es/ecma262/#prod-ClassStringDisjunction
pp$1.regexp_eatClassStringDisjunction = function(state) {
    var start = state.pos;
    if (state.eatChars([
        0x5C,
        0x71
    ])) {
        if (state.eat(0x7B /* { */ )) {
            var result = this.regexp_classStringDisjunctionContents(state);
            if (state.eat(0x7D /* } */ )) return result;
        } else // Make the same message as V8.
        state.raise("Invalid escape");
        state.pos = start;
    }
    return null;
};
// https://tc39.es/ecma262/#prod-ClassStringDisjunctionContents
pp$1.regexp_classStringDisjunctionContents = function(state) {
    var result = this.regexp_classString(state);
    while(state.eat(0x7C /* | */ ))if (this.regexp_classString(state) === CharSetString) result = CharSetString;
    return result;
};
// https://tc39.es/ecma262/#prod-ClassString
// https://tc39.es/ecma262/#prod-NonEmptyClassString
pp$1.regexp_classString = function(state) {
    var count = 0;
    while(this.regexp_eatClassSetCharacter(state))count++;
    return count === 1 ? CharSetOk : CharSetString;
};
// https://tc39.es/ecma262/#prod-ClassSetCharacter
pp$1.regexp_eatClassSetCharacter = function(state) {
    var start = state.pos;
    if (state.eat(0x5C /* \ */ )) {
        if (this.regexp_eatCharacterEscape(state) || this.regexp_eatClassSetReservedPunctuator(state)) return true;
        if (state.eat(0x62 /* b */ )) {
            state.lastIntValue = 0x08; /* <BS> */ 
            return true;
        }
        state.pos = start;
        return false;
    }
    var ch = state.current();
    if (ch < 0 || ch === state.lookahead() && isClassSetReservedDoublePunctuatorCharacter(ch)) return false;
    if (isClassSetSyntaxCharacter(ch)) return false;
    state.advance();
    state.lastIntValue = ch;
    return true;
};
// https://tc39.es/ecma262/#prod-ClassSetReservedDoublePunctuator
function isClassSetReservedDoublePunctuatorCharacter(ch) {
    return ch === 0x21 /* ! */  || ch >= 0x23 /* # */  && ch <= 0x26 /* & */  || ch >= 0x2A /* * */  && ch <= 0x2C /* , */  || ch === 0x2E /* . */  || ch >= 0x3A /* : */  && ch <= 0x40 /* @ */  || ch === 0x5E /* ^ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;
}
// https://tc39.es/ecma262/#prod-ClassSetSyntaxCharacter
function isClassSetSyntaxCharacter(ch) {
    return ch === 0x28 /* ( */  || ch === 0x29 /* ) */  || ch === 0x2D /* - */  || ch === 0x2F /* / */  || ch >= 0x5B /* [ */  && ch <= 0x5D /* ] */  || ch >= 0x7B /* { */  && ch <= 0x7D /* } */ ;
}
// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator
pp$1.regexp_eatClassSetReservedPunctuator = function(state) {
    var ch = state.current();
    if (isClassSetReservedPunctuator(ch)) {
        state.lastIntValue = ch;
        state.advance();
        return true;
    }
    return false;
};
// https://tc39.es/ecma262/#prod-ClassSetReservedPunctuator
function isClassSetReservedPunctuator(ch) {
    return ch === 0x21 /* ! */  || ch === 0x23 /* # */  || ch === 0x25 /* % */  || ch === 0x26 /* & */  || ch === 0x2C /* , */  || ch === 0x2D /* - */  || ch >= 0x3A /* : */  && ch <= 0x3E /* > */  || ch === 0x40 /* @ */  || ch === 0x60 /* ` */  || ch === 0x7E /* ~ */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter
pp$1.regexp_eatClassControlLetter = function(state) {
    var ch = state.current();
    if (isDecimalDigit(ch) || ch === 0x5F /* _ */ ) {
        state.lastIntValue = ch % 0x20;
        state.advance();
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
pp$1.regexp_eatHexEscapeSequence = function(state) {
    var start = state.pos;
    if (state.eat(0x78 /* x */ )) {
        if (this.regexp_eatFixedHexDigits(state, 2)) return true;
        if (state.switchU) state.raise("Invalid escape");
        state.pos = start;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits
pp$1.regexp_eatDecimalDigits = function(state) {
    var start = state.pos;
    var ch = 0;
    state.lastIntValue = 0;
    while(isDecimalDigit(ch = state.current())){
        state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */ );
        state.advance();
    }
    return state.pos !== start;
};
function isDecimalDigit(ch) {
    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits
pp$1.regexp_eatHexDigits = function(state) {
    var start = state.pos;
    var ch = 0;
    state.lastIntValue = 0;
    while(isHexDigit(ch = state.current())){
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
    }
    return state.pos !== start;
};
function isHexDigit(ch) {
    return ch >= 0x30 /* 0 */  && ch <= 0x39 /* 9 */  || ch >= 0x41 /* A */  && ch <= 0x46 /* F */  || ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ;
}
function hexToInt(ch) {
    if (ch >= 0x41 /* A */  && ch <= 0x46 /* F */ ) return 10 + (ch - 0x41 /* A */ );
    if (ch >= 0x61 /* a */  && ch <= 0x66 /* f */ ) return 10 + (ch - 0x61 /* a */ );
    return ch - 0x30 /* 0 */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence
// Allows only 0-377(octal) i.e. 0-255(decimal).
pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
    if (this.regexp_eatOctalDigit(state)) {
        var n1 = state.lastIntValue;
        if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            else state.lastIntValue = n1 * 8 + n2;
        } else state.lastIntValue = n1;
        return true;
    }
    return false;
};
// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit
pp$1.regexp_eatOctalDigit = function(state) {
    var ch = state.current();
    if (isOctalDigit(ch)) {
        state.lastIntValue = ch - 0x30; /* 0 */ 
        state.advance();
        return true;
    }
    state.lastIntValue = 0;
    return false;
};
function isOctalDigit(ch) {
    return ch >= 0x30 /* 0 */  && ch <= 0x37 /* 7 */ ;
}
// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits
// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit
// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence
pp$1.regexp_eatFixedHexDigits = function(state, length) {
    var start = state.pos;
    state.lastIntValue = 0;
    for(var i = 0; i < length; ++i){
        var ch = state.current();
        if (!isHexDigit(ch)) {
            state.pos = start;
            return false;
        }
        state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
        state.advance();
    }
    return true;
};
// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.
var Token = function Token(p) {
    this.type = p.type;
    this.value = p.value;
    this.start = p.start;
    this.end = p.end;
    if (p.options.locations) this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
    if (p.options.ranges) this.range = [
        p.start,
        p.end
    ];
};
// ## Tokenizer
var pp = Parser.prototype;
// Move to the next token
pp.next = function(ignoreEscapeSequenceInKeyword) {
    if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
    if (this.options.onToken) this.options.onToken(new Token(this));
    this.lastTokEnd = this.end;
    this.lastTokStart = this.start;
    this.lastTokEndLoc = this.endLoc;
    this.lastTokStartLoc = this.startLoc;
    this.nextToken();
};
pp.getToken = function() {
    this.next();
    return new Token(this);
};
// If we're in an ES6 environment, make parsers iterable
if (typeof Symbol !== "undefined") pp[Symbol.iterator] = function() {
    var this$1$1 = this;
    return {
        next: function() {
            var token = this$1$1.getToken();
            return {
                done: token.type === types$1.eof,
                value: token
            };
        }
    };
};
// Toggle strict mode. Re-reads the next number or string to please
// pedantic tests (`"use strict"; 010;` should fail).
// Read a single token, updating the parser object's token-related
// properties.
pp.nextToken = function() {
    var curContext = this.curContext();
    if (!curContext || !curContext.preserveSpace) this.skipSpace();
    this.start = this.pos;
    if (this.options.locations) this.startLoc = this.curPosition();
    if (this.pos >= this.input.length) return this.finishToken(types$1.eof);
    if (curContext.override) return curContext.override(this);
    else this.readToken(this.fullCharCodeAtPos());
};
pp.readToken = function(code) {
    // Identifier or keyword. '\uXXXX' sequences are allowed in
    // identifiers, so '\' also dispatches to that.
    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */ ) return this.readWord();
    return this.getTokenFromCode(code);
};
pp.fullCharCodeAtPos = function() {
    var code = this.input.charCodeAt(this.pos);
    if (code <= 0xd7ff || code >= 0xdc00) return code;
    var next = this.input.charCodeAt(this.pos + 1);
    return next <= 0xdbff || next >= 0xe000 ? code : (code << 10) + next - 0x35fdc00;
};
pp.skipBlockComment = function() {
    var startLoc = this.options.onComment && this.curPosition();
    var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
    if (end === -1) this.raise(this.pos - 2, "Unterminated comment");
    this.pos = end + 2;
    if (this.options.locations) for(var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1;){
        ++this.curLine;
        pos = this.lineStart = nextBreak;
    }
    if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
};
pp.skipLineComment = function(startSkip) {
    var start = this.pos;
    var startLoc = this.options.onComment && this.curPosition();
    var ch = this.input.charCodeAt(this.pos += startSkip);
    while(this.pos < this.input.length && !isNewLine(ch))ch = this.input.charCodeAt(++this.pos);
    if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
};
// Called at the start of the parse and after every token. Skips
// whitespace and comments, and.
pp.skipSpace = function() {
    loop: while(this.pos < this.input.length){
        var ch = this.input.charCodeAt(this.pos);
        switch(ch){
            case 32:
            case 160:
                ++this.pos;
                break;
            case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) ++this.pos;
            case 10:
            case 8232:
            case 8233:
                ++this.pos;
                if (this.options.locations) {
                    ++this.curLine;
                    this.lineStart = this.pos;
                }
                break;
            case 47:
                switch(this.input.charCodeAt(this.pos + 1)){
                    case 42:
                        this.skipBlockComment();
                        break;
                    case 47:
                        this.skipLineComment(2);
                        break;
                    default:
                        break loop;
                }
                break;
            default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) ++this.pos;
                else break loop;
        }
    }
};
// Called at the end of every token. Sets `end`, `val`, and
// maintains `context` and `exprAllowed`, and skips the space after
// the token, so that the next one's `start` will point at the
// right position.
pp.finishToken = function(type, val) {
    this.end = this.pos;
    if (this.options.locations) this.endLoc = this.curPosition();
    var prevType = this.type;
    this.type = type;
    this.value = val;
    this.updateContext(prevType);
};
// ### Token reading
// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
//
pp.readToken_dot = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next >= 48 && next <= 57) return this.readNumber(true);
    var next2 = this.input.charCodeAt(this.pos + 2);
    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
        this.pos += 3;
        return this.finishToken(types$1.ellipsis);
    } else {
        ++this.pos;
        return this.finishToken(types$1.dot);
    }
};
pp.readToken_slash = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (this.exprAllowed) {
        ++this.pos;
        return this.readRegexp();
    }
    if (next === 61) return this.finishOp(types$1.assign, 2);
    return this.finishOp(types$1.slash, 1);
};
pp.readToken_mult_modulo_exp = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    var tokentype = code === 42 ? types$1.star : types$1.modulo;
    // exponentiation operator ** and **=
    if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
        ++size;
        tokentype = types$1.starstar;
        next = this.input.charCodeAt(this.pos + 2);
    }
    if (next === 61) return this.finishOp(types$1.assign, size + 1);
    return this.finishOp(tokentype, size);
};
pp.readToken_pipe_amp = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
        if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) return this.finishOp(types$1.assign, 3);
        }
        return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
    }
    if (next === 61) return this.finishOp(types$1.assign, 2);
    return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
};
pp.readToken_caret = function() {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) return this.finishOp(types$1.assign, 2);
    return this.finishOp(types$1.bitwiseXOR, 1);
};
pp.readToken_plus_min = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === code) {
        if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            // A `-->` line comment
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
        }
        return this.finishOp(types$1.incDec, 2);
    }
    if (next === 61) return this.finishOp(types$1.assign, 2);
    return this.finishOp(types$1.plusMin, 1);
};
pp.readToken_lt_gt = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    var size = 1;
    if (next === code) {
        size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(types$1.assign, size + 1);
        return this.finishOp(types$1.bitShift, size);
    }
    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
        // `<!--`, an XML-style comment that should be interpreted as a line comment
        this.skipLineComment(4);
        this.skipSpace();
        return this.nextToken();
    }
    if (next === 61) size = 2;
    return this.finishOp(types$1.relational, size);
};
pp.readToken_eq_excl = function(code) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 61) return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
        this.pos += 2;
        return this.finishToken(types$1.arrow);
    }
    return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
};
pp.readToken_question = function() {
    var ecmaVersion = this.options.ecmaVersion;
    if (ecmaVersion >= 11) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) return this.finishOp(types$1.questionDot, 2);
        }
        if (next === 63) {
            if (ecmaVersion >= 12) {
                var next2$1 = this.input.charCodeAt(this.pos + 2);
                if (next2$1 === 61) return this.finishOp(types$1.assign, 3);
            }
            return this.finishOp(types$1.coalesce, 2);
        }
    }
    return this.finishOp(types$1.question, 1);
};
pp.readToken_numberSign = function() {
    var ecmaVersion = this.options.ecmaVersion;
    var code = 35; // '#'
    if (ecmaVersion >= 13) {
        ++this.pos;
        code = this.fullCharCodeAtPos();
        if (isIdentifierStart(code, true) || code === 92 /* '\' */ ) return this.finishToken(types$1.privateId, this.readWord1());
    }
    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
};
pp.getTokenFromCode = function(code) {
    switch(code){
        // The interpretation of a dot depends on whether it is followed
        // by a digit or another two dots.
        case 46:
            return this.readToken_dot();
        // Punctuation tokens.
        case 40:
            ++this.pos;
            return this.finishToken(types$1.parenL);
        case 41:
            ++this.pos;
            return this.finishToken(types$1.parenR);
        case 59:
            ++this.pos;
            return this.finishToken(types$1.semi);
        case 44:
            ++this.pos;
            return this.finishToken(types$1.comma);
        case 91:
            ++this.pos;
            return this.finishToken(types$1.bracketL);
        case 93:
            ++this.pos;
            return this.finishToken(types$1.bracketR);
        case 123:
            ++this.pos;
            return this.finishToken(types$1.braceL);
        case 125:
            ++this.pos;
            return this.finishToken(types$1.braceR);
        case 58:
            ++this.pos;
            return this.finishToken(types$1.colon);
        case 96:
            if (this.options.ecmaVersion < 6) break;
            ++this.pos;
            return this.finishToken(types$1.backQuote);
        case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) return this.readRadixNumber(16);
             // '0x', '0X' - hex number
            if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) return this.readRadixNumber(8);
                 // '0o', '0O' - octal number
                if (next === 98 || next === 66) return this.readRadixNumber(2);
                 // '0b', '0B' - binary number
            }
        // Anything else beginning with a digit is an integer, octal
        // number, or float.
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
            return this.readNumber(false);
        // Quotes produce strings.
        case 34:
        case 39:
            return this.readString(code);
        // Operators are parsed inline in tiny state machines. '=' (61) is
        // often referred to. `finishOp` simply skips the amount of
        // characters it is given as second argument, and returns a token
        // of the type given by its first argument.
        case 47:
            return this.readToken_slash();
        case 37:
        case 42:
            return this.readToken_mult_modulo_exp(code);
        case 124:
        case 38:
            return this.readToken_pipe_amp(code);
        case 94:
            return this.readToken_caret();
        case 43:
        case 45:
            return this.readToken_plus_min(code);
        case 60:
        case 62:
            return this.readToken_lt_gt(code);
        case 61:
        case 33:
            return this.readToken_eq_excl(code);
        case 63:
            return this.readToken_question();
        case 126:
            return this.finishOp(types$1.prefix, 1);
        case 35:
            return this.readToken_numberSign();
    }
    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
};
pp.finishOp = function(type, size) {
    var str = this.input.slice(this.pos, this.pos + size);
    this.pos += size;
    return this.finishToken(type, str);
};
pp.readRegexp = function() {
    var escaped, inClass, start = this.pos;
    for(;;){
        if (this.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
        var ch = this.input.charAt(this.pos);
        if (lineBreak.test(ch)) this.raise(start, "Unterminated regular expression");
        if (!escaped) {
            if (ch === "[") inClass = true;
            else if (ch === "]" && inClass) inClass = false;
            else if (ch === "/" && !inClass) break;
            escaped = ch === "\\";
        } else escaped = false;
        ++this.pos;
    }
    var pattern = this.input.slice(start, this.pos);
    ++this.pos;
    var flagsStart = this.pos;
    var flags = this.readWord1();
    if (this.containsEsc) this.unexpected(flagsStart);
    // Validate pattern
    var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
    state.reset(start, pattern, flags);
    this.validateRegExpFlags(state);
    this.validateRegExpPattern(state);
    // Create Literal#value property value.
    var value = null;
    try {
        value = new RegExp(pattern, flags);
    } catch (e) {
    // ESTree requires null if it failed to instantiate RegExp object.
    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral
    }
    return this.finishToken(types$1.regexp, {
        pattern: pattern,
        flags: flags,
        value: value
    });
};
// Read an integer in the given radix. Return null if zero digits
// were read, the integer value otherwise. When `len` is given, this
// will return `null` unless the integer has exactly `len` digits.
pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
    // `len` is used for character escape sequences. In that case, disallow separators.
    var allowSeparators = this.options.ecmaVersion >= 12 && len === undefined;
    // `maybeLegacyOctalNumericLiteral` is true if it doesn't have prefix (0x,0o,0b)
    // and isn't fraction part nor exponent part. In that case, if the first digit
    // is zero then disallow separators.
    var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
    var start = this.pos, total = 0, lastCode = 0;
    for(var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos){
        var code = this.input.charCodeAt(this.pos), val = void 0;
        if (allowSeparators && code === 95) {
            if (isLegacyOctalNumericLiteral) this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            if (lastCode === 95) this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            if (i === 0) this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            lastCode = code;
            continue;
        }
        if (code >= 97) val = code - 97 + 10;
        else if (code >= 65) val = code - 65 + 10;
        else if (code >= 48 && code <= 57) val = code - 48;
        else val = Infinity;
        if (val >= radix) break;
        lastCode = code;
        total = total * radix + val;
    }
    if (allowSeparators && lastCode === 95) this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
    if (this.pos === start || len != null && this.pos - start !== len) return null;
    return total;
};
function stringToNumber(str, isLegacyOctalNumericLiteral) {
    if (isLegacyOctalNumericLiteral) return parseInt(str, 8);
    // `parseFloat(value)` stops parsing at the first numeric separator then returns a wrong value.
    return parseFloat(str.replace(/_/g, ""));
}
function stringToBigInt(str) {
    if (typeof BigInt !== "function") return null;
    // `BigInt(value)` throws syntax error if the string contains numeric separators.
    return BigInt(str.replace(/_/g, ""));
}
pp.readRadixNumber = function(radix) {
    var start = this.pos;
    this.pos += 2; // 0x
    var val = this.readInt(radix);
    if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix);
    if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
        val = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
    } else if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
    return this.finishToken(types$1.num, val);
};
// Read an integer, octal integer, or floating-point number.
pp.readNumber = function(startsWithDot) {
    var start = this.pos;
    if (!startsWithDot && this.readInt(10, undefined, true) === null) this.raise(start, "Invalid number");
    var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
    if (octal && this.strict) this.raise(start, "Invalid number");
    var next = this.input.charCodeAt(this.pos);
    if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
        var val$1 = stringToBigInt(this.input.slice(start, this.pos));
        ++this.pos;
        if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
        return this.finishToken(types$1.num, val$1);
    }
    if (octal && /[89]/.test(this.input.slice(start, this.pos))) octal = false;
    if (next === 46 && !octal) {
        ++this.pos;
        this.readInt(10);
        next = this.input.charCodeAt(this.pos);
    }
    if ((next === 69 || next === 101) && !octal) {
        next = this.input.charCodeAt(++this.pos);
        if (next === 43 || next === 45) ++this.pos;
         // '+-'
        if (this.readInt(10) === null) this.raise(start, "Invalid number");
    }
    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
    var val = stringToNumber(this.input.slice(start, this.pos), octal);
    return this.finishToken(types$1.num, val);
};
// Read a string value, interpreting backslash-escapes.
pp.readCodePoint = function() {
    var ch = this.input.charCodeAt(this.pos), code;
    if (ch === 123) {
        if (this.options.ecmaVersion < 6) this.unexpected();
        var codePos = ++this.pos;
        code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
        ++this.pos;
        if (code > 0x10FFFF) this.invalidStringToken(codePos, "Code point out of bounds");
    } else code = this.readHexChar(4);
    return code;
};
pp.readString = function(quote) {
    var out = "", chunkStart = ++this.pos;
    for(;;){
        if (this.pos >= this.input.length) this.raise(this.start, "Unterminated string constant");
        var ch = this.input.charCodeAt(this.pos);
        if (ch === quote) break;
        if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
        } else if (ch === 0x2028 || ch === 0x2029) {
            if (this.options.ecmaVersion < 10) this.raise(this.start, "Unterminated string constant");
            ++this.pos;
            if (this.options.locations) {
                this.curLine++;
                this.lineStart = this.pos;
            }
        } else {
            if (isNewLine(ch)) this.raise(this.start, "Unterminated string constant");
            ++this.pos;
        }
    }
    out += this.input.slice(chunkStart, this.pos++);
    return this.finishToken(types$1.string, out);
};
// Reads template string tokens.
var INVALID_TEMPLATE_ESCAPE_ERROR = {};
pp.tryReadTemplateToken = function() {
    this.inTemplateElement = true;
    try {
        this.readTmplToken();
    } catch (err) {
        if (err === INVALID_TEMPLATE_ESCAPE_ERROR) this.readInvalidTemplateToken();
        else throw err;
    }
    this.inTemplateElement = false;
};
pp.invalidStringToken = function(position, message) {
    if (this.inTemplateElement && this.options.ecmaVersion >= 9) throw INVALID_TEMPLATE_ESCAPE_ERROR;
    else this.raise(position, message);
};
pp.readTmplToken = function() {
    var out = "", chunkStart = this.pos;
    for(;;){
        if (this.pos >= this.input.length) this.raise(this.start, "Unterminated template");
        var ch = this.input.charCodeAt(this.pos);
        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
                if (ch === 36) {
                    this.pos += 2;
                    return this.finishToken(types$1.dollarBraceL);
                } else {
                    ++this.pos;
                    return this.finishToken(types$1.backQuote);
                }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types$1.template, out);
        }
        if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
        } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch(ch){
                case 13:
                    if (this.input.charCodeAt(this.pos) === 10) ++this.pos;
                case 10:
                    out += "\n";
                    break;
                default:
                    out += String.fromCharCode(ch);
                    break;
            }
            if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
            }
            chunkStart = this.pos;
        } else ++this.pos;
    }
};
// Reads a template token to search for the end, without validating any escape sequences
pp.readInvalidTemplateToken = function() {
    for(; this.pos < this.input.length; this.pos++)switch(this.input[this.pos]){
        case "\\":
            ++this.pos;
            break;
        case "$":
            if (this.input[this.pos + 1] !== "{") break;
        // fall through
        case "`":
            return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
        case "\r":
            if (this.input[this.pos + 1] === "\n") ++this.pos;
        // fall through
        case "\n":
        case "\u2028":
        case "\u2029":
            ++this.curLine;
            this.lineStart = this.pos + 1;
            break;
    }
    this.raise(this.start, "Unterminated template");
};
// Used to read escaped characters
pp.readEscapedChar = function(inTemplate) {
    var ch = this.input.charCodeAt(++this.pos);
    ++this.pos;
    switch(ch){
        case 110:
            return "\n" // 'n' -> '\n'
            ;
        case 114:
            return "\r" // 'r' -> '\r'
            ;
        case 120:
            return String.fromCharCode(this.readHexChar(2)) // 'x'
            ;
        case 117:
            return codePointToString(this.readCodePoint()) // 'u'
            ;
        case 116:
            return "\t" // 't' -> '\t'
            ;
        case 98:
            return "\b" // 'b' -> '\b'
            ;
        case 118:
            return "\u000b" // 'v' -> '\u000b'
            ;
        case 102:
            return "\f" // 'f' -> '\f'
            ;
        case 13:
            if (this.input.charCodeAt(this.pos) === 10) ++this.pos;
             // '\r\n'
        case 10:
            if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
            }
            return "";
        case 56:
        case 57:
            if (this.strict) this.invalidStringToken(this.pos - 1, "Invalid escape sequence");
            if (inTemplate) {
                var codePos = this.pos - 1;
                this.invalidStringToken(codePos, "Invalid escape sequence in template string");
            }
        default:
            if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                var octal = parseInt(octalStr, 8);
                if (octal > 255) {
                    octalStr = octalStr.slice(0, -1);
                    octal = parseInt(octalStr, 8);
                }
                this.pos += octalStr.length - 1;
                ch = this.input.charCodeAt(this.pos);
                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
                return String.fromCharCode(octal);
            }
            if (isNewLine(ch)) {
                // Unicode new line characters after \ get removed from output in both
                // template literals and strings
                if (this.options.locations) {
                    this.lineStart = this.pos;
                    ++this.curLine;
                }
                return "";
            }
            return String.fromCharCode(ch);
    }
};
// Used to read character escape sequences ('\x', '\u', '\U').
pp.readHexChar = function(len) {
    var codePos = this.pos;
    var n = this.readInt(16, len);
    if (n === null) this.invalidStringToken(codePos, "Bad character escape sequence");
    return n;
};
// Read an identifier, and return it as a string. Sets `this.containsEsc`
// to whether the word contained a '\u' escape.
//
// Incrementally adds only escaped chars, adding other chunks as-is
// as a micro-optimization.
pp.readWord1 = function() {
    this.containsEsc = false;
    var word = "", first = true, chunkStart = this.pos;
    var astral = this.options.ecmaVersion >= 6;
    while(this.pos < this.input.length){
        var ch = this.fullCharCodeAtPos();
        if (isIdentifierChar(ch, astral)) this.pos += ch <= 0xffff ? 1 : 2;
        else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) this.invalidStringToken(escStart, "Invalid Unicode escape");
            word += codePointToString(esc);
            chunkStart = this.pos;
        } else break;
        first = false;
    }
    return word + this.input.slice(chunkStart, this.pos);
};
// Read an identifier or keyword token. Will check for reserved
// words when necessary.
pp.readWord = function() {
    var word = this.readWord1();
    var type = types$1.name;
    if (this.keywords.test(word)) type = keywords[word];
    return this.finishToken(type, word);
};
// Acorn is a tiny, fast JavaScript parser written in JavaScript.
//
// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
// various contributors and released under an MIT license.
//
// Git repositories for Acorn are available at
//
//     http://marijnhaverbeke.nl/git/acorn
//     https://github.com/acornjs/acorn.git
//
// Please use the [github bug tracker][ghbt] to report issues.
//
// [ghbt]: https://github.com/acornjs/acorn/issues
//
// [walk]: util/walk.js
var version = "8.14.0";
Parser.acorn = {
    Parser: Parser,
    version: version,
    defaultOptions: defaultOptions,
    Position: Position,
    SourceLocation: SourceLocation,
    getLineInfo: getLineInfo,
    Node: Node,
    TokenType: TokenType,
    tokTypes: types$1,
    keywordTypes: keywords,
    TokContext: TokContext,
    tokContexts: types,
    isIdentifierChar: isIdentifierChar,
    isIdentifierStart: isIdentifierStart,
    Token: Token,
    isNewLine: isNewLine,
    lineBreak: lineBreak,
    lineBreakG: lineBreakG,
    nonASCIIwhitespace: nonASCIIwhitespace
};
// The main exported interface (under `self.acorn` when in the
// browser) is a `parse` function that takes a code string and returns
// an abstract syntax tree as specified by the [ESTree spec][estree].
//
// [estree]: https://github.com/estree/estree
function parse(input, options) {
    return Parser.parse(input, options);
}
// This function tries to parse a single expression at a given
// offset in a string. Useful for parsing mixed-language formats
// that embed JavaScript expressions.
function parseExpressionAt(input, pos, options) {
    return Parser.parseExpressionAt(input, pos, options);
}
// Acorn is organized as a tokenizer and a recursive-descent parser.
// The `tokenizer` export provides an interface to the tokenizer.
function tokenizer(input, options) {
    return Parser.tokenizer(input, options);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIcx0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// There are various spots below that utilize setTimeout in order to process events in order and to prevent
// long-running computations from blocking UI updates.
// See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Event_loop
parcelHelpers.export(exports, "Puzzle", ()=>Puzzle);
var _layout = require("./layout");
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _util = require("./util");
var _item = require("./item");
var _mask = require("./items/mask");
var _modifier = require("./modifier");
var _beam = require("./items/beam");
var _collision = require("./items/collision");
var _stateful = require("./stateful");
var _offset = require("./coordinates/offset");
var _state = require("./state");
var _puzzles = require("../puzzles");
var _step = require("./step");
var _eventListeners = require("./eventListeners");
var _solution = require("./solution");
var _interact = require("./interact");
var _tile = require("./items/tile");
var _editor = require("./editor");
var _view = require("./view");
var _schema = require("./schema");
const confirm = window.confirm;
const elements = Object.freeze({
    canvas: document.getElementById('puzzle-canvas'),
    debug: document.getElementById('debug'),
    footer: document.getElementById('puzzle-footer'),
    footerMessage: document.getElementById('puzzle-footer-message'),
    headerMenu: document.getElementById('puzzle-header-menu'),
    headerMessage: document.getElementById('puzzle-header-message'),
    id: document.getElementById('puzzle-id'),
    info: document.getElementById('puzzle-info'),
    infoAuthor: document.getElementById('puzzle-info-author'),
    infoId: document.getElementById('puzzle-info-id'),
    infoTitle: document.getElementById('puzzle-info-title'),
    next: document.getElementById('puzzle-next'),
    previous: document.getElementById('puzzle-previous'),
    recenter: document.getElementById('puzzle-recenter'),
    redo: document.getElementById('puzzle-redo'),
    reset: document.getElementById('puzzle-reset'),
    undo: document.getElementById('puzzle-undo'),
    title: document.querySelector('title'),
    wrapper: document.getElementById('puzzle-wrapper')
});
class Puzzle {
    connections = [];
    debug = (0, _util.params).has('debug');
    element = elements.canvas;
    error = false;
    layers = {};
    message;
    selectedTile;
    solved = false;
    state;
    #beamsUpdateDelay = 30;
    #collisions = {};
    #editor;
    #eventListeners = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #interact;
    #isUpdatingBeams = false;
    #isTearingDown = false;
    #mask;
    #maskQueue = [];
    #solution;
    constructor(){
        // Don't automatically insert items into the scene graph, they must be explicitly inserted
        (0, _paperDefault.default).settings.insertItems = false;
        // noinspection JSCheckFunctionSignatures
        (0, _paperDefault.default).setup(elements.canvas);
        // These layers will be added in the order they are defined
        const layers = [
            'mask',
            'collisions',
            'debug'
        ];
        layers.forEach((name)=>{
            this.layers[name] = new (0, _paper.Layer)({
                name
            });
        });
        if ((0, _util.params).has((0, _state.State).ParamKeys.Edit)) // Edit mode
        this.#editor = new (0, _editor.Editor)(this);
        this.resize(false);
        this.#eventListeners.add([
            {
                type: (0, _beam.Beam).Events.Update,
                handler: this.#onBeamUpdate
            },
            {
                type: 'change',
                element: elements.id,
                handler: this.#onSelect
            },
            {
                type: 'click',
                element: elements.next,
                handler: this.#next
            },
            {
                type: 'click',
                element: elements.previous,
                handler: this.#previous
            },
            {
                type: 'click',
                element: elements.recenter,
                handler: this.#onRecenter
            },
            {
                type: 'click',
                element: elements.redo,
                handler: this.#redo
            },
            {
                type: 'click',
                element: elements.reset,
                handler: this.#reset,
                options: {
                    passive: true
                }
            },
            {
                type: 'click',
                element: elements.undo,
                handler: this.#undo
            },
            {
                type: 'keyup',
                handler: this.#onKeyup
            },
            {
                type: (0, _modifier.Modifier).Events.Invoked,
                handler: this.#onModifierInvoked
            },
            {
                type: (0, _modifier.Modifier).Events.Toggled,
                handler: this.#onModifierToggled
            },
            {
                type: 'pointermove',
                element: elements.canvas,
                handler: this.#onPointerMove
            },
            {
                type: Puzzle.Events.Mask,
                handler: this.#onMask
            },
            {
                type: 'resize',
                element: window,
                handler: (0, _util.debounce)(this.resize.bind(this))
            },
            {
                type: (0, _stateful.Stateful).Events.Update,
                handler: this.#onStateUpdate
            },
            {
                type: 'tap',
                element: elements.canvas,
                handler: this.#onTap
            }
        ]);
        this.#interact = new (0, _interact.Interact)(elements.canvas);
        this.#updateDropdown();
        this.select();
        if (this.#editor) this.#editor.setup();
    }
    centerOnTile(offset) {
        const tile = this.layout.getTile(offset);
        (0, _view.View).setCenter(tile.center);
        return tile.equals(this.selectedTile);
    }
    clearDebugPoints() {
        this.layers.debug.clear();
    }
    drawDebugPoint(point, style = {}) {
        const circle = new (0, _paper.Path).Circle(Object.assign({
            radius: 3,
            fillColor: 'red',
            strokeColor: 'white',
            strokeWidth: 1,
            center: point
        }, style));
        this.layers.debug.addChild(circle);
    }
    getBeams() {
        return this.layout.getItems().filter((item)=>item.type === (0, _item.Item).Types.terminus).flatMap((terminus)=>terminus.beams);
    }
    getBeamsUpdateDelay() {
        return this.#beamsUpdateDelay;
    }
    getMoves() {
        return this.state.moves();
    }
    getProjectPoint(point) {
        return this.#interact.getProjectPoint(point);
    }
    getSolution() {
        return (0, _util.base64encode)(JSON.stringify(this.getMoves()));
    }
    getTile(point) {
        const result = (0, _paperDefault.default).project.hitTest(point.ceil(), {
            fill: true,
            match: (result)=>result.item.data.type === (0, _item.Item).Types.tile,
            segments: true,
            stroke: true,
            tolerance: 0
        });
        return result ? this.layout.getTile(result.item.data.coordinates.offset) : result;
    }
    getTitle() {
        const id = this.state.getId();
        const title = this.state.getTitle();
        return id + (title ? ` - "${title}"` : '');
    }
    mask(mask) {
        if (this.#mask) {
            if (this.#mask.equals(mask)) {
                console.debug(mask);
                throw new Error(`Duplicate mask detected: ${mask.id}`);
            }
            console.debug('adding mask to queue', mask);
            this.#maskQueue.push(mask);
            return;
        }
        this.#mask = mask;
        // TODO animation?
        const tiles = this.layout.tiles.filter(mask.tileFilter).map((tile)=>new (0, _mask.Mask)(tile, typeof mask.configuration.style === 'function' ? mask.configuration.style(tile) : mask.configuration.style));
        this.layers.mask.addChildren(tiles.map((tile)=>tile.group));
        if (mask.message) elements.headerMessage.textContent = mask.message;
        mask.onMask(this);
        document.body.classList.add(Puzzle.Events.Mask);
    }
    onError(error, message, cause) {
        this.error = true;
        // Support exclusion of error
        if (typeof error === 'string') {
            message = error;
            cause = message;
            error = undefined;
        }
        if (error) console.error(error);
        cause = cause ?? error?.cause;
        if (cause) console.error('cause:', cause);
        message = message ?? error?.message ?? 'The puzzle has encountered an error, please consider reporting.';
        elements.headerMessage.textContent = message;
        document.body.classList.add(Puzzle.Events.Error);
    }
    recenter(force = false) {
        if (!this.layout) return;
        const center = (0, _view.View).getCenter();
        if (center && !force) // If cache exists for this view size, use that
        (0, _paperDefault.default).view.center = center;
        else // Otherwise set to the center of the view
        (0, _view.View).setCenter(this.layout.getCenter());
    }
    reload(state, onError) {
        this.error = false;
        document.body.classList.remove(Puzzle.Events.Error);
        if (this.state) this.#teardown();
        if (state instanceof (0, _state.State)) // Reset state
        this.state = state;
        else if (typeof state === 'object') // Update current state
        this.state.update(state);
        try {
            this.#setup();
        } catch (e) {
            if (typeof onError === 'function') onError(e);
            else this.onError(e, 'Puzzle configuration is invalid.');
            this.#updateActions();
        }
        (0, _util.emitEvent)(Puzzle.Events.Updated, {
            state: this.state
        });
    }
    resize(reload = true) {
        const { width, height } = elements.wrapper.getBoundingClientRect();
        const newSize = new (0, _paper.Size)(width, height);
        if ((0, _paperDefault.default).view.viewSize.equals(newSize)) // Nothing to do
        return;
        elements.canvas.height = height;
        elements.canvas.width = width;
        elements.canvas.style.height = height + 'px';
        elements.canvas.style.width = width + 'px';
        (0, _paperDefault.default).view.viewSize = newSize;
        this.#editor?.onResize(newSize);
        this.recenter();
        if (reload) // For some reason, without reload, setting viewSize alone breaks the project coordinate space
        // See: https://github.com/paperjs/paper.js/issues/1757
        // Forcing a reload fixes it.
        this.reload();
    }
    select(id) {
        if (id !== undefined && id === this.state?.getId()) // This ID is already selected
        return;
        this.reload((0, _state.State).resolve(id));
    }
    unmask() {
        console.debug('unmask', this.#mask);
        if (!this.#mask) return;
        this.layers.mask.removeChildren();
        this.#updateMessage(this.selectedTile);
        this.#mask.onUnmask(this);
        this.#mask = undefined;
        document.body.classList.remove(Puzzle.Events.Mask);
        const mask = this.#maskQueue.pop();
        if (mask) {
            console.debug('processing next mask in queue', mask);
            // Evaluate after any current events have processed (e.g. beam updates from last mask)
            setTimeout(()=>{
                // Allow mask to update since state may have changed since it was queued
                // If onUpdate returns false the mask will not be applied
                if (mask.onUpdate() !== false) this.mask(mask);
            });
        }
    }
    update() {
        if (!this.#mask && !this.#isUpdatingBeams) {
            this.#isUpdatingBeams = true;
            this.#updateBeams();
        }
    }
    updateSelectedTile(tile) {
        const previouslySelectedTile = this.selectedTile;
        this.selectedTile = tile;
        this.state.setSelectedTile(tile);
        this.#updateMessage(tile);
        this.#updateModifiers(tile, previouslySelectedTile);
        if (previouslySelectedTile && previouslySelectedTile !== tile) previouslySelectedTile.onDeselected(tile);
        if (tile && tile !== previouslySelectedTile) tile.onSelected(previouslySelectedTile);
        return previouslySelectedTile;
    }
    updateState(state) {
        if (this.#isTearingDown) // Ignore any state updates when tearing down
        return;
        state ??= Object.assign(this.state.getCurrent(), {
            layout: this.layout.getState()
        });
        this.state.update(state);
        this.#updateDropdown();
        this.#updateActions();
        (0, _util.emitEvent)(Puzzle.Events.Updated, {
            state: this.state
        });
    }
    #getModifiers(tile) {
        // Sort by ID to ensure they always appear in the same order regardless of ownership
        return this.layout.modifiers.concat(tile?.modifiers || []).sort((a, b)=>a.id - b.id);
    }
    #next() {
        const id = (0, _puzzles.Puzzles).visible.nextId(this.state.getId());
        if (id) this.select(id);
    }
    #onBeamUpdate(event) {
        if (this.#isTearingDown) return;
        const beam = event.detail.beam;
        const state = event.detail.state;
        if (state?.has((0, _step.StepState).Collision)) {
            const collision = state.get((0, _step.StepState).Collision);
            const collisionId = Puzzle.Collision.id(collision.point);
            const existing = this.#collisions[collisionId];
            if (existing) existing.addBeam(beam);
            else this.#collisions[collisionId] = new Puzzle.Collision(this.layers.collisions, [
                beam
            ], collision.point);
            // Beam with collision has an active mask
            const mask = this.#mask?.configuration;
            if (mask?.beam?.equals(beam)) this.unmask();
        }
        Object.values(this.#collisions).forEach((collision)=>collision.update());
        this.getBeams().filter((otherBeam)=>otherBeam !== beam).forEach((beam)=>beam.onBeamUpdated(event, this));
        setTimeout(()=>this.update(), 0);
    }
    #onKeyup(event) {
        if (this.debug && event.key === 's') this.update();
    }
    #onMask(event) {
        console.debug('Mask event', event);
        this.mask(event.detail.mask);
    }
    #onModifierInvoked(event) {
        const modifier = event.detail.modifier;
        const tile = event.detail.tile;
        if (// Modifier does not belong to a tile
        !modifier.parent && // Tile has a lock modifier
        tile.modifiers.some((modifier)=>modifier.type === (0, _modifier.Modifier).Types.lock) && // Tile does not already have a modifier of this type
        !tile.modifiers.some((other)=>other.type === modifier.type) && // Tile has less than the maximum number of modifiers
        tile.modifiers.length < (0, _tile.Tile).MaxModifiers) {
            console.debug('locking modifier to tile', modifier, tile);
            this.layout.removeModifier(modifier);
            modifier.move(tile);
            // Disable any other attached modifiers of this type to prevent duplicate locking
            this.#getModifiers(tile).filter((other)=>other.type === modifier.type && other.id !== modifier.id).forEach((other)=>other.update({
                    disabled: true
                }));
        }
        const selectedTile = event.detail.selectedTile;
        if (selectedTile) this.updateSelectedTile(selectedTile);
        this.state.addMove(event.type, tile, modifier, selectedTile);
        this.updateState();
        this.getBeams()// Update beams in the tile being modified first
        .sort((beam)=>tile.items.some((item)=>item === beam) ? -1 : 0).forEach((beam)=>beam.onModifierInvoked(event, this));
        setTimeout(()=>this.update(), 0);
    }
    #onModifierToggled(event) {
        this.state.addMove(event.type, this.selectedTile, event.detail.modifier);
        this.updateState();
    }
    #onPointerMove(event) {
        if (!this.debug) return;
        const point = this.#interact.getProjectPoint((0, _interact.Interact).point(event));
        const result = (0, _paperDefault.default).project.hitTest(point);
        elements.debug.textContent = '';
        switch(result?.item.data.type){
            case (0, _item.Item).Types.tile:
                {
                    const tile = this.layout.getTile(result.item.data.coordinates.offset);
                    elements.debug.textContent = tile.toString();
                    break;
                }
        }
    }
    #onRecenter() {
        this.recenter(true);
    }
    #onSelect(event) {
        this.select(event.target.value);
    }
    #onSolved() {
        if (this.solved) return;
        this.solved = true;
        this.updateSelectedTile(undefined);
        this.mask(Puzzle.#solvedMask);
        const span = document.createElement('span');
        span.classList.add(Puzzle.ClassNames.Icon);
        span.textContent = 'celebration';
        span.title = 'Solved!';
        elements.headerMessage.replaceChildren(span);
        document.body.classList.add(Puzzle.Events.Solved);
        (0, _util.emitEvent)(Puzzle.Events.Solved);
    }
    #onStateUpdate(event) {
        console.debug('Puzzle.#onStateUpdate()', event);
        this.updateState();
    }
    #onTap(event) {
        let tile;
        if (this.#editor && !this.#editor.isLocked() || this.solved || this.error) // In a state that cannot be interacted with
        return;
        const result = (0, _paperDefault.default).project.hitTest(event.detail.point);
        switch(result?.item.data.type){
            case (0, _item.Item).Types.mask:
                return;
            case (0, _item.Item).Types.tile:
                tile = this.layout.getTile(result.item.data.coordinates.offset);
                break;
        }
        // There is an active mask
        if (this.#mask) this.#mask.onTap(this, tile);
        else {
            const previouslySelectedTile = this.updateSelectedTile(tile);
            if (tile && tile === previouslySelectedTile) tile.onTap(event);
        }
    }
    #previous() {
        const id = (0, _puzzles.Puzzles).visible.previousId(this.state.getId());
        if (id) this.select(id);
    }
    #redo() {
        if (this.state.redo()) this.reload();
    }
    #removeLayers() {
        Object.values(this.layers).forEach((layer)=>{
            // For some reason children are not being removed from some layers (e.g. mask) with .remove()
            layer.removeChildren();
            layer.remove();
        });
    }
    #reset() {
        if (confirm('Are you sure you want to reset this puzzle? This cannot be undone.') && this.state.reset()) setTimeout(()=>this.reload());
    }
    #setup() {
        const { layout, message, solution } = this.state.getCurrent();
        this.layout = new (0, _layout.Layout)(layout);
        this.message = message;
        this.#solution = new (0, _solution.Solution)(solution);
        Object.values(this.layers).forEach((layer)=>(0, _paperDefault.default).project.addLayer(layer));
        document.body.classList.add(Puzzle.Events.Loaded);
        const selectedTileId = this.state.getSelectedTile();
        const selectedTile = selectedTileId ? this.layout.getTile(new (0, _offset.OffsetCoordinates)(...selectedTileId.split(','))) : undefined;
        this.#updateDetails();
        this.updateSelectedTile(selectedTile);
        this.updateState();
        this.update();
    }
    #teardown() {
        document.body.classList.remove(...Object.values(Puzzle.Events));
        this.#collisions = {};
        this.#isTearingDown = true;
        this.#maskQueue = [];
        this.unmask();
        this.#removeLayers();
        this.#solution?.teardown();
        this.#solution = undefined;
        this.solved = false;
        this.layout?.teardown();
        this.layout = undefined;
        this.selectedTile = undefined;
        this.#isUpdatingBeams = false;
        this.#isTearingDown = false;
    }
    #undo() {
        if (this.state.undo()) this.reload();
    }
    #updateActions() {
        const id = this.state.getId();
        // Update browser title
        elements.title.textContent = `${this.#editor ? 'Editing' : 'Beaming'}: Puzzle ${this.getTitle()}`;
        (0, _util.removeClass)(Puzzle.ClassNames.Disabled, ...Array.from(elements.headerMenu.children));
        const disable = [];
        if (!this.state.canUndo()) disable.push(elements.undo);
        if (!this.state.canRedo()) disable.push(elements.redo);
        if (!this.state.canReset()) disable.push(elements.reset);
        if (!(0, _puzzles.Puzzles).visible.has(id)) // Custom puzzle
        disable.push(elements.previous, elements.next);
        else {
            if (id === (0, _puzzles.Puzzles).visible.firstId) disable.push(elements.previous);
            else if (id === (0, _puzzles.Puzzles).visible.lastId) disable.push(elements.next);
        }
        (0, _util.addClass)(Puzzle.ClassNames.Disabled, ...disable);
    }
    #updateDetails() {
        const id = this.state.getId();
        const author = this.state.getAuthor();
        const title = this.state.getTitle();
        const hide = !(author || title);
        elements.infoAuthor.textContent = `Created by: ${author}`;
        elements.info.classList.toggle('hide', hide);
        elements.info.setAttribute('open', (!hide).toString());
        elements.infoId.textContent = `Puzzle: ${id}`;
        elements.infoTitle.textContent = `Title: "${title}"`;
    }
    #updateDropdown() {
        elements.id.replaceChildren();
        // TODO support pulling custom IDs from local cache
        const options = Array.from((0, _puzzles.Puzzles).visible.ids).map((id)=>({
                id,
                title: (0, _puzzles.Puzzles).titles[id]
            }));
        const id = this.state?.getId();
        if (id !== undefined && !(0, _puzzles.Puzzles).visible.ids.includes(id)) options.push({
            id,
            title: this.getTitle()
        });
        for (const option of options){
            const $option = document.createElement('option');
            $option.value = option.id;
            $option.innerText = option.title;
            elements.id.append($option);
        }
        // Select current ID
        elements.id.value = id;
    }
    #updateBeams() {
        const beams = this.getBeams().filter((beam)=>beam.isPending());
        if (!beams.length) {
            this.#isUpdatingBeams = false;
            // Ensure we check for a solution after all other in-progress events have processed
            setTimeout(()=>{
                if (this.#solution.isSolved()) this.#onSolved();
            }, 0);
            return;
        }
        if (this.debug) this.layers.debug.clear();
        beams.forEach((beam)=>beam.step(this));
        // Ensure the UI has a chance to update between loops
        setTimeout(()=>this.#updateBeams(), this.#beamsUpdateDelay);
    }
    #updateMessage(tile) {
        elements.headerMessage.textContent = this.message;
        elements.footerMessage.replaceChildren();
        if (tile) {
            // Check to see if tile has any color elements that need to be displayed
            // Note: these will only be displayed if the tile contains an item with more than one color
            const colorElements = tile.items.map((item)=>item.getColorElements(tile)).find((colorElements)=>colorElements.length > 1) || [];
            elements.footerMessage.replaceChildren(...colorElements);
        }
    }
    #updateModifiers(tile, previouslySelectedTile) {
        this.#getModifiers(previouslySelectedTile).forEach((modifier)=>modifier.detach());
        const modifiers = this.#getModifiers(tile);
        modifiers.forEach((modifier)=>modifier.attach(tile));
        elements.footer.classList.toggle(Puzzle.ClassNames.Active, modifiers.length > 0);
    }
    // Filters for all beams that are connected to the terminus, or have been merged into a beam that is connected
    static #connectedBeams = (item)=>item.type === (0, _item.Item).Types.beam && item.isConnected();
    static Collision = class {
        constructor(layer, beams, point, item){
            this.id = Puzzle.Collision.id(point);
            this.layer = layer;
            this.beams = beams;
            this.point = point;
            this.item = item;
        }
        addBeam(beam) {
            if (!this.beams.some((otherBeam)=>otherBeam.id === beam.id)) this.beams.push(beam);
            return this.beams;
        }
        addItem(color) {
            this.item = new (0, _collision.Collision)({
                center: this.point,
                color
            });
            this.layer.addChild(this.item.group);
        }
        equals(other) {
            return (0, _util.fuzzyEquals)(this.point, other?.point);
        }
        getColor() {
            return this.beams.length ? (0, _chromaJsDefault.default).average(this.beams.map((beam)=>beam.getColor())).hex() : undefined;
        }
        removeItem() {
            if (this.item) {
                this.item.remove();
                this.item = undefined;
            }
        }
        update() {
            // Remove any beam which no longer matches its collision point
            this.beams = this.beams.filter((beam)=>this.equals(beam.getCollision()));
            const color = this.getColor();
            // Remove no longer valid collision items
            if (this.item && (!this.beams.length || this.item.color !== color)) this.removeItem();
            // Add missing collision items
            if (this.beams.length && !this.item) this.addItem(color);
        }
        static id(point) {
            const rounded = point.round();
            return [
                rounded.x,
                rounded.y
            ].join(',');
        }
    };
    static ClassNames = Object.freeze({
        Active: 'active',
        Disabled: 'disabled',
        Icon: 'icon'
    });
    static Events = Object.freeze({
        Error: 'puzzle-error',
        Loaded: 'puzzle-loaded',
        Mask: 'puzzle-mask',
        Solved: 'puzzle-solved',
        Updated: 'puzzle-updated'
    });
    static Mask = class {
        constructor(configuration = {}){
            configuration.style ??= {};
            this.configuration = configuration;
            this.id = configuration.id;
            this.message = configuration.message;
            this.tileFilter = configuration.tileFilter ?? (0, _util.noop)(true);
            this.onMask = configuration.onMask ?? (0, _util.noop);
            this.onTap = configuration.onTap ?? (0, _util.noop);
            this.onUnmask = configuration.onUnmask ?? (0, _util.noop);
            this.onUpdate = configuration.onUpdate ?? (0, _util.noop);
        }
        equals(other) {
            return this.id === other.id;
        }
    };
    static #solvedMask = new Puzzle.Mask({
        style: (tile)=>{
            const beams = tile.items.filter(Puzzle.#connectedBeams);
            const colors = beams.flatMap((beam)=>beam.getSteps(tile).flatMap((step)=>step.color));
            return {
                fillColor: (0, _chromaJsDefault.default).average(colors).hex()
            };
        },
        tileFilter: (tile)=>tile.items.some(Puzzle.#connectedBeams)
    });
    static Schema = Object.freeze({
        $id: (0, _schema.Schema).$id('puzzle'),
        properties: {
            author: {
                maxLength: 72,
                type: 'string'
            },
            title: {
                maxLength: 72,
                type: 'string'
            },
            layout: (0, _layout.Layout).Schema,
            solution: (0, _solution.Solution).Schema,
            version: {
                default: 0,
                type: 'number'
            }
        },
        required: [
            'layout',
            'version'
        ],
        title: 'Puzzle',
        type: 'object'
    });
}

},{"./layout":"kCkVw","chroma-js":"bnCL0","paper":"agkns","./util":"92uDI","./item":"klNFr","./items/mask":"dOejK","./modifier":"bQhih","./items/beam":"9UvIU","./items/collision":"hUIiT","./stateful":"2njM8","./coordinates/offset":"3z9Dj","./state":"7XqMQ","../puzzles":"7ifRD","./step":"71fBe","./eventListeners":"8T0Qv","./solution":"foTr2","./interact":"fHNCq","./items/tile":"3fTdS","./editor":"i1EDt","./view":"edYro","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCkVw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Layout", ()=>Layout);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _cube = require("./coordinates/cube");
var _offset = require("./coordinates/offset");
var _tile = require("./items/tile");
var _stateful = require("./stateful");
var _modifiers = require("./modifiers");
var _view = require("./view");
var _schema = require("./schema");
class Layout extends (0, _stateful.Stateful) {
    #offset;
    #tiles = {};
    layers = {};
    modifiers = [];
    offset;
    parameters;
    tiles = [];
    width;
    constructor(state = {}){
        super(state);
        const tiles = state.tiles || {};
        // These layers will be added in the order they are defined
        this.layers.tiles = new (0, _paper.Layer)();
        this.layers.items = new (0, _paper.Layer)();
        Object.values(this.layers).forEach((layer)=>(0, _paperDefault.default).project.addLayer(layer));
        this.modifiers = (state.modifiers || []).map((state, index)=>(0, _modifiers.Modifiers).factory(null, state, index)).filter((modifier)=>modifier !== undefined);
        this.parameters = (0, _tile.Tile).parameters(state.tile?.height);
        this.offset = state.offset ?? Layout.Offsets.OddRow;
        this.#offset = new (0, _paper.Point)(this.offset === Layout.Offsets.EvenRow ? this.parameters.width / 2 : 0, 0);
        for(const r in tiles){
            const row = tiles[r];
            for(const c in row){
                const offset = new (0, _offset.OffsetCoordinates)(r, c);
                const state = row[c];
                this.addTile(offset, state);
            }
        }
        (0, _view.View).update();
    }
    addTile(offset, state) {
        this.removeTile(offset);
        const rowOffset = Math.floor(offset.r / 2);
        const axial = new (0, _cube.CubeCoordinates)(offset.c - rowOffset, offset.r);
        const center = this.getPoint(offset);
        const coordinates = {
            axial,
            offset
        };
        const tile = new (0, _tile.Tile)(coordinates, center, this.parameters, state);
        this.#tiles[offset.r] ??= {};
        this.#tiles[offset.r][offset.c] = tile;
        this.tiles.push(tile);
        this.layers.tiles.addChild(tile.group);
        if (tile.items.length) this.layers.items.addChildren(tile.items.map((item)=>item.group));
        return tile;
    }
    getCenter() {
        // The center of the canvas
        return new (0, _paper.Point)((0, _paperDefault.default).view.viewSize.divide(2));
    }
    getItems() {
        return this.tiles.flatMap((tile)=>tile.items);
    }
    getOffset(point) {
        return (0, _cube.CubeCoordinates).toOffsetCoordinates((0, _cube.CubeCoordinates).fromPoint(point.subtract(this.getCenter().add(this.#offset)), this.parameters.circumradius));
    }
    getPoint(offset) {
        return (0, _offset.OffsetCoordinates).toAxialCoordinates(offset).toPoint(this.parameters.circumradius).add(this.getCenter().add(this.#offset));
    }
    getState() {
        const tiles = {};
        for(const r in this.#tiles){
            const row = this.#tiles[r];
            tiles[r] ??= {};
            for(const c in row)tiles[r][c] = row[c].getState();
        }
        const state = {
            offset: this.offset
        };
        if (Object.keys(tiles).length) state.tiles = tiles;
        const modifiers = this.modifiers.map((modifier)=>modifier.getState());
        if (modifiers.length) state.modifiers = modifiers;
        return state;
    }
    getTile(offset = {}) {
        return this.#tiles[offset.r]?.[offset.c];
    }
    removeModifier(modifier) {
        const index = this.modifiers.indexOf(modifier);
        if (index >= 0) this.modifiers.splice(index, 1);
    }
    removeTile(offset) {
        const tile = this.getTile(offset);
        if (!tile) return;
        tile.teardown();
        this.tiles.splice(this.tiles.indexOf(tile), 1);
        delete this.#tiles[offset.r]?.[offset.c];
        if (Object.keys(this.#tiles[offset.r]).length === 0) delete this.#tiles[offset.r];
    }
    teardown() {
        this.tiles.forEach((tile)=>tile.teardown());
        this.modifiers.forEach((modifier)=>modifier.detach());
        Object.values(this.layers).forEach((layer)=>layer.remove());
    }
    static Offsets = Object.freeze({
        EvenRow: 'even-row',
        OddRow: 'odd-row'
    });
    static Schema = Object.freeze({
        $id: (0, _schema.Schema).$id('layout'),
        properties: {
            modifiers: (0, _modifiers.Modifiers).Schema,
            offset: {
                enum: Object.values(Layout.Offsets),
                options: {
                    enum_titles: [
                        'Even rows',
                        'Odd rows'
                    ]
                },
                type: 'string'
            },
            tiles: {
                options: {
                    hidden: true
                },
                type: 'object'
            }
        },
        required: [
            'offset'
        ],
        type: 'object'
    });
}

},{"paper":"agkns","./coordinates/cube":"dL4ay","./coordinates/offset":"3z9Dj","./items/tile":"3fTdS","./stateful":"2njM8","./modifiers":"dZOup","./view":"edYro","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dL4ay":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @see https://www.redblobgames.com/grids/hexagons/#coordinates
 */ parcelHelpers.export(exports, "CubeCoordinates", ()=>CubeCoordinates);
var _offset = require("./offset");
var _paper = require("paper");
var _util = require("../util");
class CubeCoordinates {
    constructor(q, r, s){
        if (!s) s = -q - r;
        this.coordinates = [
            q,
            r,
            s
        ];
        this.q = q;
        this.r = r;
        this.s = s;
    }
    add(other) {
        return new CubeCoordinates(this.q + other.q, this.r + other.r);
    }
    equals(other) {
        return other instanceof CubeCoordinates && other.q === this.q && other.r === this.r && other.s === this.s;
    }
    toPoint(circumradius) {
        const x = circumradius * ((0, _util.sqrt3) * this.q + (0, _util.sqrt3) / 2 * this.r);
        const y = circumradius * (1.5 * this.r);
        return new (0, _paper.Point)(x, y);
    }
    toString() {
        return this.coordinates.join(',');
    }
    static direction(direction) {
        if (direction === 0) direction = 6;
        // PaperJS uses a clockwise system, but the axial system is counter-clockwise.
        // So we flip the direction here by subtracting it from six
        return CubeCoordinates.directions[6 - direction];
    }
    static directions = [
        new CubeCoordinates(1, 0),
        new CubeCoordinates(1, -1),
        new CubeCoordinates(0, -1),
        new CubeCoordinates(-1, 0),
        new CubeCoordinates(-1, 1),
        new CubeCoordinates(0, 1)
    ];
    static fromPoint(point, circumradius) {
        const q = ((0, _util.sqrt3) / 3 * point.x - 1.0 / 3 * point.y) / circumradius;
        const r = 2.0 / 3 * point.y / circumradius;
        return CubeCoordinates.round(new CubeCoordinates(q, r));
    }
    static round(cube) {
        const q = Math.round(cube.q);
        const r = Math.round(cube.r);
        const s = Math.round(cube.s);
        const qDiff = Math.abs(q - cube.q);
        const rDiff = Math.abs(r - cube.r);
        const sDiff = Math.abs(s - cube.s);
        if (qDiff > rDiff && qDiff > sDiff) return new CubeCoordinates(-r - s, r, s);
        else if (rDiff > sDiff) return new CubeCoordinates(q, -q - s, s);
        else return new CubeCoordinates(q, r, -q - r);
    }
    static toOffsetCoordinates(axial) {
        const c = axial.q + (axial.r - (axial.r & 1)) / 2;
        return new (0, _offset.OffsetCoordinates)(axial.r, c);
    }
}

},{"./offset":"3z9Dj","paper":"agkns","../util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3z9Dj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "OffsetCoordinates", ()=>OffsetCoordinates);
var _cube = require("./cube");
class OffsetCoordinates {
    constructor(r, c){
        this.r = OffsetCoordinates.normalize(r);
        this.c = OffsetCoordinates.normalize(c);
        this.coordinates = [
            this.r,
            this.c
        ];
    }
    add(offset) {
        return new OffsetCoordinates(this.r + offset.r, this.c + offset.c);
    }
    equals(other) {
        return other instanceof OffsetCoordinates && other.r === this.r && other.c === this.c;
    }
    toString() {
        return this.coordinates.join(',');
    }
    static normalize(coordinate) {
        // Get rid of signed zero
        return coordinate === 0 ? Math.abs(coordinate) : coordinate;
    }
    static toAxialCoordinates(offset) {
        const q = offset.c - (offset.r - (offset.r & 1)) / 2;
        return new (0, _cube.CubeCoordinates)(q, offset.r);
    }
}

},{"./cube":"dL4ay","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3fTdS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tile", ()=>Tile);
var _paper = require("paper");
var _item = require("../item");
var _items = require("../items");
var _util = require("../util");
var _modifiers = require("../modifiers");
class Tile extends (0, _item.Item) {
    coordinates;
    items;
    modifiers;
    parameters;
    path;
    selected = false;
    constructor(coordinates, center, parameters, state = {}){
        state = Object.assign({
            type: (0, _item.Item).Types.tile
        }, state);
        super(null, state, {
            locked: false
        });
        const dashWidth = parameters.circumradius / 10;
        this.styles = Object.assign({}, Tile.Styles, {
            copy: Object.assign({
                dashArray: [
                    dashWidth,
                    dashWidth
                ]
            }, Tile.Styles.copy),
            edit: Object.assign({
                dashArray: [
                    dashWidth,
                    dashWidth
                ]
            }, Tile.Styles.edit)
        }, state.style || {});
        this.center = center;
        this.coordinates = coordinates;
        this.parameters = parameters;
        this.path = new (0, _paper.Path).RegularPolygon({
            center,
            closed: true,
            data: {
                coordinates,
                type: this.type
            },
            radius: parameters.circumradius,
            sides: 6,
            style: this.styles.default
        });
        this.group.addChildren([
            this.path
        ]);
        // These need to be last, since they reference this
        this.items = (state.items || []).map((state, index)=>(0, _items.Items).factory(this, state, index)).filter((item)=>item !== undefined);
        this.modifiers = (state.modifiers || [])// Adding 10 to index to ensure modifiers on tiles are sorted last
        .map((state, index)=>(0, _modifiers.Modifiers).factory(this, state, 10 + index)).filter((modifier)=>modifier !== undefined);
        this.modifiers.forEach((modifier)=>this.updateIcon(modifier));
        this.update();
    }
    addItem(item) {
        this.items.push(item);
        this.update();
    }
    addModifier(modifier) {
        this.modifiers.push(modifier);
        this.updateIcon(modifier);
    }
    afterModify() {
        this.setStyle(this.selected ? 'selected' : 'default');
        this.modifiers.forEach((modifier)=>modifier.update({
                disabled: false
            }));
    }
    beforeModify() {
        this.group.bringToFront();
        this.setStyle('edit');
        this.modifiers.forEach((modifier)=>modifier.update({
                disabled: true
            }));
    }
    getState() {
        const state = {
            id: this.id,
            type: this.type
        };
        // Filter out beams, which are not stored in state
        const items = this.items.filter((item)=>item.type !== (0, _item.Item).Types.beam).map((item)=>item.getState());
        if (items.length) state.items = items;
        const modifiers = this.modifiers.map((modifier)=>modifier.getState());
        if (modifiers.length) state.modifiers = modifiers;
        return state;
    }
    onTap(event) {
        this.items.forEach((item)=>item.onTap(event));
    }
    onDeselected(selectedTile) {
        this.selected = false;
        this.path.style = this.styles.default;
        this.items.forEach((item)=>item.onDeselected());
        (0, _util.emitEvent)(Tile.Events.Deselected, {
            selectedTile,
            deselectedTile: this
        });
    }
    onSelected(deselectedTile) {
        console.debug(this.toString(), 'selected');
        this.selected = true;
        this.group.bringToFront();
        this.path.style = this.styles.selected;
        this.items.forEach((item)=>item.onSelected());
        (0, _util.emitEvent)(Tile.Events.Selected, {
            selectedTile: this,
            deselectedTile
        });
    }
    removeItem(item) {
        const index = this.items.indexOf(item);
        if (index >= 0) {
            this.items.splice(index, 1);
            this.update();
        }
    }
    removeModifier(modifier) {
        const index = this.modifiers.indexOf(modifier);
        if (index >= 0) {
            this.modifiers.splice(index, 1);
            this.updateIcon(modifier);
        }
    }
    setStyle(style) {
        this.path.set(this.styles[style]);
    }
    teardown() {
        this.items.forEach((item)=>item.remove());
        this.modifiers.forEach((modifier)=>modifier.detach());
        this.remove();
    }
    toString() {
        return `[${this.type}:${this.coordinates.offset.toString()}]`;
    }
    updateIcon(modifier) {
        const index = this.modifiers.indexOf(modifier);
        if (index >= 0) {
            const position = (0, _util.getPointBetween)(// Position icons starting at 12 o'clock (index 1)
            this.path.segments[(index + 1) % 6].point, this.center, (length)=>length / 3);
            const style = {
                fillColor: modifier.immutable ? '#ccc' : '#333'
            };
            const icon = modifier.getSymbol().place(position, {
                style
            });
            icon.data = {
                id: modifier.id,
                name: modifier.name,
                type: modifier.type
            };
            const childIndex = this.group.children.findIndex((icon)=>icon.data.id === modifier.id);
            if (childIndex >= 0) // Update existing
            this.group.children[childIndex].replaceWith(icon);
            else this.group.addChild(icon);
        }
    }
    static parameters(height = Tile.DefaultHeight) {
        // AKA "size"
        const circumradius = height / 2;
        const width = (0, _util.sqrt3) * circumradius;
        const inradius = width / 2;
        const offsetY = height * (3 / 4);
        return {
            circumradius,
            height,
            inradius,
            offsetY,
            width
        };
    }
    static DefaultHeight = 160;
    static Events = Object.freeze({
        Deselected: 'tile-deselected',
        Selected: 'tile-selected'
    });
    static MaxModifiers = (0, _modifiers.Modifiers).Schema.maxItems;
    static Schema = Object.freeze((0, _util.merge)((0, _item.Item).schema((0, _item.Item).Types.tile), {
        properties: {
            items: (0, _items.Items).Schema,
            modifiers: (0, _modifiers.Modifiers).Schema
        }
    }));
    static Styles = Object.freeze({
        // Need to use new Color here explicitly due to:
        // https://github.com/paperjs/paper.js/issues/2049
        default: {
            dashArray: [],
            fillColor: new (0, _paper.Color)('white'),
            strokeColor: new (0, _paper.Color)('#666'),
            strokeWidth: 1
        },
        copy: {
            strokeColor: new (0, _paper.Color)('#999'),
            strokeWidth: 2
        },
        edit: {
            strokeColor: new (0, _paper.Color)('black'),
            strokeWidth: 2
        },
        selected: {
            dashArray: [],
            strokeColor: new (0, _paper.Color)('black'),
            strokeWidth: 2
        }
    });
}

},{"paper":"agkns","../item":"klNFr","../items":"haVG6","../util":"92uDI","../modifiers":"dZOup","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klNFr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Item", ()=>Item);
var _util = require("./util");
var _paper = require("paper");
var _stateful = require("./stateful");
var _schema = require("./schema");
class Item extends (0, _stateful.Stateful) {
    center;
    data;
    group;
    id;
    immutable;
    // Whether the item can be clicked on
    locked;
    parent;
    sortOrder = 100;
    type;
    constructor(parent, state, configuration){
        // Retain ID from state if it exists, otherwise generate a new one
        state.id ??= (0, _util.uniqueId)();
        super(state);
        this.id = state.id;
        this.immutable ??= state?.immutable ?? false;
        this.type = state?.type ?? configuration?.type;
        if (this.type === undefined) {
            console.debug(`[Item:${this.id}]`, state, configuration);
            throw new Error('Item must have type defined');
        }
        this.data = Object.assign({
            id: this.id,
            type: this.type
        }, configuration?.data || {});
        this.locked = configuration?.locked !== false;
        if (parent) this.center = parent.center;
        this.parent = parent;
        this.group = new (0, _paper.Group)({
            data: this.data,
            locked: this.locked
        });
    }
    equals(otherItem) {
        return otherItem instanceof Item && this.id === otherItem.id;
    }
    getColorElements() {
        return [];
    }
    getCompoundPath() {
        return new (0, _paper.CompoundPath)({
            // Must explicitly add insert: false for clone
            // https://github.com/paperjs/paper.js/issues/1721
            children: this.group.clone({
                insert: false
            }).children.filter((child)=>child.data.collidable !== false)
        });
    }
    getIndex() {
        return this.group.index;
    }
    getLayer() {
        return this.group.layer;
    }
    onTap() {}
    onCollision({ collisionStep }) {
        return collisionStep;
    }
    onDeselected() {}
    onInitialization() {}
    onSelected() {}
    remove() {
        this.group.remove();
    }
    toString() {
        return `[${this.type}:${this.id}]`;
    }
    update() {}
    static immutable(item) {
        return item.immutable;
    }
    static schema(type) {
        return (0, _schema.Schema).typed('item', type);
    }
    static Types = Object.freeze(Object.fromEntries([
        'beam',
        'collision',
        'filter',
        'mask',
        'portal',
        'reflector',
        'terminus',
        'tile',
        'wall'
    ].map((type)=>[
            type,
            (0, _util.capitalize)(type)
        ])));
}

},{"./util":"92uDI","paper":"agkns","./stateful":"2njM8","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2njM8":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Stateful", ()=>Stateful);
var _util = require("./util");
class Stateful {
    #state = {};
    constructor(state){
        this.setState(state);
    }
    getState() {
        return structuredClone(this.#state);
    }
    setState(state) {
        this.#state = structuredClone(state);
    }
    updateState(updater, eventDetail) {
        updater(this.#state);
        if (eventDetail) // This will cause puzzle cache to update
        (0, _util.emitEvent)(Stateful.Events.Update, eventDetail);
        return this.getState();
    }
    static Events = Object.freeze({
        Update: 'state-update'
    });
}

},{"./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHE32":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Schema", ()=>Schema);
class Schema {
    static $id() {
        // Can't use forward slash here:
        // https://github.com/json-editor/json-editor/issues/1648
        return Array.from(arguments).map((arg)=>arg.toLowerCase()).join('-');
    }
    static $ref(id) {
        return {
            $ref: `#/definitions/${id}`
        };
    }
    static color = {
        format: 'color',
        title: 'color',
        type: 'string'
    };
    static colors = {
        items: Schema.color,
        type: 'array'
    };
    static direction = {
        enum: [
            0,
            1,
            2,
            3,
            4,
            5
        ],
        options: {
            enum_titles: [
                'Northwest',
                'Northeast',
                'East',
                'Southeast',
                'Southwest',
                'West'
            ]
        },
        type: 'number'
    };
    static typed(path, type) {
        return {
            $id: Schema.$id(path, type),
            properties: {
                id: {
                    options: {
                        hidden: true
                    },
                    type: 'string'
                },
                type: {
                    const: type,
                    options: {
                        hidden: true
                    },
                    readOnly: true,
                    type: 'string'
                }
            },
            required: [
                'type'
            ],
            title: type.toLowerCase(),
            type: 'object'
        };
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"haVG6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Items", ()=>Items);
var _filter = require("./items/filter");
var _portal = require("./items/portal");
var _terminus = require("./items/terminus");
var _reflector = require("./items/reflector");
var _wall = require("./items/wall");
var _item = require("./item");
var _schema = require("./schema");
class Items {
    static Schema = Object.freeze({
        $id: (0, _schema.Schema).$id('items'),
        items: {
            anyOf: [
                (0, _filter.Filter).Schema,
                (0, _portal.Portal).Schema,
                (0, _reflector.Reflector).Schema,
                (0, _terminus.Terminus).Schema,
                (0, _wall.Wall).Schema
            ],
            headerTemplate: 'item {{i1}}'
        },
        type: 'array'
    });
    static factory(parent, state, index) {
        let item;
        switch(state.type){
            case (0, _item.Item).Types.filter:
                item = new (0, _filter.Filter)(...arguments);
                break;
            case (0, _item.Item).Types.portal:
                item = new (0, _portal.Portal)(...arguments);
                break;
            case (0, _item.Item).Types.terminus:
                item = new (0, _terminus.Terminus)(...arguments);
                break;
            case (0, _item.Item).Types.reflector:
                item = new (0, _reflector.Reflector)(...arguments);
                break;
            case (0, _item.Item).Types.wall:
                item = new (0, _wall.Wall)(...arguments);
                break;
            default:
                console.debug('Items.factory', state);
                throw new Error(`Cannot create item with unknown type: ${state.type}`);
        }
        if (item) item.onInitialization();
        return item;
    }
}

},{"./items/filter":"29yN0","./items/portal":"5Jnaf","./items/terminus":"7I7P6","./items/reflector":"cTFZx","./items/wall":"b5rvi","./item":"klNFr","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"29yN0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Filter", ()=>Filter);
var _item = require("../item");
var _paper = require("paper");
var _move = require("../modifiers/move");
var _util = require("../util");
var _step = require("../step");
var _schema = require("../schema");
class Filter extends (0, _move.movable)((0, _item.Item)) {
    constructor(tile, state){
        super(...arguments);
        this.color = state.color;
        const fillColor = new (0, _paper.Color)(this.color);
        fillColor.alpha = 0.25;
        // TODO: update to something else? prism?
        const item = new (0, _paper.Path).RegularPolygon({
            center: tile.center,
            closed: true,
            radius: tile.parameters.circumradius / 3,
            sides: 3,
            style: {
                fillColor,
                strokeColor: this.color,
                strokeWidth: 2
            }
        });
        this.group.addChild(item);
    }
    getColorElements() {
        return [
            (0, _util.getColorElement)(this.color)
        ];
    }
    onCollision({ currentStep, nextStep }) {
        // The beam will collide with the filter twice, on entry and exit, so ignore the first one, but track in state
        return nextStep.copy(currentStep.state.has((0, _step.StepState).Filter) ? {
            colors: nextStep.colors.concat([
                this.color
            ])
        } : {
            state: new (0, _step.StepState)({
                insertAbove: this
            }, new (0, _step.StepState).Filter())
        });
    }
    static Schema = Object.freeze((0, _util.merge)((0, _item.Item).schema((0, _item.Item).Types.filter), {
        properties: {
            color: (0, _schema.Schema).color
        },
        required: [
            'color'
        ]
    }));
}

},{"../item":"klNFr","paper":"agkns","../modifiers/move":"iw6ob","../util":"92uDI","../step":"71fBe","../schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iw6ob":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Move", ()=>Move);
parcelHelpers.export(exports, "movable", ()=>movable);
var _modifier = require("../modifier");
var _puzzle = require("../puzzle");
var _util = require("../util");
var _item = require("../item");
var _icons = require("../icons");
class Move extends (0, _modifier.Modifier) {
    #mask;
    name = (0, _icons.Icons).Move.name;
    title = 'Move';
    onTap(event) {
        super.onTap(event);
        const items = this.tile.items.filter(Move.movable);
        if (this.#mask || !items.length) return;
        const mask = new (0, _puzzle.Puzzle).Mask({
            id: this.toString(),
            onTap: this.#maskOnTap.bind(this),
            onMask: ()=>this.tile.beforeModify(),
            onUnmask: ()=>this.tile.afterModify(),
            tileFilter: this.tileFilter.bind(this)
        });
        this.#mask = mask;
        (0, _util.emitEvent)((0, _puzzle.Puzzle).Events.Mask, {
            mask
        });
    }
    attach(tile) {
        super.attach(tile);
        if (!this.disabled) this.update({
            disabled: !tile.items.some((item)=>item.movable)
        });
    }
    moveFilter(tile) {
        // Filter out tiles that contain no movable items
        return super.moveFilter(tile) || !tile.items.some(Move.movable);
    }
    moveItems(tile) {
        const items = this.tile.items.filter(Move.movable);
        items.forEach((item)=>item.move(tile));
        return {
            moved: [
                Move.data(this.tile, tile, items)
            ],
            selectedTile: tile,
            tile: this.tile,
            tiles: [
                this.tile,
                tile
            ]
        };
    }
    tileFilter(tile) {
        // Never mask current tile
        return !tile.equals(this.tile) && // Mask immutable tiles
        (tile.modifiers.some((0, _modifier.Modifier).immutable) || // Mask tiles that contain any items we don't ignore
        tile.items.some((item)=>!Move.ignoreItemTypes.includes(item.type)));
    }
    #maskOnTap(puzzle, tile) {
        puzzle.unmask();
        if (tile) {
            const data = this.moveItems(tile);
            this.dispatchEvent((0, _modifier.Modifier).Events.Invoked, data);
        }
        this.#mask = undefined;
    }
    static data(fromTile, toTile, items) {
        return {
            fromTile,
            toTile,
            items
        };
    }
    static movable(item) {
        return item.movable;
    }
    static ignoreItemTypes = [
        (0, _item.Item).Types.beam,
        (0, _item.Item).Types.wall
    ];
    static Schema = Object.freeze((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.move));
}
const movable = (SuperClass)=>class MovableItem extends SuperClass {
        movable;
        constructor(parent, state){
            super(...arguments);
            this.movable = !this.immutable && state.movable !== false;
        }
        move(tile) {
            this.parent.removeItem(this);
            // Update the position of the item group based on the vector of the tile we are moving to
            const vector = this.parent.center.subtract(tile.center);
            this.group.position = this.group.position.subtract(vector);
            // Update tile reference
            this.parent = tile;
            this.parent.addItem(this);
            this.center = this.parent.center;
            this.onMove();
        }
        onMove() {}
    };
movable.Schema = {
    properties: {
        movable: {
            default: true,
            type: 'boolean'
        }
    }
};

},{"../modifier":"bQhih","../puzzle":"jIcx0","../util":"92uDI","../item":"klNFr","../icons":"lDr3h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQhih":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Modifier", ()=>Modifier);
var _util = require("./util");
var _stateful = require("./stateful");
var _eventListeners = require("./eventListeners");
var _interact = require("./interact");
var _item = require("./item");
var _icons = require("./icons");
var _tile = require("./items/tile");
var _schema = require("./schema");
const menu = document.getElementById('puzzle-footer-menu');
class Modifier extends (0, _stateful.Stateful) {
    #container;
    #down = false;
    #eventListener = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #timeoutId;
    configuration;
    element;
    disabled = false;
    immutable = false;
    index;
    name;
    parent;
    tile;
    title;
    type;
    constructor(tile, state, index){
        // Retain ID from state if it exists, otherwise generate a new one
        state.id ??= (0, _util.uniqueId)();
        super(state);
        this.id = state.id;
        this.index = index;
        this.parent = tile;
        this.type = state.type;
    }
    /**
   * Attach the modifier to the DOM and add listeners.
   */ attach(tile) {
        this.tile = tile;
        // Disable by default if: modifier is immutable
        this.disabled = this.immutable || // The tile contains an immutable modifier
        this.tile?.modifiers.some((modifier)=>modifier.type === Modifier.Types.immutable) || // The tile has no interactable items
        !this.tile?.items.some((item)=>item.type !== (0, _item.Item).Types.beam) || // The tile being attached to is not this modifier's parent
        !this.tile?.equals(this.parent) && // The tile contains another modifier of this type already
        (this.tile.modifiers.some((modifier)=>modifier.type === this.type) || // The tile already contains the max number of modifiers
        this.tile?.modifiers.length === (0, _tile.Tile).MaxModifiers);
        const li = this.#container = document.createElement('li');
        li.classList.add([
            'modifier',
            this.type.toLowerCase()
        ].join('-'));
        li.dataset.id = this.id.toString();
        const span = this.element = document.createElement('span');
        span.classList.add('icon', 'fill');
        li.append(span);
        this.update();
        this.#eventListener.add([
            {
                type: 'pointerdown',
                handler: this.onPointerDown
            },
            {
                type: 'pointerleave',
                handler: this.onPointerUp
            },
            {
                type: 'pointerup',
                handler: this.onPointerUp
            }
        ], {
            element: li
        });
        menu.append(li);
    }
    /**
   * Remove listeners and the modifier from the DOM.
   */ detach() {
        if (!this.#container) return;
        this.#eventListener.remove();
        this.#container.remove();
        this.element = undefined;
        this.#container = undefined;
    }
    dispatchEvent(event, detail) {
        (0, _util.emitEvent)(event, Object.assign({
            tile: this.tile
        }, detail || {}, {
            modifier: this
        }));
    }
    equals(other) {
        return other instanceof Modifier && this.id === other.id;
    }
    getSymbol() {
        return (0, _icons.Icons).ByName[this.name];
    }
    move(tile) {
        this.parent?.removeModifier(this);
        this.parent = tile;
        tile?.addModifier(this);
    }
    moveFilter(tile) {
        // Mask immutable tiles
        return tile.modifiers.some(Modifier.immutable) || // Mask tiles that only contain immutable items
        tile.items.every((0, _item.Item).immutable);
    }
    onPointerDown(event) {
        if (event.button !== 0) // Support toggle on non-primary pointer button
        this.onToggle(event);
        else this.#down = true;
    }
    onPointerUp(event) {
        clearTimeout(this.#timeoutId);
        if (this.#down && !this.disabled) {
            switch(event.type){
                case 'pointerleave':
                    // Support swiping up on pointer device
                    this.onToggle(event);
                    break;
                case 'pointerup':
                    this.onTap(event);
                    break;
            }
            // Keep the tile icon in sync
            this.parent?.updateIcon(this);
        }
        this.#down = false;
    }
    onTap() {}
    onToggle() {
        (0, _interact.Interact).vibrate();
    }
    toString() {
        return [
            this.name,
            this.id
        ].join(':');
    }
    update(options) {
        options = Object.assign({
            disabled: this.disabled,
            name: this.name,
            title: this.title
        }, options || {});
        if (!this.immutable) this.disabled = options.disabled;
        this.name = options.name;
        this.title = options.title;
        if (this.#container) {
            this.#container.classList.toggle('disabled', this.disabled);
            this.element.textContent = this.name;
            this.element.title = this.title;
        }
    }
    static immutable(modifier) {
        return modifier.type === Modifier.Types.immutable;
    }
    static schema(type) {
        return (0, _schema.Schema).typed('modifiers', type);
    }
    static Events = Object.freeze({
        Invoked: 'modifier-invoked',
        Moved: 'modifier-moved',
        Toggled: 'modifier-toggled'
    });
    static Types = Object.freeze(Object.fromEntries([
        'immutable',
        'lock',
        'move',
        'rotate',
        'swap',
        'toggle'
    ].map((type)=>[
            type,
            (0, _util.capitalize)(type)
        ])));
}

},{"./util":"92uDI","./stateful":"2njM8","./eventListeners":"8T0Qv","./interact":"fHNCq","./item":"klNFr","./icons":"lDr3h","./items/tile":"3fTdS","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8T0Qv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventListeners", ()=>EventListeners);
class EventListeners {
    #events = [];
    #options = {
        element: document
    };
    constructor(options = {}){
        this.#options = Object.assign(this.#options, options);
    }
    add(events, options = {}) {
        this.#events = this.#events.concat((Array.isArray(events) ? events : [
            events
        ]).map((event)=>{
            event = Object.assign({}, this.#options, options, event);
            if (!event.type) throw new Error('Event type is required');
            if (event.context) event.handler = event.handler.bind(event.context);
            event.element.addEventListener(event.type, event.handler, event.options);
            return event;
        }));
    }
    remove() {
        this.#events.forEach((event)=>event.element.removeEventListener(event.type, event.handler));
        this.#events = [];
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fHNCq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Interact", ()=>Interact);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _cache = require("./cache");
var _eventListeners = require("./eventListeners");
var _view = require("./view");
const navigator = window.navigator;
class Interact {
    #bounds;
    #cache = new (0, _cache.Cache)(Object.values(Interact.CacheKeys));
    #element;
    #eventListener = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #offset;
    constructor(element){
        this.#bounds = element.getBoundingClientRect();
        this.#element = element;
        this.#offset = new (0, _paper.Point)(this.#bounds.left, this.#bounds.top);
        this.#eventListener.add([
            {
                type: 'pointercancel',
                handler: this.onPointerUp
            },
            {
                type: 'pointerdown',
                handler: this.onPointerDown
            },
            {
                type: 'pointerleave',
                handler: this.onPointerUp
            },
            {
                type: 'pointermove',
                handler: this.onPointerMove
            },
            {
                type: 'pointerout',
                handler: this.onPointerUp
            },
            {
                type: 'pointerup',
                handler: this.onPointerUp
            },
            {
                type: 'wheel',
                handler: this.onMouseWheel,
                options: {
                    passive: false
                }
            }
        ], {
            element
        });
    }
    getProjectPoint(point) {
        return (0, _paperDefault.default).view.viewToProject(point.subtract(this.#offset));
    }
    onMouseWheel(event) {
        event.preventDefault();
        this.#zoom(new (0, _paper.Point)(event.offsetX, event.offsetY), event.deltaY, 1.05);
    }
    onPan(event) {
        const point = (0, _paperDefault.default).view.viewToProject(Interact.point(event));
        const pan = this.#getGesture(Interact.GestureKeys.Pan);
        if (!pan) {
            this.#setGesture(Interact.GestureKeys.Pan, {
                from: point
            });
            return;
        }
        const center = pan.from.subtract(point).add((0, _paperDefault.default).view.center);
        // Allow a little wiggle room to prevent panning on tap
        if ((0, _paperDefault.default).view.center.subtract(center).length > 1) {
            if (!document.body.classList.contains('grab')) document.body.classList.add('grab');
            // Center on the cursor
            (0, _view.View).setCenter(center);
        }
    }
    onPinch(events) {
        const pointer0 = events[0];
        const pointer1 = events[1];
        const point0 = Interact.point(pointer0);
        const point1 = Interact.point(pointer1);
        const distance = point0.getDistance(point1);
        const pinch = this.#getGesture(Interact.GestureKeys.Pinch);
        if (!pinch) {
            this.#setGesture(Interact.GestureKeys.Pinch, {
                distance
            });
            return;
        }
        const center = point0.add(point1).divide(2).subtract(this.#offset);
        const scale = distance / pinch.distance;
        const delta = (pinch.distance - distance) * scale;
        this.#zoom(center, delta, 1.01);
        pinch.distance = distance;
    }
    onPointerDown(event) {
        this.#cache.get(Interact.CacheKeys.Down).set(event.pointerId, event);
    }
    onPointerMove(event) {
        const down = this.#cache.get(Interact.CacheKeys.Down).get(event.pointerId);
        if (!down) // Ignore events until there is a pointer down event
        return;
        // For some reason pointermove fires on mobile even if there was no movement
        const diff = Interact.point(event).subtract(Interact.point(down)).length;
        if (diff > 1) {
            this.#cache.get(Interact.CacheKeys.Move).set(event.pointerId, event);
            const events = this.#cache.get(Interact.CacheKeys.Move).values();
            if (events.length === 2) this.onPinch(events);
            else this.onPan(event);
        }
    }
    onPointerUp(event) {
        const down = this.#cache.get(Interact.CacheKeys.Down).get(event.pointerId);
        if (!down) return;
        if (this.#cache.length(Interact.CacheKeys.Down) === 1 && !this.#cache.get(Interact.CacheKeys.Move).get(event.pointerId)) this.onTap(down);
        document.body.classList.remove('grab');
        this.#cache.get(Interact.CacheKeys.Down).unset(event.pointerId);
        this.#cache.get(Interact.CacheKeys.Move).unset(event.pointerId);
        this.#cache.get(Interact.CacheKeys.Gesture).unset(Interact.GestureKeys.Pan);
        if (this.#cache.length(Interact.CacheKeys.Move) < 2) this.#cache.get(Interact.CacheKeys.Gesture).unset(Interact.GestureKeys.Pinch);
    }
    onTap(event) {
        const point = this.getProjectPoint(Interact.point(event));
        this.#element.dispatchEvent(new CustomEvent(Interact.GestureKeys.Tap, {
            detail: {
                event,
                point
            }
        }));
    }
    #getGesture(key) {
        return this.#cache.get(Interact.CacheKeys.Gesture).get(key);
    }
    #setGesture(key, value) {
        this.#cache.get(Interact.CacheKeys.Gesture).set(key, value);
    }
    #zoom(point, delta, factor) {
        const zoom = Math.max(Math.min(delta < 0 ? (0, _paperDefault.default).view.zoom * factor : (0, _paperDefault.default).view.zoom / factor, Interact.maxZoom), Interact.minZoom);
        // Convert the touch point from the view coordinate space to the project coordinate space
        const touchPoint = (0, _paperDefault.default).view.viewToProject(point);
        const touchOffset = touchPoint.subtract((0, _paperDefault.default).view.center);
        // Adjust center towards cursor location
        const zoomOffset = touchPoint.subtract(touchOffset.multiply((0, _paperDefault.default).view.zoom / zoom)).subtract((0, _paperDefault.default).view.center);
        (0, _view.View).setZoom(zoom);
        (0, _view.View).setCenter((0, _paperDefault.default).view.center.add(zoomOffset));
    }
    static point(event) {
        return new (0, _paper.Point)(event.clientX, event.clientY);
    }
    static vibrate(pattern = 25) {
        if (Interact.canVibrate) navigator.vibrate(pattern);
    }
    // WebKit does not support vibration
    static canVibrate = typeof navigator.vibrate === 'function';
    static CacheKeys = Object.freeze({
        Down: 'down',
        Move: 'move',
        Gesture: 'gesture'
    });
    static GestureKeys = Object.freeze({
        Pan: 'pan',
        Pinch: 'pinch',
        Tap: 'tap'
    });
    static maxZoom = 2;
    static minZoom = 0.5;
}

},{"paper":"agkns","./cache":"dDiTO","./eventListeners":"8T0Qv","./view":"edYro","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDiTO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cache", ()=>Cache);
class Cache {
    #cache = {};
    #hasKeys;
    #keys;
    constructor(keys = []){
        this.#keys = keys;
        this.#hasKeys = keys.length !== 0;
        keys.forEach((key)=>{
            this.#cache[key] = new Cache();
        });
    }
    set(key, item) {
        if (this.#hasKeys && !this.#keys.includes(key)) throw new Error(`Invalid key: ${key}`);
        this.#cache[key] = item;
    }
    get(key) {
        return key === undefined ? this.#cache : this.#cache[key];
    }
    keys(key) {
        return Object.keys(this.#get(key));
    }
    length(key) {
        return this.keys(key).length;
    }
    unset(key) {
        delete this.#cache[key];
    }
    values(key) {
        return Object.values(this.#get(key));
    }
    #get(key) {
        const value = this.get(key);
        return value instanceof Cache ? value.get() : value;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"edYro":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "View", ()=>View);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _state = require("./state");
var _util = require("./util");
const localStorage = window.localStorage;
class View {
    static getCenter() {
        return localStorage.getItem(View.#key((0, _state.State).getId(), (0, _util.sizeToString)((0, _paperDefault.default).view.viewSize), View.CacheKeys.Center));
    }
    static getZoom() {
        return localStorage.getItem(View.#key((0, _state.State).getId(), View.CacheKeys.Zoom));
    }
    static setCenter(point) {
        (0, _paperDefault.default).view.center = point;
        if ((0, _state.State).getId() !== null) localStorage.setItem(View.#key((0, _state.State).getId(), (0, _util.sizeToString)((0, _paperDefault.default).view.viewSize), View.CacheKeys.Center), (0, _util.pointToString)(point));
        (0, _util.emitEvent)(View.Events.Center, {
            point
        });
    }
    static setZoom(factor) {
        (0, _paperDefault.default).view.zoom = factor;
        if ((0, _state.State).getId() !== null) localStorage.setItem(View.#key((0, _state.State).getId(), View.CacheKeys.Zoom), factor.toString());
    }
    static update() {
        const center = View.getCenter();
        if (center !== null) (0, _paperDefault.default).view.center = (0, _util.stringToPoint)(center);
        const zoom = View.getZoom();
        if (zoom !== null) (0, _paperDefault.default).view.zoom = Number(zoom);
    }
    static CacheKeys = Object.freeze({
        Center: 'center',
        Zoom: 'zoom'
    });
    static Events = Object.freeze({
        Center: 'view-center'
    });
    static #key = (0, _util.getKeyFactory)([
        // Prefix key with 'editor' when in edit mode
        (0, _util.params).has((0, _state.State).ParamKeys.Edit) ? (0, _state.State).CacheKeys.Editor : undefined,
        'view'
    ].filter((v)=>v));
}

},{"paper":"agkns","./state":"7XqMQ","./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XqMQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "State", ()=>State);
var _puzzles = require("../puzzles");
var _util = require("./util");
const history = window.history;
const localStorage = window.localStorage;
class State {
    #current;
    #deltas;
    #id;
    #moveIndex;
    #moves;
    #original;
    #selectedTile;
    #version;
    constructor(id, original, deltas, moveIndex, moves, selectedTile, version){
        // When editing a puzzle from cache, append a unique ID
        this.#id = (0, _puzzles.Puzzles).has(id) && (0, _util.params).has(State.ParamKeys.Edit) ? `${id}-${(0, _util.uniqueId)()}` : id ?? (0, _util.uniqueId)();
        this.#original = original || {};
        this.#deltas = deltas || [];
        this.#moves = moves || [];
        this.#moveIndex = moveIndex ?? this.#moves.length - 1;
        this.#selectedTile = selectedTile;
        this.#version = version ?? State.Version;
        this.#resetCurrent();
    }
    addMove(eventType, tile, modifier, selectedTile) {
        // Handle moving after an undo (revising history)
        if (this.#moveIndex < this.#moves.length - 1) {
            const deltaIndex = this.getDeltaIndex();
            console.debug(this.toString(), 'addMove: revising history. moves:', this.#moves, `moveIndex: ${this.#moveIndex}`, `deltaIndex: ${deltaIndex}`);
            // Remove all deltas after the current one
            this.#deltas.splice(deltaIndex + 1);
            // Remove all moves after the current one
            this.#moves.splice(this.#moveIndex + 1);
        }
        const deltaIndex = this.#deltas.length - 1;
        if (this.#moves.some((move)=>move.deltaIndex === deltaIndex)) console.debug(this.toString(), `addMove: ignoring duplicate move for deltaIndex ${deltaIndex}.`);
        else this.#moves.push(new State.Move(deltaIndex, eventType, tile, modifier, selectedTile));
        this.#moveIndex = this.#moves.length - 1;
        console.debug(this.toString(), 'addMove: added move', this.#moveIndex, this.#moves[this.#moveIndex]);
        return this.#moveIndex;
    }
    canRedo() {
        return this.#moveIndex < this.#moves.length - 1;
    }
    canReset() {
        return this.#moves.length > 0;
    }
    canUndo() {
        return this.#moveIndex >= 0;
    }
    /**
   * @returns {State} Creates a clone of state at current point without history
   */ clone() {
        return new State(this.#id, this.#current);
    }
    encode() {
        return (0, _util.base64encode)(JSON.stringify({
            id: this.#id,
            // If this puzzle exists in code, just cache the version
            original: (0, _puzzles.Puzzles).has(this.#id) ? {
                version: this.#original.version
            } : this.#original,
            deltas: this.#deltas,
            moveIndex: this.#moveIndex,
            moves: this.#moves,
            selectedTile: this.#selectedTile,
            version: this.#version
        }));
    }
    getAuthor() {
        return this.#current.author;
    }
    getCurrent() {
        return structuredClone(this.#current);
    }
    getCurrentJSON() {
        return JSON.stringify(this.getCurrent(), null, 2);
    }
    getDeltaIndex() {
        console.debug(this.toString(), 'getDeltaIndex', this.#moves, this.#moveIndex, this.#deltas.length - 1);
        // If there are no moves, or the user is on the latest move, use the latest delta index
        // Otherwise, use the delta index indicated by the move
        return this.#moveIndex < this.#moves.length - 1 ? this.#moves[this.#moveIndex + 1].deltaIndex : this.#deltas.length - 1;
    }
    getDiff(newState) {
        return (0, _util.jsonDiffPatch).diff(this.#current, newState);
    }
    getId() {
        return this.#id;
    }
    getTitle() {
        return this.#current.title;
    }
    getSelectedTile() {
        return this.#selectedTile;
    }
    moves() {
        return this.#moves;
    }
    redo() {
        if (!this.canRedo()) return;
        this.#moveIndex++;
        this.#resetCurrent();
        this.#updateCache();
        return true;
    }
    reset() {
        if (!this.canReset()) return;
        // Reset to the state prior to the first move
        this.#deltas.splice(this.#moves[0].deltaIndex + 1);
        this.#moveIndex = -1;
        this.#moves = [];
        this.#selectedTile = undefined;
        State.clearCache(this.getId());
        this.#resetCurrent();
        this.#updateCache();
        return true;
    }
    setSelectedTile(tile) {
        const id = tile?.coordinates.offset.toString();
        if (this.#selectedTile !== id) {
            this.#selectedTile = id;
            this.#updateCache();
        }
    }
    toString() {
        return `[State:${this.#deltas.length - 1}:${this.#moveIndex}]`;
    }
    undo() {
        if (!this.canUndo()) return;
        console.debug(this.toString(), 'undo', this.#moveIndex);
        this.#moveIndex--;
        this.#resetCurrent();
        this.#updateCache();
        return true;
    }
    update(newState) {
        const delta = this.getDiff(newState);
        console.debug(this.toString(), 'update', delta);
        if (delta !== undefined) {
            // It seems that the jsondiffpatch library modifies deltas on patch. To prevent that, they will be stored as
            // their stringified JSON representation and parsed before being applied.
            // See:https://github.com/benjamine/jsondiffpatch/issues/34
            this.#deltas.push(JSON.stringify(delta));
            this.#apply(delta);
        }
        this.#updateCache();
    }
    #apply(delta) {
        // Support for deltas stored as stringified JSON in cache
        if (typeof delta === 'string') delta = JSON.parse(delta);
        console.debug(this.toString(), 'apply', delta);
        return (0, _util.jsonDiffPatch).patch(this.#current, delta);
    }
    #resetCurrent() {
        // Start with the original state
        this.#current = structuredClone(this.#original);
        // Then apply every delta until the currently active delta
        const deltaIndex = this.getDeltaIndex();
        console.debug(this.toString(), 'resetCurrent', deltaIndex);
        this.#deltas.filter((delta, index)=>index <= deltaIndex).forEach((delta)=>this.#apply(delta));
    }
    #updateCache() {
        const id = this.getId();
        const data = {
            id
        };
        const hashParams = [
            '',
            id
        ];
        if (!hashParams.includes((0, _util.params).get(State.ParamKeys.ClearCache))) {
            // Include encoded state in URL if cache is not being cleared for this puzzle ID
            data.state = this.encode();
            hashParams.push(data.state);
            localStorage.setItem(State.#key(id), data.state);
        }
        (0, _util.url).hash = hashParams.join('/');
        history.pushState(data, '', (0, _util.url));
        localStorage.setItem(State.#key(State.CacheKeys.Id), id);
    }
    static clearCache(id) {
        if (id) // Clear a single puzzle ID
        localStorage.removeItem(State.#key(id));
        else localStorage.clear();
    }
    static fromEncoded(state) {
        state = JSON.parse((0, _util.base64decode)(state));
        if (state.id === undefined) {
            console.warn('Invalid cache, ignoring.');
            return;
        }
        if (state.version !== State.Version) {
            console.debug('Invalidating cache due to version mismatch. ' + `Ours: ${State.Version}, theirs: ${state.version}.`);
            State.clearCache();
            return;
        }
        if ((0, _puzzles.Puzzles).has(state.id)) {
            const original = (0, _puzzles.Puzzles).get(state.id);
            if (original && original.version !== state.original?.version) {
                console.debug(`Invalidating cache for puzzle ${state.id} due to version mismatch. ` + `Ours: ${original.version}, theirs: ${state.original?.version}.`);
                State.clearCache(state.id);
                return;
            }
            state.original = original;
        }
        return new State(state.id, state.original, state.deltas, state.moveIndex, state.moves, state.selectedTile, state.version);
    }
    static fromId(id) {
        return new State(id, (0, _puzzles.Puzzles).get(id));
    }
    static getId() {
        return localStorage.getItem(State.#key(State.CacheKeys.Id));
    }
    static resolve(id) {
        let values = [];
        if (id !== undefined) // Explicit ID will take precedence over other resolution methods
        values.push(id);
        // Check each segment of the URL hash (e.g. #/[id]/[encoded_state])
        values.push(...(0, _util.url).hash.substring(1).split('/').filter((path)=>path !== ''));
        if (!(0, _util.params).has(State.ParamKeys.Edit)) // If puzzle is not being edited, check last active puzzle ID, falling back to first puzzle ID
        values.push(State.getId() || (0, _puzzles.Puzzles).visible.firstId);
        if ((0, _util.params).has(State.ParamKeys.ClearCache)) // If cache is being cleared, do it before attempting resolution
        State.clearCache((0, _util.params).get(State.ParamKeys.ClearCache));
        values = [
            ...new Set(values)
        ];
        console.debug('Attempting to resolve cached state with values:', values);
        let state;
        for (let value of values){
            if ((0, _puzzles.Puzzles).has(value)) {
                id = value;
                value = localStorage.getItem(State.#key(id));
                if (value === null) break;
            }
            try {
                state = State.fromEncoded(value);
                id = state.getId();
                console.debug(`Successfully resolved cached state for puzzle ID '${id}'.`, state);
                return state;
            } catch (e) {
                console.debug(`Could not decode value: ${value}`, e);
            }
        }
        console.debug(`No cached state found for puzzle ID '${id}'.`);
        return State.fromId(id);
    }
    static CacheKeys = Object.freeze({
        Editor: 'editor',
        Id: 'id'
    });
    static ParamKeys = Object.freeze({
        ClearCache: 'clearCache',
        Edit: 'edit'
    });
    // This should be incremented whenever the state cache object changes in a way that requires it to be invalidated
    // Use this sparingly as it will reset the state of every puzzle on the users end
    static Version = 6;
    static #key = (0, _util.getKeyFactory)([
        // Prefix key with 'editor' when in edit mode
        (0, _util.params).has(State.ParamKeys.Edit) ? State.CacheKeys.Editor : undefined,
        'state'
    ].filter((v)=>v));
    static Move = class {
        deltaIndex;
        eventType;
        modifierType;
        selectedTile;
        tile;
        constructor(deltaIndex, eventType, tile, modifier, selectedTile){
            this.deltaIndex = deltaIndex;
            this.eventType = eventType;
            this.modifierType = modifier?.type;
            this.selectedTile = selectedTile?.coordinates.offset.toString();
            this.tile = tile?.coordinates.offset.toString();
        }
    };
}

},{"../puzzles":"7ifRD","./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ifRD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Puzzles", ()=>Puzzles);
const puzzles = {
    '001': require("388f1e0e9ef404f1"),
    '002': require("c78ae468f341d769"),
    '003': require("970871732d2a157b"),
    '004': require("bc9e0c5f7c5d01e4"),
    '005': require("f3e72dc0ddab4b01"),
    '006': require("5dcf17593d7a4bf0"),
    '007': require("a02b60cdc8a431e2"),
    '008': require("ade4d10630f08956"),
    '009': require("6305a2004246bb2"),
    '010': require("da10656096d2af94"),
    '011': require("ac22c67945d4fda9"),
    '012': require("fe6acb01757b24c8"),
    test_infinite_loop: require("85499c36fcf7a4eb"),
    test_portal: require("41bc05d099929c0d"),
    test_reflector: require("255f7590a7448490")
};
function traverse(ids, id, amount) {
    const index = ids.indexOf(id);
    return ids[index < 0 ? index : index + amount];
}
class PuzzleGroup {
    ids = [];
    constructor(ids){
        this.firstId = ids[0];
        this.ids = ids;
        this.lastId = ids[ids.length - 1];
    }
    get(id) {
        if (this.has(id)) // Note: deep cloning puzzles to prevent mutation
        return structuredClone(puzzles[id]);
    }
    has(id) {
        return this.ids.includes(id);
    }
    nextId(id) {
        return traverse(this.ids, id, 1);
    }
    previousId(id) {
        return traverse(this.ids, id, -1);
    }
}
const Puzzles = new PuzzleGroup(Object.keys(puzzles).sort());
Puzzles.hidden = new PuzzleGroup(Puzzles.ids.filter((id)=>id.startsWith('test_')));
Puzzles.titles = Object.fromEntries(Puzzles.ids.map((id)=>[
        id,
        puzzles[id].title || id
    ]));
Puzzles.visible = new PuzzleGroup(Puzzles.ids.filter((id)=>!Puzzles.hidden.has(id)));

},{"388f1e0e9ef404f1":"aW13h","c78ae468f341d769":"7g0cm","970871732d2a157b":"iaK6p","bc9e0c5f7c5d01e4":"ljdPP","f3e72dc0ddab4b01":"1cnyP","5dcf17593d7a4bf0":"aIJrc","a02b60cdc8a431e2":"2F0gb","ade4d10630f08956":"1bhn7","6305a2004246bb2":"2icw5","da10656096d2af94":"b93JV","ac22c67945d4fda9":"6ZkNx","fe6acb01757b24c8":"IvGia","85499c36fcf7a4eb":"fUqeV","41bc05d099929c0d":"4XdFs","255f7590a7448490":"eKsSY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aW13h":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"version\":0,\"layout\":{\"tiles\":{\"0\":{\"0\":{\"type\":\"Tile\",\"id\":\"0cbb0588\"},\"1\":{\"type\":\"Tile\",\"id\":\"9c7f7b9a\"},\"-1\":{\"type\":\"Tile\",\"id\":\"da960fda\"}},\"1\":{\"0\":{\"items\":[{\"openings\":[{\"color\":\"#0000ff\",\"direction\":0}],\"type\":\"Terminus\",\"id\":\"1ef95005\"}],\"type\":\"Tile\",\"id\":\"5c2510d3\"},\"-1\":{\"id\":\"e3bec484\",\"type\":\"Tile\",\"items\":[{\"id\":\"ddca0ca8\",\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":1,\"toggled\":true}]}],\"modifiers\":[{\"id\":\"3c658dae\",\"type\":\"Toggle\"}]}},\"-1\":{\"0\":{\"type\":\"Tile\",\"id\":\"c9bedf13\"},\"-1\":{\"items\":[{\"openings\":[{\"color\":\"#0000ff\",\"direction\":3,\"toggled\":true}],\"type\":\"Terminus\",\"id\":\"9f234017\"}],\"type\":\"Tile\",\"id\":\"349a7a4a\"}}},\"offset\":\"odd-row\"},\"solution\":[{\"amount\":1,\"type\":\"Connections\"}]}");

},{}],"7g0cm":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"odd-row\",\"tiles\":{\"0\":{\"0\":{\"id\":\"98c1b870\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#0000ff\",\"direction\":1},{\"color\":\"#0000ff\",\"direction\":2},{\"color\":\"#0000ff\",\"direction\":3},{\"color\":\"#0000ff\",\"direction\":4},{\"color\":\"#0000ff\",\"direction\":5}],\"id\":\"11ea04e4\"}]},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":4},{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#0000ff\",\"direction\":5}],\"id\":\"96eb1c1b\"}],\"id\":\"f7b48b08\"},\"-1\":{\"id\":\"a7f644b8\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1},{\"color\":\"#0000ff\",\"direction\":3},{\"color\":\"#0000ff\",\"direction\":2}],\"id\":\"e322950f\"}]}},\"1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":5},{\"color\":\"#0000ff\",\"direction\":1},{\"color\":\"#0000ff\",\"direction\":0}],\"id\":\"5405af42\"}],\"id\":\"8f2cda31\"},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#0000ff\",\"direction\":2},{\"color\":\"#0000ff\",\"direction\":1}],\"id\":\"176953c3\"}],\"id\":\"57bb0429\"}},\"-1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":3},{\"color\":\"#0000ff\",\"direction\":5},{\"color\":\"#0000ff\",\"direction\":4}],\"id\":\"bcf89ade\"}],\"id\":\"2eb11c84\"},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":2},{\"color\":\"#0000ff\",\"direction\":4},{\"color\":\"#0000ff\",\"direction\":3}],\"id\":\"cdf38c3f\"}],\"id\":\"e2e2cc4d\"}}},\"modifiers\":[{\"type\":\"Toggle\",\"id\":\"99243a1a\"}]},\"version\":0,\"solution\":[{\"type\":\"Connections\",\"amount\":5}]}");

},{}],"iaK6p":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"modifiers\":[{\"id\":\"0f262170\",\"type\":\"Toggle\"}],\"offset\":\"odd-row\",\"tiles\":{\"0\":{\"0\":{\"id\":\"04c7d967\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#ff0000\",\"direction\":1},{\"color\":\"#0000ff\",\"direction\":2,\"toggled\":true},{\"color\":\"#ff0000\",\"direction\":3},{\"color\":\"#0000ff\",\"direction\":4},{\"color\":\"#ff0000\",\"direction\":5,\"toggled\":true}],\"id\":\"c5835edd\"}]},\"1\":{\"id\":\"e0e00401\",\"type\":\"Tile\"},\"2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":5,\"toggled\":false}],\"id\":\"d21e5308\"}],\"id\":\"5acc1407\"},\"-1\":{\"id\":\"6c632460\",\"type\":\"Tile\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":2,\"toggled\":false}],\"id\":\"fb669389\"}],\"id\":\"1652ec72\"}},\"1\":{\"0\":{\"type\":\"Tile\",\"id\":\"d0b13fc4\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":0,\"toggled\":true}],\"id\":\"bbde184c\"}],\"id\":\"453b4d64\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"b45a15d3\"}]},\"-1\":{\"type\":\"Tile\",\"id\":\"59e60928\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":1,\"toggled\":false}],\"id\":\"c0ae2132\"}],\"id\":\"e04bf3e8\"}},\"2\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":0},{\"color\":\"#008000\",\"direction\":1}],\"id\":\"98e62cb4\"}],\"id\":\"1a2e1e12\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":0,\"toggled\":false}],\"id\":\"2eee79eb\"}],\"id\":\"522b600d\"},\"-1\":{\"id\":\"ea370bb7\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1,\"toggled\":false}],\"id\":\"b91484a6\"}]}},\"-1\":{\"0\":{\"type\":\"Tile\",\"id\":\"1848a6ad\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":4,\"toggled\":false}],\"id\":\"b7729e7f\"}],\"id\":\"6a9d44bf\"},\"-1\":{\"id\":\"a7ae7f64\",\"type\":\"Tile\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":3,\"toggled\":true}],\"id\":\"996a54c9\"}],\"id\":\"ee57363a\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"37e58227\"}]}},\"-2\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":4},{\"color\":\"#008000\",\"direction\":3}],\"id\":\"5fff1412\"}],\"id\":\"75667c33\"},\"1\":{\"id\":\"082207e9\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":4,\"toggled\":false}],\"id\":\"f1aa8307\"}]},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":3,\"toggled\":false}],\"id\":\"452cce64\"}],\"id\":\"234b7936\"}}}},\"solution\":[{\"type\":\"Connections\",\"amount\":6}],\"version\":0}");

},{}],"ljdPP":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"version\":0,\"layout\":{\"tiles\":{\"0\":{\"0\":{\"id\":\"dbf74c17\",\"type\":\"Tile\"},\"1\":{\"id\":\"a4f181e1\",\"type\":\"Tile\"},\"-1\":{\"id\":\"fb798c61\",\"type\":\"Tile\"}},\"1\":{\"0\":{\"id\":\"c33f42c2\",\"type\":\"Tile\"},\"-1\":{\"id\":\"1b291584\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":1,\"toggled\":true}],\"id\":\"ef126477\"}],\"modifiers\":[{\"type\":\"Swap\",\"id\":\"362fdc23\"}]}},\"-1\":{\"0\":{\"id\":\"1340ed3e\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":4,\"toggled\":true}],\"id\":\"842d4005\"}]},\"-1\":{\"id\":\"3622ae8a\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"id\":\"dddfa2dd\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":4}]}],\"modifiers\":[{\"type\":\"Rotate\",\"id\":\"3b976366\"}]}}}},\"solution\":[{\"type\":\"Connections\",\"amount\":1}]}");

},{}],"1cnyP":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"version\":0,\"layout\":{\"tiles\":{\"0\":{\"0\":{\"id\":\"f7e82775\",\"type\":\"Tile\"},\"1\":{\"id\":\"a6a13b50\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":4}],\"id\":\"9e1641ff\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"d7cf5d82\"}]},\"-1\":{\"id\":\"da5ab990\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1}],\"id\":\"ecb4ba7d\"}]}},\"1\":{\"0\":{\"id\":\"926dd5c2\",\"type\":\"Tile\"},\"-1\":{\"id\":\"e1f07200\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":2,\"toggled\":true}],\"id\":\"9445dc49\"}],\"modifiers\":[{\"type\":\"Swap\",\"id\":\"4db41948\"},{\"type\":\"Rotate\",\"id\":\"607154d3\",\"clockwise\":false}]}},\"-1\":{\"0\":{\"id\":\"ee3c0f2f\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":5,\"toggled\":true}],\"id\":\"ffca60ee\"}],\"modifiers\":[{\"type\":\"Move\",\"id\":\"9a35f620\"}]},\"-1\":{\"id\":\"4c7af20d\",\"type\":\"Tile\"}}}},\"solution\":[{\"type\":\"Connections\",\"amount\":2}]}");

},{}],"aIJrc":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"version\":0,\"layout\":{\"tiles\":{\"0\":{\"1\":{\"id\":\"a1a47835\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#ff0000\",\"direction\":2,\"toggled\":true}],\"id\":\"bbb6524d\"}]},\"-1\":{\"id\":\"d04577a8\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":5,\"toggled\":true},{\"color\":\"#ff0000\",\"direction\":3}],\"id\":\"b51d512f\"}]}},\"1\":{\"0\":{\"id\":\"2b3fd31d\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"rotation\":2,\"id\":\"d5820ff1\"}]},\"-1\":{\"id\":\"15777e85\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"1c80477c\"}]}},\"-1\":{\"0\":{\"id\":\"f272960c\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"8506728c\"}]},\"-1\":{\"id\":\"671c53b3\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"c8c7367b\",\"rotation\":2}],\"modifiers\":[{\"type\":\"Swap\",\"id\":\"842a76e2\"}]}}}},\"solution\":[{\"type\":\"Connections\",\"amount\":2}]}");

},{}],"2F0gb":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"version\":0,\"layout\":{\"tiles\":{\"0\":{\"0\":{\"id\":\"31fddfab\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"rotation\":3,\"id\":\"e43aaf8e\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"68de9848\"},{\"type\":\"Rotate\",\"id\":\"e45bd074\"}]},\"1\":{\"id\":\"7debc40d\",\"type\":\"Tile\"},\"2\":{\"id\":\"4d3d4d5c\",\"type\":\"Tile\"},\"-1\":{\"id\":\"9a141161\",\"type\":\"Tile\"},\"-2\":{\"id\":\"4278d79d\",\"type\":\"Tile\"}},\"1\":{\"0\":{\"id\":\"07559685\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"rotation\":3,\"id\":\"732a68a9\"}]},\"1\":{\"id\":\"8472fea8\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"579e323e\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":1},{\"color\":\"#ff0000\",\"direction\":0,\"toggled\":true}],\"id\":\"7dad4af4\"}]},\"-1\":{\"id\":\"ae9deac9\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"rotation\":3,\"id\":\"3dca0442\"}]},\"-2\":{\"id\":\"f62e3a1a\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"5cf75411\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":0},{\"color\":\"#0000ff\",\"direction\":1,\"toggled\":true}],\"id\":\"d8bc4263\"}]}},\"-1\":{\"0\":{\"id\":\"9742e8a6\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"2b5cf6ac\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":2,\"toggled\":true},{\"color\":\"#ff0000\",\"direction\":3}],\"id\":\"e55b2e61\"}]},\"1\":{\"id\":\"78e0360f\",\"type\":\"Tile\"},\"2\":{\"id\":\"ff1eab33\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"d85956fe\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":5},{\"color\":\"#ff0000\",\"direction\":4,\"toggled\":true}],\"id\":\"6a0bcd4f\"}]},\"-1\":{\"id\":\"55998903\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"0843c4b1\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":4},{\"color\":\"#0000ff\",\"direction\":5,\"toggled\":true}],\"id\":\"320b734c\"}]},\"-2\":{\"id\":\"3f752831\",\"type\":\"Tile\"},\"-3\":{\"id\":\"d8d75757\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"cac0a0ed\"}],\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":2},{\"color\":\"#0000ff\",\"direction\":3,\"toggled\":true}],\"id\":\"8aeb000e\"}]}}},\"modifiers\":[{\"type\":\"Move\",\"id\":\"192b1b35\"}]},\"solution\":[{\"type\":\"Connections\",\"amount\":0},{\"type\":\"Moves\",\"amount\":4}]}");

},{}],"1bhn7":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"even-row\",\"tiles\":{\"0\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"7eaec543\"}],\"modifiers\":[{\"type\":\"Move\",\"id\":\"aa1fa035\"}],\"id\":\"f0d256ba\"},\"1\":{\"type\":\"Tile\",\"id\":\"72c3c916\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"d3451599\"}]},\"-2\":{\"type\":\"Tile\",\"id\":\"0ed739c7\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"6959428f\"}]},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"f98bee1d\"}],\"modifiers\":[{\"type\":\"Move\",\"id\":\"f832a423\"}],\"id\":\"fb4b5a5c\"}},\"1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Filter\",\"color\":\"#ff0000\",\"id\":\"ce00988d\"}],\"id\":\"fe092f90\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"direction\":3,\"color\":\"#ff0000\"}],\"id\":\"df42627b\"}],\"id\":\"65654f82\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#b400b4\",\"direction\":0}],\"id\":\"549c64b6\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"e76d0e3e\"}],\"id\":\"16730a74\"},\"-1\":{\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Rotate\",\"id\":\"6f8ceb2c\"}],\"id\":\"4f76111a\"}},\"-1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#b400b4\",\"direction\":3}],\"id\":\"552167d1\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"f4c9837f\"}],\"id\":\"a7d5efb6\"},\"-1\":{\"type\":\"Tile\",\"id\":\"3e72d7db\",\"modifiers\":[{\"type\":\"Toggle\",\"id\":\"11017ae0\"}]},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Filter\",\"color\":\"#0000ff\",\"id\":\"3b12ae82\"}],\"id\":\"41281869\"},\"-3\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"direction\":0,\"color\":\"#0000ff\"}],\"id\":\"94852020\"}],\"id\":\"6ce87703\"}}},\"modifiers\":[{\"type\":\"Swap\",\"id\":\"2d33dc20\"}]},\"version\":0,\"solution\":[{\"type\":\"Connections\",\"amount\":2}]}");

},{}],"2icw5":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"odd-row\",\"tiles\":{\"0\":{\"1\":{\"id\":\"744fba7a\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":3}],\"id\":\"b890e470\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"110796b4\"}]},\"2\":{\"id\":\"70dbb697\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"979a9e6d\"}]},\"3\":{\"id\":\"02825cfd\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"3af37e59\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"3db9b817\"}]},\"-1\":{\"id\":\"611a4233\",\"type\":\"Tile\"},\"-2\":{\"id\":\"8a2041c5\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"021b4ba2\"}]},\"-3\":{\"id\":\"63af4b07\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":1,\"toggled\":true}],\"id\":\"7ab05f54\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"1f98dd59\"}]}},\"1\":{\"1\":{\"id\":\"42aa42df\",\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"7bf21678\"}]},\"2\":{\"id\":\"dbaeb3de\",\"type\":\"Tile\"},\"-2\":{\"id\":\"19a43886\",\"type\":\"Tile\"},\"-3\":{\"id\":\"26bc177a\",\"type\":\"Tile\"}},\"-1\":{\"1\":{\"id\":\"51c0929a\",\"type\":\"Tile\"},\"2\":{\"id\":\"46963c5c\",\"type\":\"Tile\"},\"-3\":{\"id\":\"e21f9280\",\"type\":\"Tile\"},\"-2\":{\"id\":\"55a0cecf\",\"type\":\"Tile\"}}},\"modifiers\":[{\"type\":\"Move\",\"id\":\"845596b7\"}]},\"solution\":[{\"type\":\"Connections\",\"amount\":1}],\"version\":0}");

},{}],"b93JV":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"odd-row\",\"tiles\":{\"0\":{\"1\":{\"id\":\"744fba7a\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":3}],\"id\":\"b890e470\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"110796b4\"}]},\"2\":{\"id\":\"70dbb697\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"979a9e6d\"}]},\"3\":{\"id\":\"02825cfd\",\"type\":\"Tile\",\"items\":[{\"type\":\"Reflector\",\"id\":\"3af37e59\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"3db9b817\"}]},\"-1\":{\"id\":\"611a4233\",\"type\":\"Tile\"},\"-2\":{\"id\":\"8a2041c5\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"021b4ba2\"}]},\"-3\":{\"id\":\"63af4b07\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#008000\",\"direction\":1,\"toggled\":true}],\"id\":\"7ab05f54\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"1f98dd59\"}]}},\"1\":{\"1\":{\"type\":\"Tile\",\"id\":\"42aa42df\"},\"2\":{\"id\":\"dbaeb3de\",\"type\":\"Tile\"},\"-2\":{\"id\":\"19a43886\",\"type\":\"Tile\"},\"-3\":{\"id\":\"26bc177a\",\"type\":\"Tile\"}},\"-1\":{\"1\":{\"id\":\"51c0929a\",\"type\":\"Tile\"},\"2\":{\"id\":\"46963c5c\",\"type\":\"Tile\"},\"-3\":{\"type\":\"Tile\",\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"bb2f901a\"}],\"id\":\"690c22b2\"},\"-2\":{\"id\":\"55a0cecf\",\"type\":\"Tile\"}}},\"modifiers\":[{\"type\":\"Move\",\"id\":\"845596b7\"}]},\"solution\":[{\"type\":\"Connections\",\"amount\":1}],\"version\":0}");

},{}],"6ZkNx":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"odd-row\",\"tiles\":{\"0\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":0,\"id\":\"916477d6\"}],\"id\":\"75df857a\"},\"1\":{\"id\":\"43142953\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":5}],\"id\":\"1ce44eba\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"9ba8bd9e\"}]},\"-1\":{\"id\":\"da8da7c6\",\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":2,\"toggled\":true,\"steps\":{\"3\":{\"Portal\":{\"entryPortalId\":\"916477d6\",\"exitPortalId\":\"388f88d4\"}}}}],\"id\":\"5363af1f\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"9556062f\"}]}},\"1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":5,\"id\":\"c2c04bc7\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"0c3fe41a\"}],\"id\":\"c92e21e3\"},\"-1\":{\"id\":\"62c320fa\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":5,\"id\":\"f75c4e92\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"97b3cf21\"}]}},\"-1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":5,\"id\":\"88b59156\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"5871082a\"}],\"id\":\"210e5463\"},\"-1\":{\"id\":\"720d0180\",\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"388f88d4\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"5b0d7431\"}]}}},\"modifiers\":[{\"type\":\"Rotate\",\"id\":\"b30a8952\"}]},\"solution\":[{\"type\":\"Connections\",\"amount\":1}],\"version\":0}");

},{}],"IvGia":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"offset\":\"even-row\",\"tiles\":{\"0\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Wall\",\"directions\":[2,3,4],\"immutable\":true,\"id\":\"599155e1\"}],\"id\":\"190532c5\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":0,\"id\":\"b1400b19\"}],\"id\":\"84eab54c\",\"modifiers\":[{\"type\":\"Lock\",\"id\":\"f1c5bbea\"}]},\"2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":0}],\"id\":\"61f27708\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"827e9a99\"}],\"id\":\"97a17408\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":1,\"id\":\"977950c8\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"2cb4c742\"}],\"id\":\"c37a03f6\"},\"-3\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1}],\"id\":\"73f8a5ac\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"3990e750\"}],\"id\":\"c548f15d\"},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Wall\",\"directions\":[3,4,5],\"immutable\":true,\"id\":\"597f2783\"}],\"id\":\"6ba442c5\"}},\"1\":{\"0\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":0}],\"id\":\"9334ca61\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"524e1e3e\"}],\"id\":\"706f6c74\"},\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"a9aad9b7\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"87f186bb\"}],\"id\":\"961e9705\"},\"2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":0,\"id\":\"4611479d\"}],\"id\":\"b44b0f4c\"},\"-3\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"id\":\"51e6e20a\"}],\"modifiers\":[{\"type\":\"Immutable\",\"id\":\"dde316f3\"}],\"id\":\"255e99c6\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1}],\"id\":\"20030ebf\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"d467956f\"}],\"id\":\"665ba31e\"},\"-4\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":1,\"id\":\"e0fbb677\"}],\"id\":\"b87f2624\"}},\"2\":{\"1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":0,\"id\":\"90899ba7\"}],\"id\":\"c5d2f81f\"},\"2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":0}],\"id\":\"2aad73ec\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"55583307\"}],\"id\":\"fb70627d\"},\"-3\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#0000ff\",\"direction\":1}],\"id\":\"71a24791\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"505368dc\"}],\"id\":\"314490e3\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Portal\",\"direction\":1,\"id\":\"0266f740\"}],\"id\":\"e7e92e61\"}},\"-1\":{\"0\":{\"id\":\"1b76a8a0\",\"type\":\"Tile\",\"items\":[{\"type\":\"Wall\",\"directions\":[2,3],\"immutable\":true,\"id\":\"d74a298d\"}]},\"-1\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Terminus\",\"openings\":[{\"color\":\"#ff0000\",\"direction\":0},{\"color\":\"#0000ff\",\"direction\":1},{\"color\":\"#ff0000\",\"direction\":2},{\"color\":\"#0000ff\",\"direction\":3},{\"color\":\"#ff0000\",\"direction\":4},{\"color\":\"#0000ff\",\"direction\":5}],\"id\":\"e7a7ae2f\"}],\"modifiers\":[{\"type\":\"Lock\",\"id\":\"99f4e45e\"},{\"type\":\"Rotate\",\"id\":\"44b7fd07\"},{\"type\":\"Toggle\",\"id\":\"b022e1bd\"}],\"id\":\"5a1ac900\"},\"-2\":{\"type\":\"Tile\",\"items\":[{\"type\":\"Wall\",\"directions\":[4],\"immutable\":true,\"id\":\"7e95cc73\"}],\"id\":\"bc09e30f\"}},\"-2\":{\"0\":{\"id\":\"eadb402e\",\"type\":\"Tile\"},\"-1\":{\"id\":\"92e29b3a\",\"type\":\"Tile\"}}},\"modifiers\":[{\"type\":\"Move\",\"id\":\"d94e4efb\"},{\"type\":\"Move\",\"id\":\"8c3989d1\"},{\"type\":\"Rotate\",\"id\":\"554016e6\"},{\"type\":\"Rotate\",\"id\":\"a1a4421a\"}]},\"version\":0,\"solution\":[{\"type\":\"Connections\",\"amount\":6}]}");

},{}],"fUqeV":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"tiles\":[[{\"items\":[{\"color\":\"red\",\"openings\":[null,null,null,{\"on\":true,\"type\":\"Beam\"},null,null],\"type\":\"Terminus\"}],\"type\":\"Tile\"},{\"items\":[{\"rotation\":2,\"type\":\"Reflector\"}],\"type\":\"Tile\"},{\"type\":\"Tile\"},{\"items\":[{\"color\":\"red\",\"openings\":[null,null,null,null,null,{\"on\":true,\"type\":\"Beam\"}],\"type\":\"Terminus\"}],\"type\":\"Tile\"}],[{\"type\":\"Tile\"},{\"type\":\"Tile\"},{\"type\":\"Tile\"}],[null,{\"items\":[{\"rotation\":4,\"type\":\"Reflector\"}],\"type\":\"Tile\"},{\"items\":[{\"rotation\":2,\"type\":\"Reflector\"}],\"type\":\"Tile\"},{\"items\":[{\"color\":\"blue\",\"openings\":[{\"on\":true,\"type\":\"Beam\"},null,null,null,null,null],\"type\":\"Terminus\"}],\"type\":\"Tile\"}]]},\"solution\":[{\"amount\":100,\"type\":\"Connections\"}]}");

},{}],"4XdFs":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"tiles\":[[{\"items\":[{\"direction\":0,\"type\":\"Portal\"}],\"modifiers\":[{\"type\":\"Immutable\"}],\"type\":\"Tile\"},{\"items\":[{\"direction\":0,\"type\":\"Portal\"}],\"modifiers\":[{\"type\":\"Immutable\"}],\"type\":\"Tile\"},{\"items\":[{\"openings\":[null,null,null,{\"color\":[\"red\",\"blue\"],\"type\":\"Beam\"},null,null],\"type\":\"Terminus\"}],\"modifiers\":[{\"type\":\"Rotate\"}],\"type\":\"Tile\"},{\"items\":[{\"openings\":[null,null,null,null,{\"color\":\"green\",\"type\":\"Beam\"},null],\"type\":\"Terminus\"}],\"modifiers\":[{\"type\":\"Lock\"},{\"type\":\"Toggle\"}],\"type\":\"Tile\"}],[{\"items\":[{\"openings\":[{\"color\":\"red\",\"type\":\"Beam\"},null,null,null,null,null],\"type\":\"Terminus\"}],\"modifiers\":[{\"type\":\"Lock\"},{\"type\":\"Rotate\"},{\"type\":\"Toggle\"}],\"type\":\"Tile\"},{\"items\":[{\"openings\":[{\"color\":\"blue\",\"type\":\"Beam\"},null,null,null,null,null],\"type\":\"Terminus\"}],\"modifiers\":[{\"type\":\"Lock\"},{\"type\":\"Toggle\"}],\"type\":\"Tile\"},{\"items\":[{\"direction\":0,\"type\":\"Portal\"}],\"modifiers\":[{\"type\":\"Immutable\"}],\"type\":\"Tile\"}]]},\"solution\":[{\"amount\":1,\"type\":\"Connections\"}]}");

},{}],"eKsSY":[function(require,module,exports,__globalThis) {
module.exports = JSON.parse("{\"layout\":{\"tiles\":[[{\"items\":[{\"color\":\"red\",\"openings\":[null,null,null,{\"on\":true,\"type\":\"Beam\"},null,null],\"type\":\"Terminus\"}],\"type\":\"Tile\"}],[{\"items\":[{\"type\":\"Reflector\"}],\"modifiers\":[{\"type\":\"Rotate\"}],\"type\":\"Tile\"}],[{\"items\":[{\"color\":\"green\",\"openings\":[null,{\"on\":true,\"type\":\"Beam\"},null,null,null,null],\"type\":\"Terminus\"}],\"type\":\"Tile\"},{\"items\":[{\"color\":\"blue\",\"openings\":[{\"on\":true,\"type\":\"Beam\"},null,null,null,null,null],\"type\":\"Terminus\"}],\"type\":\"Tile\"}]]},\"solution\":[{\"amount\":999,\"type\":\"Connections\"}]}");

},{}],"lDr3h":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Icons", ()=>Icons);
var _symbol = require("./symbol");
class Icons {
    static Immutable = new (0, _symbol.Symbol)('icon-immutable', 'block');
    static Lock = new (0, _symbol.Symbol)('icon-lock', 'lock');
    static Move = new (0, _symbol.Symbol)('icon-move', 'drag_pan');
    static RotateLeft = new (0, _symbol.Symbol)('icon-rotate-left', 'rotate_left');
    static RotateRight = new (0, _symbol.Symbol)('icon-rotate-right', 'rotate_right');
    static Swap = new (0, _symbol.Symbol)('icon-swap', 'swap_horiz');
    static ToggleOff = new (0, _symbol.Symbol)('icon-toggle-off', 'toggle_off');
    static ToggleOn = new (0, _symbol.Symbol)('icon-toggle-on', 'toggle_on');
    static All = Object.freeze([
        Icons.Immutable,
        Icons.Lock,
        Icons.Move,
        Icons.RotateLeft,
        Icons.RotateRight,
        Icons.Swap,
        Icons.ToggleOff,
        Icons.ToggleOn
    ]);
    static ByName = Object.freeze(Object.fromEntries(Icons.All.map((icon)=>[
            icon.name,
            icon
        ])));
}

},{"./symbol":"jnYD6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jnYD6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Symbol", ()=>Symbol);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
class Symbol {
    definition;
    id;
    name;
    constructor(id, name){
        this.id = id;
        this.name = name;
    }
    place(position, settings) {
        if (!this.definition) {
            const element = document.getElementById(this.id);
            const item = (0, _paperDefault.default).project.importSVG(element);
            // By default, symbols will be excluded from beam collisions
            item.data.collidable = false;
            // By default, symbols cannot be clicked on
            item.locked = true;
            this.definition = new (0, _paper.SymbolDefinition)(item);
        }
        if (settings) this.definition.item.set(settings);
        return this.definition.place(position);
    }
}

},{"paper":"agkns","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"71fBe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Step", ()=>Step);
parcelHelpers.export(exports, "StepState", ()=>StepState);
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _util = require("./util");
class Step {
    color;
    colors;
    connected;
    direction;
    done;
    insertAbove;
    onAdd;
    onRemove;
    point;
    pathIndex;
    segmentIndex;
    state;
    tile;
    constructor(index, tile, colors, direction, point, pathIndex, segmentIndex, connected, insertAbove, done, state, onAdd, onRemove){
        if (state && !(state instanceof StepState)) throw new Error('Step.state must be instance of StepState');
        this.colors = colors ? Array.isArray(colors) ? Array.from(colors) : [
            colors
        ] : [];
        if (this.colors.length) this.color = (0, _chromaJsDefault.default).average(this.colors).hex();
        this.connected = connected ?? true;
        this.direction = direction;
        this.done = done ?? false;
        this.index = index;
        this.insertAbove = insertAbove;
        // The onAdd and onRemove methods should be idempotent!
        this.onAdd = onAdd ?? (0, _util.noop);
        this.onRemove = onRemove ?? (0, _util.noop);
        this.point = point;
        this.pathIndex = pathIndex;
        this.segmentIndex = segmentIndex;
        this.state = state ?? new StepState();
        this.tile = tile;
    }
    copy(settings) {
        return new Step(settings.index ?? this.index, settings.tile ?? this.tile, settings.colors ?? settings.color ?? this.colors, settings.direction ?? this.direction, settings.point ?? this.point, settings.pathIndex ?? this.pathIndex, settings.segmentIndex ?? this.segmentIndex, settings.connected ?? this.connected, settings.insertAbove ?? this.insertAbove, settings.done ?? this.done, settings.state ?? new StepState(this.state), settings.onAdd ?? this.onAdd, settings.onRemove ?? this.onRemove);
    }
    equals(step) {
        return (0, _util.deepEqual)(this, step);
    }
}
class StepState {
    #cache = {};
    constructor(){
        const settings = Object.assign({}, ...arguments);
        Object.keys(settings).forEach((key)=>{
            this[key] = settings[key];
        });
    }
    copy(...settings) {
        return new StepState(...[
            this
        ].concat(settings));
    }
    get(Class) {
        return this.#keys(Class).map((key)=>this[key]).find((value)=>value);
    }
    has(Class) {
        return this.#keys(Class).some((key)=>this[key]);
    }
    #keys(Class) {
        return this.#cache[Class.name] ??= Object.keys(Reflect.construct(Class, []));
    }
    static Collision = class StepCollision {
        collision;
        // Item is optional, in the case of an out-of-bounds collision for example
        constructor(collision){
            this.collision = collision;
        }
    };
    static Filter = class StepFilter {
        filter = {};
    };
    static MergeInto = class StepMergeInto {
        mergeInto;
        constructor(beam){
            this.mergeInto = {
                beam
            };
        }
    };
    static MergeWith = class StepMergeWith {
        mergeWith;
        constructor(mergeWith){
            this.mergeWith = mergeWith;
        }
    };
    static Portal = class StepPortal {
        portal;
        constructor(entryPortal, exitPortal){
            this.portal = {
                entryPortal,
                exitPortal
            };
        }
    };
    static Reflector = class StepReflector {
        reflector;
        constructor(item){
            this.reflector = {
                item
            };
        }
    };
    static TerminusConnection = class StepTerminusConnection {
        terminusConnection;
        constructor(terminus, opening){
            this.terminusConnection = {
                terminus,
                opening
            };
        }
    };
}

},{"chroma-js":"bnCL0","./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Jnaf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Portal", ()=>Portal);
var _move = require("../modifiers/move");
var _item = require("../item");
var _paper = require("paper");
var _rotate = require("../modifiers/rotate");
var _step = require("../step");
var _puzzle = require("../puzzle");
var _util = require("../util");
var _schema = require("../schema");
class Portal extends (0, _move.movable)((0, _rotate.rotatable)((0, _item.Item))) {
    #directions = {};
    constructor(tile, state){
        // Only allow rotation if direction is defined
        super(tile, state, {
            rotatable: state.direction !== undefined
        });
        this.direction = state.direction;
        const height = tile.parameters.circumradius / 3;
        const width = tile.parameters.circumradius / 5;
        const style = {
            fillColor: 'black',
            strokeColor: 'white',
            strokeWidth: 2
        };
        const children = [];
        // TODO: consider adding an item with a gradient that fades to black at the center of the ellipse
        // This will help distinguish visually that beams are entering/exiting a portal when there are multiple
        const ellipse = new (0, _paper.Path).Ellipse({
            center: tile.center,
            radius: [
                width,
                height
            ],
            style
        });
        children.push(ellipse);
        const ring = new (0, _paper.Path).Ellipse({
            center: tile.center,
            radius: [
                width - style.strokeWidth * 2,
                height - style.strokeWidth * 2
            ],
            style
        });
        children.push(ring);
        if (this.direction !== undefined) {
            const pointer = new (0, _paper.Path)({
                closed: true,
                opacity: 0.25,
                segments: [
                    tile.center.add(new (0, _paper.Point)(0, height)),
                    tile.center.subtract(new (0, _paper.Point)(0, height)),
                    tile.center.subtract(new (0, _paper.Point)(width * 2.5, 0))
                ],
                style: {
                    fillColor: 'black'
                }
            }).subtract(ellipse);
            children.unshift(pointer);
        }
        this.group.addChildren(children);
        if (this.direction !== undefined) // Properly align items with hexagonal rotation
        this.rotateGroup(1);
    }
    get(direction) {
        return this.#directions[direction];
    }
    onCollision({ beam, currentStep, nextStep, puzzle }) {
        const portalState = currentStep.state.get((0, _step.StepState).Portal);
        if (!portalState) {
            const entryDirection = (0, _util.getOppositeDirection)(nextStep.direction);
            const existing = (0, _util.coalesce)(this.get(entryDirection), nextStep);
            if (existing.index < nextStep.index) {
                // Checking stepIndex to exclude cases where we are doing a re-evaluation of history.
                console.debug(this.toString(), 'ignoring beam trying to enter through a direction which is already occupied:', entryDirection);
                return;
            }
            // Handle entry collision
            return nextStep.copy({
                insertAbove: this,
                onAdd: (step)=>this.update(entryDirection, step),
                onRemove: ()=>this.update(entryDirection),
                state: nextStep.state.copy(new (0, _step.StepState).Portal(this))
            });
        } else if (portalState.exitPortal === this) // Handle exit collision
        return nextStep.copy({
            insertAbove: this
        });
        const exitPortals = this.#getExitPortals(puzzle, beam, nextStep);
        if (exitPortals.length === 0) {
            console.debug(this.toString(), 'no valid exit portals found');
            // This will cause the beam to stop
            return currentStep;
        } else if (exitPortals.length === 1) {
            const exitPortal = exitPortals[0];
            console.debug(this.toString(), 'single exit portal matched:', exitPortal);
            return this.#getStep(beam, nextStep, exitPortal);
        } else {
            // Multiple matching destinations. User will need to pick one manually.
            console.debug(this.toString(), 'found multiple valid exit portals:', exitPortals);
            // Cache exit portals for use in mask
            const data = {
                exitPortals
            };
            const mask = new (0, _puzzle.Puzzle).Mask({
                id: this.id,
                onMask: ()=>currentStep.tile.beforeModify(),
                onTap: (puzzle, tile)=>{
                    const exitPortal = data.exitPortals.find((portal)=>portal.parent === tile);
                    if (exitPortal) {
                        // Add a move, since the user made a decision
                        puzzle.state.addMove('portal-exit', tile);
                        beam.addStep(this.#getStep(beam, nextStep, exitPortal));
                        puzzle.unmask();
                    }
                },
                onUnmask: ()=>currentStep.tile.afterModify(),
                onUpdate: ()=>{
                    // State may have changed, fetch portals again
                    const exitPortals = this.#getExitPortals(puzzle, beam, nextStep);
                    if (exitPortals.length === 0) {
                        console.debug(this.toString(), 'mask onUpdate: no valid exit portals found');
                        // Cancel the mask
                        // This will also cause the beam to stop
                        return false;
                    } else if (exitPortals.length === 1) {
                        const exitPortal = exitPortals[0];
                        console.debug(this.toString(), 'mask onUpdate: single portal matched:', exitPortal);
                        beam.addStep(this.#getStep(beam, nextStep, exitPortal));
                        // Cancel the mask
                        return false;
                    } else {
                        console.debug(this.toString(), 'mask onUpdate: exit portals:', exitPortals);
                        data.exitPortals = exitPortals;
                    }
                },
                tileFilter: (tile)=>{
                    // Mask any invalid tiles. Exclude the entry portal tile
                    return !(tile.equals(this.parent) || data.exitPortals.map((portal)=>portal.parent).some((validTile)=>validTile.equals(tile)));
                }
            });
            puzzle.updateSelectedTile(null);
            puzzle.mask(mask);
            // This will cause the beam to stop
            return currentStep;
        }
    }
    onMove() {
        super.onMove();
        // Invalidate directions cache
        this.#directions = {};
    }
    update(direction, data) {
        this.#directions[direction] = data;
    }
    #getExitPortals(puzzle, beam, nextStep) {
        const exitPortals = puzzle.layout.getItems().filter((item)=>// Is a portal
            item.type === (0, _item.Item).Types.portal && // But not the entry portal
            !item.equals(this) && // There is no other beam occupying the portal at the exit direction
            !item.get(Portal.getExitDirection(nextStep, this, item)) && // Entry portals without defined direction can exit from any other portal.
            (this.getDirection() === undefined || // Exit portals without defined direction can be used by any entry portal.
            item.getDirection() === undefined || // Exit portals with a defined direction can only be used by entry portals with the same defined direction.
            item.getDirection() === this.getDirection()));
        if (exitPortals.length > 1) {
            // Check for existing exitPortalId in beam state for this step
            const exitPortalId = beam.getState().steps?.[nextStep.index]?.[(0, _item.Item).Types.portal]?.exitPortalId;
            if (exitPortalId !== undefined) {
                console.debug(this.toString(), `found exitPortalId ${exitPortalId} in beam step ${nextStep.index} state`);
                const existing = exitPortals.find((item)=>item.id === exitPortalId);
                if (existing) return [
                    existing
                ];
            }
        }
        return exitPortals;
    }
    #getStep(beam, nextStep, exitPortal) {
        const direction = Portal.getExitDirection(nextStep, this, exitPortal);
        return nextStep.copy({
            connected: false,
            direction,
            insertAbove: exitPortal,
            onAdd: (step)=>{
                exitPortal.update(direction, step);
                // Store this decision in beam state
                beam.updateState((state)=>{
                    state.steps ??= {};
                    state.steps[step.index] ??= {};
                    state.steps[step.index][(0, _item.Item).Types.portal] = {
                        entryPortalId: this.id,
                        exitPortalId: exitPortal.id
                    };
                    return state;
                });
            },
            onRemove: (step)=>{
                // Remove any associated beam state
                beam.updateState((state)=>{
                    delete state.steps[step.index][(0, _item.Item).Types.portal];
                });
                exitPortal.update(direction);
            },
            point: exitPortal.parent.center,
            state: nextStep.state.copy(new (0, _step.StepState).Portal(this, exitPortal)),
            tile: exitPortal.parent
        });
    }
    static getExitDirection(step, entryPortal, exitPortal) {
        // Direction precedence is as follows:
        // - direction defined by exit portal
        // - direction defined by entry portal
        // - direction beam was traveling when it reached the entry portal
        return exitPortal.getDirection() ?? entryPortal.getDirection() ?? step.direction;
    }
    static Schema = Object.freeze((0, _util.merge)([
        (0, _item.Item).schema((0, _item.Item).Types.portal),
        (0, _move.movable).Schema,
        (0, _rotate.rotatable).Schema,
        {
            properties: {
                direction: (0, _schema.Schema).direction
            }
        }
    ]));
}

},{"../modifiers/move":"iw6ob","../item":"klNFr","paper":"agkns","../modifiers/rotate":"dh5U5","../step":"71fBe","../puzzle":"jIcx0","../util":"92uDI","../schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dh5U5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Rotate", ()=>Rotate);
parcelHelpers.export(exports, "rotatable", ()=>rotatable);
var _modifier = require("../modifier");
var _util = require("../util");
var _icons = require("../icons");
class Rotate extends (0, _modifier.Modifier) {
    clockwise;
    title = 'Rotate';
    constructor(tile, state, configuration = {}){
        super(...arguments);
        this.clockwise = (0, _util.coalesce)(true, state.clockwise, configuration.clockwise);
        this.name = Rotate.Names[this.clockwise ? 'right' : 'left'];
    }
    attach(tile) {
        super.attach(tile);
        if (!this.disabled) this.update({
            disabled: !tile.items.some((item)=>item.rotatable)
        });
    }
    moveFilter(tile) {
        // Filter out tiles that contain no rotatable items
        return super.moveFilter(tile) || !tile.items.some((item)=>item.rotatable);
    }
    onTap(event) {
        super.onTap(event);
        const items = this.tile.items.filter((item)=>item.rotatable);
        if (!items.length) return;
        items.forEach((item)=>item.rotate(this.clockwise));
        this.dispatchEvent((0, _modifier.Modifier).Events.Invoked, {
            items
        });
    }
    onToggle() {
        super.onToggle();
        this.clockwise = !this.clockwise;
        this.updateState((state)=>{
            state.clockwise = this.clockwise;
        });
        this.update({
            name: Rotate.Names[this.clockwise ? 'right' : 'left']
        });
        this.dispatchEvent((0, _modifier.Modifier).Events.Toggled, {
            clockwise: this.clockwise
        });
    }
    static Names = Object.freeze({
        left: (0, _icons.Icons).RotateLeft.name,
        right: (0, _icons.Icons).RotateRight.name
    });
    static Schema = Object.freeze((0, _util.merge)((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.rotate), {
        properties: {
            clockwise: {
                type: 'boolean'
            }
        }
    }));
}
const rotatable = (SuperClass)=>class RotatableItem extends SuperClass {
        direction;
        rotatable;
        rotation = 0;
        rotationDegrees;
        constructor(parent, state, configuration = {}){
            super(...arguments);
            this.direction = (0, _util.coalesce)(state.direction, configuration.direction);
            this.rotatable = !this.immutable && (0, _util.coalesce)(true, state.rotatable, configuration.rotatable);
            this.rotationDegrees = (0, _util.coalesce)(60, state.rotationDegrees, configuration.rotationDegrees);
            this.rotation = (0, _util.coalesce)(0, state.rotation, configuration.rotation) % this.getMaxRotation();
        }
        // Get the direction of an item with rotation factored in
        getDirection(direction) {
            direction = direction ?? this.direction;
            return direction === undefined ? direction : (0, _util.addDirection)(direction, this.rotation);
        }
        getMaxRotation() {
            return 360 / this.rotationDegrees;
        }
        onInitialization() {
            super.onInitialization();
            this.rotateGroup(this.rotation);
            if (this.direction !== undefined) // Direction will not affect initial rotation of item
            this.rotateGroup(this.direction);
        }
        rotateGroup(rotation) {
            this.group.rotate(rotation * this.rotationDegrees, this.center);
        }
        rotate(clockwise) {
            if (!this.rotatable) return;
            const rotation = clockwise === false ? -1 : 1;
            this.rotation = (rotation + this.rotation) % this.getMaxRotation();
            this.updateState((state)=>{
                state.rotation = this.rotation;
            });
            this.rotateGroup(rotation);
        }
    };
rotatable.Schema = {
    properties: {
        direction: {
            type: 'number'
        },
        rotatable: {
            default: true,
            type: 'boolean'
        },
        rotation: {
            type: 'number'
        },
        rotationDegrees: {
            enum: [
                30,
                60,
                90
            ],
            type: 'number'
        }
    }
};

},{"../modifier":"bQhih","../util":"92uDI","../icons":"lDr3h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7I7P6":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Terminus", ()=>Terminus);
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _paper = require("paper");
var _toggle = require("../modifiers/toggle");
var _item = require("../item");
var _rotate = require("../modifiers/rotate");
var _util = require("../util");
var _beam = require("./beam");
var _move = require("../modifiers/move");
var _step = require("../step");
var _schema = require("../schema");
class Terminus extends (0, _move.movable)((0, _rotate.rotatable)((0, _toggle.toggleable)((0, _item.Item)))) {
    sortOrder = 2;
    #connections = {};
    #ui;
    constructor(tile, state){
        super(...arguments);
        state.openings ??= [];
        state.openings = (0, _util.uniqueBy)('direction', state.openings);
        const colors = state.openings.filter((opening)=>opening?.color).flatMap((opening)=>Array.isArray(opening.color) ? opening.color : [
                opening.color
            ]);
        if (!colors.length && !state.color) throw new Error('Color must be defined on terminus or opening: ' + this.toString());
        const color = (0, _chromaJsDefault.default).average(colors.length ? colors : Array.isArray(state.color) ? state.color : [
            state.color
        ]).hex();
        const openings = state.openings.map((opening, index)=>new Terminus.Opening(index, opening.color ?? color, opening.direction, opening.connected, opening.toggled ?? state.toggled));
        this.#ui = Terminus.ui(tile, color, openings);
        this.group.addChildren([
            ...this.#ui.openings,
            this.#ui.terminus
        ]);
        this.color = color;
        this.openings = openings;
        this.radius = this.#ui.radius;
        this.toggled = openings.some((opening)=>opening.toggled);
        // Needs to be last since it references 'this'
        this.beams = openings.map((opening)=>new (0, _beam.Beam)(this, opening));
        this.update();
    }
    getColorElements() {
        return (0, _util.getColorElements)(this.openings.map((opening)=>opening.color));
    }
    getOpening(direction) {
        return this.openings.find((opening)=>opening.direction === direction);
    }
    onMove() {
        this.beams.forEach((beam)=>beam.remove());
    }
    onCollision({ beam, collisionStep, currentStep, existingNextStep, nextStep }) {
        console.debug(this.toString(), 'collision', beam.toString());
        // Colliding with the starting terminus, ignore
        if (beam.parent === this && beam.startDirection() === nextStep.direction) {
            console.debug(beam.toString(), 'ignoring starting terminus collision');
            return;
        }
        const directionFrom = (0, _util.getOppositeDirection)(currentStep.direction);
        // Take rotation of terminus into account
        const opening = this.openings.find((opening)=>this.getDirection(opening.direction) === directionFrom);
        if (opening && opening.color === nextStep.color && (!opening.toggled || // When re-evaluating history of an already connected opening
        opening.connected && existingNextStep?.state.get((0, _step.StepState).TerminusConnection)?.terminus.equals(this))) {
            // Beam has connected to a valid opening
            console.debug(beam.toString(), 'terminus connection', this.toString(), opening);
            return nextStep.copy({
                done: true,
                onAdd: ()=>{
                    nextStep.onAdd();
                    this.#onConnection(opening, beam);
                },
                onRemove: ()=>{
                    nextStep.onRemove();
                    this.#onDisconnection(opening, beam);
                },
                state: nextStep.state.copy(new (0, _step.StepState).TerminusConnection(this, opening))
            });
        }
        // Otherwise, treat this as a collision
        return collisionStep;
    }
    onToggle() {
        this.openings.forEach((opening)=>this.toggleOpening(opening));
    }
    toggleOpening(opening) {
        const beam = this.#connections[opening.direction];
        console.debug('toggleOpening', opening, beam);
        if (beam) // Let the connecting beam handle it
        beam.toggle();
        else {
            opening.toggle();
            this.updateState((state)=>{
                state.openings[opening.index].toggled = opening.toggled;
            });
        }
        this.updateOpening(opening);
    }
    update() {
        this.beams.forEach((beam)=>this.updateOpening(beam.getOpening()));
    }
    updateOpening(opening) {
        const item = this.#ui.openings.find((item)=>item.data.direction === opening.direction);
        item.opacity = opening.toggled || opening.connected ? 1 : Terminus.#openingOffOpacity;
    }
    #onConnection(opening, beam) {
        if (opening.connected) // Already connected
        return;
        this.#connections[opening.direction] = beam;
        opening.connect();
        this.updateOpening(opening);
        (0, _util.emitEvent)(Terminus.Events.Connection, {
            terminus: this,
            opening,
            beam
        });
    }
    #onDisconnection(opening, beam) {
        if (!opening.connected) // Already disconnected
        return;
        opening.disconnect();
        delete this.#connections[opening.direction];
        this.updateOpening(opening);
        (0, _util.emitEvent)(Terminus.Events.Disconnection, {
            terminus: this,
            opening,
            beam
        });
    }
    static #openingOffOpacity = 0.3;
    static ui(tile, color, configuration) {
        const radius = tile.parameters.circumradius / 2;
        const terminus = new (0, _paper.Path).RegularPolygon({
            center: tile.center,
            fillColor: color,
            opacity: 1,
            sides: 6,
            radius: radius / 2
        });
        const openings = configuration.map((opening)=>{
            const direction = opening.direction;
            // Each opening is essentially a triangle from the mid-point segments of the terminus with the tip of the triangle
            // pointing in the direction of the opening. This ensures there isn't a gap between the opening triangle and the
            // terminus hexagon.
            const p1 = terminus.segments[(0, _util.subtractDirection)(direction, 1)].point;
            const p2 = terminus.segments[(0, _util.addDirection)(direction, 2)].point;
            const vector = p2.subtract(p1);
            vector.angle += 120;
            const p3 = p1.subtract(vector);
            return new (0, _paper.Path)({
                closed: true,
                data: {
                    collidable: false,
                    direction
                },
                fillColor: opening.color,
                opacity: opening.toggled ? 1 : Terminus.#openingOffOpacity,
                segments: [
                    p1,
                    p2,
                    p3
                ]
            });
        });
        return {
            openings,
            radius,
            terminus
        };
    }
    static Opening = class {
        color;
        colors;
        connected;
        direction;
        index;
        toggled;
        constructor(index, color, direction, connected, toggled){
            this.index = index;
            this.colors = Array.isArray(color) ? color : [
                color
            ];
            this.color = (0, _chromaJsDefault.default).average(this.colors).hex();
            this.direction = direction;
            this.connected = connected === true;
            this.toggled = toggled === true;
        }
        connect() {
            this.connected = true;
        }
        disconnect() {
            this.connected = false;
        }
        toggle() {
            this.toggled = !this.toggled;
        }
        static Schema = Object.freeze({
            $id: (0, _schema.Schema).$id('terminus', 'opening'),
            properties: {
                color: (0, _schema.Schema).color,
                direction: (0, _schema.Schema).direction,
                steps: {
                    options: {
                        hidden: true
                    },
                    type: 'object'
                },
                toggled: {
                    type: 'boolean'
                }
            },
            required: [
                'color',
                'direction'
            ],
            title: 'opening',
            type: 'object'
        });
    };
    static Events = Object.freeze({
        Connection: 'terminus-connection',
        Disconnection: 'terminus-disconnection'
    });
    static Schema = Object.freeze((0, _util.merge)([
        (0, _item.Item).schema((0, _item.Item).Types.terminus),
        (0, _move.movable).Schema,
        (0, _rotate.rotatable).Schema,
        (0, _toggle.toggleable).Schema,
        {
            properties: {
                openings: {
                    items: Terminus.Opening.Schema,
                    minItems: 0,
                    maxItems: 6,
                    type: 'array'
                }
            }
        }
    ]));
}

},{"chroma-js":"bnCL0","paper":"agkns","../modifiers/toggle":"8EkH3","../item":"klNFr","../modifiers/rotate":"dh5U5","../util":"92uDI","./beam":"9UvIU","../modifiers/move":"iw6ob","../step":"71fBe","../schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8EkH3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Toggle", ()=>Toggle);
parcelHelpers.export(exports, "toggleable", ()=>toggleable);
var _modifier = require("../modifier");
var _icons = require("../icons");
class Toggle extends (0, _modifier.Modifier) {
    title = 'Toggle';
    toggled;
    constructor(tile, state){
        super(...arguments);
        this.toggled = this.parent?.items.some((item)=>item.toggled) ?? false;
        this.name = this.getName();
    }
    attach(tile) {
        super.attach(tile);
        this.toggled = tile?.items.some((item)=>item.toggled) ?? false;
        this.update({
            name: this.getName()
        });
    }
    getName() {
        return Toggle.Names[this.toggled ? 'on' : 'off'];
    }
    moveFilter(tile) {
        // Filter out tiles that contain no toggleable items
        return super.moveFilter(tile) || !tile.items.some((item)=>item.toggleable);
    }
    onTap(event) {
        super.onTap(event);
        this.toggled = !this.toggled;
        const items = this.tile.items.filter((item)=>item.toggleable);
        if (!items.length) return;
        items.forEach((item)=>item.toggle(this.toggled));
        this.update({
            name: this.getName()
        });
        this.dispatchEvent((0, _modifier.Modifier).Events.Invoked, {
            items
        });
    }
    static Names = Object.freeze({
        on: (0, _icons.Icons).ToggleOn.name,
        off: (0, _icons.Icons).ToggleOff.name
    });
    static Schema = Object.freeze((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.toggle));
}
const toggleable = (SuperClass)=>class ToggleableItem extends SuperClass {
        toggleable;
        toggled;
        constructor(parent, configuration){
            super(...arguments);
            this.toggleable = !this.immutable && configuration.toggleable !== false;
            this.toggled = (this.toggleable && configuration.toggled) ?? false;
        }
        onToggle() {}
        toggle(toggled) {
            this.toggled = toggled;
            this.onToggle();
        }
    };
toggleable.Schema = {
    properties: {
        toggleable: {
            default: true,
            type: 'boolean'
        },
        toggled: {
            type: 'boolean'
        }
    }
};

},{"../modifier":"bQhih","../icons":"lDr3h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UvIU":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Beam", ()=>Beam);
var _chromaJs = require("chroma-js");
var _chromaJsDefault = parcelHelpers.interopDefault(_chromaJs);
var _paper = require("paper");
var _item = require("../item");
var _util = require("../util");
var _step = require("../step");
var _collision = require("../collision");
var _cache = require("../cache");
class Beam extends (0, _item.Item) {
    done = false;
    path = [];
    sortOrder = 3;
    #cache = new (0, _cache.Cache)(Object.values(Beam.CacheKeys));
    #direction;
    #path;
    #stepIndex = -1;
    #steps = [];
    constructor(terminus, state){
        // Exclude from modification
        state.immutable = true;
        state.type = (0, _item.Item).Types.beam;
        super(...arguments);
        this.group = null;
        this.#direction = state.direction;
        this.#path = {
            closed: false,
            data: {
                id: this.id,
                type: this.type
            },
            locked: true,
            strokeJoin: 'round',
            strokeCap: 'round',
            strokeWidth: terminus.radius / 12
        };
    }
    addStep(step) {
        const lastStepIndex = this.getLastStepIndex();
        // Can't be done if adding a new step
        this.done = false;
        this.#path.strokeColor = step.color;
        if (this.path.length === 0) {
            const path = new (0, _paper.Path)(this.#path);
            this.path.push(path);
            this.getLayer().insertChild(0, path);
        }
        const currentPath = this.path[this.path.length - 1];
        const previousStep = this.#steps[lastStepIndex];
        // Handles cases that require adding a new path item
        if (!step.connected || previousStep && (step.color !== previousStep.color || step.insertAbove !== previousStep.insertAbove)) {
            console.debug(this.toString(), 'adding new path item for step:', step, 'previous step:', previousStep);
            const path = new (0, _paper.Path)(this.#path);
            const points = [
                step.point
            ];
            // If the next step is connected, we will link it with the previous step
            if (step.connected) points.unshift(previousStep.point);
            path.add(...points);
            this.path.push(path);
            // Unless specified in the state, the path will be inserted beneath all items
            this.getLayer().insertChild(this.#getItemIndex(step), path);
            // Reset the segmentIndex
            step.segmentIndex = 0;
        } else {
            currentPath.add(step.point);
            step.segmentIndex = currentPath.segments.length - 1;
        }
        step.pathIndex = this.path.length - 1;
        this.#steps.push(step);
        step.index = this.#stepIndex = this.#steps.length - 1;
        if (!step.tile.items.some((item)=>item.equals(this))) // Add this beam to the tile item list so other beams can see it
        step.tile.addItem(this);
        step.onAdd(step);
        console.debug(this.toString(), 'added step', step);
        this.#onUpdate(this.#stepIndex);
        return step;
    }
    getCollision() {
        return this.getStep()?.state.get((0, _step.StepState).Collision);
    }
    getColor() {
        return this.getStep()?.color || this.getOpening().color;
    }
    getColors() {
        return Array.from(this.getStep()?.colors || this.getOpening().colors);
    }
    getColorElements(tile) {
        // Show color elements for merged beams
        const step = this.getSteps(tile).find((step)=>step.state.has((0, _step.StepState).MergeWith));
        return step ? (0, _util.getColorElements)(step.colors) : [];
    }
    getCompoundPath() {
        return new (0, _paper.CompoundPath)({
            children: this.path.map((item)=>item.clone({
                    insert: false
                }))
        });
    }
    getIndex() {
        return this.path[this.path.length - 1].index;
    }
    getLastStepIndex() {
        return this.length() - 1;
    }
    getLayer() {
        return this.parent.getLayer();
    }
    getMergeWith(beam) {
        return this.#cache.get(Beam.CacheKeys.MergeWith).get(beam.id);
    }
    getOpening() {
        return this.parent.getOpening(this.#direction);
    }
    getState() {
        // noinspection JSValidateTypes
        return this.parent.getState().openings.find((opening)=>opening.direction === this.#direction);
    }
    getStep(stepIndex) {
        return this.#steps[stepIndex || this.getLastStepIndex()];
    }
    getSteps(tile) {
        return tile ? this.#steps.filter((step)=>step.tile === tile) : this.#steps;
    }
    isComplete() {
        return this.isOn() && this.done;
    }
    isConnected() {
        const step = this.getStep();
        return step?.state.has((0, _step.StepState).TerminusConnection) || // Consider beams which have merged into connected beams to also be connected
        step?.state.get((0, _step.StepState).MergeInto)?.beam.isConnected();
    }
    isOn() {
        const opening = this.getOpening();
        // The opening will also be on if another beam connects with it
        return opening.toggled && !opening.connected;
    }
    isPending() {
        return this.isOn() && !this.done;
    }
    length() {
        return this.#steps.length;
    }
    onBeamUpdated(event) {
        const beam = event.detail.beam;
        if (beam.isPending()) // Wait for beam to finish before evaluating
        return;
        const beamLastStep = beam.getStep();
        if (this.isComplete()) {
            const lastStep = this.getStep();
            // Check for invalid collisions
            const collision = lastStep.state.get((0, _step.StepState).Collision);
            if (collision?.has(beam) && !collision.equals(beamLastStep?.state.get((0, _step.StepState).Collision))) {
                console.debug(this.toString(), 're-evaluating collision with', beam.toString());
                this.done = false;
                this.#stepIndex = Math.max(lastStep.index - 1, 0);
                return;
            }
            // Check for invalid mergedInto
            const mergeInto = lastStep.state.get((0, _step.StepState).MergeInto);
            if (mergeInto?.beam.equals(beam) && !beam.getMergeWith(this)) {
                console.debug(this.toString(), 're-evaluating merge into', beam.toString());
                this.done = false;
                this.#stepIndex = Math.max(this.#stepIndex - 1, 0);
                return;
            }
        }
        // Check for invalid mergedWith
        const mergeWith = this.getMergeWith(beam);
        if (mergeWith && !beamLastStep?.state.get((0, _step.StepState).MergeInto)?.beam.equals(this)) {
            console.debug(this.toString(), 're-evaluating merge with', beam.toString());
            this.done = false;
            this.#stepIndex = Math.max(mergeWith.stepIndex - 1, 0);
        }
    }
    onCollision({ beam, collision, collisionStep, currentStep, nextStep, puzzle }) {
        const isSelf = beam.equals(this);
        console.debug(this.toString(), 'evaluating collision with', isSelf ? 'self' : beam.toString());
        if (!beam.isOn()) {
            console.debug(this.toString(), 'ignoring collision with inactive beam', beam.toString());
            return;
        }
        if (beam.parent.equals(this.parent) && currentStep.index === 0) {
            console.debug(this.toString(), 'ignoring collision with sibling beam', beam.toString());
            return;
        }
        if (isSelf && this.#stepIndex < this.getLastStepIndex()) {
            console.debug(this.toString(), 'ignoring collision with self while re-evaluating history');
            return;
        }
        // Find the step with matching collision point
        const stepIndex = this.#steps.findLastIndex((step)=>(0, _util.fuzzyEquals)(collision.point, step.point));
        if (stepIndex < 0) // This error will occur if the steps are out of sync with the path segments for some reason
        throw new Error(`Could not find matching step for beam collision between ${this.toString()} and ${beam.toString()}`);
        const step = this.#steps[stepIndex];
        if (step.state.get((0, _step.StepState).MergeInto)?.beam.equals(beam)) {
            console.debug(this.toString(), 'ignoring collision with merged beam', beam.toString());
            return;
        }
        // Note: we only want to evaluate this at the collision point, otherwise terminus connection is irrelevant.
        if (step.state.get((0, _step.StepState).TerminusConnection)?.terminus.equals(beam.parent)) {
            console.debug(this.toString(), 'ignoring collision with connected beam in parent terminus', beam.toString());
            return;
        }
        // Check for a reflection on either this beam or the one being collided with at the collision point.
        const reflector = step.state.get((0, _step.StepState).Reflector) ?? currentStep.state.get((0, _step.StepState).Reflector);
        if (reflector) {
            // Since every step goes to the center of the tile, we need to go one pixel back in the direction we came from
            // in order to properly test which side of the reflector the beams are on.
            const stepPoint = (0, _util.getPointFrom)(step.point, 1, (0, _util.getOppositeDirection)(step.direction));
            const nextStepPoint = (0, _util.getPointFrom)(currentStep.point, 1, (0, _util.getOppositeDirection)(currentStep.direction));
            if (!reflector.item.isSameSide(stepPoint, nextStepPoint)) {
                console.debug(this.toString(), 'ignoring collision with beam on opposite side of reflector', beam.toString());
                return;
            }
        }
        // Check for a portal on either beam
        const portal = currentStep.state.get((0, _step.StepState).Portal) ?? step.state.get((0, _step.StepState).Portal);
        if (portal) {
            console.debug(this.toString(), 'ignoring collision with beam using same portal', beam.toString());
            return;
        }
        const isSameDirection = step.direction === nextStep.direction;
        if (!isSameDirection || isSelf) {
            // Beams are traveling in different directions (collision), or a beam is trying to merge into itself
            console.debug(beam.toString(), 'has collided with', isSelf ? 'self' : this.toString(), collision);
            if (!step.state.get((0, _step.StepState).Collision)?.point.equals(collision.point)) {
                // No need to update if there is already an existing collision at this same point
                if (!isSelf) // Update beam at point of impact
                this.update(stepIndex, {
                    done: true,
                    state: step.state.copy(new (0, _step.StepState).Collision(collision.mirror()))
                });
                else if (!isSameDirection) // For a collision with self, the update at point of impact will occur on the next update loop. This results in
                // a better visualization of the collision which will result in an infinite looping animation.
                this.update(stepIndex, puzzle.getBeamsUpdateDelay());
            }
            return collisionStep.copy({
                done: true,
                // Use same insertion point as the beam we collided with to ensure proper item hierarchy.
                insertAbove: step.insertAbove
            });
        }
        console.debug(this.toString(), 'merging with', beam.toString());
        // Update history to reflect changing color of path
        this.#updateHistory(stepIndex);
        const mergeWith = new (0, _collision.CollisionMergeWith)(beam, step, stepIndex);
        this.addStep(step.copy({
            colors: mergeWith.colors,
            onAdd: ()=>{
                this.#cache.get(Beam.CacheKeys.MergeWith).set(beam.id, mergeWith);
            },
            onRemove: ()=>{
                this.#cache.get(Beam.CacheKeys.MergeWith).unset(beam.id);
            },
            state: step.state.copy(new (0, _step.StepState).MergeWith(mergeWith))
        }));
        console.debug(beam.toString(), 'merging into', this.toString());
        return nextStep.copy({
            done: true,
            // Stop at current step point
            point: currentStep.point,
            state: nextStep.state.copy(new (0, _step.StepState).MergeInto(this))
        });
    }
    onModifierInvoked(event) {
        if (!this.isOn()) {
            if (this.#steps.length) {
                console.debug(this.toString(), 'beam has been toggled off');
                this.remove();
            }
            return;
        }
        if (event) {
            const tiles = event.detail.tiles ?? (event.detail.tile ? [
                event.detail.tile
            ] : []);
            // We want the first step that contains the tile the event occurred on
            const stepIndex = this.#steps.findIndex((step)=>tiles.some((tile)=>tile.equals(step.tile)));
            if (stepIndex >= 0) {
                console.debug(this.toString(), 're-evaluating due to modifier being invoked in matching tile', stepIndex);
                // Re-evaluate beginning at the step before the matched one
                this.done = false;
                this.#stepIndex = Math.max(stepIndex - 1, 0);
                return;
            }
        }
        if (this.isComplete()) {
            const lastStep = this.getStep();
            if (lastStep.state.get((0, _step.StepState).Portal)?.entryPortal) // Check for valid exit portal
            this.done = false;
        }
    }
    remove(stepIndex = 0) {
        this.#updateHistory(stepIndex);
    }
    selected(selected = true) {
        this.path.forEach((path)=>{
            path.selected = selected;
        });
    }
    startDirection() {
        // Take rotation of the parent (terminus) into account
        return (this.getOpening().direction + this.parent.rotation) % 6;
    }
    /**
   * On each step, a beam will move towards the edge of the current tile until it either reaches that point, or it
   * intersects with something else. A beam will be considered 'done' when it either collides with something or it
   * reaches a terminus opening.
   */ step(puzzle) {
        if (!this.isPending()) return;
        console.debug(this.toString(), 'currentStepIndex', this.#stepIndex);
        // First step
        if (this.#steps.length === 0) {
            const tile = this.parent.parent;
            this.addStep(new (0, _step.Step)(0, tile, this.getColor(), this.startDirection(), tile.center));
        }
        const currentStepIndex = this.#stepIndex;
        const currentStep = this.#steps[currentStepIndex];
        // On the first step, we have to take the rotation of the terminus into account
        const direction = currentStepIndex === 0 ? this.startDirection() : currentStep.direction;
        const nextStepPoint = (0, _util.getPointFrom)(currentStep.point, currentStep.tile.parameters.inradius, direction);
        // Use the midpoint between the previous and next step points to calculate which tile we are in.
        // This will ensure we consistently pick the same tile when the next step point is on the edge of two tiles.
        const tile = puzzle.getTile((0, _util.getPointBetween)(currentStep.point, nextStepPoint));
        // The next step would be off the grid
        if (!tile) {
            console.debug(this.toString(), 'stopping due to out of bounds');
            const collision = new (0, _collision.Collision)(0, [
                currentStep.point
            ], this);
            return this.updateStep(currentStepIndex, {
                done: true,
                state: new (0, _step.StepState)(new (0, _step.StepState).Collision(collision))
            });
        }
        const nextStepIndex = currentStepIndex + 1;
        const existingNextStep = this.#steps[nextStepIndex];
        const lastPathIndex = this.path.length - 1;
        const lastSegmentIndex = this.path[lastPathIndex].segments.length - 1;
        let nextStep = new (0, _step.Step)(nextStepIndex, tile, currentStep.color, direction, nextStepPoint, existingNextStep?.pathIndex || lastPathIndex, existingNextStep?.segmentIndex || lastSegmentIndex);
        const items = (0, _util.uniqueBy)('id', tile.items.concat(currentStep.tile.equals(nextStep.tile) ? [] : currentStep.tile.items));
        console.debug(this.toString(), 'collision items:', items);
        // See if there are any collisions along the path we plan to take
        const collisions = this.#getCollisions(items, currentStep, nextStep, puzzle).map((collision, index)=>new (0, _collision.Collision)(index, collision.points, this, collision.item));
        if (collisions.length) console.debug(this.toString(), 'collisions:', collisions);
        let collisionStep;
        for(let collisionIndex = 0; collisionIndex < collisions.length; collisionIndex++){
            const collision = collisions[collisionIndex];
            console.debug(this.toString(), 'resolving collision:', collision);
            // By default, the next step will be treated as a collision with the beam stopping at the first point of
            // intersection with the item.
            collisionStep = nextStep.copy({
                done: true,
                point: collision.point,
                state: nextStep.state.copy(new (0, _step.StepState).Collision(collision))
            });
            // Allow the item to change the resulting step
            collisionStep = collision.item.onCollision({
                beam: this,
                collision,
                collisions,
                collisionStep,
                currentStep,
                nextStep,
                existingNextStep,
                puzzle
            });
            if (collisionStep instanceof (0, _step.Step)) break;
        }
        if (collisionStep) nextStep = collisionStep;
        // See if we need to change history
        if (existingNextStep) {
            // The next step we would take is the same as the step that already exists in history
            if (nextStep.equals(existingNextStep)) {
                this.#stepIndex++;
                const lastStepIndex = this.getLastStepIndex();
                console.debug(this.toString(), 'new step is same as existing. new step index:', this.#stepIndex, 'last step index:', lastStepIndex);
                if (this.#stepIndex === lastStepIndex) // To ensure we mark as done
                this.#onUpdate(this.#stepIndex);
                return existingNextStep;
            } else {
                console.debug(this.toString(), `is revising history at step index: ${nextStepIndex}`, 'existing step:', existingNextStep, 'new step:', nextStep);
                this.#updateHistory(nextStepIndex);
            }
        }
        if (currentStepIndex === this.#stepIndex && currentStep.point.equals(nextStep.point)) {
            // Note: ensuring history has not been modified when evaluating next step vs current
            console.debug(this.toString(), 'next step point is same as current step point, stopping.', nextStep);
            return this.updateStep(currentStepIndex, nextStep.copy({
                done: true
            }));
        }
        return this.addStep(nextStep);
    }
    toggle() {
        this.parent.toggleOpening(this.getOpening());
        this.onModifierInvoked();
    }
    toString() {
        return `[${this.type}:${this.id}:${(0, _chromaJsDefault.default)(this.getColor()).name()}]`;
    }
    update(stepIndex, settings = {}, timeout) {
        if (typeof settings === 'number') {
            timeout = settings;
            settings = {};
        }
        const update = this.#update.bind(this, stepIndex, settings, timeout);
        return timeout === undefined ? update() : setTimeout(update, timeout);
    }
    updateState(updater, eventDetail = {}) {
        return this.parent.updateState((state)=>updater(state.openings.find((opening)=>opening.direction === this.#direction)), eventDetail);
    }
    updateStep(stepIndex, settings) {
        const step = this.getStep(stepIndex);
        if (step) {
            // Update is essentially: remove, update, add
            step.onRemove(step);
            const updatedStep = this.#getUpdatedStep(step, settings);
            this.#steps[stepIndex] = updatedStep;
            updatedStep.onAdd(updatedStep);
            console.debug(this.toString(), 'updated step at index', stepIndex, 'from', step, 'to', updatedStep);
            this.#onUpdate(stepIndex);
            return updatedStep;
        }
    }
    #getCollisions(items, currentStep, nextStep, puzzle) {
        const segments = [
            currentStep.point,
            nextStep.point
        ];
        const path = new (0, _paper.Path)({
            segments
        });
        const firstPoint = segments[0];
        return items.map((item)=>{
            const points = [];
            const intersections = path.getIntersections(item.getCompoundPath(), // Ignore first point from self which will always collide
            (curveLocation)=>!(item === this && curveLocation.point.equals(firstPoint)));
            points.push(...new Set(intersections.map((intersection)=>intersection.point)));
            // Handle the edge case of colliding with a beam with a single, isolated path item.
            // This will happen in the case of a portal exit collision, for example.
            if (!points.length && item.type === (0, _item.Item).Types.beam && item !== this) points.push(...item.getSteps().map((step)=>step.point).filter((point)=>segments.some((segment)=>(0, _util.fuzzyEquals)(point, segment))));
            // Sort collision points by distance from origin point (closest collision points first)
            points.sort((0, _util.getDistance)(firstPoint));
            return {
                points,
                item
            };
        }).filter((result)=>result.points.length).sort((a, b)=>{
            // Sort items returned by proximity to starting point
            const distance = (0, _util.getDistance)(firstPoint)(a.points[0], b.points[0]);
            if (distance === 0) // If two items are an equal distance away, sort by sort order as defined on item
            return a.item.sortOrder - b.item.sortOrder;
            return distance;
        });
    }
    #getItemIndex(step) {
        return step.insertAbove ? step.insertAbove.getIndex() + 1 : 0;
    }
    #getUpdatedStep(step, settings) {
        if (typeof settings === 'function') settings = settings(step);
        return settings instanceof (0, _step.Step) ? settings : step.copy(settings);
    }
    #update(stepIndex, settings) {
        if (stepIndex < this.getLastStepIndex()) {
            const step = this.#updateHistory(stepIndex);
            this.addStep(this.#getUpdatedStep(step, settings));
        } else this.updateStep(stepIndex, settings);
    }
    #onUpdate(stepIndex) {
        const lastStepIndex = this.getLastStepIndex();
        stepIndex ??= lastStepIndex;
        const step = this.getStep(stepIndex);
        if (stepIndex === lastStepIndex) // Update beam status if last step was updated
        this.done = step?.done ?? false;
        (0, _util.emitEvent)(Beam.Events.Update, {
            beam: this,
            state: step?.state,
            step,
            stepIndex
        });
    }
    #updateHistory(stepIndex) {
        const lastStepIndex = this.getLastStepIndex();
        const step = this.#steps[stepIndex];
        console.debug(this.toString(), 'updateHistory', 'stepIndex:', stepIndex, 'lastStepIndex:', lastStepIndex, 'step:', step);
        if (step) {
            const currentPath = this.path[step.pathIndex];
            // Remove any now invalid path segments
            currentPath.removeSegments(step.segmentIndex);
            // If the current path is empty, remove it along with everything after it.
            const spliceIndex = step.pathIndex + (currentPath.segments.length === 0 ? 0 : 1);
            // Remove any now invalid path items
            this.path.splice(spliceIndex).forEach((item)=>item.remove());
            const deletedSteps = this.#steps.splice(stepIndex);
            console.debug(this.toString(), 'removed steps: ', deletedSteps);
            const tiles = [
                ...new Set(deletedSteps.map((step)=>step.tile))
            ];
            // Remove references to the beam in any tiles it is no longer in
            tiles.filter((tile)=>this.getSteps(tile).length === 0).forEach((tile)=>tile.removeItem(this));
            deletedSteps.forEach((step)=>step.onRemove(step));
            this.done = false;
            this.#stepIndex = stepIndex - 1;
            this.#onUpdate(this.#stepIndex);
        }
        return step;
    }
    static CacheKeys = Object.freeze({
        MergeWith: 'mergeWith'
    });
    static Events = Object.freeze({
        Collision: 'beam-collision',
        Connection: 'beam-connection',
        Merge: 'beam-merge',
        Update: 'beam-update'
    });
}

},{"chroma-js":"bnCL0","paper":"agkns","../item":"klNFr","../util":"92uDI","../step":"71fBe","../collision":"bFbGC","../cache":"dDiTO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bFbGC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Collision", ()=>Collision);
parcelHelpers.export(exports, "CollisionMergeWith", ()=>CollisionMergeWith);
var _step = require("./step");
class Collision {
    constructor(index, points, beam, item){
        const items = [
            beam
        ];
        if (item !== undefined) items.push(item);
        this.beam = beam;
        this.index = index;
        // The item that was collided with
        this.item = item;
        this.itemIds = items.map((item)=>item.id);
        this.items = items;
        // The first collision point
        this.point = points[0];
        this.points = points;
        // Check if the collision is with self
        this.withSelf = beam.equals(item);
    }
    copy(settings) {
        return new Collision(settings.index ?? this.index, settings.points ?? this.points, settings.beam ?? this.beam, settings.item ?? this.item);
    }
    equals(other) {
        return other && other.point.equals(this.point) && other.items.every((item)=>this.has(item));
    }
    has(item) {
        return this.itemIds.includes(item.id);
    }
    mirror() {
        return this.copy({
            beam: this.item,
            item: this.beam
        });
    }
}
class CollisionMergeWith {
    constructor(beam, step, stepIndex){
        this.beams = [
            beam
        ].concat(step.state.get((0, _step.StepState).MergeWith)?.beams || []);
        this.colors = step.colors.concat(beam.getColors());
        this.stepIndex = stepIndex;
    }
}

},{"./step":"71fBe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTFZx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Reflector", ()=>Reflector);
var _paper = require("paper");
var _item = require("../item");
var _rotate = require("../modifiers/rotate");
var _util = require("../util");
var _move = require("../modifiers/move");
var _step = require("../step");
var _schema = require("../schema");
class Reflector extends (0, _move.movable)((0, _rotate.rotatable)((0, _item.Item))) {
    #item;
    constructor(tile, state){
        super(tile, state, {
            rotationDegrees: 30
        });
        // NOTE: color is not currently used for anything
        this.color = state.color || 'black';
        this.#item = Reflector.item(tile, this.color);
        this.group.addChild(this.#item);
    }
    midLine() {
        // Two points which form a line through the mid-point of the reflector
        return [
            (0, _util.getPointBetween)(this.#item.segments[3].point, this.#item.segments[0].point),
            (0, _util.getPointBetween)(this.#item.segments[1].point, this.#item.segments[2].point)
        ];
    }
    getSide(point) {
        // Returns the side of the reflector the point is on (0, 1, or -1)
        return (0, _util.getPosition)(this.midLine(), point);
    }
    isSameSide(pointA, pointB) {
        return this.getSide(pointA) === this.getSide(pointB);
    }
    onCollision({ beam, collision, collisionStep, currentStep, nextStep }) {
        const directionFrom = (0, _util.getOppositeDirection)(currentStep.direction);
        const directionTo = (0, _util.getReflectedDirection)(directionFrom, this.rotation);
        if (directionTo === currentStep.direction) {
            console.debug(beam.toString(), 'stopping due to collision with non-reflective side of reflector');
            return collisionStep;
        }
        if (directionTo === directionFrom) {
            console.debug(beam.toString(), 'stopping due to reflection back at self');
            // Instead of using collisionStep, just add a collision to nextStep. This will ensure any beams that hit the
            // same side of the reflector will collide with this beam.
            return nextStep.copy({
                done: true,
                state: nextStep.state.copy(new (0, _step.StepState).Collision(collision.copy({
                    points: [
                        nextStep.point
                    ]
                })))
            });
        }
        // The beam will collide with a reflector twice, on entry and exit, so ignore the first one, but track in state
        if (!currentStep.state.has((0, _step.StepState).Reflector)) return nextStep.copy({
            state: nextStep.state.copy(new (0, _step.StepState).Reflector(this))
        });
        const point = (0, _util.getPointFrom)(currentStep.point, nextStep.tile.parameters.inradius, directionTo);
        return nextStep.copy({
            direction: directionTo,
            point
        });
    }
    static item(tile, color) {
        const width = tile.parameters.circumradius / 12;
        const length = tile.parameters.circumradius - width * 2;
        const topLeft = tile.center.subtract(new (0, _paper.Point)(width / 2, length / 2));
        const size = new (0, _paper.Size)(width, length);
        return new (0, _paper.Path).Rectangle({
            data: {
                size
            },
            fillColor: color,
            point: topLeft,
            size
        });
    }
    static Schema = Object.freeze((0, _util.merge)([
        (0, _item.Item).schema((0, _item.Item).Types.reflector),
        (0, _move.movable).Schema,
        (0, _rotate.rotatable).Schema,
        {
            properties: {
                direction: (0, _schema.Schema).direction
            }
        }
    ]));
}

},{"paper":"agkns","../item":"klNFr","../modifiers/rotate":"dh5U5","../util":"92uDI","../modifiers/move":"iw6ob","../step":"71fBe","../schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b5rvi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Wall", ()=>Wall);
var _item = require("../item");
var _paper = require("paper");
var _util = require("../util");
var _rotate = require("../modifiers/rotate");
var _move = require("../modifiers/move");
var _schema = require("../schema");
class Wall extends (0, _move.movable)((0, _rotate.rotatable)((0, _item.Item))) {
    sortOrder = 1;
    constructor(tile, state){
        // Exclude from modification by default
        state.immutable ??= true;
        super(tile, state, {
            rotationDegrees: 60
        });
        const walls = Wall.item(tile, state);
        this.group.addChildren(walls);
    }
    static item(tile, configuration) {
        const radius = tile.parameters.circumradius;
        const width = radius / 12;
        const fillColor = tile.styles.default.strokeColor;
        return configuration.directions.map((direction)=>{
            const firstSegment = tile.path.segments[direction].point;
            const nextDirection = (0, _util.addDirection)(direction, 1);
            const lastSegment = tile.path.segments[nextDirection].point;
            return new (0, _paper.Path)({
                closed: true,
                fillColor,
                segments: [
                    firstSegment,
                    tile.path.getLocationAt((direction === 0 ? tile.path.length : tile.path.getOffsetOf(firstSegment)) - width),
                    tile.path.getLocationAt((nextDirection === 0 ? 0 : tile.path.getOffsetOf(lastSegment)) + width),
                    lastSegment
                ]
            });
        });
    }
    static Schema = Object.freeze((0, _util.merge)([
        (0, _item.Item).schema((0, _item.Item).Types.wall),
        {
            properties: {
                immutable: {
                    default: true,
                    type: 'boolean'
                }
            }
        },
        (0, _move.movable).Schema,
        (0, _rotate.rotatable).Schema,
        {
            properties: {
                directions: {
                    items: (0, _schema.Schema).direction,
                    minItems: 1,
                    maxItems: 6,
                    type: 'array',
                    uniqueItems: true
                }
            },
            required: [
                'directions'
            ]
        }
    ]));
}

},{"../item":"klNFr","paper":"agkns","../util":"92uDI","../modifiers/rotate":"dh5U5","../modifiers/move":"iw6ob","../schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dZOup":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Modifiers", ()=>Modifiers);
var _immutable = require("./modifiers/immutable");
var _lock = require("./modifiers/lock");
var _move = require("./modifiers/move");
var _rotate = require("./modifiers/rotate");
var _toggle = require("./modifiers/toggle");
var _modifier = require("./modifier");
var _swap = require("./modifiers/swap");
var _schema = require("./schema");
class Modifiers {
    static Schema = Object.freeze({
        $id: (0, _schema.Schema).$id('modifiers'),
        items: {
            anyOf: [
                (0, _immutable.Immutable).Schema,
                (0, _lock.Lock).Schema,
                (0, _move.Move).Schema,
                (0, _rotate.Rotate).Schema,
                (0, _swap.Swap).Schema,
                (0, _toggle.Toggle).Schema
            ],
            headerTemplate: 'modifier {{i1}}'
        },
        minItems: 0,
        maxItems: 6,
        type: 'array'
    });
    static factory(parent, state, index) {
        let modifier;
        switch(state.type){
            case (0, _modifier.Modifier).Types.immutable:
                modifier = new (0, _immutable.Immutable)(...arguments);
                break;
            case (0, _modifier.Modifier).Types.lock:
                modifier = new (0, _lock.Lock)(...arguments);
                break;
            case (0, _modifier.Modifier).Types.move:
                modifier = new (0, _move.Move)(...arguments);
                break;
            case (0, _modifier.Modifier).Types.rotate:
                modifier = new (0, _rotate.Rotate)(...arguments);
                break;
            case (0, _modifier.Modifier).Types.swap:
                modifier = new (0, _swap.Swap)(...arguments);
                break;
            case (0, _modifier.Modifier).Types.toggle:
                modifier = new (0, _toggle.Toggle)(...arguments);
                break;
            default:
                console.error(`Ignoring modifier with unknown type: ${state.type}`, state);
                break;
        }
        return modifier;
    }
}

},{"./modifiers/immutable":"602RD","./modifiers/lock":"9D6ad","./modifiers/move":"iw6ob","./modifiers/rotate":"dh5U5","./modifiers/toggle":"8EkH3","./modifier":"bQhih","./modifiers/swap":"aNUJ3","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"602RD":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Immutable", ()=>Immutable);
var _modifier = require("../modifier");
class Immutable extends (0, _modifier.Modifier) {
    immutable = true;
    name = 'block';
    title = 'Immutable';
    static Schema = Object.freeze((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.immutable));
}

},{"../modifier":"bQhih","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9D6ad":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Lock", ()=>Lock);
var _modifier = require("../modifier");
class Lock extends (0, _modifier.Modifier) {
    immutable = true;
    name = 'lock';
    title = 'Locked';
    static Schema = Object.freeze((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.lock));
}

},{"../modifier":"bQhih","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNUJ3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Swap", ()=>Swap);
var _move = require("./move");
var _modifier = require("../modifier");
var _icons = require("../icons");
class Swap extends (0, _move.Move) {
    name = (0, _icons.Icons).Swap.name;
    title = 'Swap';
    moveItems(tile) {
        const toItems = tile.items.filter((0, _move.Move).movable);
        const fromItems = this.tile.items.filter((0, _move.Move).movable);
        fromItems.forEach((item)=>item.move(tile));
        toItems.forEach((item)=>item.move(this.tile));
        return {
            moved: [
                (0, _move.Move).data(this.tile, tile, fromItems),
                (0, _move.Move).data(tile, this.tile, toItems)
            ],
            selectedTile: tile,
            tile: this.tile,
            tiles: [
                this.tile,
                tile
            ]
        };
    }
    tileFilter(tile) {
        // Never mask current tile
        return !tile.equals(this.tile) && // Mask immutable tiles
        (tile.modifiers.some((0, _modifier.Modifier).immutable) || // Mask tiles that don't contain any movable items
        !tile.items.some((0, _move.Move).movable));
    }
    static Schema = Object.freeze((0, _modifier.Modifier).schema((0, _modifier.Modifier).Types.swap));
}

},{"./move":"iw6ob","../modifier":"bQhih","../icons":"lDr3h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dOejK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mask", ()=>Mask);
var _item = require("../item");
var _paper = require("paper");
class Mask extends (0, _item.Item) {
    constructor(tile, style){
        super(null, style, {
            locked: false,
            type: (0, _item.Item).Types.mask
        });
        const data = {
            type: this.type
        };
        const item = new (0, _paper.Path).RegularPolygon({
            center: tile.center,
            closed: true,
            data,
            opacity: 0.25,
            radius: tile.parameters.circumradius + 1,
            sides: 6,
            style: Object.assign({
                fillColor: 'black'
            }, style)
        });
        this.center = tile.center;
        this.group.addChild(item);
    }
}

},{"../item":"klNFr","paper":"agkns","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUIiT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Collision", ()=>Collision);
var _item = require("../item");
var _paper = require("paper");
class Collision extends (0, _item.Item) {
    constructor(state){
        super(null, state, {
            type: (0, _item.Item).Types.collision
        });
        const { center, color } = state;
        this.center = center;
        this.color = color;
        const item = new (0, _paper.Path).Circle({
            center,
            closed: true,
            radius: 4,
            style: {
                fillColor: 'white',
                strokeColor: color,
                strokeWidth: 2
            }
        });
        this.group.addChild(item);
    }
}

},{"../item":"klNFr","paper":"agkns","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foTr2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Solution", ()=>Solution);
var _util = require("./util");
var _terminus = require("./items/terminus");
var _eventListeners = require("./eventListeners");
var _puzzle = require("./puzzle");
var _schema = require("./schema");
class Solution {
    #conditions = [];
    constructor(state = []){
        state.forEach((condition)=>this.#conditionFactory(condition));
    }
    teardown() {
        this.#conditions.forEach((condition)=>condition.teardown());
        Solution.element.replaceChildren();
    }
    isSolved() {
        return this.#conditions.length > 0 && this.#conditions.every((condition)=>condition.isMet());
    }
    #conditionFactory(condition) {
        switch(condition.type){
            case SolutionCondition.Types.connections:
                this.#conditions.push(new Connections(condition));
                break;
            case SolutionCondition.Types.moves:
                this.#conditions.push(new Moves(condition));
                break;
            default:
                console.warn('Ignoring condition with unknown type:', condition.type);
                break;
        }
    }
    static schema(type) {
        return (0, _schema.Schema).typed('solutions', type);
    }
    static element = document.getElementById('puzzle-solution');
}
class SolutionCondition {
    constructor(state, elements){
        this.state = state;
        const li = document.createElement('li');
        li.append(...elements);
        Solution.element.append(li);
    }
    isMet() {}
    teardown() {}
    update() {}
    static Types = Object.freeze(Object.fromEntries([
        'connections',
        'moves'
    ].map((type)=>[
            type,
            (0, _util.capitalize)(type)
        ])));
}
class Connections extends SolutionCondition {
    #completed;
    #eventListeners = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #connections = [];
    constructor(state){
        const completed = document.createElement('span');
        completed.textContent = '0';
        const required = document.createElement('span');
        required.textContent = state.amount.toString();
        const elements = [
            completed,
            (0, _util.getTextElement)('/'),
            required,
            (0, _util.getIconElement)('link', 'Connections')
        ];
        super(state, elements);
        this.#completed = completed;
        this.#eventListeners.add([
            {
                type: (0, _terminus.Terminus).Events.Connection,
                handler: this.update
            },
            {
                type: (0, _terminus.Terminus).Events.Disconnection,
                handler: this.update
            }
        ]);
    }
    isMet() {
        return this.#connections.length === this.state.amount;
    }
    teardown() {
        this.#eventListeners.remove();
        super.teardown();
    }
    update(event) {
        console.debug('Connections.update', event);
        const terminus = event.detail.terminus;
        const opening = event.detail.opening;
        const connectionId = `${terminus.id}:${opening.direction}`;
        const connectionIndex = this.#connections.findIndex((connection)=>connection === connectionId);
        if (opening.connected && connectionIndex < 0) this.#connections.push(connectionId);
        else if (!opening.connected && connectionIndex >= 0) this.#connections.splice(connectionIndex, 1);
        this.#completed.textContent = this.#connections.length.toString();
    }
    static Schema = Object.freeze((0, _util.merge)(Solution.schema(SolutionCondition.Types.connections), {
        properties: {
            amount: {
                minimum: 0,
                type: 'number'
            }
        },
        required: [
            'amount'
        ]
    }));
}
class Moves extends SolutionCondition {
    #completed;
    #eventListeners = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #moves = 0;
    constructor(state){
        state.operator ??= Moves.Operators.equalTo;
        if (!Object.values(Moves.Operators).includes(state.operator)) throw new Error(`Invalid moves operator: ${state.operator}`);
        const completed = document.createElement('span');
        completed.textContent = '0';
        const required = document.createElement('span');
        required.textContent = state.amount.toString();
        const elements = [
            completed,
            (0, _util.getTextElement)(state.operator),
            required,
            (0, _util.getIconElement)('stacks', 'Moves')
        ];
        super(state, elements);
        this.#completed = completed;
        this.#eventListeners.add([
            {
                type: (0, _puzzle.Puzzle).Events.Updated,
                handler: this.update
            }
        ]);
    }
    isMet() {
        // TODO: support 'between' syntax like 2 < 3 < 4 ?
        switch(this.state.operator){
            case Moves.Operators.equalTo:
                return this.#moves === this.state.amount;
            case Moves.Operators.greaterThan:
                return this.#moves > this.state.amount;
            case Moves.Operators.lessThan:
                return this.#moves < this.state.amount;
        }
    }
    teardown() {
        this.#eventListeners.remove();
        super.teardown();
    }
    update(event) {
        console.debug('Moves.update', event);
        this.#moves = event.detail.state.moves().length;
        this.#completed.textContent = this.#moves.toString();
    }
    static Operators = Object.freeze({
        equalTo: '=',
        greaterThan: '>',
        lessThan: '<'
    });
    static Schema = Object.freeze((0, _util.merge)(Solution.schema(SolutionCondition.Types.moves), {
        properties: {
            amount: {
                minimum: 0,
                type: 'number'
            },
            operator: {
                enum: Object.values(Moves.Operators),
                type: 'string'
            }
        },
        required: [
            'amount'
        ]
    }));
}
Solution.Schema = Object.freeze({
    $id: (0, _schema.Schema).$id('solution'),
    items: {
        anyOf: [
            Connections.Schema,
            Moves.Schema
        ],
        headerTemplate: 'solution {{i1}}'
    },
    type: 'array'
});

},{"./util":"92uDI","./items/terminus":"7I7P6","./eventListeners":"8T0Qv","./puzzle":"jIcx0","./schema":"kHE32","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1EDt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// TODO: consider adding AJV validations that ensure unique keys are unique
// See: https://github.com/ajv-validator/ajv-keywords/blob/master/README.md#uniqueitemproperties
// TODO: add ability to move the center marker. wherever it is placed will become the new center of the canvas
// TODO: implement author / description in the UI
parcelHelpers.export(exports, "Editor", ()=>Editor);
var _paper = require("paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _eventListeners = require("./eventListeners");
var _interact = require("./interact");
var _view = require("./view");
var _puzzle = require("./puzzle");
var _state = require("./state");
var _util = require("./util");
var _core = require("@json-editor/json-editor/src/core");
var _tile = require("./items/tile");
var _gutter = require("./gutter");
var _tippyJs = require("tippy.js");
var _tippyJsDefault = parcelHelpers.interopDefault(_tippyJs);
var _tippyCss = require("tippy.js/dist/tippy.css");
const elements = Object.freeze({
    cancel: document.getElementById('editor-cancel'),
    configuration: document.getElementById('editor-configuration'),
    copy: document.getElementById('editor-copy'),
    dock: document.getElementById('editor-dock'),
    editor: document.getElementById('editor'),
    lock: document.getElementById('editor-lock'),
    paste: document.getElementById('editor-paste'),
    play: document.getElementById('editor-play'),
    puzzle: document.getElementById('puzzle'),
    reset: document.getElementById('editor-reset'),
    share: document.getElementById('editor-share'),
    update: document.getElementById('editor-update'),
    wrapper: document.getElementById('editor-wrapper')
});
const localStorage = window.localStorage;
const tippy = (0, _tippyJsDefault.default)(elements.share, {
    content: 'Share URL copied to clipboard!',
    theme: 'custom',
    trigger: 'manual'
});
class Editor {
    group = new (0, _paper.Group)({
        locked: true
    });
    id;
    #center = new (0, _paper.Group)({
        locked: true
    });
    #copy;
    #editor;
    #eventListener = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #gutter;
    #hover;
    #layer;
    #puzzle;
    constructor(puzzle){
        document.body.classList.add(Editor.ClassNames.Edit);
        this.#gutter = new (0, _gutter.Gutter)(elements.puzzle, elements.wrapper);
        this.#layer = new (0, _paper.Layer)();
        this.#puzzle = puzzle;
        // Place this layer under all the other ones
        (0, _paperDefault.default).project.insertLayer(0, this.#layer);
    }
    getState() {
        return JSON.parse(elements.configuration.value);
    }
    getShareUrl() {
        const playUrl = new URL((0, _util.url));
        playUrl.searchParams.delete((0, _state.State).ParamKeys.Edit);
        playUrl.hash = [
            '',
            (0, _state.State).getId(),
            this.#puzzle.state.clone().encode()
        ].join('/');
        return playUrl.toString();
    }
    isLocked() {
        return localStorage.getItem(Editor.#key(Editor.CacheKeys.Locked)) === 'true';
    }
    onResize() {
        if (window.innerWidth < Editor.minWidth && !this.#gutter.horizontal) {
            // Set orientation to horizontal on small screens
            this.#gutter.toggleOrientation();
            this.#puzzle.resize(false);
        }
    }
    setup() {
        if (this.#editor) return;
        const state = this.#puzzle.state;
        this.id = state.getId();
        this.#eventListener.add([
            {
                type: 'click',
                element: elements.cancel,
                handler: this.#onConfigurationCancel
            },
            {
                type: 'click',
                element: elements.copy,
                handler: this.#onCopy
            },
            {
                type: 'click',
                element: elements.dock,
                handler: this.#onDockUpdate
            },
            {
                type: 'click',
                element: elements.lock,
                handler: this.#toggleLock
            },
            {
                type: 'click',
                element: elements.paste,
                handler: this.#onPaste
            },
            {
                type: 'click',
                element: elements.reset,
                handler: this.#onReset
            },
            {
                type: 'click',
                element: elements.share,
                handler: this.#onShare
            },
            {
                type: 'click',
                element: elements.update,
                handler: this.#onConfigurationUpdate
            },
            {
                type: (0, _gutter.Gutter).Events.Moved,
                handler: this.#onGutterMoved
            },
            {
                type: 'pointermove',
                element: this.#puzzle.element,
                handler: this.#onPointerMove
            },
            {
                type: (0, _puzzle.Puzzle).Events.Updated,
                handler: this.#onPuzzleUpdate
            },
            {
                type: 'tap',
                element: this.#puzzle.element,
                handler: this.#onTap
            },
            {
                type: (0, _tile.Tile).Events.Deselected,
                handler: this.#setup
            },
            {
                type: (0, _tile.Tile).Events.Selected,
                handler: this.#setup
            },
            {
                type: (0, _view.View).Events.Center,
                handler: this.#onCenter
            }
        ]);
        elements.configuration.value = state.getCurrentJSON();
        this.group.addChild(this.#center);
        this.#layer.addChild(this.group);
        this.#updateLock();
        this.#updateCenter();
        this.#setup();
    }
    #onConfigurationCancel() {
        const tile = this.#puzzle.selectedTile;
        this.#editor.setValue(tile ? tile.getState() : this.#puzzle.state.getCurrent());
    }
    #onConfigurationUpdate() {
        // Ensure the configuration is in sync with the editor value
        this.#onEditorUpdate();
        const state = this.getState();
        const diff = this.#puzzle.state.getDiff(state);
        console.debug('onConfigurationUpdate', diff);
        if (diff === undefined) // No changes
        return;
        this.#puzzle.state.addMove();
        // Need to force a reload to make sure the UI is in sync with the state
        this.#puzzle.reload(state, this.#onError.bind(this));
    }
    #onCenter() {
        this.#updateCenter();
    }
    #onCopy() {
        if (elements.copy.classList.contains('disabled')) return;
        this.#puzzle.layout.getTile(this.#copy)?.setStyle('default');
        this.#copy = this.#puzzle.selectedTile.coordinates.offset;
        this.#puzzle.layout.getTile(this.#copy).setStyle('copy');
    }
    #onDockUpdate() {
        const icon = elements.dock.firstChild;
        const isDockBottom = this.#gutter.toggleOrientation();
        if (isDockBottom) {
            icon.title = 'Dock to right';
            icon.textContent = 'dock_to_right';
        } else {
            icon.title = 'Dock to bottom';
            icon.textContent = 'dock_to_bottom';
        }
        this.#onGutterMoved();
    }
    #onEditorUpdate(value = this.#editor?.getValue()) {
        if (this.#puzzle.error) // No updates until error is fixed
        return;
        const current = this.#puzzle.state.getCurrent();
        const offset = this.#puzzle.selectedTile?.coordinates.offset;
        let state;
        if (offset) {
            // Update a specific tile
            state = current;
            state.layout.tiles[offset.r][offset.c] = value;
        } else {
            // Update the entire state
            state = value;
            // Tiles are not editable globally
            state.layout.tiles = current.layout.tiles;
        }
        console.debug('current', current, 'new', value, 'updated', state);
        this.#updateConfiguration(state);
    }
    #onError(e) {
        this.#puzzle.onError(e, `Error: "${e.message}". Undo and try again.`);
    }
    #onGutterMoved() {
        this.#puzzle.resize();
    }
    #onPaste() {
        if (elements.paste.classList.contains('disabled')) return;
        const value = JSON.parse(JSON.stringify(this.#puzzle.layout.getTile(this.#copy).getState(), // Remove 'id' keys
        (k, v)=>k === 'id' ? undefined : v));
        this.#onEditorUpdate(value);
        this.#onConfigurationUpdate();
    }
    #onPointerMove(event) {
        if (event.pointerType !== 'mouse') // Only display the hover indicator when using a mouse
        return;
        const layout = this.#puzzle.layout;
        const offset = layout.getOffset(this.#puzzle.getProjectPoint((0, _interact.Interact).point(event)));
        const center = layout.getPoint(offset);
        if (!this.#hover) {
            this.#hover = new (0, _paper.Path).RegularPolygon({
                center,
                closed: true,
                radius: layout.parameters.circumradius,
                opacity: 0.2,
                sides: 6,
                style: {
                    strokeColor: 'black',
                    strokeWidth: 2
                }
            });
            this.group.addChild(this.#hover);
        } else this.#hover.position = center;
    }
    #onPuzzleUpdate() {
        elements.configuration.value = this.#puzzle.state.getCurrentJSON();
        this.#updatePlayUrl();
    }
    #onReset() {
        if (elements.reset.classList.contains('disabled')) return;
        const value = JSON.parse(JSON.stringify(this.#puzzle.selectedTile.getState(), // Remove matching keys
        (k, v)=>[
                'items',
                'modifiers'
            ].includes(k) ? undefined : v));
        this.#onEditorUpdate(value);
        this.#onConfigurationUpdate();
    }
    async #onShare() {
        await (0, _util.writeToClipboard)(`Try out my custom puzzle: ${this.#puzzle.getTitle()} - ${this.getShareUrl()}`);
        tippy.show();
        setTimeout(()=>tippy.hide(), 1000);
    }
    #onTap(event) {
        if (this.isLocked()) // If tiles are locked, let puzzle handle it
        return;
        const layout = this.#puzzle.layout;
        const offset = layout.getOffset(event.detail.point);
        const tile = layout.getTile(offset);
        console.debug('editor.#onTap', offset, tile);
        if (tile) layout.removeTile(offset);
        else layout.addTile(offset);
        this.#puzzle.state.addMove();
        this.#puzzle.updateState();
        // TODO: adding/removing tiles would ideally not require a reload. but getting rid of it would require fixing
        //  some bugs related to the beam
        this.#puzzle.reload();
    }
    #setup(event) {
        const tile = this.#puzzle.selectedTile;
        // Enable/disable the following actions based on whether a tile is selected
        elements.copy.classList.toggle('disabled', !tile);
        elements.reset.classList.toggle('disabled', !tile);
        elements.paste.classList.toggle('disabled', !(tile && this.#copy));
        if (event?.type === (0, _tile.Tile).Events.Selected && event.detail.deselectedTile) // Don't process select events any further if a tile was also de-selected.
        // This prevents a race condition between editor destruction and creation when switching between tiles.
        return;
        if (this.#copy && !tile) {
            // Remove the copied tile if no tile is selected
            this.#puzzle.layout.getTile(this.#copy).setStyle('default');
            this.#copy = undefined;
        }
        if (this.#copy && !this.#copy.equals(tile?.coordinates.offset)) // If the copied tile is not selected, show it as copied
        this.#puzzle.layout.getTile(this.#copy).setStyle('copy');
        if (this.#editor) this.#editor.destroy();
        const options = {
            disable_array_delete_all_rows: true,
            disable_array_delete_last_row: true,
            disable_collapse: true,
            disable_edit_json: true,
            disable_properties: true,
            enforce_const: true,
            form_name_root: 'puzzle',
            // There is no support for material icons, so we have to hack it into another icon lib
            iconlib: 'fontawesome3',
            keep_oneof_values: false,
            // Enabling this causes items to not match in anyOf :(
            // no_additional_properties: true,
            prompt_before_delete: false,
            remove_button_labels: true,
            schema: tile ? (0, _tile.Tile).Schema : (0, _puzzle.Puzzle).Schema,
            show_opt_in: true,
            startval: tile ? tile.getState() : this.#puzzle.state.getCurrent(),
            theme: 'barebones'
        };
        console.debug('Editor options', JSON.stringify(options, null, 2));
        this.#editor = new (0, _core.JSONEditor)(elements.editor, options);
        this.#editor.on('change', this.#onEditorUpdate.bind(this));
    }
    #toggleLock() {
        localStorage.setItem(Editor.#key(Editor.CacheKeys.Locked), (!this.isLocked()).toString());
        this.#updateLock();
    }
    #updateCenter() {
        if (!this.#puzzle.layout) return;
        this.#center.removeChildren();
        this.#center.addChildren(Editor.mark(this.#puzzle.layout.getCenter(), this.#puzzle.layout.parameters.circumradius / 4));
    }
    #updateConfiguration(state) {
        elements.configuration.value = JSON.stringify(state, null, 2);
        this.#updatePlayUrl();
    }
    #updateLock() {
        const locked = this.isLocked();
        const icon = elements.lock.firstChild;
        icon.textContent = locked ? 'lock' : 'lock_open';
        icon.title = (locked ? 'Unlock' : 'Lock') + ' tiles';
        if (!locked) // De-select any selected tile
        this.#puzzle.updateSelectedTile();
    }
    #updatePlayUrl() {
        elements.play.firstElementChild.setAttribute('href', this.getShareUrl());
    }
    static mark(center, width) {
        const offset = new (0, _paper.Point)(width, width).divide(2);
        const square = new (0, _paper.Path).Rectangle(center.subtract(offset), width);
        const settings = {
            opacity: 0.5,
            style: {
                strokeCap: 'round',
                strokeColor: 'black',
                strokeJoin: 'round',
                strokeWidth: 2
            }
        };
        return [
            new (0, _paper.Path)(Object.assign({
                segments: [
                    square.segments[0],
                    square.segments[2]
                ]
            }, settings)),
            new (0, _paper.Path)(Object.assign({
                segments: [
                    square.segments[1],
                    square.segments[3]
                ]
            }, settings))
        ];
    }
    static CacheKeys = Object.freeze({
        Locked: 'locked'
    });
    static ClassNames = Object.freeze({
        Edit: 'edit'
    });
    static minWidth = 768;
    static #key = (0, _util.getKeyFactory)((0, _state.State).CacheKeys.Editor, (0, _state.State).getId());
}

},{"paper":"agkns","./eventListeners":"8T0Qv","./interact":"fHNCq","./view":"edYro","./puzzle":"jIcx0","./state":"7XqMQ","./util":"92uDI","@json-editor/json-editor/src/core":"kEG5S","./items/tile":"3fTdS","./gutter":"6AgZ9","tippy.js":"ccpCS","tippy.js/dist/tippy.css":"2hEyg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEG5S":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JSONEditor", ()=>JSONEditor);
var _defaultsJs = require("./defaults.js");
var _validatorJs = require("./validator.js");
var _schemaloaderJs = require("./schemaloader.js");
var _indexJs = require("./editors/index.js");
var _indexJs1 = require("./templates/index.js");
var _indexJs2 = require("./iconlibs/index.js");
var _indexJs3 = require("./themes/index.js");
var _utilitiesJs = require("./utilities.js");
var _editor = require("./editor");
var _theme = require("./theme");
var _iconlib = require("./iconlib");
var _styleCssJs = require("./style.css.js");
var _styleCssJsDefault = parcelHelpers.interopDefault(_styleCssJs);
class JSONEditor {
    constructor(element, options = {}){
        if (!(element instanceof Element)) throw new Error('element should be an instance of Element');
        this.element = element;
        this.options = (0, _utilitiesJs.extend)({}, JSONEditor.defaults.options, options);
        this.ready = false;
        this.copyClipboard = null;
        this.schema = this.options.schema;
        this.template = this.options.template;
        this.translate = this.options.translate || JSONEditor.defaults.translate;
        this.translateProperty = this.options.translateProperty || JSONEditor.defaults.translateProperty;
        this.uuid = 0;
        this.__data = {};
        const themeName = this.options.theme || JSONEditor.defaults.theme;
        const themeClass = JSONEditor.defaults.themes[themeName];
        /* Load editors and selected theme style rules */ if (!themeClass) throw new Error(`Unknown theme ${themeName}`);
        this.element.setAttribute('data-theme', themeName);
        this.element.classList.add('je-not-loaded');
        this.element.classList.remove('je-ready');
        // eslint-disable-next-line new-cap
        this.theme = new themeClass(this);
        const rules = (0, _utilitiesJs.extend)((0, _styleCssJsDefault.default), this.getEditorsRules());
        /* Call addNewStyleRulesToShadowRoot if shadowRoot is found, otherwise call addNewStyleRules */ const addRules = (themeName, rules, shadowRoot)=>shadowRoot ? this.addNewStyleRulesToShadowRoot(themeName, rules, shadowRoot) : this.addNewStyleRules(themeName, rules);
        if (!this.theme.options.disable_theme_rules) {
            /* Attempt to locate a shadowRoot parent (i.e. in Web Components) */ const shadowRoot = (0, _utilitiesJs.getShadowParent)(this.element);
            addRules('default', rules, shadowRoot);
            if (typeof themeClass.rules !== 'undefined') addRules(themeName, themeClass.rules, shadowRoot);
        }
        /* Init icon class */ const iconClass = JSONEditor.defaults.iconlibs[this.options.iconlib || JSONEditor.defaults.iconlib];
        // eslint-disable-next-line new-cap
        if (iconClass) this.iconlib = new iconClass();
        this.root_container = this.theme.getContainer();
        this.element.appendChild(this.root_container);
        this.promise = this.load();
    }
    async load() {
        const fetchUrl = document.location.origin + document.location.pathname.toString();
        const loader = new (0, _schemaloaderJs.SchemaLoader)(this.options);
        loader.onSchemaLoaded = (payload)=>{
            this.trigger('schemaLoaded', payload);
        };
        loader.onAllSchemasLoaded = ()=>{
            this.trigger('allSchemasLoaded');
        };
        this.expandSchema = (schema)=>loader.expandSchema(schema);
        this.expandRefs = (schema, fileBase)=>loader.expandRefs(schema, fileBase);
        const location = document.location.toString();
        const schema = await loader.load(this.schema, fetchUrl, location);
        const validatorOptions = this.options.custom_validators ? {
            custom_validators: this.options.custom_validators
        } : {};
        this.validator = new (0, _validatorJs.Validator)(this, null, validatorOptions, JSONEditor.defaults);
        const editorClass = this.getEditorClass(schema);
        this.root = this.createEditor(editorClass, {
            jsoneditor: this,
            schema,
            required: true,
            container: this.root_container
        });
        this.root.preBuild();
        this.root.build();
        this.root.postBuild();
        /* Starting data */ if ((0, _utilitiesJs.hasOwnProperty)(this.options, 'startval')) this.root.setValue(this.options.startval);
        this.validation_results = this.validator.validate(this.root.getValue());
        this.root.showValidationErrors(this.validation_results);
        this.ready = true;
        this.element.classList.remove('je-not-loaded');
        this.element.classList.add('je-ready');
        /* Fire ready event asynchronously */ window.requestAnimationFrame(()=>{
            if (!this.ready) return;
            this.validation_results = this.validator.validate(this.root.getValue());
            this.root.showValidationErrors(this.validation_results);
            this.trigger('ready');
            this.trigger('change');
        });
    }
    getValue() {
        if (!this.ready) throw new Error('JSON Editor not ready yet. Make sure the load method is complete');
        return this.root.getValue();
    }
    setValue(value) {
        if (!this.ready) throw new Error('JSON Editor not ready yet. Make sure the load method is complete');
        this.root.setValue(value);
        return this;
    }
    validate(value) {
        if (!this.ready) throw new Error('JSON Editor not ready yet. Make sure the load method is complete');
        /* Custom value */ if (arguments.length === 1) return this.validator.validate(value);
        else return this.validation_results;
    }
    destroy() {
        if (this.destroyed) return;
        if (!this.ready) return;
        this.schema = null;
        this.options = null;
        this.root.destroy();
        this.root = null;
        this.root_container = null;
        this.validator = null;
        this.validation_results = null;
        this.theme = null;
        this.iconlib = null;
        this.template = null;
        this.__data = null;
        this.ready = false;
        this.element.innerHTML = '';
        this.element.removeAttribute('data-theme');
        this.destroyed = true;
    }
    on(event, callback) {
        this.callbacks = this.callbacks || {};
        this.callbacks[event] = this.callbacks[event] || [];
        this.callbacks[event].push(callback);
        return this;
    }
    off(event, callback) {
        /* Specific callback */ if (event && callback) {
            this.callbacks = this.callbacks || {};
            this.callbacks[event] = this.callbacks[event] || [];
            const newcallbacks = [];
            for(let i = 0; i < this.callbacks[event].length; i++){
                if (this.callbacks[event][i] === callback) continue;
                newcallbacks.push(this.callbacks[event][i]);
            }
            this.callbacks[event] = newcallbacks;
        } else if (event) {
            /* All callbacks for a specific event */ this.callbacks = this.callbacks || {};
            this.callbacks[event] = [];
        } else /* All callbacks for all events */ this.callbacks = {};
        return this;
    }
    trigger(event, editor) {
        if (this.callbacks && this.callbacks[event] && this.callbacks[event].length) for(let i = 0; i < this.callbacks[event].length; i++)this.callbacks[event][i].apply(this, [
            editor
        ]);
        return this;
    }
    setOption(option, value) {
        if (option === 'show_errors') {
            this.options.show_errors = value;
            this.onChange();
        } else /* Only the `show_errors` option is supported for now */ throw new Error(`Option ${option} must be set during instantiation and cannot be changed later`);
        return this;
    }
    getEditorsRules() {
        const extendRule = (rules, editorClass)=>editorClass.rules ? (0, _utilitiesJs.extend)(rules, editorClass.rules) : rules;
        return Object.values(JSONEditor.defaults.editors).reduce(extendRule, {});
    }
    getEditorClass(schema) {
        let classname;
        schema = this.expandSchema(schema);
        JSONEditor.defaults.resolvers.find((resolver)=>{
            classname = resolver(schema, this);
            return classname && JSONEditor.defaults.editors[classname];
        });
        if (!classname) throw new Error(`Unknown editor for schema ${JSON.stringify(schema)}`);
        if (!JSONEditor.defaults.editors[classname]) throw new Error(`Unknown editor ${classname}`);
        return JSONEditor.defaults.editors[classname];
    }
    createEditor(editorClass, options, depthCounter = 1) {
        options = (0, _utilitiesJs.extend)({}, editorClass.options || {}, options);
        // eslint-disable-next-line new-cap
        return new editorClass(options, JSONEditor.defaults, depthCounter);
    }
    onChange(eventData) {
        if (!this.ready) return;
        if (eventData) this.trigger(eventData.event, eventData.data);
        if (this.firing_change) return;
        this.firing_change = true;
        window.requestAnimationFrame(()=>{
            this.firing_change = false;
            if (!this.ready) return;
            /* Validate and cache results */ this.validation_results = this.validator.validate(this.root.getValue());
            if (this.options.show_errors !== 'never') this.root.showValidationErrors(this.validation_results);
            else this.root.showValidationErrors([]);
            /* Fire change event */ this.trigger('change');
        });
        return this;
    }
    compileTemplate(template, name = JSONEditor.defaults.template) {
        let engine;
        /* Specifying a preset engine */ if (typeof name === 'string') {
            if (!JSONEditor.defaults.templates[name]) throw new Error(`Unknown template engine ${name}`);
            engine = JSONEditor.defaults.templates[name]();
            if (!engine) throw new Error(`Template engine ${name} missing required library.`);
        } else /* Specifying a custom engine */ engine = name;
        if (!engine) throw new Error('No template engine set');
        if (!engine.compile) throw new Error('Invalid template engine set');
        return engine.compile(template);
    }
    _data(el, key, value) {
        /* Setting data */ if (arguments.length === 3) {
            let uuid;
            if (el.hasAttribute(`data-jsoneditor-${key}`)) uuid = el.getAttribute(`data-jsoneditor-${key}`);
            else {
                uuid = this.uuid++;
                el.setAttribute(`data-jsoneditor-${key}`, uuid);
            }
            this.__data[uuid] = value;
        } else {
            /* Getting data */ /* No data stored */ if (!el.hasAttribute(`data-jsoneditor-${key}`)) return null;
            return this.__data[el.getAttribute(`data-jsoneditor-${key}`)];
        }
    }
    registerEditor(editor) {
        this.editors = this.editors || {};
        this.editors[editor.path] = editor;
        return this;
    }
    unregisterEditor(editor) {
        this.editors = this.editors || {};
        this.editors[editor.path] = null;
        return this;
    }
    getEditor(path) {
        if (!this.editors) return;
        return this.editors[path];
    }
    watch(path, callback) {
        this.watchlist = this.watchlist || {};
        this.watchlist[path] = this.watchlist[path] || [];
        this.watchlist[path].push(callback);
        return this;
    }
    unwatch(path, callback) {
        if (!this.watchlist || !this.watchlist[path]) return this;
        /* If removing all callbacks for a path */ if (!callback) {
            this.watchlist[path] = null;
            return this;
        }
        const newlist = [];
        for(let i = 0; i < this.watchlist[path].length; i++){
            if (this.watchlist[path][i] === callback) continue;
            else newlist.push(this.watchlist[path][i]);
        }
        this.watchlist[path] = newlist.length ? newlist : null;
        return this;
    }
    notifyWatchers(path) {
        if (!this.watchlist || !this.watchlist[path]) return this;
        for(let i = 0; i < this.watchlist[path].length; i++)this.watchlist[path][i]();
    }
    isEnabled() {
        return !this.root || this.root.isEnabled();
    }
    enable() {
        this.root.enable();
    }
    disable() {
        this.root.disable();
    }
    setCopyClipboardContents(value) {
        this.copyClipboard = value;
    }
    getCopyClipboardContents() {
        return this.copyClipboard;
    }
    addNewStyleRules(themeName, rules) {
        let styleTag = document.querySelector(`#theme-${themeName}`);
        if (!styleTag) {
            styleTag = document.createElement('style');
            styleTag.setAttribute('id', `theme-${themeName}`);
            styleTag.appendChild(document.createTextNode(''));
            document.head.appendChild(styleTag);
        }
        const sheet = styleTag.sheet ? styleTag.sheet : styleTag.styleSheet;
        const qualifier = this.element.nodeName.toLowerCase();
        while(sheet.cssRules.length > 0)sheet.deleteRule(0);
        Object.keys(rules).forEach((selector)=>{
            const sel = themeName === 'default' ? selector : `${qualifier}[data-theme="${themeName}"] ${selector}`;
            // all browsers, except IE before version 9
            if (sheet.insertRule) sheet.insertRule(sel + ' {' + decodeURIComponent(rules[selector]) + '}', 0);
            else if (sheet.addRule) sheet.addRule(sel, decodeURIComponent(rules[selector]), 0);
        });
    }
    addNewStyleRulesToShadowRoot(themeName, rules, shadowRoot) {
        const qualifier = this.element.nodeName.toLowerCase();
        let cssText = '';
        Object.keys(rules).forEach((selector)=>{
            const sel = themeName === 'default' ? selector : `${qualifier}[data-theme="${themeName}"] ${selector}`;
            cssText += sel + ' {' + decodeURIComponent(rules[selector]) + '}' + '\n';
        });
        const styleSheet = new CSSStyleSheet();
        styleSheet.replaceSync(cssText);
        shadowRoot.adoptedStyleSheets = [
            ...shadowRoot.adoptedStyleSheets,
            styleSheet
        ];
    }
    showValidationErrors(errorList) {
        const errors = errorList ?? this.validate();
        Object.values(this.editors).forEach((editor)=>{
            if (editor) {
                editor.is_dirty = true;
                editor.showValidationErrors(errors);
            }
        });
    }
}
JSONEditor.defaults = (0, _defaultsJs.defaults);
JSONEditor.AbstractEditor = (0, _editor.AbstractEditor);
JSONEditor.AbstractTheme = (0, _theme.AbstractTheme);
JSONEditor.AbstractIconLib = (0, _iconlib.AbstractIconLib);
Object.assign(JSONEditor.defaults.themes, (0, _indexJs3.themes));
Object.assign(JSONEditor.defaults.editors, (0, _indexJs.editors));
Object.assign(JSONEditor.defaults.templates, (0, _indexJs1.templates));
Object.assign(JSONEditor.defaults.iconlibs, (0, _indexJs2.iconlibs));

},{"./defaults.js":"fzkkK","./validator.js":"jG1hc","./schemaloader.js":"hqTEn","./editors/index.js":"b0ltd","./templates/index.js":"7dYnN","./iconlibs/index.js":"l4JZ8","./themes/index.js":"asH8U","./utilities.js":"fV5Qc","./editor":"24x9b","./theme":"c9MhY","./iconlib":"664HJ","./style.css.js":"bVcOu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fzkkK":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaults", ()=>defaults);
var _resolversJs = require("./resolvers.js");
var _indexJs = require("./editors/index.js");
/* default theme */ const theme = 'html';
/* default template engine */ const template = 'default';
/* Global callback list */ const callbacks = {};
const themes = {};
const templates = {};
const iconlibs = {};
const languages = {};
// eslint-disable-next-line camelcase
const custom_validators = [];
/* Translation strings and default languages */ // eslint-disable-next-line camelcase
const default_language = 'en';
// eslint-disable-next-line camelcase
const language = default_language;
languages.en = {
    /**
   * When a property is not set
   */ error_notset: 'Property must be set',
    /**
  * When a string must not be empty
  */ error_notempty: 'Value required',
    /**
  * When a value is not one of the enumerated values
  */ error_enum: 'Value must be one of the enumerated values',
    /**
  * When a value is not equal to the constant
  */ error_const: 'Value must be the constant value',
    /**
  * When a value doesn't validate any schema of a 'anyOf' combination
  */ error_anyOf: 'Value must validate against at least one of the provided schemas',
    /**
  * When a value doesn't validate
  * @variables This key takes one variable: The number of schemas the value does not validate
  */ error_oneOf: 'Value must validate against exactly one of the provided schemas. It currently validates against {{0}} of the schemas.',
    /**
  * When a value does not validate a 'not' schema
  */ error_not: 'Value must not validate against the provided schema',
    /**
  * When a value does not match any of the provided types
  */ error_type_union: 'Value must be one of the provided types',
    /**
  * When a value does not match the given type
  * @variables This key takes one variable: The type the value should be of
  */ error_type: 'Value must be of type {{0}}',
    /**
  *  When the value validates one of the disallowed types
  */ error_disallow_union: 'Value must not be one of the provided disallowed types',
    /**
  *  When the value validates a disallowed type
  * @variables This key takes one variable: The type the value should not be of
  */ error_disallow: 'Value must not be of type {{0}}',
    /**
  * When a value is not a multiple of or divisible by a given number
  * @variables This key takes one variable: The number mentioned above
  */ error_multipleOf: 'Value must be a multiple of {{0}}',
    /**
  * When a value is greater than it's supposed to be (exclusive)
  * @variables This key takes one variable: The maximum
  */ error_maximum_excl: 'Value must be less than {{0}}',
    /**
  * When a value is greater than it's supposed to be (inclusive
  * @variables This key takes one variable: The maximum
  */ error_maximum_incl: 'Value must be at most {{0}}',
    /**
  * When a value is lesser than it's supposed to be (exclusive)
  * @variables This key takes one variable: The minimum
  */ error_minimum_excl: 'Value must be greater than {{0}}',
    /**
  * When a value is lesser than it's supposed to be (inclusive)
  * @variables This key takes one variable: The minimum
  */ error_minimum_incl: 'Value must be at least {{0}}',
    /**
  * When a value have too many characters
  * @variables This key takes one variable: The maximum character count
  */ error_maxLength: 'Value must be at most {{0}} characters long',
    /**
   * When no array items validates the contains schema
   */ error_contains: 'No items match contains',
    /**
   * When an array have too few items that validate agaist contains schema
   * @variables This key takes two variable: The valid items count and the minContains value
   */ error_minContains: 'Contains match count {{0}} is less than minimum contains count of {{1}}',
    /**
   * When an array have too many items that validate agaist contains schema
   * @variables This key takes two variable: The valid items count and the maxContains value
   */ error_maxContains: 'Contains match count {{0}} exceeds maximum contains count of {{1}}',
    /**
  * When a value does not have enough characters
  * @variables This key takes one variable: The minimum character count
  */ error_minLength: 'Value must be at least {{0}} characters long',
    /**
  * When a value does not match a given pattern
  */ error_pattern: 'Value must match the pattern {{0}}',
    /**
  * When an array has additional items whereas it is not supposed to
  */ error_additionalItems: 'No additional items allowed in this array',
    /**
  * When there are to many items in an array
  * @variables This key takes one variable: The maximum item count
  */ error_maxItems: 'Value must have at most {{0}} items',
    /**
  * When there are not enough items in an array
  * @variables This key takes one variable: The minimum item count
  */ error_minItems: 'Value must have at least {{0}} items',
    /**
  * When an array is supposed to have unique items but has duplicates
  */ error_uniqueItems: 'Array must have unique items',
    /**
  * When there are too many properties in an object
  * @variables This key takes one variable: The maximum property count
  */ error_maxProperties: 'Object must have at most {{0}} properties',
    /**
  * When there are not enough properties in an object
  * @variables This key takes one variable: The minimum property count
  */ error_minProperties: 'Object must have at least {{0}} properties',
    /**
  * When a required property is not defined
  * @variables This key takes one variable: The name of the missing property
  */ error_required: "Object is missing the required property '{{0}}'",
    /**
  * When there is an additional property is set whereas there should be none
  * @variables This key takes one variable: The name of the additional property
  */ error_additional_properties: 'No additional properties allowed, but property {{0}} is set',
    /**
  * When there is a propertyName that sets a max length and a property name exceeds the max length
  * @variables This key takes one variable: The name of the invalid property
  */ error_property_names_exceeds_maxlength: 'Property name {{0}} exceeds maxLength',
    /**
  * When there is a propertyName that sets an enum and a property name matches none of the possible enum
  * @variables This key takes one variable: The name of the invalid property
  */ error_property_names_enum_mismatch: 'Property name {{0}} does not match any enum values',
    /**
  * When there is a propertyName that sets a const and a property does not match the const value
  * @variables This key takes one variable: The name of the invalid property
  */ error_property_names_const_mismatch: 'Property name {{0}} does not match the const value',
    /**
  * When there is a propertyName that sets a pattern and a property name does not match the pattern
  * @variables This key takes one variable: The name of the invalid property
  */ error_property_names_pattern_mismatch: 'Property name {{0}} does not match pattern',
    /**
  * When the propertyName is set to false and there is at least one property
  * @variables This key takes one variable: The name of the invalid property
  */ error_property_names_false: 'Property name {{0}} fails when propertyName is false',
    /**
  * When the propertyName specifies a maxLength that is not a number
  * @variables This key takes one variable: The name of the current property
  */ error_property_names_maxlength: 'Property name {{0}} cannot match invalid maxLength',
    /**
  * When the propertyName specifies an enum that is not an array
  * @variables This key takes one variable: The name of the current property
  */ error_property_names_enum: 'Property name {{0}} cannot match invalid enum',
    /**
  * When the propertyName specifies a pattern that is not a string
  * @variables This key takes one variable: The name of the current property
  */ error_property_names_pattern: 'Property name {{0}} cannot match invalid pattern',
    /**
  * When the propertyName is unsupported
  * @variables This key takes one variable: The name of the invalid propertyName
  */ error_property_names_unsupported: 'Unsupported propertyName {{0}}',
    /**
  * When a dependency is not resolved
  * @variables This key takes one variable: The name of the missing property for the dependency
  */ error_dependency: 'Must have property {{0}}',
    /**
  * When a date is in incorrect format
  * @variables This key takes one variable: The valid format
  */ error_date: 'Date must be in the format {{0}}',
    /**
  * When a time is in incorrect format
  * @variables This key takes one variable: The valid format
  */ error_time: 'Time must be in the format {{0}}',
    /**
  * When a datetime-local is in incorrect format
  * @variables This key takes one variable: The valid format
  */ error_datetime_local: 'Datetime must be in the format {{0}}',
    /**
  * When a integer date is less than 1 January 1970
  */ error_invalid_epoch: 'Date must be greater than 1 January 1970',
    /**
  * When an IPv4 is in incorrect format
  */ error_ipv4: 'Value must be a valid IPv4 address in the form of 4 numbers between 0 and 255, separated by dots',
    /**
  * When an IPv6 is in incorrect format
  */ error_ipv6: 'Value must be a valid IPv6 address',
    /**
  * When a hostname is in incorrect format
  */ error_hostname: 'The hostname has the wrong format',
    /**
   * When uploads max size limit is exceeded
   */ upload_max_size: 'Filesize too large. Max size is ',
    /**
   * When the mime type does not match the type of the file
   */ upload_wrong_file_format: 'Wrong file format. Allowed format(s): ',
    /**
  * Text/Title on Save button
  */ button_save: 'Save',
    /**
  * Text/Title on Copy button
  */ button_copy: 'Copy',
    /**
  * Text/Title on Cancel button
  */ button_cancel: 'Cancel',
    /**
  * Text/Title on Add button
  */ button_add: 'Add',
    /**
  * Text on Delete All buttons
  */ button_delete_all: 'All',
    /**
  * Title on Delete All buttons
  */ button_delete_all_title: 'Delete All',
    /**
  * Text on Delete Last buttons
  * @variable This key takes one variable: The title of object to delete
  */ button_delete_last: 'Last {{0}}',
    /**
  * Title on Delete Last buttons
  * @variable This key takes one variable: The title of object to delete
  */ button_delete_last_title: 'Delete Last {{0}}',
    /**
  * Title on Add Row buttons
  * @variable This key takes one variable: The title of object to add
  */ button_add_row_title: 'Add {{0}}',
    /**
  * Title on Move Down buttons
  */ button_move_down_title: 'Move down',
    /**
  * Title on Move Up buttons
  */ button_move_up_title: 'Move up',
    /**
  * Text on Object Properties buttons
  */ button_properties: 'Properties',
    /**
  * Title on Object Properties buttons
  */ button_object_properties: 'Object Properties',
    /**
  * Title on Copy Row button
  * @variable This key takes one variable: The title of object to delete
  */ button_copy_row_title: 'Copy {{0}}',
    /**
  * Title on Delete Row buttons
  * @variable This key takes one variable: The title of object to delete
  */ button_delete_row_title: 'Delete {{0}}',
    /**
  * Title on Delete Row buttons, short version (no parameter with the object title)
  */ button_delete_row_title_short: 'Delete',
    /**
  * Title on Copy Row buttons, short version (no parameter with the object title)
  */ button_copy_row_title_short: 'Copy',
    /**
  * Title on Collapse buttons
  */ button_collapse: 'Collapse',
    /**
  * Title on Expand buttons
  */ button_expand: 'Expand',
    /**
  * Title on Edit JSON buttons
  */ button_edit_json: 'Edit JSON',
    /**
  * Text/Title on Upload buttons
  */ button_upload: 'Upload',
    /**
  * Title on Flatpickr toggle buttons
  */ flatpickr_toggle_button: 'Toggle',
    /**
  * Title on Flatpickr clear buttons
  */ flatpickr_clear_button: 'Clear',
    /**
  * Choices input field placeholder text
  */ choices_placeholder_text: 'Start typing to add value',
    /**
  * Default title for array items
  */ default_array_item_title: 'item',
    /**
  * Warning when deleting a node
  */ button_delete_node_warning: 'Are you sure you want to remove this item?',
    /**
   * Warning when deleting a node
   */ table_controls: 'Controls',
    /**
   * Warning when paste and  length exceeded maxLength
   */ paste_max_length_reached: 'Pasted text exceeded maximum length of {{0}} and will be clipped.'
};
/* Default per-editor options */ Object.entries((0, _indexJs.editors)).forEach(([i, editor])=>{
    (0, _indexJs.editors)[i].options = editor.options || {};
});
/* Default upload handler */ function upload(type, file, cbs) {
    // eslint-disable-next-line no-console
    console.log('Upload handler required for upload editor');
}
/* String translate function */ function translate(key, variables, schema) {
    let schemaMessages = {};
    if (schema && schema.options && schema.options.error_messages && schema.options.error_messages[defaults.language]) schemaMessages = schema.options.error_messages[defaults.language];
    const lang = defaults.languages[defaults.language];
    if (!lang) throw new Error(`Unknown language ${defaults.language}`);
    let string = schemaMessages[key] || lang[key] || defaults.languages[default_language][key] || key;
    if (variables) for(let i = 0; i < variables.length; i++)string = string.replace(new RegExp(`\\{\\{${i}}}`, 'g'), variables[i]);
    return string;
}
/* Text element translate function */ function translateProperty(text, variables) {
    return text;
}
/* Default options when initializing JSON Editor */ const options = {
    upload,
    use_name_attributes: true,
    prompt_before_delete: true,
    use_default_values: true,
    max_depth: 0,
    button_state_mode: 1,
    case_sensitive_property_search: true,
    show_errors: 'interaction',
    prompt_paste_max_length_reached: false,
    remove_false_properties: false,
    enforce_const: false,
    opt_in_widget: 'checkbox'
};
const defaults = {
    options,
    theme,
    template,
    themes,
    callbacks,
    templates,
    iconlibs,
    editors: (0, _indexJs.editors),
    languages,
    resolvers: (0, _resolversJs.resolvers),
    custom_validators,
    default_language,
    language,
    translate,
    translateProperty
};

},{"./resolvers.js":"cdyl6","./editors/index.js":"b0ltd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdyl6":[function(require,module,exports,__globalThis) {
/* Use "multiple" as a fallback for everything */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolvers", ()=>resolvers);
const defaultResolver = (schema)=>typeof schema.type !== 'string' && 'multiple';
/* If the type is a script type, then presume the Editor's type is "string" until later resolvers decide otherwise */ const defaultResolverString = (schema)=>typeof schema.type === 'string' && 'string';
/* If the type is not set but properties are defined, we can infer the type is actually object */ const object = (schema)=>!schema.type && schema.properties && 'object';
/* If type is set, and it's a basic JSON type, use the primitive editor */ const primitive = (schema)=>typeof schema.type === 'string' && [
        'string',
        'number',
        'integer',
        'boolean',
        'null',
        'array',
        'object'
    ].includes(schema.type) && schema.type;
/* Use specialized editor for signatures */ const signature = (schema)=>schema.type === 'string' && schema.format === 'signature' && 'signature';
/* Use the select editor for all boolean values */ const boolean = (schema)=>{
    if (schema.type === 'boolean') {
        /* If explicitly set to 'checkbox', use that */ if (schema.format === 'checkbox' || schema.options && schema.options.checkbox) return 'checkbox';
        /* Otherwise, default to select menu */ if (schema.format === 'select2') return 'select2';
        if (schema.format === 'selectize') return 'selectize';
        if (schema.format === 'choices') return 'choices';
        return 'select';
    }
};
/* Use the multiple editor for schemas where the `type` is set to "any" */ const any = (schema)=>schema.type === 'any' && 'multiple';
/* Editor for base64 encoded files */ const base64 = (schema)=>schema.type === 'string' && schema.media && schema.media.binaryEncoding === 'base64' && 'base64';
/* Editor for uploading files */ const upload = (schema)=>schema.type === 'string' && schema.format === 'url' && window.FileReader && schema.options && schema.options.upload === Object(schema.options.upload) && 'upload';
/* Use the table editor for arrays with the format set to `table` */ const table = (schema)=>schema.type === 'array' && schema.format === 'table' && 'table';
/* Use the `select` editor for dynamic enumSource enums */ const enumSource = (schema)=>{
    if (schema.enumSource) {
        if (schema.format === 'radio') return 'radio';
        if (schema.format === 'select2') return 'select2';
        if (schema.format === 'selectize') return 'selectize';
        if (schema.format === 'choices') return 'choices';
        return 'select';
    }
};
/* Use the `enum` or `select` editors for schemas with enumerated properties */ const enumeratedProperties = (schema)=>{
    if (schema.enum) {
        if (schema.type === 'array' || schema.type === 'object') return 'enum';
        if (schema.type === 'number' || schema.type === 'integer' || schema.type === 'string') {
            if (schema.format === 'radio') return 'radio';
            if (schema.format === 'select2') return 'select2';
            if (schema.format === 'selectize') return 'selectize';
            if (schema.format === 'choices') return 'choices';
            return 'select';
        }
    }
};
/* Specialized editors for arrays of strings */ const arraysOfStrings = (schema, je)=>{
    if (schema.items) schema.items = je.expandSchema(schema.items);
    if (schema.type === 'array' && schema.items && !Array.isArray(schema.items) && [
        'string',
        'number',
        'integer'
    ].includes(schema.items.type)) {
        if (schema.format === 'choices') return 'arrayChoices';
        if (schema.uniqueItems) {
            /* if 'selectize' enabled it is expected to be selectized control */ if (schema.format === 'selectize') return 'arraySelectize';
            if (schema.format === 'select2') return 'arraySelect2';
            if (schema.items.enum) return 'multiselect' /* otherwise it is select */ ;
        }
    }
};
/* Use the multiple editor for schemas with `oneOf` or `anyOf` set */ const oneOf = (schema)=>(schema.oneOf || schema.anyOf) && (schema.options?.switcher ?? true) === true && 'multiple';
/* Use the multiple editor for schemas with `if` set */ const ifThenElse = (schema)=>schema.if && 'multiple';
/* Specialized editor for date, time and datetime-local formats */ const date = (schema)=>[
        'string',
        'integer'
    ].includes(schema.type) && [
        'date',
        'time',
        'datetime-local'
    ].includes(schema.format) && 'datetime';
/* Use a specialized editor for starratings */ const starratings = (schema)=>[
        'string',
        'integer'
    ].includes(schema.type) && [
        'starrating',
        'rating'
    ].includes(schema.format) && 'starrating';
/* Hyper-link describeBy resolver */ const describeBy = (schema)=>{
    if (schema.links) for(let i = 0; i < schema.links.length; i++){
        if (schema.links[i].rel && schema.links[i].rel.toLowerCase() === 'describedby') return 'describedBy';
    }
};
/* Use the stepper editor for schemas with type `number` or `integer` and format `stepper` */ const stepper = (schema)=>{
    if ((schema.type === 'integer' || schema.type === 'number') && schema.format === 'stepper') return 'stepper';
};
/* Enable custom editor type */ const button = (schema)=>schema.format === 'button' && 'button';
const info = (schema)=>schema.format === 'info' && 'info';
const uuid = (schema)=>schema.type === 'string' && schema.format === 'uuid' && 'uuid';
const autoComplete = (schema)=>schema.type === 'string' && schema.format === 'autocomplete' && 'autocomplete';
const jodit = (schema)=>schema.type === 'string' && schema.format === 'jodit' && 'jodit';
const markdown = (schema)=>schema.type === 'string' && schema.format === 'markdown' && 'simplemde';
const xhtml = (schema)=>schema.type === 'string' && [
        'xhtml',
        'bbcode'
    ].includes(schema.format) && 'sceditor';
/* Use the ace editor for schemas with format equals any of ace editor modes */ const aceModes = [
    'actionscript',
    'batchfile',
    'c',
    'c++',
    'cpp',
    'coffee',
    'csharp',
    'css',
    'dart',
    'django',
    'ejs',
    'erlang',
    'golang',
    'groovy',
    'handlebars',
    'haskell',
    'haxe',
    'html',
    'ini',
    'jade',
    'java',
    'javascript',
    'json',
    'less',
    'lisp',
    'lua',
    'makefile',
    'matlab',
    'mysql',
    'objectivec',
    'pascal',
    'perl',
    'pgsql',
    'php',
    'python',
    'prql',
    'r',
    'ruby',
    'rust',
    'sass',
    'scala',
    'scss',
    'sh',
    'smarty',
    'sql',
    'sqlserver',
    'stylus',
    'svg',
    'typescript',
    'twig',
    'vbscript',
    'xml',
    'yaml',
    'zig'
];
const ace = (schema)=>schema.type === 'string' && aceModes.includes(schema.format) && 'ace';
const ip = (schema)=>schema.type === 'string' && [
        'ip',
        'ipv4',
        'ipv6',
        'hostname'
    ].includes(schema.format) && 'ip';
const colorPicker = (schema)=>schema.type === 'string' && schema.format === 'color' && 'colorpicker';
const resolvers = [
    colorPicker,
    ip,
    ace,
    xhtml,
    markdown,
    jodit,
    autoComplete,
    uuid,
    info,
    button,
    stepper,
    describeBy,
    starratings,
    date,
    oneOf,
    ifThenElse,
    arraysOfStrings,
    enumeratedProperties,
    enumSource,
    table,
    upload,
    base64,
    any,
    boolean,
    signature,
    primitive,
    object,
    defaultResolver,
    defaultResolverString
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b0ltd":[function(require,module,exports,__globalThis) {
/* Internal helper function called only here so we won't export as part of class */ /* Previously the assignment to the JSONEditor.defaults.editors was done in each of the editor */ /* files but doing it this way removes each of the editors' dependency on JSONEditor */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "editors", ()=>editors);
var _aceJs = require("./ace.js");
var _arrayJs = require("./array.js");
var _choicesJs = require("./array/choices.js");
var _select2Js = require("./array/select2.js");
var _selectizeJs = require("./array/selectize.js");
var _autocompleteJs = require("./autocomplete.js");
var _base64Js = require("./base64.js");
var _buttonJs = require("./button.js");
var _checkboxJs = require("./checkbox.js");
var _choicesJs1 = require("./choices.js");
var _datetimeJs = require("./datetime.js");
var _describedbyJs = require("./describedby.js");
var _enumJs = require("./enum.js");
var _hiddenJs = require("./hidden.js");
var _infoJs = require("./info.js");
var _integerJs = require("./integer.js");
var _ipJs = require("./ip.js");
var _joditJs = require("./jodit.js");
var _multipleJs = require("./multiple.js");
var _multiselectJs = require("./multiselect.js");
var _nullJs = require("./null.js");
var _numberJs = require("./number.js");
var _objectJs = require("./object.js");
var _radioJs = require("./radio.js");
var _sceditorJs = require("./sceditor.js");
var _selectJs = require("./select.js");
var _select2Js1 = require("./select2.js");
var _selectizeJs1 = require("./selectize.js");
var _signatureJs = require("./signature.js");
var _simplemdeJs = require("./simplemde.js");
var _starratingJs = require("./starrating.js");
var _stepperJs = require("./stepper.js");
var _stringJs = require("./string.js");
var _tableJs = require("./table.js");
var _uploadJs = require("./upload.js");
var _uuidJs = require("./uuid.js");
var _colorpickerJs = require("./colorpicker.js");
const editors = {
    ace: (0, _aceJs.AceEditor),
    array: (0, _arrayJs.ArrayEditor),
    arrayChoices: (0, _choicesJs.ArrayChoicesEditor),
    arraySelect2: (0, _select2Js.ArraySelect2Editor),
    arraySelectize: (0, _selectizeJs.ArraySelectizeEditor),
    autocomplete: (0, _autocompleteJs.AutocompleteEditor),
    base64: (0, _base64Js.Base64Editor),
    button: (0, _buttonJs.ButtonEditor),
    checkbox: (0, _checkboxJs.CheckboxEditor),
    choices: (0, _choicesJs1.ChoicesEditor),
    datetime: (0, _datetimeJs.DatetimeEditor),
    describedBy: (0, _describedbyJs.DescribedByEditor),
    enum: (0, _enumJs.EnumEditor),
    hidden: (0, _hiddenJs.HiddenEditor),
    info: (0, _infoJs.InfoEditor),
    integer: (0, _integerJs.IntegerEditor),
    ip: (0, _ipJs.IpEditor),
    jodit: (0, _joditJs.JoditEditor),
    multiple: (0, _multipleJs.MultipleEditor),
    multiselect: (0, _multiselectJs.MultiSelectEditor),
    null: (0, _nullJs.NullEditor),
    number: (0, _numberJs.NumberEditor),
    object: (0, _objectJs.ObjectEditor),
    radio: (0, _radioJs.RadioEditor),
    sceditor: (0, _sceditorJs.ScEditor),
    select: (0, _selectJs.SelectEditor),
    select2: (0, _select2Js1.Select2Editor),
    selectize: (0, _selectizeJs1.SelectizeEditor),
    signature: (0, _signatureJs.SignatureEditor),
    simplemde: (0, _simplemdeJs.SimplemdeEditor),
    starrating: (0, _starratingJs.StarratingEditor),
    stepper: (0, _stepperJs.StepperEditor),
    string: (0, _stringJs.StringEditor),
    table: (0, _tableJs.TableEditor),
    upload: (0, _uploadJs.UploadEditor),
    uuid: (0, _uuidJs.UuidEditor),
    colorpicker: (0, _colorpickerJs.ColorEditor)
};

},{"./ace.js":"acBGv","./array.js":"hBzPE","./array/choices.js":"6pfTe","./array/select2.js":"7uDjd","./array/selectize.js":"4Lub0","./autocomplete.js":"3QI46","./base64.js":"iVoGY","./button.js":"e4zRt","./checkbox.js":"a9jhG","./choices.js":"gAVAc","./datetime.js":"eqlEe","./describedby.js":"gPpbg","./enum.js":"9GYD3","./hidden.js":"zs8gQ","./info.js":"lVGtP","./integer.js":"4sii0","./ip.js":"94TW2","./jodit.js":"75oOI","./multiple.js":"hCWRE","./multiselect.js":"eOdnb","./null.js":"lJjBC","./number.js":"aaapI","./object.js":"9lvjZ","./radio.js":"8Ti52","./sceditor.js":"2h0LE","./select.js":"de0Lu","./select2.js":"anGO3","./selectize.js":"lQZhM","./signature.js":"5LYck","./simplemde.js":"lWwGR","./starrating.js":"kzdFq","./stepper.js":"7fnGC","./string.js":"cT5YY","./table.js":"c5nbP","./upload.js":"23EYi","./uuid.js":"T14rf","./colorpicker.js":"8eYoW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"acBGv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AceEditor", ()=>AceEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class AceEditor extends (0, _stringJs.StringEditor) {
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        const res = super.setValue(value, initial, fromTemplate);
        if (res !== undefined && res.changed && this.ace_editor_instance) {
            this.ace_editor_instance.setValue(res.value);
            this.ace_editor_instance.session.getSelection().clearSelection();
            this.ace_editor_instance.resize();
        }
    }
    build() {
        this.options.format = 'textarea' /* Force format into "textarea" */ ;
        super.build();
        this.input_type = this.schema.format /* Restore original format */ ;
        this.input.setAttribute('data-schemaformat', this.input_type);
    }
    afterInputReady() {
        let options;
        if (window.ace) {
            let mode = this.input_type;
            /* aliases for c/cpp */ if (mode === 'cpp' || mode === 'c++' || mode === 'c') mode = 'c_cpp';
            /* Get options, either global options from "this.defaults.options.ace" or */ /* single property options from schema "options.ace" */ options = this.expandCallbacks('ace', (0, _utilitiesJs.extend)({}, {
                selectionStyle: 'text',
                minLines: 30,
                maxLines: 30
            }, this.defaults.options.ace || {}, this.options.ace || {}, {
                mode: `ace/mode/${mode}`
            }));
            this.ace_container = document.createElement('div');
            this.ace_container.style.width = '100%';
            this.ace_container.style.position = 'relative';
            /* this.ace_container.style.height = '400px'; */ this.input.parentNode.insertBefore(this.ace_container, this.input);
            this.input.style.display = 'none';
            this.ace_editor_instance = window.ace.edit(this.ace_container, options);
            this.ace_editor_instance.setValue(this.getValue());
            this.ace_editor_instance.session.getSelection().clearSelection();
            this.ace_editor_instance.resize();
            if (this.schema.readOnly || this.schema.readonly || this.schema.template) this.ace_editor_instance.setReadOnly(true);
            /* Listen for changes */ this.ace_editor_instance.on('change', ()=>{
                this.input.value = this.ace_editor_instance.getValue();
                this.refreshValue();
                this.is_dirty = true;
                this.onChange(true);
            });
            this.theme.afterInputReady(this.input);
        } else super.afterInputReady();
    /* Library not loaded, so just treat this as a string */ }
    getNumColumns() {
        return 6;
    }
    enable() {
        if (!this.always_disabled && this.ace_editor_instance) this.ace_editor_instance.setReadOnly(false);
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.ace_editor_instance) this.ace_editor_instance.setReadOnly(true);
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.ace_editor_instance) {
            this.ace_editor_instance.destroy();
            this.ace_editor_instance = null;
        }
        super.destroy();
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cT5YY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringEditor", ()=>StringEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
class StringEditor extends (0, _editorJs.AbstractEditor) {
    register() {
        super.register();
        if (!this.input) return;
        if (this.jsoneditor.options.use_name_attributes) this.input.setAttribute('name', this.formname);
    }
    unregister() {
        super.unregister();
        if (!this.input) return;
        this.input.removeAttribute('name');
        this.input.removeAttribute('aria-label');
    }
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        if (this.template && !fromTemplate) return;
        if (!this.shouldBeUnset() && (value === null || typeof value === 'undefined')) value = '';
        else if (typeof value === 'object') value = JSON.stringify(value);
        else if (!this.shouldBeUnset() && typeof value !== 'string') value = `${value}`;
        if (value === this.serialized) return;
        /* Sanitize value before setting it */ const sanitized = this.sanitize(value);
        if (this.input.value === sanitized) return;
        this.setValueToInputField(sanitized);
        if (this.format === 'range') {
            const output = this.control.querySelector('output');
            if (output) output.value = sanitized;
        }
        const changed = fromTemplate || this.getValue() !== value;
        this.refreshValue();
        if (initial) this.is_dirty = false;
        else if (this.jsoneditor.options.show_errors === 'change') this.is_dirty = true;
        if (this.adjust_height) this.adjust_height(this.input);
        /* Bubble this setValue to parents if the value changed */ if (changed) this.onChange(true, fromTemplate);
        /* Return object with changed state and sanitized value for use in editors that extend this */ return {
            changed,
            value: sanitized
        };
    }
    setValueToInputField(value) {
        this.input.value = value === undefined ? '' : value;
    }
    getNumColumns() {
        const min = Math.ceil(Math.max(this.getTitle().length, this.schema.maxLength || 0, this.schema.minLength || 0) / 5);
        let num;
        if (this.input_type === 'textarea') num = 6;
        else if ([
            'text',
            'email'
        ].includes(this.input_type)) num = 4;
        else num = 2;
        return Math.min(12, Math.max(min, num));
    }
    build() {
        if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        this.format = this.schema.format;
        if (!this.format && this.schema.media && this.schema.media.type) this.format = this.schema.media.type.replace(/(^(application|text)\/(x-)?(script\.)?)|(-source$)/g, '');
        if (!this.format && this.options.default_format) this.format = this.options.default_format;
        if (this.options.format) this.format = this.options.format;
        /* Specific format */ if (this.format) {
            /* Text Area */ if (this.format === 'textarea') {
                this.input_type = 'textarea';
                this.input = this.theme.getTextareaInput();
            /* Range Input */ } else if (this.format === 'range') {
                this.input_type = 'range';
                let min = this.schema.minimum || 0;
                let max = this.schema.maximum || Math.max(100, min + 1);
                let step = 1;
                if (this.schema.multipleOf) {
                    if (min % this.schema.multipleOf) min = Math.ceil(min / this.schema.multipleOf) * this.schema.multipleOf;
                    if (max % this.schema.multipleOf) max = Math.floor(max / this.schema.multipleOf) * this.schema.multipleOf;
                    step = this.schema.multipleOf;
                }
                this.input = this.theme.getRangeInput(min, max, step, this.description, this.formname);
                this.input.setAttribute('id', this.formname);
            /* HTML5 Input type */ } else {
                this.input_type = 'text';
                if ([
                    'button',
                    'checkbox',
                    'color',
                    'date',
                    'datetime-local',
                    'email',
                    'file',
                    'hidden',
                    'image',
                    'month',
                    'number',
                    'password',
                    'radio',
                    'reset',
                    'search',
                    'submit',
                    'tel',
                    'text',
                    'time',
                    'url',
                    'week'
                ].includes(this.format)) this.input_type = this.format;
                this.input = this.theme.getFormInputField(this.input_type);
            }
        /* Normal text input */ } else {
            this.input_type = 'text';
            this.input = this.theme.getFormInputField(this.input_type);
        }
        /* minLength, maxLength, and pattern */ if (typeof this.schema.maxLength !== 'undefined') this.input.setAttribute('maxlength', this.schema.maxLength);
        if (typeof this.schema.pattern !== 'undefined') this.input.setAttribute('pattern', this.schema.pattern);
        else if (typeof this.schema.minLength !== 'undefined') this.input.setAttribute('pattern', `.{${this.schema.minLength},}`);
        if (this.options.compact) this.container.classList.add('compact');
        else if (this.options.input_width) this.input.style.width = this.options.input_width;
        if (this.schema.readOnly || this.schema.readonly || this.schema.template) {
            this.disable(true);
            this.input.setAttribute('readonly', 'true');
        }
        /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([
            'maxlength',
            'pattern',
            'readonly',
            'min',
            'max',
            'step'
        ]);
        this.input.addEventListener('change', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            /* Don't allow changing if this field is a template */ if (this.schema.template) {
                e.currentTarget.value = this.value;
                return;
            }
            const val = e.currentTarget.value;
            /* sanitize value */ const sanitized = this.sanitize(val);
            if (val !== sanitized) e.currentTarget.value = sanitized;
            this.is_dirty = true;
            this.refreshValue();
            this.onChange(true);
        });
        if (this.options.input_height) this.input.style.height = this.options.input_height;
        if (this.options.expand_height) {
            this.adjust_height = (el)=>{
                if (!el) return;
                let i;
                let ch = el.offsetHeight;
                /* Input too short */ if (el.offsetHeight < el.scrollHeight) {
                    i = 0;
                    while(el.offsetHeight < el.scrollHeight + 3){
                        if (i > 100) break;
                        i++;
                        ch++;
                        el.style.height = `${ch}px`;
                    }
                } else {
                    i = 0;
                    while(el.offsetHeight >= el.scrollHeight + 3){
                        if (i > 100) break;
                        i++;
                        ch--;
                        el.style.height = `${ch}px`;
                    }
                    el.style.height = `${ch + 1}px`;
                }
            };
            this.input.addEventListener('keyup', (e)=>{
                this.adjust_height(e.currentTarget);
            });
            this.input.addEventListener('change', (e)=>{
                this.adjust_height(e.currentTarget);
            });
            this.adjust_height();
        }
        const promptPasteMaxLengthReached = this.options.prompt_paste_max_length_reached ?? this.jsoneditor.options.prompt_paste_max_length_reached;
        const hasMaxLength = typeof this.schema.maxLength !== 'undefined';
        if (promptPasteMaxLengthReached && hasMaxLength) this.input.addEventListener('paste', (event)=>{
            const paste = (event.clipboardData || window.clipboardData).getData('text');
            const length = paste.length + this.input.value.length;
            if (length > this.schema.maxLength) alert(this.translate('paste_max_length_reached', [
                this.schema.maxLength
            ]));
        });
        if (this.format) this.input.setAttribute('data-schemaformat', this.format);
        let { input } = this;
        if (this.format === 'range') input = this.theme.getRangeControl(this.input, this.theme.getRangeOutput(this.input, this.schema.default || Math.max(this.schema.minimum || 0, 0)));
        this.control = this.theme.getFormControl(this.label, input, this.description, this.infoButton, this.formname);
        this.container.appendChild(this.control);
        /* Any special formatting that needs to happen after the input is added to the dom */ window.requestAnimationFrame(()=>{
            /* Skip in case the input is only a temporary editor, */ /* otherwise, in the case of an ace_editor creation, */ /* it will generate an error trying to append it to the missing parentNode */ if (this.input.parentNode) this.afterInputReady();
            if (this.adjust_height) this.adjust_height(this.input);
            if (this.format === 'range') {
                const output = this.control.querySelector('output');
                output.value = this.input.value;
            }
        });
        /* Compile and store the template */ if (this.schema.template) {
            const callback = this.expandCallbacks('template', {
                template: this.schema.template
            });
            if (typeof callback.template === 'function') this.template = callback.template;
            else this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine);
            this.refreshValue();
        } else this.refreshValue();
    }
    setupCleave(el) {
        /* Enable cleave.js support if library is loaded and config is available */ const options = this.expandCallbacks('cleave', (0, _utilitiesJs.extend)({}, this.defaults.options.cleave || {}, this.options.cleave || {}));
        if (typeof options === 'object' && Object.keys(options).length > 0) this.cleave_instance = new window.Cleave(el, options);
    }
    setupImask(el) {
        /* Enable imask.js support if library is loaded and config is available */ const options = this.expandCallbacks('imask', (0, _utilitiesJs.extend)({}, this.defaults.options.imask || {}, this.options.imask || {}));
        if (typeof options === 'object' && Object.keys(options).length > 0) this.imask_instance = window.IMask(el, this.ajustIMaskOptions(options));
    }
    ajustIMaskOptions(obj) {
        /* iMask config format is not JSON friendly, so function and regex based mask */ /* properties have to be adjusted from string to the correct format */ Object.keys(obj).forEach((prop)=>{
            if (obj[prop] === Object(obj[prop])) obj[prop] = this.ajustIMaskOptions(obj[prop]);
            else if (prop === 'mask') {
                if (obj[prop].substr(0, 6) === 'regex:') {
                    const regExMatch = obj[prop].match(/^regex:\/(.*)\/([gimsuy]*)$/);
                    if (regExMatch !== null) try {
                        obj[prop] = new RegExp(regExMatch[1], regExMatch[2]);
                    } catch (e) {}
                } else obj[prop] = this.getGlobalPropertyFromString(obj[prop]);
            }
        });
        return obj;
    }
    getGlobalPropertyFromString(strValue) {
        if (!strValue.includes('.')) {
            if (typeof window[strValue] !== 'undefined') return window[strValue];
        } else {
            const arrParts = strValue.split('.');
            const obj = arrParts[0];
            const prop = arrParts[1];
            if (typeof window[obj] !== 'undefined' && typeof window[obj][prop] !== 'undefined') return window[obj][prop];
        }
        /* just a string */ return strValue;
    }
    shouldBeUnset() {
        return !this.jsoneditor.options.use_default_values && !this.is_dirty;
    }
    getValue() {
        const hasValueSet = !!(this.input && this.input.value);
        if (this.shouldBeUnset() && !hasValueSet) return undefined;
        if (this.imask_instance && this.dependenciesFulfilled && this.options.imask.returnUnmasked) return this.imask_instance.unmaskedValue;
        return super.getValue();
    }
    enable() {
        if (!this.always_disabled) {
            this.input.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.input.disabled = true;
        super.disable();
    }
    afterInputReady() {
        this.theme.afterInputReady(this.input);
        if (window.Cleave && !this.cleave_instance) this.setupCleave(this.input);
        else if (window.IMask && !this.imask_instance) this.setupImask(this.input);
    }
    refreshValue() {
        if (!this.input) return;
        this.value = this.input.value;
        if (typeof this.value !== 'string' && !this.shouldBeUnset()) this.value = '';
        this.serialized = this.value;
    }
    destroy() {
        if (this.cleave_instance) this.cleave_instance.destroy();
        if (this.imask_instance) this.imask_instance.destroy();
        this.template = null;
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        super.destroy();
    }
    /**
   * This is overridden in derivative editors
   */ sanitize(value) {
        return value;
    }
    /**
   * Re-calculates the value if needed
   */ onWatchedFieldChange() {
        let vars;
        /* If this editor needs to be rendered by a macro template */ if (this.template) {
            vars = this.getWatchedFieldValues();
            this.setValue(this.template(vars), false, true);
        }
        super.onWatchedFieldChange();
    }
    showValidationErrors(errors) {
        if (this.jsoneditor.options.show_errors === 'always') ;
        else if (!this.is_dirty && this.previous_error_setting === this.jsoneditor.options.show_errors) return;
        this.previous_error_setting = this.jsoneditor.options.show_errors;
        const addMessage = (messages, error)=>{
            if (error.path === this.path) messages.push(error.message);
            return messages;
        };
        const messages = errors.reduce(addMessage, []);
        if (messages.length) this.theme.addInputError(this.input, `${messages.join('. ')}.`);
        else this.theme.removeInputError(this.input);
    }
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"24x9b":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * All editors should extend from this class
 */ parcelHelpers.export(exports, "AbstractEditor", ()=>AbstractEditor);
var _utilitiesJs = require("./utilities.js");
class AbstractEditor {
    constructor(options, defaults){
        this.defaults = defaults;
        this.jsoneditor = options.jsoneditor;
        this.theme = this.jsoneditor.theme;
        this.template_engine = this.jsoneditor.template;
        this.iconlib = this.jsoneditor.iconlib;
        this.translate = this.jsoneditor.translate || this.defaults.translate;
        this.translateProperty = this.jsoneditor.translateProperty || this.defaults.translateProperty;
        this.original_schema = options.schema;
        this.schema = this.jsoneditor.expandSchema(this.original_schema);
        this.active = true;
        this.isUiOnly = false;
        this.options = (0, _utilitiesJs.extend)({}, this.options || {}, this.schema.options || {}, options.schema.options || {}, options);
        this.enforceConstEnabled = this.options.enforce_const ?? this.jsoneditor.options.enforce_const;
        this.formname = this.jsoneditor.options.form_name_root || 'root';
        if (!options.path && !this.schema.id) this.schema.id = this.formname;
        this.path = options.path || this.formname;
        this.formname = options.formname || this.path.replace(/\.([^.]+)/g, '[$1]');
        this.parent = options.parent;
        this.key = this.parent !== undefined ? this.path.split('.').slice(this.parent.path.split('.').length).join('.') : this.path;
        this.link_watchers = [];
        this.watchLoop = false;
        this.optInWidget = this.options.opt_in_widget ?? this.jsoneditor.options.opt_in_widget;
        if (options.container) this.setContainer(options.container);
        this.registerDependencies();
    }
    onChildEditorChange(editor, eventData) {
        this.onChange(true, false, eventData);
    }
    notify() {
        if (this.path) this.jsoneditor.notifyWatchers(this.path);
    }
    change(eventData) {
        if (this.parent) this.parent.onChildEditorChange(this, eventData);
        else if (this.jsoneditor) this.jsoneditor.onChange(eventData);
    }
    onChange(bubble, fromTemplate, eventData) {
        this.notify();
        if (!fromTemplate) {
            if (this.watch_listener) this.watch_listener();
        }
        if (bubble) this.change(eventData);
    }
    register() {
        this.jsoneditor.registerEditor(this);
        if (this.input && !this.label) {
            const ariaLabel = this.getTitle() || this.formname;
            this.input.setAttribute('aria-label', ariaLabel);
        }
        this.onChange();
    }
    unregister() {
        if (!this.jsoneditor) return;
        this.jsoneditor.unregisterEditor(this);
    }
    getNumColumns() {
        return 12;
    }
    isActive() {
        return this.active;
    }
    activate() {
        this.active = true;
        this.optInCheckbox.checked = true;
        this.enable();
        this.change();
    }
    deactivate() {
        /* only non required properties can be deactivated. */ if (!this.isRequired()) {
            this.active = false;
            this.optInCheckbox.checked = false;
            this.disable();
            this.change();
        }
    }
    registerDependencies() {
        this.dependenciesFulfilled = true;
        const deps = this.options.dependencies;
        if (!deps) return;
        Object.keys(deps).forEach((dependency)=>{
            let path;
            const isFullPath = dependency.startsWith(this.jsoneditor.root.path);
            if (isFullPath) path = dependency;
            else {
                path = this.path.split('.');
                path[path.length - 1] = dependency;
                path = path.join('.');
            }
            this.jsoneditor.watch(path, ()=>{
                this.evaluateDependencies();
            });
        });
    }
    evaluateDependencies() {
        const wrapper = this.container || this.control;
        if (!wrapper || this.jsoneditor === null) return;
        const deps = this.options.dependencies;
        if (!deps) return;
        // Assume true and set to false if any unmet dependencies are found
        const previousStatus = this.dependenciesFulfilled;
        this.dependenciesFulfilled = true;
        Object.keys(deps).forEach((dependency)=>{
            let path;
            const isFullPath = dependency.startsWith(this.jsoneditor.root.path);
            if (isFullPath) path = dependency;
            else {
                path = this.path.split('.');
                path[path.length - 1] = dependency;
                path = path.join('.');
            }
            const choices = deps[dependency];
            this.checkDependency(path, choices);
        });
        if (this.dependenciesFulfilled !== previousStatus) this.notify();
        let displayMode = this.dependenciesFulfilled ? 'block' : 'none';
        if (this.options.hidden) displayMode = 'none';
        if (wrapper.tagName === 'TD') Object.keys(wrapper.childNodes).forEach((child)=>wrapper.childNodes[child].style.display = displayMode);
        else wrapper.style.display = displayMode;
    }
    checkDependency(path, choices) {
        if (this.path === path || this.jsoneditor === null) return;
        const editor = this.jsoneditor.getEditor(path);
        const value = editor ? editor.getValue() : undefined;
        if (!editor || !editor.dependenciesFulfilled || !value) this.dependenciesFulfilled = false;
        else if (Array.isArray(choices)) this.dependenciesFulfilled = choices.some((choice)=>{
            if (JSON.stringify(value) === JSON.stringify(choice)) return true;
        });
        else if (typeof choices === 'object') {
            if (typeof value !== 'object') this.dependenciesFulfilled = choices === value;
            else Object.keys(choices).some((key)=>{
                if (!(0, _utilitiesJs.hasOwnProperty)(choices, key)) return false;
                if (!(0, _utilitiesJs.hasOwnProperty)(value, key) || choices[key] !== value[key]) {
                    this.dependenciesFulfilled = false;
                    return true;
                }
            });
        } else if (typeof choices === 'string' || typeof choices === 'number') this.dependenciesFulfilled = this.dependenciesFulfilled && value === choices;
        else if (typeof choices === 'boolean') {
            if (choices) this.dependenciesFulfilled = this.dependenciesFulfilled && (value || value.length > 0);
            else this.dependenciesFulfilled = this.dependenciesFulfilled && (!value || value.length === 0);
        }
    }
    setContainer(container) {
        this.container = container;
        this.setContainerAttributes();
        if (this.schema.id) this.container.setAttribute('data-schemaid', this.schema.id);
        if (this.schema.type && typeof this.schema.type === 'string') this.container.setAttribute('data-schematype', this.schema.type);
        this.container.setAttribute('data-schemapath', this.path);
    }
    setOptInCheckbox() {
        let optIn;
        if (this.optInWidget === 'switch') optIn = this.theme.getOptInSwitch(this.formname);
        else optIn = this.theme.getOptInCheckbox(this.formname);
        this.optInCheckbox = optIn.checkbox;
        this.optInContainer = optIn.container;
        this.optInCheckbox.addEventListener('click', ()=>{
            if (this.isActive()) this.deactivate();
            else this.activate();
        });
        /* append active/deactive checkbox if show_opt_in is true */ const globalOptIn = this.jsoneditor.options.show_opt_in;
        const parentOptInDefined = typeof this.parent.options.show_opt_in !== 'undefined';
        const parentOptInEnabled = parentOptInDefined && this.parent.options.show_opt_in === true;
        const parentOptInDisabled = parentOptInDefined && this.parent.options.show_opt_in === false;
        if (parentOptInEnabled || !parentOptInDisabled && globalOptIn || !parentOptInDefined && globalOptIn) /* and control to type object editors if they are not required */ {
            if (this.parent && this.parent.schema.type === 'object' && !this.isRequired() && this.header) {
                this.header.insertBefore(this.optInContainer, this.header.firstChild);
                this.optInAppended = true;
            }
        }
    }
    preBuild() {}
    build() {}
    postBuild() {
        this.setupWatchListeners();
        this.addLinks();
        this.register();
        this.setValue(this.getDefault(), true);
        this.updateHeaderText();
        this.onWatchedFieldChange();
        if (this.options.titleHidden) {
            this.theme.visuallyHidden(this.label);
            this.theme.visuallyHidden(this.header);
        }
        if (this.enforceConstEnabled && this.schema.const) this.disable();
    }
    setupWatchListeners() {
        /* Watched fields */ this.watched = {};
        if (this.schema.vars) this.schema.watch = this.schema.vars;
        this.watched_values = {};
        this.watch_listener = ()=>{
            if (this.refreshWatchedFieldValues()) this.onWatchedFieldChange();
        };
        if ((0, _utilitiesJs.hasOwnProperty)(this.schema, 'watch')) {
            let path;
            let pathParts;
            let first;
            let root;
            let adjustedPath;
            const myPath = this.container.getAttribute('data-schemapath');
            Object.keys(this.schema.watch).forEach((name)=>{
                path = this.schema.watch[name];
                if (Array.isArray(path)) {
                    if (path.length < 2) return;
                    pathParts = [
                        path[0]
                    ].concat(path[1].split('.'));
                } else {
                    pathParts = path.split('.');
                    if (!this.theme.closest(this.container, `[data-schemaid="${pathParts[0]}"]`)) pathParts.unshift('#');
                }
                first = pathParts.shift();
                if (first === '#') first = this.jsoneditor.schema.id || this.jsoneditor.root.formname;
                /* Find the root node for this template variable */ root = this.theme.closest(this.container, `[data-schemaid="${first}"]`);
                if (!root) throw new Error(`Could not find ancestor node with id ${first}`);
                /* Keep track of the root node and path for use when rendering the template */ adjustedPath = `${root.getAttribute('data-schemapath')}.${pathParts.join('.')}`;
                if (myPath.startsWith(adjustedPath)) this.watchLoop = true;
                this.jsoneditor.watch(adjustedPath, this.watch_listener);
                this.watched[name] = adjustedPath;
            });
        }
        /* Dynamic header */ if (this.schema.headerTemplate) this.header_template = this.jsoneditor.compileTemplate(this.schema.headerTemplate, this.template_engine);
    }
    addLinks() {
        /* Add links */ if (!this.no_link_holder) {
            this.link_holder = this.theme.getLinksHolder();
            /* if description element exists, insert the link before */ if (typeof this.description !== 'undefined') this.description.parentNode.insertBefore(this.link_holder, this.description);
            else this.container.appendChild(this.link_holder);
            if (this.schema.links) for(let i = 0; i < this.schema.links.length; i++)this.addLink(this.getLink(this.schema.links[i]));
        }
    }
    onMove() {}
    getButton(text, icon, title, args = []) {
        const btnClass = `json-editor-btn-${icon}`;
        if (!this.iconlib) icon = null;
        else icon = this.iconlib.getIcon(icon);
        text = this.translate(text, args);
        title = this.translate(title, args);
        if (!icon && title) {
            text = title;
            title = null;
        }
        const btn = this.theme.getButton(text, icon, title);
        btn.classList.add(btnClass);
        return btn;
    }
    setButtonText(button, text, icon, title, args = []) {
        if (!this.iconlib) icon = null;
        else icon = this.iconlib.getIcon(icon);
        text = this.translate(text, args);
        title = this.translate(title, args);
        if (!icon && title) {
            text = title;
            title = null;
        }
        return this.theme.setButtonText(button, text, icon, title);
    }
    addLink(link) {
        if (this.link_holder) this.link_holder.appendChild(link);
    }
    getLink(data) {
        let holder;
        let link;
        /* Get mime type of the link */ const mime = data.mediaType || 'application/javascript';
        const type = mime.split('/')[0];
        /* Template to generate the link href */ const href = this.jsoneditor.compileTemplate(data.href, this.template_engine);
        const relTemplate = this.jsoneditor.compileTemplate(data.rel ? data.rel : data.href, this.template_engine);
        /* Template to generate the link's download attribute */ let download = null;
        if (data.download) download = data.download;
        if (download && download !== true) download = this.jsoneditor.compileTemplate(download, this.template_engine);
        /* Image links */ if (type === 'image') {
            holder = this.theme.getBlockLinkHolder();
            link = document.createElement('a');
            link.setAttribute('target', '_blank');
            const image = document.createElement('img');
            this.theme.createImageLink(holder, link, image);
            /* When a watched field changes, update the url */ this.link_watchers.push((vars)=>{
                const url = href(vars);
                const rel = relTemplate(vars);
                link.setAttribute('href', url);
                link.setAttribute('title', rel || url);
                image.setAttribute('src', url);
            });
        /* Audio/Video links */ } else if ([
            'audio',
            'video'
        ].includes(type)) {
            holder = this.theme.getBlockLinkHolder();
            link = this.theme.getBlockLink();
            link.setAttribute('target', '_blank');
            const media = document.createElement(type);
            media.setAttribute('controls', 'controls');
            this.theme.createMediaLink(holder, link, media);
            /* When a watched field changes, update the url */ this.link_watchers.push((vars)=>{
                const url = href(vars);
                const rel = relTemplate(vars);
                link.setAttribute('href', url);
                link.textContent = rel || url;
                media.setAttribute('src', url);
            });
        /* Text links or blank link */ } else {
            link = holder = this.theme.getBlockLink();
            holder.setAttribute('target', '_blank');
            holder.textContent = data.rel;
            holder.style.display = 'none' /* Prevent blank links from showing up when using custom view */ ;
            /* When a watched field changes, update the url */ this.link_watchers.push((vars)=>{
                const url = href(vars);
                const rel = relTemplate(vars);
                if (url) holder.style.display = '';
                holder.setAttribute('href', url);
                holder.textContent = rel || url;
            });
        }
        if (download && link) {
            if (download === true) link.setAttribute('download', '');
            else this.link_watchers.push((vars)=>{
                link.setAttribute('download', download(vars));
            });
        }
        if (data.class) {
            const classNames = data.class.split(' ');
            classNames.forEach((className)=>{
                link.classList.add(className);
            });
        }
        return holder;
    }
    refreshWatchedFieldValues() {
        if (!this.watched_values) return;
        const watched = {};
        let changed = false;
        if (this.watched) Object.keys(this.watched).forEach((name)=>{
            const editor = this.jsoneditor.getEditor(this.watched[name]);
            const val = editor ? editor.getValue() : null;
            if (this.watched_values[name] !== val) changed = true;
            watched[name] = val;
        });
        watched.self = this.getValue();
        if (this.watched_values.self !== watched.self) changed = true;
        this.watched_values = watched;
        return changed;
    }
    getWatchedFieldValues() {
        return this.watched_values;
    }
    updateHeaderText() {
        if (this.header) {
            const headerText = this.getHeaderText();
            /* If the header has children, only update the text node's value */ if (this.header.children.length) {
                for(let i = 0; i < this.header.childNodes.length; i++)if (this.header.childNodes[i].nodeType === 3) {
                    this.header.childNodes[i].nodeValue = this.cleanText(headerText);
                    break;
                }
            /* Otherwise, just update the entire node */ } else if (window.DOMPurify) this.header.innerHTML = window.DOMPurify.sanitize(headerText);
            else this.header.textContent = this.cleanText(headerText);
        }
    }
    getHeaderText(titleOnly) {
        if (this.header_text) return this.header_text;
        else if (titleOnly) return this.translateProperty(this.schema.title);
        else return this.getTitle();
    }
    getPathDepth() {
        return this.path.split('.').length;
    }
    cleanText(txt) {
        /* Clean out HTML tags from txt */ const tmp = document.createElement('div');
        tmp.innerHTML = txt;
        return tmp.textContent || tmp.innerText;
    }
    onWatchedFieldChange() {
        let vars;
        if (this.header_template) {
            vars = (0, _utilitiesJs.extend)(this.getWatchedFieldValues(), {
                key: this.key,
                i: this.key,
                i0: this.key * 1,
                i1: this.key * 1 + 1,
                title: this.getTitle()
            });
            // object properties
            if (this.editors && Object.keys(this.editors).length) {
                vars.properties = {};
                Object.keys(this.editors).forEach((key)=>{
                    const editor = this.editors[key];
                    if (editor.schema && editor.schema.enum && editor.schema.options && editor.schema.options.enum_titles) {
                        const enumIndex = editor.schema.enum.indexOf(editor.value);
                        const enumTitle = editor.options.enum_titles[enumIndex];
                        vars.properties[key] = {
                            enumTitle
                        };
                    }
                });
            }
            const headerText = this.header_template(vars);
            if (headerText !== this.header_text) {
                this.header_text = headerText;
                this.updateHeaderText();
                this.notify();
            /* this.fireChangeHeaderEvent(); */ }
        }
        if (this.link_watchers.length) {
            vars = this.getWatchedFieldValues();
            for(let i = 0; i < this.link_watchers.length; i++)this.link_watchers[i](vars);
        }
    }
    setValue(value) {
        value = this.applyConstFilter(value);
        this.value = value;
    }
    applyConstFilter(value) {
        if (this.enforceConstEnabled && typeof this.schema.const !== 'undefined') value = this.schema.const;
        return value;
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        return this.value;
    }
    refreshValue() {}
    getChildEditors() {
        return false;
    }
    destroy() {
        this.unregister(this);
        if (this.watched) Object.values(this.watched).forEach((adjustedPath)=>this.jsoneditor.unwatch(adjustedPath, this.watch_listener));
        this.watched = null;
        this.watched_values = null;
        this.watch_listener = null;
        this.header_text = null;
        this.header_template = null;
        this.value = null;
        if (this.container && this.container.parentNode) this.container.parentNode.removeChild(this.container);
        this.container = null;
        this.jsoneditor = null;
        this.schema = null;
        this.path = null;
        this.key = null;
        this.parent = null;
    }
    isDefaultRequired() {
        return this.isRequired() || !!this.jsoneditor.options.use_default_values;
    }
    getDefault() {
        if (this.enforceConstEnabled && this.schema.const) return this.schema.const;
        if (typeof this.schema.default !== 'undefined') return this.schema.default;
        if (typeof this.schema.enum !== 'undefined') return this.schema.enum[0];
        let type = this.schema.type || this.schema.oneOf;
        if (type && Array.isArray(type)) type = type[0];
        if (type && typeof type === 'object') type = type.type;
        if (type && Array.isArray(type)) type = type[0];
        if (typeof type === 'string') {
            if (type === 'number') return this.isDefaultRequired() ? 0.0 : undefined;
            if (type === 'boolean') return this.isDefaultRequired() ? false : undefined;
            if (type === 'integer') return this.isDefaultRequired() ? 0 : undefined;
            if (type === 'string') return this.isDefaultRequired() ? '' : undefined;
            if (type === 'null') return null;
            if (type === 'object') return {};
            if (type === 'array') return [];
        }
        return undefined;
    }
    getTitle() {
        return this.translateProperty(this.schema.title || this.key || this.formname);
    }
    enable() {
        this.disabled = false;
    }
    disable() {
        this.disabled = true;
    }
    isEnabled() {
        return !this.disabled;
    }
    isRequired() {
        if (typeof this.schema.required === 'boolean') return this.schema.required;
        else if (this.parent && this.parent.schema && Array.isArray(this.parent.schema.required)) return this.parent.schema.required.includes(this.key);
        else if (this.jsoneditor.options.required_by_default) return true;
        else return false;
    }
    getDisplayText(arr) {
        const disp = [];
        const used = {};
        /* Determine how many times each attribute name is used. */ /* This helps us pick the most distinct display text for the schemas. */ arr.forEach((el)=>{
            if (el.title) {
                used[el.title] = used[el.title] || 0;
                used[el.title]++;
            }
            if (el.description) {
                used[el.description] = used[el.description] || 0;
                used[el.description]++;
            }
            if (el.format) {
                used[el.format] = used[el.format] || 0;
                used[el.format]++;
            }
            if (el.type) {
                used[el.type] = used[el.type] || 0;
                used[el.type]++;
            }
        });
        /* Determine display text for each element of the array */ arr.forEach((el)=>{
            let name;
            /* If it's a simple string */ if (typeof el === 'string') name = el;
            else if (el.title && used[el.title] <= 1) name = el.title;
            else if (el.format && used[el.format] <= 1) name = el.format;
            else if (el.type && used[el.type] <= 1) name = el.type;
            else if (el.description && used[el.description] <= 1) name = el.description;
            else if (el.title) name = el.title;
            else if (el.format) name = el.format;
            else if (el.type) name = el.type;
            else if (el.description) name = el.description;
            else if (JSON.stringify(el).length < 500) name = JSON.stringify(el);
            else name = 'type';
            disp.push(name);
        });
        /* Replace identical display text with "text 1", "text 2", etc. */ const inc = {};
        disp.forEach((name, i)=>{
            inc[name] = inc[name] || 0;
            inc[name]++;
            if (used[name] > 1) disp[i] = `${name} ${inc[name]}`;
        });
        return disp;
    }
    /* Replace space(s) with "-" to create valid id value */ getValidId(id) {
        id = id === undefined ? '' : id.toString();
        return id.replace(/\s+/g, '-');
    }
    setInputAttributes(inputAttribute, input) {
        if (this.schema.options && this.schema.options.inputAttributes) {
            const inputAttributes = this.schema.options.inputAttributes;
            const protectedAttributes = [
                'name',
                'type'
            ].concat(inputAttribute);
            const workingInput = input || this.input;
            Object.keys(inputAttributes).forEach((key)=>{
                if (!protectedAttributes.includes(key.toLowerCase())) workingInput.setAttribute(key, inputAttributes[key]);
            });
        }
    }
    setContainerAttributes() {
        if (this.schema.options && this.schema.options.containerAttributes) {
            const containerAttributes = this.schema.options.containerAttributes;
            const protectedAttributes = [
                'data-schemapath',
                'data-schematype',
                'data-schemaid'
            ];
            Object.keys(containerAttributes).forEach((key)=>{
                if (!protectedAttributes.includes(key.toLowerCase())) this.container.setAttribute(key, containerAttributes[key]);
            });
        }
    }
    expandCallbacks(scope, options) {
        const callback = this.defaults.callbacks[scope];
        Object.entries(options).forEach(([key, value])=>{
            if (value === Object(value)) options[key] = this.expandCallbacks(scope, value);
            else if (typeof value === 'string' && typeof callback === 'object' && typeof callback[value] === 'function') options[key] = callback[value].bind(null, this);
        });
        return options;
    }
    showValidationErrors(errors) {}
}

},{"./utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fV5Qc":[function(require,module,exports,__globalThis) {
/**
 * Taken from jQuery 2.1.3
 *
 * #### NOTE
 * Not plain objects is,
 * - Any object or value whose internal [[Class]] property is not "[object Object]"
 * - DOM nodes
 * - window
 *
 * @param {Object} obj - Variable name
 * @returns {Boolean}
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isPlainObject", ()=>isPlainObject);
parcelHelpers.export(exports, "deepCopy", ()=>deepCopy);
parcelHelpers.export(exports, "extend", ()=>extend);
parcelHelpers.export(exports, "trigger", ()=>trigger);
/**
 * Helper function to locate a shadowRoot parent if at all
 *
 * @param {Element} node - Node
 */ parcelHelpers.export(exports, "getShadowParent", ()=>getShadowParent);
/**
 * Helper function to check own property key
 *
 * @see https://eslint.org/docs/rules/no-prototype-builtins
 */ parcelHelpers.export(exports, "hasOwnProperty", ()=>hasOwnProperty);
parcelHelpers.export(exports, "isNumber", ()=>isNumber);
parcelHelpers.export(exports, "isInteger", ()=>isInteger);
/* This function generates a uuid.
https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
TODO: It will be probably better to move to: https://www.npmjs.com/package/uuid
*/ parcelHelpers.export(exports, "generateUUID", ()=>generateUUID);
parcelHelpers.export(exports, "isObject", ()=>isObject);
parcelHelpers.export(exports, "mergeDeep", ()=>mergeDeep);
parcelHelpers.export(exports, "overwriteExistingProperties", ()=>overwriteExistingProperties);
function isPlainObject(obj) {
    if (obj === null) return false;
    if (typeof obj !== 'object' || obj.nodeType || obj === obj.window) return false;
    if (obj.constructor && !hasOwnProperty(obj.constructor.prototype, 'isPrototypeOf')) return false;
    /* Most likely |obj| is a plain object, created by {} or constructed with new Object */ return true;
}
function deepCopy(target) {
    return isPlainObject(target) ? extend({}, target) : Array.isArray(target) ? target.map(deepCopy) : target;
}
function extend(destination, ...args) {
    args.forEach((source)=>{
        if (source) Object.keys(source).forEach((property)=>{
            if (source[property] && isPlainObject(source[property])) {
                if (!hasOwnProperty(destination, property)) destination[property] = {};
                extend(destination[property], source[property]);
            } else if (Array.isArray(source[property])) destination[property] = deepCopy(source[property]);
            else destination[property] = source[property];
        });
    });
    return destination;
}
function trigger(el, event) {
    const e = document.createEvent('HTMLEvents');
    e.initEvent(event, true, true);
    el.dispatchEvent(e);
}
function getShadowParent(node) {
    return node && (node.toString() === '[object ShadowRoot]' ? node : getShadowParent(node.parentNode));
}
function hasOwnProperty(obj, key) {
    return obj && Object.prototype.hasOwnProperty.call(obj, key);
}
// From https://github.com/angular/angular.js/blob/master/src/ng/directive/input.js
const NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
function isNumber(value) {
    if (typeof value === 'undefined' || value === null) return false;
    const match = value.match(NUMBER_REGEXP);
    const v = parseFloat(value);
    return match !== null && !isNaN(v) && isFinite(v);
}
const INTEGER_REGEXP = /^\s*(-|\+)?(\d+)\s*$/;
function isInteger(value) {
    if (typeof value === 'undefined' || value === null) return false;
    const match = value.match(INTEGER_REGEXP);
    const v = parseInt(value);
    return match !== null && !isNaN(v) && isFinite(v);
}
function generateUUID() {
    let d = new Date().getTime();
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') d += performance.now();
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c)=>{
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
    });
}
function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
}
function mergeDeep(target, ...sources) {
    if (!sources.length) return target;
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for(const key in source)if (isObject(source[key])) {
            if (!target[key]) Object.assign(target, {
                [key]: {}
            });
            mergeDeep(target[key], source[key]);
        } else Object.assign(target, {
            [key]: source[key]
        });
    }
    return mergeDeep(target, ...sources);
}
function overwriteExistingProperties(obj1, obj2) {
    Object.keys(obj2).forEach(function(key) {
        if (key in obj1) obj1[key] = obj2[key];
    });
    return obj1;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBzPE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArrayEditor", ()=>ArrayEditor);
// drag/drop array item to adjust order
// handler(fromIdx, toIdx, fromDom, toDom), opt={useTrigger}
// useTrigger=true: pressing ctrl to enable drag
parcelHelpers.export(exports, "supportDragDrop", ()=>supportDragDrop);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
var _arrayCssJs = require("./array.css.js");
var _arrayCssJsDefault = parcelHelpers.interopDefault(_arrayCssJs);
class ArrayEditor extends (0, _editorJs.AbstractEditor) {
    askConfirmation() {
        if (this.jsoneditor.options.prompt_before_delete === true) {
            if (window.confirm(this.translate('button_delete_node_warning')) === false) return false;
        }
        return true;
    }
    register() {
        super.register();
        if (this.rows) this.rows.forEach((row)=>row.register());
    }
    unregister() {
        super.unregister();
        if (this.rows) this.rows.forEach((row)=>row.unregister());
    }
    getNumColumns() {
        const info = this.getItemInfo(0);
        /* Tabs require extra horizontal space */ if (this.tabs_holder && this.schema.format !== 'tabs-top') return Math.max(Math.min(12, info.width + 2), 4);
        return info.width;
    }
    enable() {
        if (!this.always_disabled) {
            this.setAvailability(this, false);
            if (this.rows) this.rows.forEach((row)=>{
                row.enable();
                this.setAvailability(row, false);
            });
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.setAvailability(this, true);
        if (this.rows) this.rows.forEach((row)=>{
            row.disable(alwaysDisabled);
            this.setAvailability(row, true);
        });
        super.disable();
    }
    setAvailability(element, val) {
        if (element.add_row_button) element.add_row_button.disabled = val;
        if (element.remove_all_rows_button) element.remove_all_rows_button.disabled = val;
        if (element.delete_last_row_button) element.delete_last_row_button.disabled = val;
        if (element.copy_button) element.copy_button.disabled = val;
        if (element.delete_button) element.delete_button.disabled = val;
        if (element.moveup_button) element.moveup_button.disabled = val;
        if (element.movedown_button) element.movedown_button.disabled = val;
    }
    preBuild() {
        super.preBuild();
        this.rows = [];
        this.row_cache = [];
        this.hide_delete_buttons = this.options.disable_array_delete || this.jsoneditor.options.disable_array_delete;
        this.hide_delete_all_rows_buttons = this.hide_delete_buttons || this.options.disable_array_delete_all_rows || this.jsoneditor.options.disable_array_delete_all_rows;
        this.hide_delete_last_row_buttons = this.hide_delete_buttons || this.options.disable_array_delete_last_row || this.jsoneditor.options.disable_array_delete_last_row;
        this.hide_move_buttons = this.options.disable_array_reorder || this.jsoneditor.options.disable_array_reorder;
        this.hide_add_button = this.options.disable_array_add || this.jsoneditor.options.disable_array_add;
        this.show_copy_button = this.options.enable_array_copy || this.jsoneditor.options.enable_array_copy;
        this.array_controls_top = this.options.array_controls_top || this.jsoneditor.options.array_controls_top;
    }
    build() {
        if (!this.options.compact) {
            this.header = document.createElement('span');
            this.header.textContent = this.getTitle();
            this.title = this.theme.getHeader(this.header, this.getPathDepth());
            this.container.appendChild(this.title);
            if (this.options.infoText) {
                this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
                this.container.appendChild(this.infoButton);
            }
            this.title_controls = this.theme.getHeaderButtonHolder();
            this.title.appendChild(this.title_controls);
            if (this.schema.description) {
                this.description = this.theme.getDescription(this.translateProperty(this.schema.description));
                this.container.appendChild(this.description);
            }
            this.error_holder = document.createElement('div');
            this.container.appendChild(this.error_holder);
            if (this.schema.format === 'tabs-top') {
                this.controls = this.theme.getHeaderButtonHolder();
                this.title.appendChild(this.controls);
                this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.getItemTitle()));
                this.container.appendChild(this.tabs_holder);
                this.row_holder = this.theme.getTopTabContentHolder(this.tabs_holder);
                this.active_tab = null;
            } else if (this.schema.format === 'tabs') {
                this.controls = this.theme.getHeaderButtonHolder();
                this.title.appendChild(this.controls);
                this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.getItemTitle()));
                this.container.appendChild(this.tabs_holder);
                this.row_holder = this.theme.getTabContentHolder(this.tabs_holder);
                this.active_tab = null;
            } else {
                this.panel = this.theme.getIndentedPanel();
                this.container.appendChild(this.panel);
                this.row_holder = document.createElement('div');
                this.panel.appendChild(this.row_holder);
                this.controls = this.theme.getButtonHolder();
                if (this.array_controls_top) this.title.appendChild(this.controls);
                else this.panel.appendChild(this.controls);
            }
        } else {
            /* compact mode */ this.title = this.theme.getHeader('', this.getPathDepth());
            this.container.appendChild(this.title);
            this.panel = this.theme.getIndentedPanel();
            this.container.appendChild(this.panel);
            this.title_controls = this.theme.getHeaderButtonHolder();
            this.title.appendChild(this.title_controls);
            this.controls = this.theme.getHeaderButtonHolder();
            this.title.appendChild(this.controls);
            this.row_holder = document.createElement('div');
            this.panel.appendChild(this.row_holder);
        }
        /* Add controls */ this.addControls();
    }
    postBuild() {
        super.postBuild();
        if (this.schema.readOnly || this.schema.readonly) this.disable();
    }
    onChildEditorChange(editor, eventData) {
        this.refreshValue();
        this.refreshTabs(true);
        this.is_dirty = true;
        super.onChildEditorChange(editor, eventData);
    }
    getItemTitle() {
        if (!this.item_title) {
            if (this.schema.items && !Array.isArray(this.schema.items)) {
                const tmp = this.jsoneditor.expandRefs(this.schema.items);
                this.item_title = this.translateProperty(tmp.title) || this.translate('default_array_item_title');
            } else this.item_title = this.translate('default_array_item_title');
        }
        return this.cleanText(this.item_title);
    }
    getItemSchema(i) {
        if (Array.isArray(this.schema.items)) {
            if (i >= this.schema.items.length) {
                if (this.schema.additionalItems === true) return {};
                else if (this.schema.additionalItems) return (0, _utilitiesJs.extend)({}, this.schema.additionalItems);
            } else return (0, _utilitiesJs.extend)({}, this.schema.items[i]);
        } else if (this.schema.items) return (0, _utilitiesJs.extend)({}, this.schema.items);
        else return {};
    }
    getItemInfo(i) {
        let schema = this.getItemSchema(i);
        /* Check if it's cached */ this.item_info = this.item_info || {};
        const stringified = JSON.stringify(schema);
        if (typeof this.item_info[stringified] !== 'undefined') return this.item_info[stringified];
        /* Get the schema for this item */ schema = this.jsoneditor.expandRefs(schema);
        this.item_info[stringified] = {
            title: this.translateProperty(schema.title) || this.translate('default_array_item_title'),
            default: schema.default,
            width: 12,
            child_editors: schema.properties || schema.items
        };
        return this.item_info[stringified];
    }
    getElementEditor(i) {
        const itemInfo = this.getItemInfo(i);
        let schema = this.getItemSchema(i);
        schema = this.jsoneditor.expandRefs(schema);
        schema.title = `${itemInfo.title} ${i + 1}`;
        const editor = this.jsoneditor.getEditorClass(schema);
        let holder;
        if (this.tabs_holder) {
            if (this.schema.format === 'tabs-top') holder = this.theme.getTopTabContent();
            else holder = this.theme.getTabContent();
            holder.id = `${this.path}.${i}`;
        } else if (itemInfo.child_editors) holder = this.theme.getChildEditorHolder();
        else holder = this.theme.getIndentedPanel();
        this.row_holder.appendChild(holder);
        const ret = this.jsoneditor.createEditor(editor, {
            jsoneditor: this.jsoneditor,
            schema,
            container: holder,
            path: `${this.path}.${i}`,
            parent: this,
            required: true
        });
        ret.preBuild();
        ret.build();
        ret.postBuild();
        if (!ret.title_controls) {
            ret.array_controls = this.theme.getButtonHolder();
            holder.appendChild(ret.array_controls);
        }
        return ret;
    }
    checkParent(elem) {
        return elem && elem.parentNode;
    }
    destroy() {
        this.empty(true);
        if (this.checkParent(this.title)) this.title.parentNode.removeChild(this.title);
        if (this.checkParent(this.description)) this.description.parentNode.removeChild(this.description);
        if (this.checkParent(this.row_holder)) this.row_holder.parentNode.removeChild(this.row_holder);
        if (this.checkParent(this.controls)) this.controls.parentNode.removeChild(this.controls);
        if (this.checkParent(this.panel)) this.panel.parentNode.removeChild(this.panel);
        this.rows = this.row_cache = this.title = this.description = this.row_holder = this.panel = this.controls = null;
        super.destroy();
    }
    empty(hard) {
        if (this.rows === null) return;
        this.rows.forEach((row, i)=>{
            if (hard) {
                if (this.checkParent(row.tab)) row.tab.parentNode.removeChild(row.tab);
                this.destroyRow(row, true);
                this.row_cache[i] = null;
            }
            this.rows[i] = null;
        });
        if (hard) for(let j = this.rows.length; j < this.row_cache.length; j++){
            this.destroyRow(this.row_cache[j], true);
            this.row_cache[j] = null;
        }
        this.rows = [];
        if (hard) this.row_cache = [];
    }
    destroyRow(row, hard) {
        const holder = row.container;
        if (hard) {
            row.destroy();
            if (holder.parentNode) holder.parentNode.removeChild(holder);
            if (this.checkParent(row.tab)) row.tab.parentNode.removeChild(row.tab);
        } else {
            if (row.tab) row.tab.style.display = 'none';
            holder.style.display = 'none';
            row.unregister();
        }
    }
    getMax() {
        if (Array.isArray(this.schema.items) && this.schema.additionalItems === false) return Math.min(this.schema.items.length, this.schema.maxItems || Infinity);
        return this.schema.maxItems || Infinity;
    }
    refreshTabs(refreshHeaders) {
        this.rows.forEach((row)=>{
            if (!row.tab) return;
            if (refreshHeaders) row.tab_text.textContent = row.getHeaderText();
            else if (row.tab === this.active_tab) this.theme.markTabActive(row);
            else this.theme.markTabInactive(row);
        });
    }
    ensureArraySize(value) {
        if (!Array.isArray(value)) value = [
            value
        ];
        if (this.schema.minItems) while(value.length < this.schema.minItems)value.push(this.getItemInfo(value.length).default);
        if (this.getMax() && value.length > this.getMax()) value = value.slice(0, this.getMax());
        return value;
    }
    setValue(value = [], initial) {
        value = this.applyConstFilter(value);
        /* Make sure value has between minItems and maxItems items in it */ value = this.ensureArraySize(value);
        const serialized = JSON.stringify(value);
        if (serialized === this.serialized) {
            if (initial) this.refreshValue(initial);
            return;
        }
        value.forEach((val, i)=>{
            if (this.rows[i]) /* TODO: don't set the row's value if it hasn't changed */ this.rows[i].setValue(val, initial);
            else if (this.row_cache[i]) {
                this.rows[i] = this.row_cache[i];
                this.rows[i].setValue(val, initial);
                this.rows[i].container.style.display = '';
                if (this.rows[i].tab) this.rows[i].tab.style.display = '';
                this.rows[i].register();
                this.jsoneditor.trigger('addRow', this.rows[i]);
            } else {
                const editor = this.addRow(val, initial);
                this.jsoneditor.trigger('addRow', editor);
            }
        });
        for(let j = value.length; j < this.rows.length; j++){
            this.destroyRow(this.rows[j]);
            this.rows[j] = null;
        }
        this.rows = this.rows.slice(0, value.length);
        /* Set the active tab */ const row = this.rows.find((row)=>row.tab === this.active_tab);
        let newActiveTab = typeof row !== 'undefined' ? row.tab : null;
        if (!newActiveTab && this.rows.length) newActiveTab = this.rows[0].tab;
        this.active_tab = newActiveTab;
        this.refreshValue(initial);
        this.refreshTabs(true);
        this.refreshTabs();
        this.onChange();
    /* TODO: sortable */ }
    setButtonState(element, display) {
        const buttonStateMode = this.options.button_state_mode || this.jsoneditor.options.button_state_mode;
        switch(buttonStateMode){
            case 1:
                element.style.display = display ? '' : 'none';
                break;
            case 2:
                element.disabled = !display;
                break;
            default:
                element.style.display = display ? '' : 'none';
        }
    }
    setupButtons(minItems) {
        const controlsNeeded = [];
        if (!this.value.length) {
            this.setButtonState(this.delete_last_row_button, false);
            this.setButtonState(this.remove_all_rows_button, false);
        } else if (this.value.length === 1) {
            this.setButtonState(this.remove_all_rows_button, false);
            /* If there are minItems items in the array, or configured to hide the delete_last_row button, hide the delete button beneath the rows */ const display = !(minItems || this.hide_delete_last_row_buttons);
            this.setButtonState(this.delete_last_row_button, display);
            controlsNeeded.push(display);
        } else {
            const display1 = !(minItems || this.hide_delete_last_row_buttons);
            this.setButtonState(this.delete_last_row_button, display1);
            controlsNeeded.push(display1);
            const display2 = !(minItems || this.hide_delete_all_rows_buttons);
            this.setButtonState(this.remove_all_rows_button, display2);
            controlsNeeded.push(display2);
        }
        /* If there are maxItems in the array, hide the add button beneath the rows */ const display = !(this.getMax() && this.getMax() <= this.rows.length || this.hide_add_button);
        this.setButtonState(this.add_row_button, display);
        controlsNeeded.push(display);
        return controlsNeeded.some((e)=>e);
    }
    refreshValue(force) {
        const oldi = this.value ? this.value.length : 0;
        /* Get the value for this editor */ this.value = this.rows.map((editor)=>editor.getValue());
        if (oldi !== this.value.length || force) {
            /* If we currently have minItems items in the array */ const minItems = this.schema.minItems && this.schema.minItems >= this.rows.length;
            this.rows.forEach((editor, i)=>{
                /* Hide the move down button for the last row */ if (editor.movedown_button) {
                    const display = i !== this.rows.length - 1;
                    this.setButtonState(editor.movedown_button, display);
                }
                /* Hide the delete button if we have minItems items */ if (editor.delete_button) this.setButtonState(editor.delete_button, !minItems);
                /* Get the value for this editor */ this.value[i] = editor.getValue();
            });
            if (this.setupButtons(minItems) && !this.collapsed) this.controls.style.display = 'inline-block';
            else this.controls.style.display = 'none';
        }
        this.serialized = JSON.stringify(this.value);
    }
    addRow(value, initial) {
        const i = this.rows.length;
        this.rows[i] = this.getElementEditor(i);
        this.row_cache[i] = this.rows[i];
        if (this.tabs_holder) {
            this.rows[i].tab_text = document.createElement('span');
            this.rows[i].tab_text.textContent = this.rows[i].getHeaderText();
            if (this.schema.format === 'tabs-top') {
                this.rows[i].tab = this.theme.getTopTab(this.rows[i].tab_text, this.getValidId(this.rows[i].path));
                this.theme.addTopTab(this.tabs_holder, this.rows[i].tab);
            } else {
                this.rows[i].tab = this.theme.getTab(this.rows[i].tab_text, this.getValidId(this.rows[i].path));
                this.theme.addTab(this.tabs_holder, this.rows[i].tab);
            }
            this.rows[i].tab.addEventListener('click', (e)=>{
                this.active_tab = this.rows[i].tab;
                this.refreshTabs();
                e.preventDefault();
                e.stopPropagation();
            });
            this._supportDragDrop(this.rows[i].tab);
        } else this._supportDragDrop(this.rows[i].container, true);
        const controlsHolder = this.rows[i].title_controls || this.rows[i].array_controls;
        /* Buttons to delete row, move row up, and move row down */ if (!this.hide_delete_buttons) this.rows[i].delete_button = this._createDeleteButton(i, controlsHolder);
        /* Button to copy an array element and add it as last element */ if (this.show_copy_button) this.rows[i].copy_button = this._createCopyButton(i, controlsHolder);
        if (i && !this.hide_move_buttons) this.rows[i].moveup_button = this._createMoveUpButton(i, controlsHolder);
        if (!this.hide_move_buttons) this.rows[i].movedown_button = this._createMoveDownButton(i, controlsHolder);
        if (typeof value !== 'undefined') this.rows[i].setValue(value, initial);
        this.refreshTabs();
        return this.rows[i];
    }
    _createDeleteButton(i, holder) {
        const button = this.getButton(this.getItemTitle(), 'delete', 'button_delete_row_title', [
            this.getItemTitle()
        ]);
        button.classList.add('delete', 'json-editor-btntype-delete');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const i = e.currentTarget.getAttribute('data-i') * 1;
            const newval = this.getValue().filter((row, j)=>j !== i);
            let newActiveTab = null;
            const editor = this.rows[i];
            const editorValue = editor.getValue();
            this.setValue(newval);
            if (this.rows[i]) newActiveTab = this.rows[i].tab;
            else if (this.rows[i - 1]) newActiveTab = this.rows[i - 1].tab;
            if (newActiveTab) {
                this.active_tab = newActiveTab;
                this.refreshTabs();
            }
            this.onChange(true);
            this.jsoneditor.trigger('deleteRow', editorValue);
        });
        if (holder) holder.appendChild(button);
        return button;
    }
    _createCopyButton(i, holder) {
        const button = this.getButton(this.getItemTitle(), 'copy', 'button_copy_row_title', [
            this.getItemTitle()
        ]);
        const schema = this.schema;
        button.classList.add('copy', 'json-editor-btntype-copy');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            const value = this.getValue();
            e.preventDefault();
            e.stopPropagation();
            const i = e.currentTarget.getAttribute('data-i') * 1;
            value.forEach((row, j)=>{
                if (j === i) {
                    /* Force generation of new UUID if the item has been cloned. */ if (schema.items.type === 'string' && schema.items.format === 'uuid') row = (0, _utilitiesJs.generateUUID)();
                    else if (schema.items.type === 'object' && schema.items.properties) {
                        for (const key of Object.keys(row))if (schema.items.properties && schema.items.properties[key] && schema.items.properties[key].format === 'uuid') row[key] = (0, _utilitiesJs.generateUUID)();
                    }
                    value.push(row);
                }
            });
            this.setValue(value);
            this.refreshValue(true);
            this.onChange(true);
            this.jsoneditor.trigger('copyRow', this.rows[i - 1]);
        });
        holder.appendChild(button);
        return button;
    }
    _createMoveUpButton(i, holder) {
        const button = this.getButton('', this.schema.format === 'tabs-top' ? 'moveleft' : 'moveup', 'button_move_up_title');
        button.classList.add('moveup', 'json-editor-btntype-move');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const i = e.currentTarget.getAttribute('data-i') * 1;
            if (i <= 0) return;
            const rows = this.getValue();
            const tmp = rows[i - 1];
            rows[i - 1] = rows[i];
            rows[i] = tmp;
            this.setValue(rows);
            this.active_tab = this.rows[i - 1].tab;
            this.refreshTabs();
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[i - 1]);
        });
        if (holder) holder.appendChild(button);
        return button;
    }
    _createMoveDownButton(i, holder) {
        const button = this.getButton('', this.schema.format === 'tabs-top' ? 'moveright' : 'movedown', 'button_move_down_title');
        button.classList.add('movedown', 'json-editor-btntype-move');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const i = e.currentTarget.getAttribute('data-i') * 1;
            const rows = this.getValue();
            if (i >= rows.length - 1) return;
            const tmp = rows[i + 1];
            rows[i + 1] = rows[i];
            rows[i] = tmp;
            this.setValue(rows);
            this.active_tab = this.rows[i + 1].tab;
            this.refreshTabs();
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[i + 1]);
        });
        if (holder) holder.appendChild(button);
        return button;
    }
    _supportDragDrop(tab, useTrigger) {
        supportDragDrop(tab, (i, j)=>{
            const rows = this.getValue();
            const tmp = rows[i];
            rows.splice(i, 1);
            rows.splice(j, 0, tmp);
            this.setValue(rows);
            this.active_tab = this.rows[j].tab;
            this.refreshTabs();
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[j]);
        }, {
            useTrigger
        });
    }
    addControls() {
        this.collapsed = false;
        this.toggle_button = this._createToggleButton();
        /* If it should start collapsed */ if (this.options.collapsed) (0, _utilitiesJs.trigger)(this.toggle_button, 'click');
        /* Collapse button disabled */ if (this.schema.options && typeof this.schema.options.disable_collapse !== 'undefined') {
            if (this.schema.options.disable_collapse) this.toggle_button.style.display = 'none';
        } else if (this.jsoneditor.options.disable_collapse) this.toggle_button.style.display = 'none';
        /* Add "new row" and "delete last" buttons below editor */ this.add_row_button = this._createAddRowButton();
        this.delete_last_row_button = this._createDeleteLastRowButton();
        this.remove_all_rows_button = this._createRemoveAllRowsButton();
        if (this.tabs) {
            this.add_row_button.classList.add('je-array-control-btn');
            this.delete_last_row_button.classList.add('je-array-control-btn');
            this.remove_all_rows_button.classList.add('je-array-control-btn');
        }
    }
    _createToggleButton() {
        const button = this.getButton('', 'collapse', 'button_collapse');
        button.classList.add('json-editor-btntype-toggle');
        this.title.insertBefore(button, this.title.childNodes[0]);
        const rowHolderDisplay = this.row_holder.style.display;
        const controlsDisplay = this.controls.style.display;
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (this.panel) this.setButtonState(this.panel, this.collapsed);
            if (this.tabs_holder) this.setButtonState(this.tabs_holder, this.collapsed);
            if (this.collapsed) {
                this.collapsed = false;
                this.row_holder.style.display = rowHolderDisplay;
                this.controls.style.display = controlsDisplay;
                this.setButtonText(e.currentTarget, '', 'collapse', 'button_collapse');
            } else {
                this.collapsed = true;
                this.row_holder.style.display = 'none';
                this.controls.style.display = 'none';
                this.setButtonText(e.currentTarget, '', 'expand', 'button_expand');
            }
        });
        return button;
    }
    _createAddRowButton() {
        const button = this.getButton(this.getItemTitle(), 'add', 'button_add_row_title', [
            this.getItemTitle()
        ]);
        button.classList.add('json-editor-btntype-add');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const i = this.rows.length;
            let editor;
            if (this.row_cache[i]) {
                editor = this.rows[i] = this.row_cache[i];
                this.rows[i].setValue(this.rows[i].getDefault(), true);
                // override cached value, so optional properties are not checked.
                if (typeof this.rows[i].deactivateNonRequiredProperties === 'function') this.rows[i].deactivateNonRequiredProperties(true);
                this.rows[i].container.style.display = '';
                if (this.rows[i].tab) this.rows[i].tab.style.display = '';
                this.rows[i].register();
            } else editor = this.addRow();
            this.active_tab = this.rows[i].tab;
            this.refreshTabs();
            this.refreshValue();
            this.onChange(true);
            this.jsoneditor.trigger('addRow', editor);
        });
        this.controls.appendChild(button);
        return button;
    }
    _createDeleteLastRowButton() {
        const button = this.getButton('button_delete_last', 'subtract', 'button_delete_last_title', [
            this.getItemTitle()
        ]);
        button.classList.add('json-editor-btntype-deletelast');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const rows = this.getValue();
            let newActiveTab = null;
            const editorValue = rows.pop();
            this.setValue(rows);
            if (this.rows[this.rows.length - 1]) newActiveTab = this.rows[this.rows.length - 1].tab;
            if (newActiveTab) {
                this.active_tab = newActiveTab;
                this.refreshTabs();
            }
            this.onChange(true);
            this.jsoneditor.trigger('deleteRow', editorValue);
        });
        this.controls.appendChild(button);
        return button;
    }
    _createRemoveAllRowsButton() {
        const button = this.getButton('button_delete_all', 'delete', 'button_delete_all_title');
        button.classList.add('json-editor-btntype-deleteall');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const values = this.getValue();
            this.empty(true);
            this.setValue([]);
            this.onChange(true);
            this.jsoneditor.trigger('deleteAllRows', values);
        });
        this.controls.appendChild(button);
        return button;
    }
    showValidationErrors(errors) {
        /* Get all the errors that pertain to this editor */ const myErrors = [];
        const otherErrors = [];
        errors.forEach((error)=>{
            if (error.path === this.path) myErrors.push(error);
            else otherErrors.push(error);
        });
        /* Show errors for this editor */ if (this.error_holder) {
            if (myErrors.length) {
                this.error_holder.innerHTML = '';
                this.error_holder.style.display = '';
                myErrors.forEach((error)=>{
                    this.error_holder.appendChild(this.theme.getErrorMessage(error.message));
                });
            /* Hide error area */ } else this.error_holder.style.display = 'none';
        }
        /* Show errors for child editors */ this.rows.forEach((row)=>row.showValidationErrors(otherErrors));
    }
}
ArrayEditor.rules = (0, _arrayCssJsDefault.default);
function supportDragDrop(tab, handler, opt = {}) {
    if (opt.useTrigger) tab.addEventListener('mousedown', (e)=>{
        if (e.ctrlKey) {
            // window.console.log('enable drag')
            tab.draggable = true;
            const fn = (e)=>{
                tab.draggable = false;
                // window.console.log('disable drag')
                document.removeEventListener('dragend', fn);
                document.removeEventListener('mouseup', fn);
            };
            document.addEventListener('dragend', fn);
            document.addEventListener('mouseup', fn);
        }
    });
    else tab.draggable = true;
    tab.addEventListener('dragstart', (e)=>{
        window.curDrag = tab;
    });
    tab.addEventListener('dragover', (e)=>{
        if (window.curDrag === null || window.curDrag === tab || window.curDrag.parentElement !== tab.parentElement) e.dataTransfer.dropEffect = 'none';
        else e.dataTransfer.dropEffect = 'move';
        e.preventDefault();
    });
    tab.addEventListener('drop', (e)=>{
        e.preventDefault();
        e.stopPropagation();
        if (window.curDrag === null || window.curDrag === tab || window.curDrag.parentElement !== tab.parentElement) return;
        const getPos = (item)=>{
            let i = 0;
            let a = item.parentElement.firstElementChild;
            while(a !== item && a !== null){
                a = a.nextSibling;
                ++i;
            }
            return i;
        };
        const i = getPos(window.curDrag);
        const j = getPos(tab);
        handler(i, j, window.curDrag, tab);
        window.curDrag = null;
    });
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","./array.css.js":"3aj2I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3aj2I":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".json-editor-btntype-toggle": "margin:0%2010px%200%200",
    ".je-array-control-btn": "width:100%25;text-align:left;margin-bottom:3px"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pfTe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArrayChoicesEditor", ()=>ArrayChoicesEditor);
var _multiselectJs = require("../multiselect.js");
var _utilitiesJs = require("../../utilities.js");
class ArrayChoicesEditor extends (0, _multiselectJs.MultiSelectEditor) {
    setValue(value, initial) {
        if (this.choices_instance) {
            value = this.applyConstFilter(value);
            /* Make sure we are dealing with an array of strings so we can check for strict equality */ value = [].concat(value).map((e)=>`${e}`);
            this.updateValue(value);
            /* Sets this.value to sanitized value */ this.choices_instance.removeActiveItems();
            /* Remove existing selection */ this.choices_instance.setChoiceByValue(this.value);
            /* Set new selection */ this.onChange(true);
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        if (window.Choices && !this.choices_instance) {
            /* Get options, either global options from "this.defaults.options.choices" or */ /* single property options from schema "options.choices" */ const options = this.expandCallbacks('choices', (0, _utilitiesJs.extend)({}, {
                removeItems: true,
                removeItemButton: true
            }, this.defaults.options.choices || {}, this.options.choices || {}, {
                addItems: true,
                editItems: false,
                duplicateItemsAllowed: false
            }));
            /* New items are allowed if option "addItems" is true and items type is "string" */ /* this.newEnumAllowed = options.addItems = !!options.addItems && this.schema.items && this.schema.items.type == 'string'; */ /* Choices doesn't support adding new items to select type input */ this.newEnumAllowed = false;
            this.choices_instance = new window.Choices(this.input, options);
            /* Remove change handler set in parent class (src/multiselect.js) */ this.control.removeEventListener('change', this.multiselectChangeHandler);
            /* Create a new change handler */ this.multiselectChangeHandler = (e)=>{
                const value = this.choices_instance.getValue(true);
                this.updateValue(value);
                this.onChange(true);
            };
            this.control.addEventListener('change', this.multiselectChangeHandler, false);
        }
        super.afterInputReady();
    }
    updateValue(value) {
        value = [].concat(value);
        let changed = false;
        const newValue = [];
        for(let i = 0; i < value.length; i++){
            if (!this.select_values[`${value[i]}`]) {
                changed = true;
                if (this.newEnumAllowed) {
                    if (!this.addNewOption(value[i])) continue;
                } else continue;
            }
            const sanitized = this.sanitize(this.select_values[value[i]]);
            newValue.push(sanitized);
            if (sanitized !== value[i]) changed = true;
        }
        this.value = newValue;
        return changed;
    }
    addNewOption(value) {
        /* Add new value and label */ this.option_keys.push(`${value}`);
        this.option_titles.push(`${value}`);
        this.select_values[`${value}`] = value;
        /* Update Schema enum to prevent triggering "Value must be one of the enumerated values" */ this.schema.items.enum.push(value);
        /* Add new value and label to choices */ this.choices_instance.setChoices([
            {
                value: `${value}`,
                label: `${value}`
            }
        ], 'value', 'label', false);
        return true;
    }
    enable() {
        if (!this.always_disabled && this.choices_instance) this.choices_instance.enable();
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.choices_instance) this.choices_instance.disable();
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.choices_instance) {
            this.choices_instance.destroy();
            this.choices_instance = null;
        }
        super.destroy();
    }
}

},{"../multiselect.js":"eOdnb","../../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eOdnb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MultiSelectEditor", ()=>MultiSelectEditor);
var _editorJs = require("../editor.js");
class MultiSelectEditor extends (0, _editorJs.AbstractEditor) {
    onInputChange() {
        this.value = this.input.value;
        this.onChange(true);
    }
    register() {
        super.register();
        if (!this.input) return;
        if (this.jsoneditor.options.use_name_attributes) this.input.setAttribute('name', this.formname);
    }
    unregister() {
        super.unregister();
        if (!this.input) return;
        this.input.removeAttribute('name');
    }
    getNumColumns() {
        let longestText = this.getTitle().length;
        Object.keys(this.select_values).forEach((i)=>longestText = Math.max(longestText, `${this.select_values[i]}`.length + 4));
        return Math.min(12, Math.max(longestText / 7, 2));
    }
    preBuild() {
        super.preBuild();
        this.select_options = {};
        this.select_values = {};
        this.option_titles = [];
        this.option_keys = [];
        this.option_enum = [];
        let i;
        const itemsSchema = this.jsoneditor.expandRefs(this.schema.items || {});
        const e = itemsSchema.enum || [];
        const oe = itemsSchema.options ? itemsSchema.options.enum || [] : [];
        /* fallback to enum_titles, when options.enum is not present */ const t = itemsSchema.options ? itemsSchema.options.enum_titles || [] : [];
        for(i = 0; i < e.length; i++){
            /* If the sanitized value is different from the enum value, don't include it */ if (this.sanitize(e[i]) !== e[i]) continue;
            const d = oe[i] || {};
            if (!('title' in d)) d.title = `${t[i] || e[i]}`;
            this.option_keys.push(`${e[i]}`);
            this.option_enum.push(d);
            this.select_values[`${e[i]}`] = e[i];
        }
    }
    build() {
        let i;
        if (!this.options.compact) this.header = this.label = this.theme.getLabelLike(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.compact) this.container.classList.add('compact');
        if (!this.schema.format && this.option_keys.length < 8 || this.schema.format === 'checkbox') {
            this.input_type = 'checkboxes';
            this.inputs = {};
            this.controls = {};
            for(i = 0; i < this.option_keys.length; i++){
                const id = this.formname + i.toString();
                this.inputs[this.option_keys[i]] = this.theme.getCheckbox();
                this.inputs[this.option_keys[i]].id = id;
                this.select_options[this.option_keys[i]] = this.inputs[this.option_keys[i]];
                const label = this.theme.getCheckboxLabel(this.option_enum[i].title);
                label.htmlFor = id;
                if (this.option_enum[i].infoText) {
                    const infoButton = this.theme.getInfoButton(this.translateProperty(this.option_enum[i].infoText));
                    label.appendChild(infoButton);
                }
                this.controls['_' + this.option_keys[i]] = this.theme.getFormControl(label, this.inputs[this.option_keys[i]]);
            }
            this.control = this.theme.getMultiCheckboxHolder(this.controls, this.label, this.description, this.infoButton);
            this.inputs.controlgroup = this.inputs.controls = this.control /* Enable error messages for checkboxes */ ;
        } else {
            if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
            this.input_type = 'select';
            this.input = this.theme.getSelectInput(this.option_keys, true);
            this.theme.setSelectOptions(this.input, this.option_keys, this.option_enum.map((e)=>e.title));
            /* this.input.multiple = true; */ this.input.setAttribute('multiple', 'multiple');
            this.input.size = Math.min(10, this.option_keys.length);
            for(i = 0; i < this.option_keys.length; i++)this.select_options[this.option_keys[i]] = this.input.children[i];
            this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton, this.formname);
        }
        if (this.schema.readOnly || this.schema.readonly) this.disable(true);
        this.container.appendChild(this.control);
        this.multiselectChangeHandler = (e)=>{
            const newValue = [];
            for(i = 0; i < this.option_keys.length; i++)if (this.select_options[this.option_keys[i]] && (this.select_options[this.option_keys[i]].selected || this.select_options[this.option_keys[i]].checked)) newValue.push(this.select_values[this.option_keys[i]]);
            this.updateValue(newValue);
            this.onChange(true);
        };
        this.control.addEventListener('change', this.multiselectChangeHandler, false);
        /* Any special formatting that needs to happen after the input is added to the dom */ window.requestAnimationFrame(()=>{
            this.afterInputReady();
        });
    }
    postBuild() {
        super.postBuild();
    /* this.theme.afterInputReady(this.input || this.inputs); */ }
    afterInputReady() {
        this.theme.afterInputReady(this.input || this.inputs);
    }
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        value = value || [];
        if (!Array.isArray(value)) value = [
            value
        ];
        /* Make sure we are dealing with an array of strings so we can check for strict equality */ value = value.map((e)=>`${e}`);
        /* Update selected status of options */ Object.keys(this.select_options).forEach((i)=>{
            this.select_options[i][this.input_type === 'select' ? 'selected' : 'checked'] = value.includes(i);
        });
        this.updateValue(value);
        this.onChange(true);
    }
    removeValue(value) {
        /* Remove from existing value(s) */ value = [].concat(value);
        this.setValue(this.getValue().filter((item)=>!value.includes(item)));
    }
    addValue(value) {
        /* Add to existing value(s) */ this.setValue(this.getValue().concat(value));
    }
    updateValue(value) {
        let changed = false;
        const newValue = [];
        for(let i = 0; i < value.length; i++){
            if (!this.select_options[`${value[i]}`]) {
                changed = true;
                continue;
            }
            const sanitized = this.sanitize(this.select_values[value[i]]);
            newValue.push(sanitized);
            if (sanitized !== value[i]) changed = true;
        }
        this.value = newValue;
        return changed;
    }
    sanitize(value) {
        if (this.schema.items.type === 'boolean') return !!value;
        else if (this.schema.items.type === 'number') return 1 * value || 0;
        else if (this.schema.items.type === 'integer') return Math.floor(value * 1 || 0);
        return `${value}`;
    }
    enable() {
        if (!this.always_disabled) {
            if (this.input) this.input.disabled = false;
            else if (this.inputs) Object.keys(this.inputs).forEach((i)=>this.inputs[i].disabled = false);
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        if (this.input) this.input.disabled = true;
        else if (this.inputs) Object.keys(this.inputs).forEach((i)=>this.inputs[i].disabled = true);
        super.disable();
    }
    destroy() {
        super.destroy();
    }
    escapeRegExp(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    showValidationErrors(errors) {
        const regexPath = new RegExp(`^${this.escapeRegExp(this.path)}(\\.\\d+)?$`);
        const addMessage = (messages, error)=>{
            if (error.path.match(regexPath)) messages.push(error.message);
            return messages;
        };
        const messages = errors.reduce(addMessage, []);
        if (messages.length) this.theme.addInputError(this.input || this.inputs, `${messages.join('. ')}.`);
        else this.theme.removeInputError(this.input || this.inputs);
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7uDjd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArraySelect2Editor", ()=>ArraySelect2Editor);
var _multiselectJs = require("../multiselect.js");
var _utilitiesJs = require("../../utilities.js");
class ArraySelect2Editor extends (0, _multiselectJs.MultiSelectEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        if (this.select2_instance) {
            /* Make sure we are dealing with an array of strings so we can check for strict equality */ value = [].concat(value).map((e)=>`${e}`);
            this.updateValue(value);
            /* Sets this.value to sanitized value */ if (this.select2v4) this.select2_instance.val(this.value).change();
            else this.select2_instance.select2('val', this.value);
            this.onChange(true);
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        let options;
        if (window.jQuery && window.jQuery.fn && window.jQuery.fn.select2 && !this.select2_instance) {
            /* Get options, either global options from "this.defaults.options.select2" or */ /* single property options from schema "options.select2" */ options = this.expandCallbacks('select2', (0, _utilitiesJs.extend)({}, {
                tags: true,
                width: '100%'
            }, this.defaults.options.select2 || {}, this.options.select2 || {}));
            /* New items are allowed if option "tags" is true and items type is "string" */ this.newEnumAllowed = options.tags = !!options.tags && this.schema.items && this.schema.items.type === 'string';
            this.select2_instance = window.jQuery(this.input).select2(options);
            this.select2v4 = (0, _utilitiesJs.hasOwnProperty)(this.select2_instance.select2, 'amd');
            this.selectChangeHandler = ()=>{
                const value = this.select2v4 ? this.select2_instance.val() : this.select2_instance.select2('val');
                this.updateValue(value);
                this.onChange(true);
            };
            /* Add event handler. */ /* Note: Must use the "on()" method and not addEventListener() */ this.select2_instance.on('select2-blur', this.selectChangeHandler);
            this.select2_instance.on('change', this.selectChangeHandler);
        }
        super.afterInputReady();
    }
    updateValue(value) {
        value = [].concat(value);
        let changed = false;
        const newValue = [];
        for(let i = 0; i < value.length; i++){
            /*      if (!this.select_options[value[i]+'']) { */ if (!this.select_values[`${value[i]}`]) {
                changed = true;
                if (this.newEnumAllowed) {
                    if (!this.addNewOption(value[i])) continue;
                } else continue;
            }
            const sanitized = this.sanitize(this.select_values[value[i]]);
            newValue.push(sanitized);
            if (sanitized !== value[i]) changed = true;
        }
        this.value = newValue;
        return changed;
    }
    addNewOption(value) {
        /* Add new value and label */ this.option_keys.push(`${value}`);
        this.option_titles.push(`${value}`);
        this.select_values[`${value}`] = value;
        /* Update Schema enum to prevent triggering "Value must be one of the enumerated values" */ this.schema.items.enum.push(value);
        const optionTag = this.input.querySelector(`option[value="${value}"]`);
        /* Remove data attribute to make option tag permanent. (user input) */ if (optionTag) optionTag.removeAttribute('data-select2-tag');
        else this.input.appendChild(new Option(value, value, false, false)).trigger('change');
        return true;
    }
    enable() {
        if (!this.always_disabled && this.select2_instance) {
            if (this.select2v4) this.select2_instance.prop('disabled', false);
            else this.select2_instance.select2('enable', true);
        }
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.select2_instance) {
            if (this.select2v4) this.select2_instance.prop('disabled', true);
            else this.select2_instance.select2('enable', false);
        }
        super.disable();
    }
    destroy() {
        if (this.select2_instance) {
            this.select2_instance.select2('destroy');
            this.select2_instance = null;
        }
        super.destroy();
    }
}

},{"../multiselect.js":"eOdnb","../../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Lub0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ArraySelectizeEditor", ()=>ArraySelectizeEditor);
var _multiselectJs = require("../multiselect.js");
var _utilitiesJs = require("../../utilities.js");
class ArraySelectizeEditor extends (0, _multiselectJs.MultiSelectEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        if (this.selectize_instance) {
            /* Make sure we are dealing with an array of strings so we can check for strict equality */ value = [].concat(value).map((e)=>`${e}`);
            this.updateValue(value);
            /* Sets this.value to sanitized value */ this.selectize_instance.setValue(this.value);
            this.onChange(true);
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        let options;
        if (window.jQuery && window.jQuery.fn && window.jQuery.fn.selectize && !this.selectize_instance) {
            /* Get options, either global options from "this.defaults.options.selectize" or */ /* single property options from schema "options.selectize" */ options = this.expandCallbacks('selectize', (0, _utilitiesJs.extend)({}, {
                plugins: [
                    'remove_button'
                ],
                delimiter: false,
                createOnBlur: true,
                create: true
            }, this.defaults.options.selectize || {}, this.options.selectize || {}));
            /* New items are allowed if option "create" is true and items type is "string" */ this.newEnumAllowed = options.create = !!options.create && this.schema.items && this.schema.items.type === 'string';
            this.selectize_instance = window.jQuery(this.input).selectize(options)[0].selectize;
            /* Remove change handler set in parent class (src/multiselect.js) */ this.control.removeEventListener('change', this.multiselectChangeHandler);
            /* Create a new change handler */ this.multiselectChangeHandler = (e)=>{
                const value = this.selectize_instance.getValue();
                this.updateValue(value);
                this.onChange(true);
            };
            /* Add new event handler. */ /* Note: Must use the "on()" method and not addEventListener() */ this.selectize_instance.on('change', this.multiselectChangeHandler);
            const label = this.theme.getHiddenLabel(this.formname);
            this.input.setAttribute('id', this.formname + '-hidden-input');
            label.setAttribute('for', this.formname + '-hidden-input');
            this.input.parentNode.insertBefore(label, this.input);
            const selectizeControl = this.selectize_instance.$control[0];
            if (selectizeControl) {
                const selectizeLabel = this.theme.getHiddenLabel(this.formname);
                selectizeLabel.setAttribute('for', this.formname + '-selectized');
                selectizeControl.appendChild(selectizeLabel);
            }
        }
        super.afterInputReady();
    }
    updateValue(value) {
        value = [].concat(value);
        let changed = false;
        const newValue = [];
        for(let i = 0; i < value.length; i++){
            /*      if (!this.select_options[value[i]+'']) { */ if (!this.select_values[`${value[i]}`]) {
                changed = true;
                if (this.newEnumAllowed) {
                    if (!this.addNewOption(value[i])) continue;
                } else continue;
            }
            const sanitized = this.sanitize(this.select_values[value[i]]);
            newValue.push(sanitized);
            if (sanitized !== value[i]) changed = true;
        }
        this.value = newValue;
        return changed;
    }
    addNewOption(value) {
        /* Add new value and label */ this.option_keys.push(`${value}`);
        this.option_titles.push(`${value}`);
        this.select_values[`${value}`] = value;
        /* Add new value and label to selectize */ this.selectize_instance.addOption({
            text: value,
            value
        });
        return true;
    }
    enable() {
        if (!this.always_disabled && this.selectize_instance) this.selectize_instance.unlock();
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.selectize_instance) this.selectize_instance.lock();
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.selectize_instance) {
            this.selectize_instance.destroy();
            this.selectize_instance = null;
        }
        super.destroy();
    }
}

},{"../multiselect.js":"eOdnb","../../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3QI46":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AutocompleteEditor", ()=>AutocompleteEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class AutocompleteEditor extends (0, _stringJs.StringEditor) {
    postBuild() {
        if (window.Autocomplete) {
            /* create wrapper container */ this.autocomplete_wrapper = document.createElement('div');
            /* insert wrapper after this.input in the DOM tree */ this.input.parentNode.insertBefore(this.autocomplete_wrapper, this.input.nextSibling);
            /* move this.input into wrapper */ this.autocomplete_wrapper.appendChild(this.input);
            /* create dropdown container */ this.autocomplete_dropdown = document.createElement('ul');
            /* insert dropdown after this.input in the DOM tree */ this.input.parentNode.insertBefore(this.autocomplete_dropdown, this.input.nextSibling);
        }
        super.postBuild();
    }
    afterInputReady() {
        let options;
        if (window.Autocomplete && !this.autocomplete_instance) {
            /* Get options, either global options from "this.defaults.options.autocomplete" or */ /* single property options from schema "options.autocomplete" */ options = this.expandCallbacks('autocomplete', (0, _utilitiesJs.extend)({}, {
                search: (jseditor)=>{
                    // eslint-disable-next-line no-console
                    console.log(`No "search" callback defined for autocomplete in property "${jseditor.key}"`);
                    return [];
                },
                onSubmit: ()=>{
                    this.input.blur();
                },
                baseClass: 'autocomplete'
            }, this.defaults.options.autocomplete || {}, this.options.autocomplete || {}));
            this.autocomplete_wrapper.classList.add(options.baseClass);
            this.autocomplete_dropdown.classList.add(`${options.baseClass}-result-list`);
            this.autocomplete_instance = new window.Autocomplete(this.autocomplete_wrapper, options);
        }
        super.afterInputReady();
    }
    destroy() {
        if (this.autocomplete_instance) {
            if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
            if (this.autocomplete_dropdown && this.autocomplete_dropdown.parentNode) this.autocomplete_dropdown.parentNode.removeChild(this.autocomplete_dropdown);
            if (this.autocomplete_wrapper && this.autocomplete_wrapper.parentNode) this.autocomplete_wrapper.parentNode.removeChild(this.autocomplete_wrapper);
            this.autocomplete_instance = null;
        }
        super.destroy();
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVoGY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Base64Editor", ()=>Base64Editor);
var _editorJs = require("../editor.js");
class Base64Editor extends (0, _editorJs.AbstractEditor) {
    getNumColumns() {
        return 4;
    }
    setFileReaderListener(frMultiple) {
        frMultiple.addEventListener('load', (event)=>{
            if (this.count === this.current_item_index) /* Overwrite existing file by default, leave other properties unchanged */ this.value[this.count][this.key] = event.target.result;
            else {
                const tempObject = {};
                /* Create empty object */ for(const key in this.parent.schema.properties)tempObject[key] = '';
                /* Set object media file */ tempObject[this.key] = event.target.result;
                this.value.splice(this.count, 0, tempObject);
            /* insert new file object */ }
            /* Increment using the listener and not the 'for' loop as the listener will be processed asynchronously */ this.count += 1;
            /* When all files have been processed, update the value of the editor */ if (this.count === this.total + this.current_item_index) this.arrayEditor.setValue(this.value);
        });
    }
    build() {
        if (!this.options.compact) this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        /* Input that holds the base64 string */ this.input = this.theme.getFormInputField('hidden');
        this.container.appendChild(this.input);
        /* Don't show uploader if this is readonly */ if (!this.schema.readOnly && !this.schema.readonly) {
            if (!window.FileReader) throw new Error('FileReader required for base64 editor');
            /* File uploader */ this.uploader = this.theme.getFormInputField('file');
            this.uploader.style.display = 'none';
            /* Set attribute of file input field to 'multiple' if: */ /* 'multiple' key has been set to 'true' in the schema */ /* and the parent object is of type 'object' */ /* and the parent of the parent type has been set to 'array' */ if (this.schema.options && this.schema.options.multiple && this.schema.options.multiple === true && this.parent && this.parent.schema.type === 'object' && this.parent.parent && this.parent.parent.schema.type === 'array') this.uploader.setAttribute('multiple', '');
            this.uploader.addEventListener('change', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                if (e.currentTarget.files && e.currentTarget.files.length) {
                    /* Check the amount of files uploaded. */ /* If 1, use the regular upload, otherwise use the multiple upload method */ if (e.currentTarget.files.length > 1 && this.schema.options && this.schema.options.multiple && this.schema.options.multiple === true && this.parent && this.parent.schema.type === 'object' && this.parent.parent && this.parent.parent.schema.type === 'array') {
                        /* Load editor of parent.parent to get the array */ this.arrayEditor = this.jsoneditor.getEditor(this.parent.parent.path);
                        /* Check the current value of this editor */ this.value = this.arrayEditor.getValue();
                        /* Set variables for amount of files, index of current array item and */ /* count value containing current status of processed files */ this.total = e.currentTarget.files.length;
                        this.current_item_index = parseInt(this.parent.key);
                        this.count = this.current_item_index;
                        for(let i = 0; i < this.total; i++){
                            const frMultiple = new FileReader();
                            this.setFileReaderListener(frMultiple);
                            frMultiple.readAsDataURL(e.currentTarget.files[i]);
                        }
                    } else {
                        let fr = new FileReader();
                        fr.onload = (evt)=>{
                            this.value = evt.target.result;
                            this.refreshPreview();
                            this.onChange(true);
                            fr = null;
                        };
                        fr.readAsDataURL(e.currentTarget.files[0]);
                    }
                }
            });
        }
        this.preview = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        this.container.appendChild(this.preview);
        this.control = this.theme.getFormControl(this.label, this.uploader || this.input, this.preview, this.infoButton);
        this.container.appendChild(this.control);
        const uploadButton = this.getButton('button_upload', 'upload', 'button_upload');
        uploadButton.addEventListener('click', ()=>{
            this.uploader.click();
        });
        this.control.appendChild(uploadButton);
        /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([
            'multiple'
        ], uploadButton);
    }
    refreshPreview() {
        if (this.last_preview === this.value) return;
        this.last_preview = this.value;
        this.preview.innerHTML = '';
        if (!this.value) return;
        let mime = this.value.match(/^data:([^;,]+)[;,]/);
        if (mime) mime = mime[1];
        if (!mime) this.preview.innerHTML = '<em>Invalid data URI</em>';
        else {
            this.preview.innerHTML = `<strong>Type:</strong> ${mime}, <strong>Size:</strong> ${Math.floor((this.value.length - this.value.split(',')[0].length - 1) / 1.33333)} bytes`;
            if (mime.substr(0, 5) === 'image') {
                this.preview.innerHTML += '<br>';
                const img = document.createElement('img');
                img.style.maxWidth = '100%';
                img.style.maxHeight = '100px';
                img.src = this.value;
                this.preview.appendChild(img);
            }
        }
    }
    enable() {
        if (!this.always_disabled) {
            if (this.uploader) this.uploader.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        if (this.uploader) this.uploader.disabled = true;
        super.disable();
    }
    setValue(val) {
        val = this.applyConstFilter(val);
        if (this.value !== val) {
            if (this.schema.readOnly && this.schema.enum && !this.schema.enum.includes(val)) this.value = this.schema.enum[0];
            else this.value = val;
            this.input.value = this.value;
            this.refreshPreview();
            this.onChange();
        }
    }
    destroy() {
        if (this.preview && this.preview.parentNode) this.preview.parentNode.removeChild(this.preview);
        if (this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        if (this.uploader && this.uploader.parentNode) this.uploader.parentNode.removeChild(this.uploader);
        super.destroy();
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e4zRt":[function(require,module,exports,__globalThis) {
/* Non-Active editor for displaying buttons in form */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ButtonEditor", ()=>ButtonEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
class ButtonEditor extends (0, _editorJs.AbstractEditor) {
    constructor(options, defaults){
        super(options, defaults);
        this.active = false;
        this.isUiOnly = true;
        /* Set field to required in schema otherwise it will not be displayed */ if (this.parent && this.parent.schema) {
            if (Array.isArray(this.parent.schema.required)) {
                if (!this.parent.schema.required.includes(this.key)) this.parent.schema.required.push(this.key);
            } else this.parent.schema.required = [
                this.key
            ];
        }
    }
    build() {
        this.options.compact = true;
        /* Get options, either global options from "this.defaults.options.button" or */ /* single property options from schema "options.button" */ const options = this.expandCallbacks('button', (0, _utilitiesJs.extend)({}, {
            icon: '',
            validated: false,
            align: 'left',
            action: (jseditor, e)=>{
                window.alert(`No button action defined for "${jseditor.path}"`);
            }
        }, this.defaults.options.button || {}, this.options.button || {}));
        const title = this.translateProperty(options.text || this.schema.title) || this.key;
        this.input = this.getButton(title, options.icon, title);
        if (typeof options.action !== 'function') window.alert(`No button action defined for "${this.path}"`);
        else this.input.addEventListener('click', options.action, false);
        if (this.schema.readOnly || this.schema.readonly || this.schema.template) {
            this.disable(true);
            this.input.setAttribute('readonly', 'true');
        }
        /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([
            'readonly'
        ]);
        this.control = this.theme.getFormButtonHolder(options.align);
        this.control.appendChild(this.input);
        this.container.appendChild(this.control);
        this.changeHandler = ()=>{
            if (this.jsoneditor.validate(this.jsoneditor.getValue()).length > 0) this.disable();
            else this.enable();
        };
        /* Enable/disable the button depending on form validation */ if (options.validated) this.jsoneditor.on('change', this.changeHandler);
    }
    enable() {
        if (!this.always_disabled) {
            this.input.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.input.disabled = true;
        super.disable();
    }
    getNumColumns() {
        return 2;
    }
    activate() {
        this.active = false;
        this.enable();
    }
    deactivate() {
        /* only non required properties can be deactivated. */ if (!this.isRequired()) {
            this.active = false;
            this.disable();
        }
    }
    destroy() {
        this.jsoneditor.off('change', this.changeHandler);
        this.changeHandler = null;
        super.destroy();
    }
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9jhG":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CheckboxEditor", ()=>CheckboxEditor);
var _editorJs = require("../editor.js");
class CheckboxEditor extends (0, _editorJs.AbstractEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        value = !!value;
        const changed = this.getValue() !== value;
        this.value = value;
        this.input.checked = this.value;
        if (!initial) this.is_dirty = true;
        this.onChange(changed);
    }
    register() {
        super.register();
        if (!this.input) return;
        if (this.jsoneditor.options.use_name_attributes) this.input.setAttribute('name', this.formname);
    }
    unregister() {
        super.unregister();
        if (!this.input) return;
        this.input.removeAttribute('name');
    }
    getNumColumns() {
        return Math.min(12, Math.max(this.getTitle().length / 7, 2));
    }
    setOptInCheckbox() {
        super.setOptInCheckbox();
        if (this.optInAppended) {
            this.container.insertBefore(this.optInContainer, this.container.firstChild);
            this.optInContainer.style.verticalAlign = 'top';
            this.control.style.marginTop = '0';
        }
    }
    build() {
        if (!this.parent.options.table_row) {
            this.label = this.header = this.theme.getCheckboxLabel(this.getTitle(), this.isRequired());
            this.label.htmlFor = this.formname;
        }
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText && !this.options.compact) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.compact) this.container.classList.add('compact');
        this.input = this.theme.getCheckbox();
        this.input.id = this.formname;
        this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton);
        this.control.style.display = 'inline-block';
        if (this.schema.readOnly || this.schema.readonly) {
            this.disable(true);
            this.input.disabled = true;
        }
        this.input.addEventListener('change', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            this.value = e.currentTarget.checked;
            this.is_dirty = true;
            this.onChange(true);
        });
        this.container.appendChild(this.control);
    }
    enable() {
        if (!this.always_disabled) {
            this.input.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.input.disabled = true;
        super.disable();
    }
    destroy() {
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        super.destroy();
    }
    showValidationErrors(errors) {
        const showErrors = this.jsoneditor.options.show_errors;
        const changeOrInteraction = showErrors === 'change' || showErrors === 'interaction';
        const never = showErrors === 'never';
        if (never && !this.is_dirty) return;
        if (changeOrInteraction && !this.is_dirty) return;
        const addMessage = (messages, error)=>{
            if (error.path === this.path) messages.push(error.message);
            return messages;
        };
        const messages = errors.reduce(addMessage, []);
        this.input.controlgroup = this.control;
        if (messages.length) this.theme.addInputError(this.input, `${messages.join('. ')}.`);
        else this.theme.removeInputError(this.input);
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gAVAc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ChoicesEditor", ()=>ChoicesEditor);
var _selectJs = require("./select.js");
var _utilitiesJs = require("../utilities.js");
var _choicesCssJs = require("./choices.css.js");
var _choicesCssJsDefault = parcelHelpers.interopDefault(_choicesCssJs);
class ChoicesEditor extends (0, _selectJs.SelectEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        if (this.choices_instance) {
            /* Sanitize value before setting it */ let sanitized = this.typecast(value || '');
            if (!this.enum_values.includes(sanitized)) sanitized = this.enum_values[0];
            if (this.value === sanitized) return;
            if (initial) this.is_dirty = false;
            else if (this.jsoneditor.options.show_errors === 'change') this.is_dirty = true;
            this.input.value = this.enum_options[this.enum_values.indexOf(sanitized)];
            this.choices_instance.setChoiceByValue(this.input.value);
            this.value = sanitized;
            this.onChange();
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        if (window.Choices && !this.choices_instance) {
            /* Get options, either global options from "this.defaults.options.choices" or */ /* single property options from schema "options.choices" */ const options = this.expandCallbacks('choices', (0, _utilitiesJs.extend)({}, this.defaults.options.choices || {}, this.options.choices || {}));
            this.choices_instance = new window.Choices(this.input, options);
        }
        super.afterInputReady();
    }
    onWatchedFieldChange() {
        super.onWatchedFieldChange();
        if (this.choices_instance) {
            const choicesList = this.enum_options.map((v, i)=>({
                    value: v,
                    label: this.enum_display[i]
                }));
            this.choices_instance.setChoices(choicesList, 'value', 'label', true);
            this.choices_instance.setChoiceByValue(`${this.value}`);
        /* Set new selection */ }
    }
    enable() {
        if (!this.always_disabled && this.choices_instance) this.choices_instance.enable();
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.choices_instance) this.choices_instance.disable();
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.choices_instance) {
            this.choices_instance.destroy();
            this.choices_instance = null;
        }
        super.destroy();
    }
}
ChoicesEditor.rules = (0, _choicesCssJsDefault.default);

},{"./select.js":"de0Lu","../utilities.js":"fV5Qc","./choices.css.js":"4aSyH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de0Lu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectEditor", ()=>SelectEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
class SelectEditor extends (0, _editorJs.AbstractEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        /* Sanitize value before setting it */ let sanitized = this.typecast(value);
        const inEnum = this.enum_options.length > 0 && this.enum_values.includes(sanitized);
        const haveToUseDefaultValue = !!this.jsoneditor.options.use_default_values || typeof this.schema.default !== 'undefined';
        if (!this.hasPlaceholderOption && (!inEnum || initial && !this.isRequired() && !haveToUseDefaultValue)) sanitized = this.enum_values[0];
        if (this.value === sanitized) return;
        const selectedIndex = this.enum_values.indexOf(sanitized);
        if (inEnum && selectedIndex !== -1) this.input.value = this.enum_options[selectedIndex];
        else if (this.hasPlaceholderOption) this.input.value = '_placeholder_';
        else this.input.value = sanitized;
        this.value = sanitized;
        if (!initial) this.is_dirty = true;
        this.onChange();
        this.change();
    }
    register() {
        super.register();
        if (!this.input) return;
        if (this.jsoneditor.options.use_name_attributes) this.input.setAttribute('name', this.formname);
    }
    unregister() {
        super.unregister();
        if (!this.input) return;
        this.input.removeAttribute('name');
    }
    getNumColumns() {
        if (!this.enum_options) return 3;
        let longestText = this.getTitle().length;
        for(let i = 0; i < this.enum_options.length; i++)longestText = Math.max(longestText, this.enum_options[i].length + 4);
        return Math.min(12, Math.max(longestText / 7, 2));
    }
    typecast(value) {
        if (this.schema.type === 'boolean') return value === 'undefined' || value === undefined ? undefined : !!value;
        else if (this.schema.type === 'number') return 1 * value || 0;
        else if (this.schema.type === 'integer') return Math.floor(value * 1 || 0);
        else if (this.schema.enum && value === undefined) return undefined;
        return `${value}`;
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        return this.typecast(this.value);
    }
    preBuild() {
        this.input_type = 'select';
        this.enum_options = [];
        this.enum_values = [];
        this.enum_display = [];
        let i;
        let callback;
        this.hasPlaceholderOption = this.schema?.options?.has_placeholder_option || false;
        this.placeholderOptionText = this.schema?.options?.placeholder_option_text || ' ';
        /* Const value */ if (this.enforceConst && this.schema.const) {
            const value = this.schema.const;
            this.enum_options = [
                `${value}`
            ];
            this.enum_display = [
                `${this.translateProperty(value) || value}`
            ];
            this.enum_values = [
                this.typecast(value)
            ];
        /* Enum options enumerated */ } else if (this.schema.enum) {
            const display = this.schema.options && this.schema.options.enum_titles || [];
            this.schema.enum.forEach((option, i)=>{
                this.enum_options[i] = `${option}`;
                this.enum_display[i] = `${this.translateProperty(display[i]) || option}`;
                this.enum_values[i] = this.typecast(option);
            });
        /* Boolean */ } else if (this.schema.type === 'boolean') {
            this.enum_display = this.schema.options && this.schema.options.enum_titles || [
                'true',
                'false'
            ];
            this.enum_options = [
                '1',
                ''
            ];
            this.enum_values = [
                true,
                false
            ];
            if (!this.isRequired()) {
                this.enum_display.unshift(' ');
                this.enum_options.unshift('undefined');
                this.enum_values.unshift(undefined);
            }
        /* Dynamic Enum */ } else if (this.schema.enumSource) {
            this.enumSource = [];
            this.enum_display = [];
            this.enum_options = [];
            this.enum_values = [];
            /* Shortcut declaration for using a single array */ if (!Array.isArray(this.schema.enumSource)) {
                if (this.schema.enumValue) this.enumSource = [
                    {
                        source: this.schema.enumSource,
                        value: this.schema.enumValue
                    }
                ];
                else this.enumSource = [
                    {
                        source: this.schema.enumSource
                    }
                ];
            } else for(i = 0; i < this.schema.enumSource.length; i++){
                /* Shorthand for watched variable */ if (typeof this.schema.enumSource[i] === 'string') this.enumSource[i] = {
                    source: this.schema.enumSource[i]
                };
                else if (!Array.isArray(this.schema.enumSource[i])) this.enumSource[i] = (0, _utilitiesJs.extend)({}, this.schema.enumSource[i]);
                else this.enumSource[i] = this.schema.enumSource[i];
            }
            /* Now, enumSource is an array of sources */ /* Walk through this array and fix up the values */ for(i = 0; i < this.enumSource.length; i++){
                if (this.enumSource[i].value) {
                    callback = this.expandCallbacks('template', {
                        template: this.enumSource[i].value
                    });
                    if (typeof callback.template === 'function') this.enumSource[i].value = callback.template;
                    else this.enumSource[i].value = this.jsoneditor.compileTemplate(this.enumSource[i].value, this.template_engine);
                }
                if (this.enumSource[i].title) {
                    callback = this.expandCallbacks('template', {
                        template: this.enumSource[i].title
                    });
                    if (typeof callback.template === 'function') this.enumSource[i].title = callback.template;
                    else this.enumSource[i].title = this.jsoneditor.compileTemplate(this.enumSource[i].title, this.template_engine);
                }
                if (this.enumSource[i].filter && this.enumSource[i].value) {
                    callback = this.expandCallbacks('template', {
                        template: this.enumSource[i].filter
                    });
                    if (typeof callback.template === 'function') this.enumSource[i].filter = callback.template;
                    else this.enumSource[i].filter = this.jsoneditor.compileTemplate(this.enumSource[i].filter, this.template_engine);
                }
            }
        /* Other, not supported */ } else throw new Error("'select' editor requires the enum property to be set.");
    }
    build() {
        if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.compact) this.container.classList.add('compact');
        this.input = this.theme.getSelectInput(this.enum_options, false);
        this.theme.setSelectOptions(this.input, this.enum_options, this.enum_display, this.hasPlaceholderOption, this.placeholderOptionText);
        if (this.schema.readOnly || this.schema.readonly) {
            this.disable(true);
            this.input.disabled = true;
        }
        /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([]);
        this.input.addEventListener('change', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            this.onInputChange();
        });
        this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton, this.formname);
        this.container.appendChild(this.control);
        this.value = this.enum_values[0];
        /* Any special formatting that needs to happen after the input is added to the dom */ window.requestAnimationFrame(()=>{
            if (this.input.parentNode) this.afterInputReady();
        });
    }
    afterInputReady() {
        this.theme.afterInputReady(this.input);
    }
    onInputChange() {
        const val = this.typecast(this.input.value);
        let newVal;
        /* Invalid option, use first option instead */ if (!this.enum_values.includes(val)) newVal = this.enum_values[0];
        else newVal = this.enum_values[this.enum_values.indexOf(val)];
        /* If valid hasn't changed */ if (newVal === this.value) return;
        this.is_dirty = true;
        /* Store new value and propogate change event */ this.value = newVal;
        this.onChange(true);
    }
    onWatchedFieldChange() {
        let vars;
        let j;
        let selectOptions = [];
        let selectTitles = [];
        /* If this editor uses a dynamic select box */ if (this.enumSource) {
            vars = this.getWatchedFieldValues();
            for(let i = 0; i < this.enumSource.length; i++)/* Constant values */ if (Array.isArray(this.enumSource[i])) {
                selectOptions = selectOptions.concat(this.enumSource[i]);
                selectTitles = selectTitles.concat(this.enumSource[i]);
            } else {
                let items = [];
                /* Static list of items */ if (Array.isArray(this.enumSource[i].source)) items = this.enumSource[i].source;
                else items = vars[this.enumSource[i].source];
                if (items) {
                    /* Only use a predefined part of the array */ if (this.enumSource[i].slice) items = Array.prototype.slice.apply(items, this.enumSource[i].slice);
                    /* Filter the items */ if (this.enumSource[i].filter) {
                        const newItems = [];
                        for(j = 0; j < items.length; j++)if (this.enumSource[i].filter({
                            i: j,
                            item: items[j],
                            watched: vars
                        })) newItems.push(items[j]);
                        items = newItems;
                    }
                    const itemTitles = [];
                    const itemValues = [];
                    for(j = 0; j < items.length; j++){
                        const item = items[j];
                        /* Rendered value */ if (this.enumSource[i].value) itemValues[j] = this.typecast(this.enumSource[i].value({
                            i: j,
                            item
                        }));
                        else itemValues[j] = items[j];
                        /* Rendered title */ if (this.enumSource[i].title) itemTitles[j] = this.enumSource[i].title({
                            i: j,
                            item
                        });
                        else itemTitles[j] = itemValues[j];
                    }
                    if (this.enumSource[i].sort) ((itemValues, itemTitles, order)=>{
                        itemValues.map((v, i)=>({
                                v,
                                t: itemTitles[i]
                            })).sort((a, b)=>a.v < b.v ? -order : a.v === b.v ? 0 : order).forEach((v, i)=>{
                            itemValues[i] = v.v;
                            itemTitles[i] = v.t;
                        });
                    }).bind(null, itemValues, itemTitles, this.enumSource[i].sort === 'desc' ? 1 : -1)();
                    selectOptions = selectOptions.concat(itemValues);
                    selectTitles = selectTitles.concat(itemTitles);
                }
            }
            const prevValue = this.value;
            this.theme.setSelectOptions(this.input, selectOptions, selectTitles);
            this.enum_options = selectOptions;
            this.enum_display = selectTitles;
            this.enum_values = selectOptions;
            /* If the previous value is still in the new select options */ /* or if global option "enum_source_value_auto_select" is true, stick with it */ if (selectOptions.includes(prevValue) || this.jsoneditor.options.enum_source_value_auto_select !== false) {
                this.input.value = prevValue;
                this.value = prevValue;
            /* Otherwise, set the value to the first select option */ } else {
                this.input.value = selectOptions[0];
                this.value = this.typecast(selectOptions[0] || '');
                if (this.parent && !this.watchLoop) this.parent.onChildEditorChange(this);
                else this.jsoneditor.onChange();
                this.jsoneditor.notifyWatchers(this.path);
            }
        }
        super.onWatchedFieldChange();
    }
    enable() {
        if (!this.always_disabled) {
            this.input.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.input.disabled = true;
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        super.destroy();
    }
    showValidationErrors(errors) {
        const showErrors = this.jsoneditor.options.show_errors;
        const changeOrInteraction = showErrors === 'change' || showErrors === 'interaction';
        const never = showErrors === 'never';
        if (never && !this.is_dirty) return;
        if (changeOrInteraction && !this.is_dirty) return;
        const addMessage = (messages, error)=>{
            if (error.path === this.path) messages.push(error.message);
            return messages;
        };
        const messages = errors.reduce(addMessage, []);
        if (messages.length) this.theme.addInputError(this.input, `${messages.join('. ')}.`);
        else this.theme.removeInputError(this.input);
    }
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4aSyH":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".choices > *": "box-sizing:border-box"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eqlEe":[function(require,module,exports,__globalThis) {
/*

Edtended handling of date, time and datetime-local type fields.

Works with both string and integer data types. (default only support string type)

Has optional support for using flatpickr datepicker.
All flatpickr options is supported with a few minor differences.
- "enableTime" and "noCalendar" are set automatically, based on the data type.
- Extra config option "errorDateFormat". If this is set, it will replace the format displayed in error messages.
- It is not possible to use "inline" and "wrap" options together.
- When using the "wrap" option, "toggle" and "clear" buttons are automatically added to markup. 2 extra boolean options ("showToggleButton" and "showClearButton") are available to control which buttons to display. Note: not all frameworks supports this. (Works in: Bootstrap and Foundation)
- When using the "inline" option, an extra boolean option ("inlineHideInput") is available to hide the original input field.
- If "mode" is set to either "multiple" or "range", only string data type is supported. Also the result from these is returned as a string not an array.

ToDo:
 - Improve Handling of flatpicker "multiple" and "range" modes. (Currently the values are just added as string values, but the optimal scenario would be to save those as array if possible)

*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DatetimeEditor", ()=>DatetimeEditor);
var _stringJs = require("./string.js");
class DatetimeEditor extends (0, _stringJs.StringEditor) {
    build() {
        super.build();
        if (!this.input) return;
        if (this.schema.max && typeof this.schema.max === 'string') this.input.setAttribute('max', this.schema.max);
        if (this.schema.min && typeof this.schema.max === 'string') this.input.setAttribute('min', this.schema.min);
        if (window.flatpickr && typeof this.options.flatpickr === 'object') {
            /* Make sure that flatpickr settings matches the input type */ this.options.flatpickr.enableTime = this.schema.format !== 'date';
            this.options.flatpickr.noCalendar = this.schema.format === 'time';
            /* Curently only string can contain range or multiple values */ if (this.schema.type === 'integer') this.options.flatpickr.mode = 'single';
            /* Attribute for flatpicker */ this.input.setAttribute('data-input', '');
            let { input } = this;
            if (this.options.flatpickr.wrap === true) {
                /* Create buttons for input group */ const buttons = [];
                if (this.options.flatpickr.showToggleButton !== false) {
                    const toggleButton = this.getButton('', this.schema.format === 'time' ? 'time' : 'calendar', 'flatpickr_toggle_button');
                    /* Attribute for flatpicker */ toggleButton.setAttribute('data-toggle', '');
                    buttons.push(toggleButton);
                }
                if (this.options.flatpickr.showClearButton !== false) {
                    const clearButton = this.getButton('', 'clear', 'flatpickr_clear_button');
                    /* Attribute for flatpicker */ clearButton.setAttribute('data-clear', '');
                    buttons.push(clearButton);
                }
                /* Save position of input field */ const { parentNode } = this.input;
                const { nextSibling } = this.input;
                const buttonContainer = this.theme.getInputGroup(this.input, buttons);
                if (buttonContainer !== undefined) {
                    /* Make sure "inline" option is turned off */ this.options.flatpickr.inline = false;
                    /* Insert container at same position as input field */ parentNode.insertBefore(buttonContainer, nextSibling);
                    input = buttonContainer;
                } else this.options.flatpickr.wrap = false;
            }
            this.flatpickr = window.flatpickr(input, this.options.flatpickr);
            if (this.options.flatpickr.inline === true && this.options.flatpickr.inlineHideInput === true) this.input.setAttribute('type', 'hidden');
        }
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        if (this.schema.type === 'string') return this.value;
        if (this.value === '' || this.value === undefined) return undefined;
        const value = this.schema.format === 'time' ? `1970-01-01 ${this.value}` : this.value;
        return parseInt(new Date(value).getTime() / 1000);
    }
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        if (this.schema.type === 'string') {
            super.setValue(value, initial, fromTemplate);
            if (this.flatpickr) this.flatpickr.setDate(value);
        } else if (value > 0) {
            const dateObj = new Date(value * 1000);
            const year = dateObj.getFullYear();
            const month = this.zeroPad(dateObj.getMonth() + 1);
            const day = this.zeroPad(dateObj.getDate());
            const hour = this.zeroPad(dateObj.getHours());
            const min = this.zeroPad(dateObj.getMinutes());
            const sec = this.zeroPad(dateObj.getSeconds());
            const date = [
                year,
                month,
                day
            ].join('-');
            const time = [
                hour,
                min,
                sec
            ].join(':');
            let dateValue = `${date}T${time}`;
            if (this.schema.format === 'date') dateValue = date;
            else if (this.schema.format === 'time') dateValue = time;
            this.input.value = dateValue;
            this.refreshValue();
            if (this.flatpickr) this.flatpickr.setDate(dateValue);
        }
    }
    destroy() {
        if (this.flatpickr) this.flatpickr.destroy();
        this.flatpickr = null;
        super.destroy();
    }
    /* helper function */ zeroPad(value) {
        return `0${value}`.slice(-2);
    }
}

},{"./string.js":"cT5YY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPpbg":[function(require,module,exports,__globalThis) {
/* hyper-link describeBy Editor */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribedByEditor", ()=>DescribedByEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
class DescribedByEditor extends (0, _editorJs.AbstractEditor) {
    register() {
        if (this.editors) {
            for(let i = 0; i < this.editors.length; i++){
                if (!this.editors[i]) continue;
                this.editors[i].unregister();
            }
            if (this.editors[this.currentEditor]) this.editors[this.currentEditor].register();
        }
        super.register();
    }
    unregister() {
        super.unregister();
        if (this.editors) for(let i = 0; i < this.editors.length; i++){
            if (!this.editors[i]) continue;
            this.editors[i].unregister();
        }
    }
    getNumColumns() {
        if (!this.editors[this.currentEditor]) return 4;
        return Math.max(this.editors[this.currentEditor].getNumColumns(), 4);
    }
    enable() {
        if (this.editors) for(let i = 0; i < this.editors.length; i++){
            if (!this.editors[i]) continue;
            this.editors[i].enable();
        }
        super.enable();
    }
    disable() {
        if (this.editors) for(let i = 0; i < this.editors.length; i++){
            if (!this.editors[i]) continue;
            this.editors[i].disable();
        }
        super.disable();
    }
    switchEditor() {
        const vars = this.getWatchedFieldValues();
        if (!vars) return;
        /* var ref = this.template.fillFromObject(vars); */ /* var ref = this.template(vars); */ const ref = document.location.origin + document.location.pathname + this.template(vars);
        if (!this.editors[this.refs[ref]]) this.buildChildEditor(ref);
        this.currentEditor = this.refs[ref];
        this.register();
        this.editors.forEach((editor, ref)=>{
            if (!editor) return;
            if (this.currentEditor === ref) editor.container.style.display = '';
            else editor.container.style.display = 'none';
        });
        this.refreshValue();
        this.onChange(true);
    }
    buildChildEditor(ref) {
        this.refs[ref] = this.editors.length;
        const holder = this.theme.getChildEditorHolder();
        this.editor_holder.appendChild(holder);
        const schema = (0, _utilitiesJs.extend)({}, this.schema, this.jsoneditor.refs[ref]);
        const editorClass = this.jsoneditor.getEditorClass(schema, this.jsoneditor);
        const editor = this.jsoneditor.createEditor(editorClass, {
            jsoneditor: this.jsoneditor,
            schema,
            container: holder,
            path: this.path,
            parent: this,
            required: true
        });
        this.editors.push(editor);
        editor.preBuild();
        editor.build();
        editor.postBuild();
    }
    preBuild() {
        this.refs = {};
        this.editors = [];
        this.currentEditor = '';
        let i;
        for(i = 0; i < this.schema.links.length; i++)if (this.schema.links[i].rel.toLowerCase() === 'describedby') {
            /* this.template = new UriTemplate(this.schema.links[i].href); */ this.template = this.jsoneditor.compileTemplate(this.schema.links[i].href, this.template_engine);
            break;
        }
        /* this.template.fill(function(varName) {
      this.schema.watch = this.schema.watch || {};
      this.schema.watch[varName] = varName;
      return '';
    }); */ this.schema.links = this.schema.links.slice(0, i).concat(this.schema.links.slice(i + 1));
        if (this.schema.links.length === 0) delete this.schema.links;
        this.baseSchema = (0, _utilitiesJs.extend)({}, this.schema);
    }
    build() {
        this.editor_holder = document.createElement('div');
        this.container.appendChild(this.editor_holder);
        this.switchEditor();
    }
    onWatchedFieldChange() {
        this.switchEditor();
    }
    onChildEditorChange(editor, eventData) {
        if (this.editors[this.currentEditor]) this.refreshValue();
        super.onChildEditorChange(editor, eventData);
    }
    refreshValue() {
        if (this.editors[this.currentEditor]) this.value = this.editors[this.currentEditor].getValue();
    }
    setValue(val, initial) {
        val = this.applyConstFilter(val);
        if (this.editors[this.currentEditor]) {
            this.editors[this.currentEditor].setValue(val, initial);
            this.refreshValue();
            this.onChange();
        }
    }
    destroy() {
        this.editors.forEach((editor)=>{
            if (editor) editor.destroy();
        });
        if (this.editor_holder && this.editor_holder.parentNode) this.editor_holder.parentNode.removeChild(this.editor_holder);
        super.destroy();
    }
    showValidationErrors(errors) {
        this.editors.forEach((editor)=>{
            if (!editor) return;
            editor.showValidationErrors(errors);
        });
    }
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9GYD3":[function(require,module,exports,__globalThis) {
/* Enum Editor (used for objects and arrays with enumerated values) */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EnumEditor", ()=>EnumEditor);
var _editorJs = require("../editor.js");
class EnumEditor extends (0, _editorJs.AbstractEditor) {
    getNumColumns() {
        return 4;
    }
    build() {
        this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        this.container.appendChild(this.title);
        this.options.enum_titles = this.options.enum_titles || [];
        if (this.enforceConstEnabled && this.schema.const) this.enum = [
            this.schema.const
        ];
        else this.enum = this.schema.enum;
        this.selected = 0;
        this.select_options = [];
        this.html_values = [];
        for(let i = 0; i < this.enum.length; i++){
            this.select_options[i] = this.options.enum_titles[i] || `Value ${i + 1}`;
            this.html_values[i] = this.getHTML(this.enum[i]);
        }
        /* Switcher */ this.switcher = this.theme.getSwitcher(this.select_options);
        this.container.appendChild(this.switcher);
        /* Display area */ this.display_area = this.theme.getIndentedPanel();
        this.container.appendChild(this.display_area);
        if (this.options.hide_display) this.display_area.style.display = 'none';
        this.switcher.addEventListener('change', (e)=>{
            this.selected = this.select_options.indexOf(e.currentTarget.value);
            this.value = this.enum[this.selected];
            this.refreshValue();
            this.onChange(true);
        });
        this.value = this.enum[0];
        this.refreshValue();
        if (this.enum.length === 1) this.switcher.style.display = 'none';
    }
    refreshValue() {
        if (!this.enum) return;
        this.selected = -1;
        const stringified = JSON.stringify(this.value);
        this.enum.forEach((el, i)=>{
            if (stringified === JSON.stringify(el)) {
                this.selected = i;
                return false;
            }
        });
        if (this.selected < 0) {
            this.setValue(this.enum[0]);
            return;
        }
        this.switcher.value = this.select_options[this.selected];
        this.display_area.innerHTML = this.html_values[this.selected];
    }
    enable() {
        if (!this.always_disabled) {
            this.switcher.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        this.switcher.disabled = true;
        super.disable();
    }
    getHTML(el) {
        const each = (obj, callback)=>{
            if (Array.isArray(obj) || typeof obj.length === 'number' && obj.length > 0 && obj.length - 1 in obj) Array.from(obj).forEach((e, i)=>callback(i, e));
            else Object.entries(obj).forEach(([key, value])=>callback(key, value));
        };
        if (el === null) return '<em>null</em>';
        else if (typeof el === 'object') {
            /* TODO: use theme */ let ret = '';
            const callback = (i, child)=>{
                let html = this.getHTML(child);
                /* Add the keys to object children */ if (!Array.isArray(el)) /* TODO: use theme */ html = `<div><em>${i}</em>: ${html}</div>`;
                /* TODO: use theme */ ret += `<li>${html}</li>`;
            };
            each(el, callback);
            if (Array.isArray(el)) ret = `<ol>${ret}</ol>`;
            else ret = `<ul style='margin-top:0;margin-bottom:0;padding-top:0;padding-bottom:0;'>${ret}</ul>`;
            return ret;
        /* Boolean */ } else if (typeof el === 'boolean') return el ? 'true' : 'false';
        else if (typeof el === 'string') return el.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return el;
    }
    setValue(val) {
        val = this.applyConstFilter(val);
        if (this.value !== val) {
            this.value = val;
            this.refreshValue();
            this.onChange();
        }
    }
    destroy() {
        if (this.display_area && this.display_area.parentNode) this.display_area.parentNode.removeChild(this.display_area);
        if (this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);
        if (this.switcher && this.switcher.parentNode) this.switcher.parentNode.removeChild(this.switcher);
        super.destroy();
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zs8gQ":[function(require,module,exports,__globalThis) {
/**
 * Created by Mehmet Baker on 12.04.2017
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HiddenEditor", ()=>HiddenEditor);
var _editorJs = require("../editor.js");
class HiddenEditor extends (0, _editorJs.AbstractEditor) {
    register() {
        super.register();
        if (!this.input) return;
        if (this.jsoneditor.options.use_name_attributes) this.input.setAttribute('name', this.formname);
    }
    unregister() {
        super.unregister();
        if (!this.input) return;
        this.input.removeAttribute('name');
    }
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        if (this.template && !fromTemplate) return;
        if (value === null || typeof value === 'undefined') value = '';
        else if (typeof value === 'object') value = JSON.stringify(value);
        else if (typeof value !== 'string') value = `${value}`;
        if (value === this.serialized) return;
        /* Sanitize value before setting it */ const sanitized = this.sanitize(value);
        if (this.input.value === sanitized) return;
        this.input.value = sanitized;
        const changed = fromTemplate || this.getValue() !== value;
        this.refreshValue();
        if (initial) this.is_dirty = false;
        else if (this.jsoneditor.options.show_errors === 'change') this.is_dirty = true;
        if (this.adjust_height) this.adjust_height(this.input);
        /* Bubble this setValue to parents if the value changed */ this.onChange(changed);
    }
    getNumColumns() {
        return 2;
    }
    enable() {
        super.enable();
    }
    disable() {
        super.disable();
    }
    refreshValue() {
        this.value = this.input.value;
        if (typeof this.value !== 'string') this.value = '';
        this.serialized = this.value;
    }
    destroy() {
        this.template = null;
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        super.destroy();
    }
    /**
   * This is overridden in derivative editors
   */ sanitize(value) {
        return value;
    }
    /**
   * Re-calculates the value if needed
   */ onWatchedFieldChange() {
        let vars;
        /* If this editor needs to be rendered by a macro template */ if (this.template) {
            vars = this.getWatchedFieldValues();
            this.setValue(this.template(vars), false, true);
        }
        super.onWatchedFieldChange();
    }
    build() {
        this.format = this.schema.format;
        if (!this.format && this.options.default_format) this.format = this.options.default_format;
        if (this.options.format) this.format = this.options.format;
        this.input_type = 'hidden';
        this.input = this.theme.getFormInputField(this.input_type);
        if (this.format) this.input.setAttribute('data-schemaformat', this.format);
        this.container.appendChild(this.input);
        /* Compile and store the template */ if (this.schema.template) {
            const callback = this.expandCallbacks('template', {
                template: this.schema.template
            });
            if (typeof callback.template === 'function') this.template = callback.template;
            else this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine);
            this.refreshValue();
        } else this.refreshValue();
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lVGtP":[function(require,module,exports,__globalThis) {
/* Non-Active editor for displaying text blocks in form */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InfoEditor", ()=>InfoEditor);
var _buttonJs = require("./button.js");
class InfoEditor extends (0, _buttonJs.ButtonEditor) {
    build() {
        this.options.compact = false;
        this.header = this.label = this.theme.getLabelLike(this.getTitle());
        this.description = this.theme.getDescription(this.schema.description || '');
        this.control = this.theme.getFormControl(this.label, this.description, null);
        this.container.appendChild(this.control);
    }
    getTitle() {
        return this.translateProperty(this.schema.title);
    }
    getNumColumns() {
        return 12;
    }
    disable() {
        return false;
    }
    enable() {
        return false;
    }
}

},{"./button.js":"e4zRt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sii0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IntegerEditor", ()=>IntegerEditor);
var _numberJs = require("./number.js");
var _utilitiesJs = require("../utilities.js");
class IntegerEditor extends (0, _numberJs.NumberEditor) {
    getNumColumns() {
        return 2;
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        if (!this.schema.default && !this.jsoneditor.options.use_default_values && this.value === '') {
            if (this.shouldBeUnset()) return undefined;
        } else return (0, _utilitiesJs.isInteger)(this.value) ? parseInt(this.value) : this.value;
    }
}

},{"./number.js":"aaapI","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aaapI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NumberEditor", ()=>NumberEditor);
var _stringJs = require("./string.js");
var _utilities = require("../utilities");
class NumberEditor extends (0, _stringJs.StringEditor) {
    build() {
        super.build();
        if (typeof this.schema.minimum !== 'undefined') {
            let { minimum } = this.schema;
            if (typeof this.schema.exclusiveMinimum !== 'undefined') minimum += 1;
            this.input.setAttribute('min', minimum);
        }
        if (typeof this.schema.maximum !== 'undefined') {
            let { maximum } = this.schema;
            if (typeof this.schema.exclusiveMaximum !== 'undefined') maximum -= 1;
            this.input.setAttribute('max', maximum);
        }
        if (typeof this.schema.step !== 'undefined') {
            const step = this.schema.step || 1;
            this.input.setAttribute('step', step);
        }
        /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([
            'maxlength',
            'pattern',
            'readonly',
            'min',
            'max',
            'step'
        ]);
    }
    getNumColumns() {
        return 2;
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        if (!this.schema.default && !this.jsoneditor.options.use_default_values && this.value === '') {
            if (this.shouldBeUnset()) {
                this.input.value = '';
                return undefined;
            }
        } else return (0, _utilities.isNumber)(this.value) ? parseFloat(this.value) : this.value;
    }
}

},{"./string.js":"cT5YY","../utilities":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"94TW2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IpEditor", ()=>IpEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class IpEditor extends (0, _stringJs.StringEditor) {
    preBuild() {
        super.preBuild();
        /* Create schema options object if deesn't exist */ if (!this.schema.options) this.schema.options = {};
        /* Create cleave options if they don't exist */ if (!this.schema.options.cleave) switch(this.format){
            case 'ipv6':
                this.schema.options.cleave = {
                    delimiters: [
                        ':'
                    ],
                    blocks: [
                        4,
                        4,
                        4,
                        4,
                        4,
                        4,
                        4,
                        4
                    ],
                    uppercase: true
                };
                break;
            case 'ipv4':
                this.schema.options.cleave = {
                    delimiters: [
                        '.'
                    ],
                    blocks: [
                        3,
                        3,
                        3,
                        3
                    ],
                    numericOnly: true
                };
                break;
        }
        /* Update options object */ this.options = (0, _utilitiesJs.extend)(this.options, this.schema.options || {});
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"75oOI":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "JoditEditor", ()=>JoditEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class JoditEditor extends (0, _stringJs.StringEditor) {
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        const res = super.setValue(value, initial, fromTemplate);
        if (res !== undefined && res.changed && this.jodit_instance) this.jodit_instance.setEditorValue(res.value);
    }
    build() {
        this.options.format = 'textarea' /* Force format into "textarea" */ ;
        super.build();
        this.input_type = this.schema.format /* Restore original format */ ;
        this.input.setAttribute('data-schemaformat', this.input_type);
    }
    afterInputReady() {
        let options;
        if (window.Jodit) {
            /* Get options, either global options from "this.defaults.options.jodit" or */ /* single property options from schema "options.jodit" */ options = this.expandCallbacks('jodit', (0, _utilitiesJs.extend)({}, {
                height: 300
            }, this.defaults.options.jodit || {}, this.options.jodit || {}));
            this.jodit_instance = new window.Jodit(this.input, options);
            if (this.schema.readOnly || this.schema.readonly || this.schema.template) this.jodit_instance.setReadOnly(true);
            this.jodit_instance.events.on('change', ()=>{
                this.value = this.jodit_instance.getEditorValue();
                this.is_dirty = true;
                this.onChange(true);
            });
            this.theme.afterInputReady(this.input);
        } else super.afterInputReady();
    /* Library not loaded, so just treat this as a string */ }
    getNumColumns() {
        return 6;
    }
    enable() {
        if (!this.always_disabled && this.jodit_instance) this.jodit_instance.setReadOnly(false);
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.jodit_instance) this.jodit_instance.setReadOnly(true);
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.jodit_instance) {
            this.jodit_instance.destruct();
            this.jodit_instance = null;
        }
        super.destroy();
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hCWRE":[function(require,module,exports,__globalThis) {
/* Multiple Editor (for when `type` is an array, also when `oneOf` is present) */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MultipleEditor", ()=>MultipleEditor);
var _editorJs = require("../editor.js");
var _validatorJs = require("../validator.js");
var _utilitiesJs = require("../utilities.js");
class MultipleEditor extends (0, _editorJs.AbstractEditor) {
    register() {
        if (this.editors) {
            for(let i = 0; i < this.editors.length; i++){
                if (!this.editors[i]) continue;
                this.editors[i].unregister();
            }
            if (this.editors[this.type]) this.editors[this.type].register();
        }
        super.register();
    }
    unregister() {
        super.unregister();
        if (this.editors) for(let i = 0; i < this.editors.length; i++){
            if (!this.editors[i]) continue;
            this.editors[i].unregister();
        }
    }
    getNumColumns() {
        if (!this.editors[this.type]) return 4;
        return Math.max(this.editors[this.type].getNumColumns(), 4);
    }
    enable() {
        if (!this.always_disabled) {
            if (this.editors) for(let i = 0; i < this.editors.length; i++){
                if (!this.editors[i]) continue;
                this.editors[i].enable();
            }
            this.switcher.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        if (this.editors) for(let i = 0; i < this.editors.length; i++){
            if (!this.editors[i]) continue;
            this.editors[i].disable(alwaysDisabled);
        }
        this.switcher.disabled = true;
        super.disable();
    }
    switchEditor(i) {
        this.lastType = this.type;
        if (!this.editors[i]) this.buildChildEditor(i);
        let currentValue = this.getValue();
        this.type = i;
        this.register();
        this.editors.forEach((editor, type)=>{
            if (!editor) return;
            if (this.type === type) {
                if (this.keep_only_existing_values) currentValue = (0, _utilitiesJs.overwriteExistingProperties)(editor.getValue(), currentValue);
                if (this.keep_values || this.if) editor.setValue(currentValue, true);
                editor.container.style.display = '';
            } else editor.container.style.display = 'none';
        });
        this.onChange(true, false, {
            event: 'switch',
            data: {
                type: this.lastType,
                path: this.editors[i].path
            }
        });
        this.refreshValue();
        this.refreshHeaderText();
    }
    buildChildEditor(i) {
        const type = this.types[i];
        const holder = this.theme.getChildEditorHolder();
        this.editor_holder.appendChild(holder);
        let schema;
        if (typeof type === 'string') {
            schema = (0, _utilitiesJs.extend)({}, this.schema);
            schema.type = type;
        } else {
            schema = (0, _utilitiesJs.extend)({}, this.schema, type);
            schema = this.jsoneditor.expandRefs(schema);
            /* If we need to merge `required` arrays */ if (type && type.required && Array.isArray(type.required) && this.schema.required && Array.isArray(this.schema.required)) schema.required = this.schema.required.concat(type.required);
        }
        if (schema?.options?.dependencies) delete schema.options.dependencies;
        const editor = this.jsoneditor.getEditorClass(schema);
        this.editors[i] = this.jsoneditor.createEditor(editor, {
            jsoneditor: this.jsoneditor,
            schema,
            container: holder,
            path: this.path,
            parent: this,
            required: true
        });
        this.editors[i].preBuild();
        this.editors[i].build();
        this.editors[i].postBuild();
        if (this.editors[i].header) this.theme.visuallyHidden(this.editors[i].header);
        this.editors[i].option = this.switcher_options[i];
        holder.addEventListener('change_header_text', ()=>{
            this.refreshHeaderText();
        });
        if (i !== this.type) holder.style.display = 'none';
    }
    preBuild() {
        this.types = [];
        this.type = 0;
        this.editors = [];
        this.validators = [];
        this.keep_values = true;
        if (typeof this.jsoneditor.options.keep_oneof_values !== 'undefined') this.keep_values = this.jsoneditor.options.keep_oneof_values;
        if (typeof this.options.keep_oneof_values !== 'undefined') this.keep_values = this.options.keep_oneof_values;
        this.keep_only_existing_values = false;
        if (typeof this.jsoneditor.options.keep_only_existing_values !== 'undefined') this.keep_only_existing_values = this.jsoneditor.options.keep_only_existing_values;
        if (typeof this.options.keep_only_existing_values !== 'undefined') this.keep_only_existing_values = this.options.keep_only_existing_values;
        if (this.schema.oneOf) {
            this.oneOf = true;
            this.types = this.schema.oneOf;
            delete this.schema.oneOf;
        } else if (this.schema.anyOf) {
            this.anyOf = true;
            this.types = this.schema.anyOf;
            delete this.schema.anyOf;
        } else if (this.schema.if) {
            this.if = true;
            this.ifSchema = JSON.parse(JSON.stringify(this.schema.if));
            this.thenSchema = {
                title: 'then'
            };
            this.elseSchema = {
                title: 'else'
            };
            this.types = [];
            if (this.schema.then) (0, _utilitiesJs.mergeDeep)(this.thenSchema, this.schema, this.schema.then);
            if (this.schema.else) (0, _utilitiesJs.mergeDeep)(this.elseSchema, this.schema, this.schema.else);
            this.types.push(this.thenSchema);
            this.types.push(this.elseSchema);
            this.types.forEach((schema)=>{
                delete schema.if;
                delete schema.then;
                delete schema.else;
            });
            delete this.schema.if;
        } else {
            if (!this.schema.type || this.schema.type === 'any') {
                this.types = [
                    'string',
                    'number',
                    'integer',
                    'boolean',
                    'object',
                    'array',
                    'null'
                ];
                /* If any of these primitive types are disallowed */ if (this.schema.disallow) {
                    let { disallow } = this.schema;
                    if (typeof disallow !== 'object' || !Array.isArray(disallow)) disallow = [
                        disallow
                    ];
                    const allowedTypes = [];
                    this.types.forEach((type)=>{
                        if (!disallow.includes(type)) allowedTypes.push(type);
                    });
                    this.types = allowedTypes;
                }
            } else if (Array.isArray(this.schema.type)) this.types = this.schema.type;
            else this.types = [
                this.schema.type
            ];
            delete this.schema.type;
        }
        this.display_text = this.getDisplayText(this.types);
    }
    build() {
        const { container } = this;
        this.header = this.label = this.theme.getLabelLike(this.getTitle(), this.isRequired());
        this.switcher = this.theme.getSwitcher(this.display_text);
        this.switcher.setAttribute('id', this.formname + 'switcher');
        this.switcherLabel = this.theme.getHiddenLabel(this.formname + ' switcher');
        this.switcherLabel.setAttribute('for', this.formname + 'switcher');
        if (!this.if) {
            this.container.appendChild(this.header);
            container.appendChild(this.switcherLabel);
            container.appendChild(this.switcher);
        }
        this.switcher.addEventListener('change', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            this.switchEditor(this.display_text.indexOf(e.currentTarget.value));
            this.onChange(true);
        });
        this.editor_holder = document.createElement('div');
        container.appendChild(this.editor_holder);
        const validatorOptions = {};
        if (this.jsoneditor.options.custom_validators) validatorOptions.custom_validators = this.jsoneditor.options.custom_validators;
        this.switcher_options = this.theme.getSwitcherOptions(this.switcher);
        this.types.forEach((type, i)=>{
            this.editors[i] = false;
            let schema;
            if (typeof type === 'string') {
                schema = (0, _utilitiesJs.extend)({}, this.schema);
                schema.type = type;
            } else {
                schema = (0, _utilitiesJs.extend)({}, this.schema, type);
                /* If we need to merge `required` arrays */ if (type.required && Array.isArray(type.required) && this.schema.required && Array.isArray(this.schema.required)) schema.required = this.schema.required.concat(type.required);
            }
            this.validators[i] = new (0, _validatorJs.Validator)(this.jsoneditor, schema, validatorOptions, this.defaults);
        });
        this.jsoneditor.on('change', ()=>{
            this.switchIf();
        });
        this.switchEditor(0);
    }
    onChildEditorChange(editor, eventData) {
        if (this.editors[this.type]) {
            this.refreshValue();
            this.refreshHeaderText();
        }
        super.onChildEditorChange(editor, eventData);
    }
    refreshHeaderText() {
        const displayText = this.getDisplayText(this.types);
        Array.from(this.switcher_options).forEach((option, i)=>{
            option.textContent = displayText[i];
        });
    }
    refreshValue() {
        if (!this.editors[this.type]) return;
        this.value = this.editors[this.type].getValue();
    }
    switchIf() {
        if (this.ifSchema && this.value) {
            const type = this.getIfType(this.value);
            if (this.lastType !== type) {
                this.switchEditor(type);
                this.editors[this.type].setValue(this.value, true);
            }
            this.switcher.value = this.display_text[this.type];
        }
    }
    getIfType(value) {
        const errors = this.jsoneditor.validator._validateSchema(this.ifSchema, value);
        return errors.length === 0 ? 0 : 1;
    }
    setValue(val, initial) {
        val = this.applyConstFilter(val);
        /* Determine type by getting the first one that validates */ const prevType = this.type;
        /* find the best match one */ let fitTestVal = {
            match: 0,
            extra: 0,
            i: this.type
        };
        const validVal = {
            match: 0,
            i: null
        };
        this.validators.forEach((validator, i)=>{
            let fitTestResult = null;
            if (typeof this.anyOf !== 'undefined' && this.anyOf) {
                fitTestResult = validator.fitTest(val);
                if (fitTestVal.match < fitTestResult.match) {
                    fitTestVal = fitTestResult;
                    fitTestVal.i = i;
                } else if (fitTestVal.match === fitTestResult.match) {
                    if (fitTestVal.extra > fitTestResult.extra) {
                        fitTestVal = fitTestResult;
                        fitTestVal.i = i;
                    }
                }
            }
            if (!validator.validate(val).length && validVal.i === null) {
                validVal.i = i;
                if (fitTestResult !== null) validVal.match = fitTestResult.match;
            } else fitTestVal = validVal;
        });
        let finalI = validVal.i;
        /* if the best fit schema has more match properties, then use the best fit schema. */ /* usually the value could be */ if (typeof this.anyOf !== 'undefined' && this.anyOf) {
            if (validVal.match < fitTestVal.match) finalI = fitTestVal.i;
        }
        if (this.if) finalI = this.getIfType(val);
        if (finalI === null) finalI = this.type;
        this.type = finalI;
        this.switcher.value = this.display_text[finalI];
        const typeChanged = this.type !== prevType;
        if (typeChanged) {
            this.switchEditor(this.type);
            this.editors[this.type].setValue(val, initial);
        }
        if (typeof val !== 'undefined') this.editors[this.type].setValue(val, initial);
        this.refreshValue();
        this.onChange(typeChanged);
    }
    destroy() {
        this.editors.forEach((editor)=>{
            if (editor) editor.destroy();
        });
        if (this.editor_holder && this.editor_holder.parentNode) this.editor_holder.parentNode.removeChild(this.editor_holder);
        if (this.switcher && this.switcher.parentNode) this.switcher.parentNode.removeChild(this.switcher);
        super.destroy();
    }
    showValidationErrors(errors) {
        /* oneOf and anyOf error paths need to remove the oneOf[i] part before passing to child editors */ if (this.oneOf || this.anyOf) {
            const checkPart = this.oneOf ? 'oneOf' : 'anyOf';
            this.editors.forEach((editor, i)=>{
                if (!editor) return;
                const check = `${this.path}.${checkPart}[${i}]`;
                const filterError = (newErrors, error)=>{
                    if (error.path.startsWith(check) || error.path === check.substr(0, error.path.length)) {
                        const newError = (0, _utilitiesJs.extend)({}, error);
                        if (error.path.startsWith(check)) newError.path = this.path + newError.path.substr(check.length);
                        newErrors.push(newError);
                    }
                    return newErrors;
                };
                editor.showValidationErrors(errors.reduce(filterError, []));
            });
        } else this.editors.forEach((editor)=>{
            if (!editor) return;
            editor.showValidationErrors(errors);
        });
    }
    addLinks() {
    // multiple editor itself don't create links
    }
}

},{"../editor.js":"24x9b","../validator.js":"jG1hc","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jG1hc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Validator", ()=>Validator);
var _ipValidatorJs = require("./validators/ip-validator.js");
var _utilitiesJs = require("./utilities.js");
class Validator {
    constructor(jsoneditor, schema, options, defaults){
        this.jsoneditor = jsoneditor;
        this.schema = schema || this.jsoneditor.schema;
        this.options = options || {};
        this.translate = this.jsoneditor.translate || defaults.translate;
        this.translateProperty = this.jsoneditor.translateProperty || defaults.translateProperty;
        this.defaults = defaults;
        this._validateSubSchema = {
            dependentRequired (schema, value, path) {
                const errors = [];
                if (typeof schema.dependentRequired !== 'undefined') {
                    let missingProperties = [];
                    Object.keys(schema.dependentRequired).forEach((key)=>{
                        if (typeof value[key] !== 'undefined') {
                            const requiredProperties = schema.dependentRequired[key];
                            missingProperties = requiredProperties.filter((property)=>{
                                return !(0, _utilitiesJs.hasOwnProperty)(value, property);
                            });
                        }
                    });
                    const invalid = missingProperties.length > 0;
                    if (invalid) errors.push({
                        message: 'Must have the required properties: ' + missingProperties.join(', '),
                        path
                    });
                }
                return errors;
            },
            dependentSchemas (schema, value, path) {
                let errors = [];
                Object.keys(schema.dependentSchemas).forEach((key)=>{
                    if (typeof value[key] !== 'undefined') {
                        const dependentSchema = schema.dependentSchemas[key];
                        const tmpErrors = this._validateSchema(dependentSchema, value, path);
                        errors = [
                            ...errors,
                            ...tmpErrors
                        ];
                    }
                });
                return errors;
            },
            contains (schema, value, path) {
                const errors = [];
                let counter = 0;
                value.forEach((item)=>{
                    const containsErrors = this._validateSchema(schema.contains, item, path);
                    if (containsErrors.length === 0) counter++;
                });
                const containsInvalid = counter === 0;
                if (typeof schema.minContains !== 'undefined') {
                    const minContainsInvalid = counter < schema.minContains;
                    if (minContainsInvalid) errors.push({
                        message: this.translate('error_minContains', [
                            counter,
                            schema.minContains
                        ], schema),
                        path
                    });
                } else if (containsInvalid) errors.push({
                    message: this.translate('error_contains', null, schema),
                    path
                });
                if (typeof schema.maxContains !== 'undefined') {
                    const maxContainsInvalid = counter > schema.maxContains;
                    if (maxContainsInvalid) errors.push({
                        message: this.translate('error_maxContains', [
                            counter,
                            schema.maxContains
                        ], schema),
                        path
                    });
                }
                return errors;
            },
            if (schema, value, path) {
                if (typeof schema.then === 'undefined' && typeof schema.else === 'undefined') return [];
                const ifErrors = this._validateSchema(schema.if, value, path);
                let thenErrors = [];
                let elseErrors = [];
                if (typeof schema.then !== 'undefined') thenErrors = this._validateSchema(schema.then, value, path);
                if (typeof schema.else !== 'undefined') elseErrors = this._validateSchema(schema.else, value, path);
                if (schema.if === true) return thenErrors;
                if (schema.if === false) return elseErrors;
                if (ifErrors.length === 0) return thenErrors;
                if (ifErrors.length > 0) return elseErrors;
                return [];
            },
            const (schema, value, path) {
                const valid = JSON.stringify(schema.const) === JSON.stringify(value);
                if (!valid) return [
                    {
                        path,
                        property: 'const',
                        message: this.translate('error_const', null, schema)
                    }
                ];
                return [];
            },
            enum (schema, value, path) {
                const stringified = JSON.stringify(value);
                const valid = schema.enum.some((e)=>stringified === JSON.stringify(e));
                if (!valid) return [
                    {
                        path,
                        property: 'enum',
                        message: this.translate('error_enum', null, schema)
                    }
                ];
                return [];
            },
            extends (schema, value, path) {
                const validate = (errors, e)=>{
                    errors.push(...this._validateSchema(e, value, path));
                    return errors;
                };
                return schema.extends.reduce(validate, []);
            },
            allOf (schema, value, path) {
                const validate = (errors, e)=>{
                    errors.push(...this._validateSchema(e, value, path));
                    return errors;
                };
                return schema.allOf.reduce(validate, []);
            },
            anyOf (schema, value, path) {
                const valid = schema.anyOf.some((e)=>!this._validateSchema(e, value, path).length);
                if (!valid) return [
                    {
                        path,
                        property: 'anyOf',
                        message: this.translate('error_anyOf', null, schema)
                    }
                ];
                return [];
            },
            oneOf (schema, value, path) {
                let valid = 0;
                const oneofErrors = [];
                schema.oneOf.forEach((o, i)=>{
                    /* Set the error paths to be path.oneOf[i].rest.of.path */ const tmp = this._validateSchema(o, value, path);
                    if (!tmp.length) valid++;
                    tmp.forEach((e)=>{
                        e.path = `${path}.oneOf[${i}]${e.path.substr(path.length)}`;
                    });
                    oneofErrors.push(...tmp);
                });
                const errors = [];
                if (valid !== 1) {
                    errors.push({
                        path,
                        property: 'oneOf',
                        message: this.translate('error_oneOf', [
                            valid
                        ], schema)
                    });
                    errors.push(...oneofErrors);
                }
                return errors;
            },
            not (schema, value, path) {
                if (!this._validateSchema(schema.not, value, path).length) return [
                    {
                        path,
                        property: 'not',
                        message: this.translate('error_not', null, schema)
                    }
                ];
                return [];
            },
            type (schema, value, path) {
                /* Union type */ if (Array.isArray(schema.type)) {
                    const valid = schema.type.some((e)=>this._checkType(e, value));
                    if (!valid) return [
                        {
                            path,
                            property: 'type',
                            message: this.translate('error_type_union', null, schema)
                        }
                    ];
                } else {
                    /* Simple type */ if ([
                        'date',
                        'time',
                        'datetime-local'
                    ].includes(schema.format) && schema.type === 'integer') {
                        /* Hack to get validator to validate as string even if value is integer */ /* As validation of 'date', 'time', 'datetime-local' is done in separate validator */ if (!this._checkType('string', `${value}`)) return [
                            {
                                path,
                                property: 'type',
                                message: this.translate('error_type', [
                                    schema.format
                                ], schema)
                            }
                        ];
                    } else if (!this._checkType(schema.type, value)) return [
                        {
                            path,
                            property: 'type',
                            message: this.translate('error_type', [
                                schema.type
                            ], schema)
                        }
                    ];
                }
                return [];
            },
            disallow (schema, value, path) {
                /* Union type */ if (Array.isArray(schema.disallow)) {
                    const invalid = schema.disallow.some((e)=>this._checkType(e, value));
                    if (invalid) return [
                        {
                            path,
                            property: 'disallow',
                            message: this.translate('error_disallow_union', null, schema)
                        }
                    ];
                } else {
                    /* Simple type */ if (this._checkType(schema.disallow, value)) return [
                        {
                            path,
                            property: 'disallow',
                            message: this.translate('error_disallow', [
                                schema.disallow
                            ], schema)
                        }
                    ];
                }
                return [];
            }
        };
        this._validateNumberSubSchema = {
            multipleOf (schema, value, path) {
                return this._validateNumberSubSchemaMultipleDivisible(schema, value, path);
            },
            divisibleBy (schema, value, path) {
                return this._validateNumberSubSchemaMultipleDivisible(schema, value, path);
            },
            maximum (schema, value, path) {
                /* Vanilla JS, prone to floating point rounding errors (e.g. .999999999999999 == 1) */ let valid = schema.exclusiveMaximum ? value < schema.maximum : value <= schema.maximum;
                /* Use math.js is available */ if (window.math) valid = window.math[schema.exclusiveMaximum ? 'smaller' : 'smallerEq'](window.math.bignumber(value), window.math.bignumber(schema.maximum));
                else if (window.Decimal) /* Use Decimal.js if available */ valid = new window.Decimal(value)[schema.exclusiveMaximum ? 'lt' : 'lte'](new window.Decimal(schema.maximum));
                if (!valid) return [
                    {
                        path,
                        property: 'maximum',
                        message: this.translate(schema.exclusiveMaximum ? 'error_maximum_excl' : 'error_maximum_incl', [
                            schema.maximum
                        ], schema)
                    }
                ];
                return [];
            },
            minimum (schema, value, path) {
                /* Vanilla JS, prone to floating point rounding errors (e.g. .999999999999999 == 1) */ let valid = schema.exclusiveMinimum ? value > schema.minimum : value >= schema.minimum;
                /* Use math.js is available */ if (window.math) valid = window.math[schema.exclusiveMinimum ? 'larger' : 'largerEq'](window.math.bignumber(value), window.math.bignumber(schema.minimum));
                else if (window.Decimal) valid = new window.Decimal(value)[schema.exclusiveMinimum ? 'gt' : 'gte'](new window.Decimal(schema.minimum));
                if (!valid) return [
                    {
                        path,
                        property: 'minimum',
                        message: this.translate(schema.exclusiveMinimum ? 'error_minimum_excl' : 'error_minimum_incl', [
                            schema.minimum
                        ], schema)
                    }
                ];
                return [];
            }
        };
        this._validateStringSubSchema = {
            maxLength (schema, value, path) {
                const errors = [];
                if (`${value}`.length > schema.maxLength) errors.push({
                    path,
                    property: 'maxLength',
                    message: this.translate('error_maxLength', [
                        schema.maxLength
                    ], schema)
                });
                return errors;
            },
            /* `minLength` */ minLength (schema, value, path) {
                if (`${value}`.length < schema.minLength) return [
                    {
                        path,
                        property: 'minLength',
                        message: this.translate(schema.minLength === 1 ? 'error_notempty' : 'error_minLength', [
                            schema.minLength
                        ], schema)
                    }
                ];
                return [];
            },
            /* `pattern` */ pattern (schema, value, path) {
                if (!new RegExp(schema.pattern).test(value)) return [
                    {
                        path,
                        property: 'pattern',
                        message: schema.options && schema.options.patternmessage ? schema.options.patternmessage : this.translate('error_pattern', [
                            schema.pattern
                        ], schema)
                    }
                ];
                return [];
            }
        };
        this._validateArraySubSchema = {
            items (schema, value, path) {
                const errors = [];
                if (Array.isArray(schema.items)) for(let i = 0; i < value.length; i++){
                    /* If this item has a specific schema tied to it */ /* Validate against it */ if (schema.items[i]) errors.push(...this._validateSchema(schema.items[i], value[i], `${path}.${i}`));
                    else if (schema.additionalItems === true) break;
                    else if (schema.additionalItems) errors.push(...this._validateSchema(schema.additionalItems, value[i], `${path}.${i}`));
                    else if (schema.additionalItems === false) {
                        errors.push({
                            path,
                            property: 'additionalItems',
                            message: this.translate('error_additionalItems', null, schema)
                        });
                        break;
                    /* Default for `additionalItems` is an empty schema */ } else break;
                }
                else /* Each item in the array must validate against the schema */ value.forEach((e, i)=>{
                    errors.push(...this._validateSchema(schema.items, e, `${path}.${i}`));
                });
                return errors;
            },
            maxItems (schema, value, path) {
                if (value.length > schema.maxItems) return [
                    {
                        path,
                        property: 'maxItems',
                        message: this.translate('error_maxItems', [
                            schema.maxItems
                        ], schema)
                    }
                ];
                return [];
            },
            minItems (schema, value, path) {
                if (value.length < schema.minItems) return [
                    {
                        path,
                        property: 'minItems',
                        message: this.translate('error_minItems', [
                            schema.minItems
                        ], schema)
                    }
                ];
                return [];
            },
            uniqueItems (schema, value, path) {
                const seen = {};
                for(let i = 0; i < value.length; i++){
                    const valid = JSON.stringify(value[i]);
                    if (seen[valid]) return [
                        {
                            path,
                            property: 'uniqueItems',
                            message: this.translate('error_uniqueItems', null, schema)
                        }
                    ];
                    seen[valid] = true;
                }
                return [];
            }
        };
        this._validateObjectSubSchema = {
            maxProperties (schema, value, path) {
                if (Object.keys(value).length > schema.maxProperties) return [
                    {
                        path,
                        property: 'maxProperties',
                        message: this.translate('error_maxProperties', [
                            schema.maxProperties
                        ], schema)
                    }
                ];
                return [];
            },
            minProperties (schema, value, path) {
                if (Object.keys(value).length < schema.minProperties) return [
                    {
                        path,
                        property: 'minProperties',
                        message: this.translate('error_minProperties', [
                            schema.minProperties
                        ], schema)
                    }
                ];
                return [];
            },
            required (schema, value, path) {
                const errors = [];
                if (Array.isArray(schema.required)) schema.required.forEach((e)=>{
                    if (typeof value[e] !== 'undefined') return;
                    const editor = this.jsoneditor.getEditor(`${path}.${e}`);
                    if (editor && editor.dependenciesFulfilled === false) return;
                    /* Ignore required error if editor is of type "button" or "info" */ if (editor && [
                        'button',
                        'info'
                    ].includes(editor.schema.format || editor.schema.type)) return;
                    errors.push({
                        path,
                        property: 'required',
                        message: this.translate('error_required', [
                            schema && schema.properties && schema.properties[e] && schema.properties[e].title ? schema.properties[e].title : e
                        ], schema)
                    });
                });
                return errors;
            },
            properties (schema, value, path, validatedProperties) {
                const errors = [];
                Object.entries(schema.properties).forEach(([key, prop])=>{
                    validatedProperties[key] = true;
                    errors.push(...this._validateSchema(prop, value[key], `${path}.${key}`));
                });
                return errors;
            },
            patternProperties (schema, value, path, validatedProperties) {
                const errors = [];
                Object.entries(schema.patternProperties).forEach(([i, prop])=>{
                    const regex = new RegExp(i);
                    /* Check which properties match */ Object.entries(value).forEach(([j, v])=>{
                        if (regex.test(j)) {
                            validatedProperties[j] = true;
                            errors.push(...this._validateSchema(prop, v, `${path}.${j}`));
                        }
                    });
                });
                return errors;
            }
        };
        this._validateObjectSubSchema2 = {
            propertyNames (schema, value, path, validatedProperties) {
                const errors = [];
                const keys = Object.keys(value);
                let k = null;
                for(let i = 0; i < keys.length; i++){
                    let msg = '';
                    let truthy = false;
                    k = keys[i];
                    /* Check property names that don't match */ if (typeof schema.propertyNames === 'boolean') {
                        if (schema.propertyNames === true) continue;
                        errors.push({
                            path,
                            property: 'propertyNames',
                            message: this.translate('error_property_names_false', [
                                k
                            ], schema)
                        });
                        break;
                    }
                    truthy = Object.entries(schema.propertyNames).every(([j, prop])=>{
                        let match = false;
                        let regex = null;
                        switch(j){
                            case 'maxLength':
                                if (typeof prop !== 'number') {
                                    msg = 'error_property_names_maxlength';
                                    break;
                                }
                                if (k.length > prop) {
                                    msg = 'error_property_names_exceeds_maxlength';
                                    break;
                                }
                                return true;
                            case 'const':
                                if (prop !== k) {
                                    msg = 'error_property_names_const_mismatch';
                                    break;
                                }
                                return true;
                            case 'enum':
                                if (!Array.isArray(prop)) {
                                    msg = 'error_property_names_enum';
                                    break;
                                }
                                prop.forEach((p)=>{
                                    if (p === k) match = true;
                                });
                                if (!match) {
                                    msg = 'error_property_names_enum_mismatch';
                                    break;
                                }
                                return true;
                            case 'pattern':
                                if (typeof prop !== 'string') {
                                    msg = 'error_property_names_pattern';
                                    break;
                                }
                                regex = new RegExp(prop);
                                if (!regex.test(k)) {
                                    msg = 'error_property_names_pattern_mismatch';
                                    break;
                                }
                                return true;
                            default:
                                errors.push({
                                    path,
                                    property: 'propertyNames',
                                    message: this.translate('error_property_names_unsupported', [
                                        j
                                    ], schema)
                                });
                                return false;
                        }
                        errors.push({
                            path,
                            property: 'propertyNames',
                            message: this.translate(msg, [
                                k
                            ], schema)
                        });
                        return false;
                    });
                    if (!truthy) break;
                }
                return errors;
            },
            additionalProperties (schema, value, path, validatedProperties) {
                const errors = [];
                const keys = Object.keys(value);
                for(let i = 0; i < keys.length; i++){
                    const k = keys[i];
                    if (validatedProperties[k]) continue;
                    /* No extra properties allowed */ if (!schema.additionalProperties) {
                        errors.push({
                            path,
                            property: 'additionalProperties',
                            message: this.translate('error_additional_properties', [
                                k
                            ], schema)
                        });
                        break;
                    /* Allowed */ } else if (schema.additionalProperties === true) break;
                    else errors.push(...this._validateSchema(schema.additionalProperties, value[k], `${path}.${k}`));
                }
                return errors;
            },
            dependencies (schema, value, path) {
                const errors = [];
                Object.entries(schema.dependencies).forEach(([i, dep])=>{
                    /* Doesn't need to meet the dependency */ if (typeof value[i] === 'undefined') return;
                    /* Property dependency */ if (Array.isArray(dep)) dep.forEach((d)=>{
                        if (typeof value[d] === 'undefined') errors.push({
                            path,
                            property: 'dependencies',
                            message: this.translate('error_dependency', [
                                d
                            ], schema)
                        });
                    });
                    else errors.push(...this._validateSchema(dep, value, path));
                });
                return errors;
            }
        };
    }
    fitTest(value, givenSchema, weight = 10000000) {
        const fit = {
            match: 0,
            extra: 0
        };
        if (typeof value === 'object' && value !== null) {
            /* Work on a copy of the schema */ const schema = this._getSchema(givenSchema);
            /* If the schema is an anyOf declaration, do use the properties of the allowed sub schemata instead.
      Of these sub schemata, the best fit is selected */ if (schema.anyOf) {
                let bestFit = {
                    ...fit
                };
                for (const subSchema of schema.anyOf){
                    const subFit = this.fitTest(value, subSchema, weight);
                    /* The best fit is the one with the best value for match. If there are multiple results
          with the same match value, use the one with the least number of extra properties */ if (subFit.match > bestFit.match || subFit.match === bestFit.match && subFit.extra < bestFit.extra) bestFit = subFit;
                }
                return bestFit;
            } else {
                const properties = this._getSchema(givenSchema).properties;
                for(const i in properties){
                    if (!(0, _utilitiesJs.hasOwnProperty)(properties, i)) {
                        fit.extra += weight;
                        continue;
                    }
                    if (typeof value[i] === 'object' && typeof properties[i] === 'object' && typeof properties[i].properties === 'object') {
                        const result = this.fitTest(value[i], properties[i], weight / 100);
                        fit.match += result.match;
                        fit.extra += result.extra;
                    }
                    if (typeof value[i] !== 'undefined') fit.match += weight;
                }
            }
        }
        return fit;
    }
    _getSchema(schema) {
        return typeof schema === 'undefined' ? (0, _utilitiesJs.extend)({}, this.jsoneditor.expandRefs(this.schema)) : schema;
    }
    validate(value) {
        return this._validateSchema(this.schema, value);
    }
    _validateSchema(schema, value, path) {
        const errors = [];
        path = path || this.jsoneditor.root.formname;
        /* Work on a copy of the schema */ schema = (0, _utilitiesJs.extend)({}, this.jsoneditor.expandRefs(schema));
        /*
     * Type Agnostic Validation
     */ /* Version 3 `required` and `required_by_default` */ if (typeof value === 'undefined') return this._validateV3Required(schema, value, path);
        Object.keys(schema).forEach((key)=>{
            if (this._validateSubSchema[key]) errors.push(...this._validateSubSchema[key].call(this, schema, value, path));
        });
        /*
     * Type Specific Validation
     */ errors.push(...this._validateByValueType(schema, value, path));
        if (schema.links) schema.links.forEach((s, m)=>{
            if (s.rel && s.rel.toLowerCase() === 'describedby') {
                schema = this._expandSchemaLink(schema, m);
                errors.push(...this._validateSchema(schema, value, path, this.translate));
            }
        });
        /* date, time and datetime-local validation */ if ([
            'date',
            'time',
            'datetime-local'
        ].includes(schema.format)) errors.push(...this._validateDateTimeSubSchema(schema, value, path));
        /* uuid validation */ if ([
            'uuid'
        ].includes(schema.format)) errors.push(...this._validateUUIDSchema(schema, value, path));
        /* custom validator */ errors.push(...this._validateCustomValidator(schema, value, path));
        /* Remove duplicate errors and add "errorcount" property */ return this._removeDuplicateErrors(errors);
    }
    _expandSchemaLink(schema, m) {
        const href = schema.links[m].href;
        const data = this.jsoneditor.root.getValue();
        const template = this.jsoneditor.compileTemplate(href, this.jsoneditor.template);
        const ref = document.location.origin + document.location.pathname + template(data);
        schema.links = schema.links.slice(0, m).concat(schema.links.slice(m + 1));
        return (0, _utilitiesJs.extend)({}, schema, this.jsoneditor.refs[ref]);
    }
    _validateV3Required(schema, value, path) {
        if ((typeof schema.required !== 'undefined' && schema.required === true || typeof schema.required === 'undefined' && this.jsoneditor.options.required_by_default === true) && schema.type !== 'info') return [
            {
                path,
                property: 'required',
                message: this.translate('error_notset', null, schema)
            }
        ];
        return [];
    }
    _validateByValueType(schema, value, path) {
        const errors = [];
        if (value === null) return errors;
        /* Number Specific Validation */ if (typeof value === 'number') /* `multipleOf` and `divisibleBy` */ /* `maximum` */ /* `minimum` */ Object.keys(schema).forEach((key)=>{
            if (this._validateNumberSubSchema[key]) errors.push(...this._validateNumberSubSchema[key].call(this, schema, value, path));
        });
        else if (typeof value === 'string') /* `maxLength` */ /* `minLength` */ /* `pattern` */ Object.keys(schema).forEach((key)=>{
            if (this._validateStringSubSchema[key]) errors.push(...this._validateStringSubSchema[key].call(this, schema, value, path));
        });
        else if (Array.isArray(value)) /* `items` and `additionalItems`
      /* `maxItems`
      /* `minItems`
      /* `uniqueItems` */ Object.keys(schema).forEach((key)=>{
            if (this._validateArraySubSchema[key]) errors.push(...this._validateArraySubSchema[key].call(this, schema, value, path));
        });
        else if (typeof value === 'object') {
            const validatedProperties = {};
            /* `maxProperties`
      /* `minProperties`
      /*  Version 4 `required`
      /* `properties`
      /* `patternProperties` */ Object.keys(schema).forEach((key)=>{
                if (this._validateObjectSubSchema[key]) errors.push(...this._validateObjectSubSchema[key].call(this, schema, value, path, validatedProperties));
            });
            /* The no_additional_properties option currently doesn't work with extended schemas that use oneOf or anyOf or allOf */ if (typeof schema.additionalProperties === 'undefined' && this.jsoneditor.options.no_additional_properties && !schema.oneOf && !schema.anyOf && !schema.allOf) schema.additionalProperties = false;
            /* `additionalProperties` */ /* `dependencies` */ Object.keys(schema).forEach((key)=>{
                if (typeof this._validateObjectSubSchema2[key] !== 'undefined') errors.push(...this._validateObjectSubSchema2[key].call(this, schema, value, path, validatedProperties));
            });
        }
        return errors;
    }
    _validateUUIDSchema(schema, value, path) {
        if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value)) return [
            {
                path,
                property: 'format',
                message: this.translate('error_pattern', [
                    '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$'
                ], schema)
            }
        ];
        return [];
    }
    _validateNumberSubSchemaMultipleDivisible(schema, value, path) {
        const divisor = schema.multipleOf || schema.divisibleBy;
        /* Vanilla JS, prone to floating point rounding errors (e.g. 1.14 / .01 == 113.99999) */ let valid = value / divisor === Math.floor(value / divisor);
        /* Use math.js is available */ if (window.math) valid = window.math.mod(window.math.bignumber(value), window.math.bignumber(divisor)).equals(0);
        else if (window.Decimal) /* Use decimal.js is available */ valid = new window.Decimal(value).mod(new window.Decimal(divisor)).equals(0);
        if (!valid) return [
            {
                path,
                property: schema.multipleOf ? 'multipleOf' : 'divisibleBy',
                message: this.translate('error_multipleOf', [
                    divisor
                ], schema)
            }
        ];
        return [];
    }
    _validateDateTimeSubSchema(schema, value, path) {
        const _validateInteger = (schema, value, path)=>{
            /* The value is a timestamp */ if (value * 1 < 1) /* If value is less than 1, then it's an invalid epoch date before 00:00:00 UTC Thursday, 1 January 1970 */ return [
                {
                    path,
                    property: 'format',
                    message: this.translate('error_invalid_epoch', null, schema)
                }
            ];
            else if (value !== Math.abs(parseInt(value))) /* not much to check for, so we assume value is ok if it's a positive number */ return [
                {
                    path,
                    property: 'format',
                    message: this.translate(`error_${schema.format.replace(/-/g, '_')}`, [
                        dateFormat
                    ], schema)
                }
            ];
            return [];
        };
        const _validateFlatPicker = (schema, value, path, editor)=>{
            if (value !== '') {
                let compareValue;
                if (editor.flatpickr.config.mode !== 'single') {
                    const seperator = editor.flatpickr.config.mode === 'range' ? editor.flatpickr.l10n.rangeSeparator : ', ';
                    const selectedDates = editor.flatpickr.selectedDates.map((val)=>editor.flatpickr.formatDate(val, editor.flatpickr.config.dateFormat));
                    compareValue = selectedDates.join(seperator);
                }
                try {
                    if (compareValue) {
                        /* Not the best validation method, but range and multiple mode are special */ /* Optimal solution would be if it is possible to change the return format from string/integer to array */ if (compareValue !== value) throw new Error(`${editor.flatpickr.config.mode} mismatch`);
                    } else if (editor.flatpickr.formatDate(editor.flatpickr.parseDate(value, editor.flatpickr.config.dateFormat), editor.flatpickr.config.dateFormat) !== value) throw new Error('mismatch');
                } catch (err) {
                    const errorDateFormat = editor.flatpickr.config.errorDateFormat !== undefined ? editor.flatpickr.config.errorDateFormat : editor.flatpickr.config.dateFormat;
                    return [
                        {
                            path,
                            property: 'format',
                            message: this.translate(`error_${editor.format.replace(/-/g, '_')}`, [
                                errorDateFormat
                            ], schema)
                        }
                    ];
                }
            }
            return [];
        };
        const validatorRx = {
            date: /^(\d{4}\D\d{2}\D\d{2})$/,
            time: /^(\d{2}:\d{2}(?::\d{2})?)$/,
            'datetime-local': /^(\d{4}\D\d{2}\D\d{2}[ T]\d{2}:\d{2}(?::\d{2})?)$/
        };
        const format = {
            date: '"YYYY-MM-DD"',
            time: '"HH:MM"',
            'datetime-local': '"YYYY-MM-DD HH:MM"'
        };
        const editor = this.jsoneditor.getEditor(path);
        const dateFormat = editor && editor.flatpickr ? editor.flatpickr.config.dateFormat : format[schema.format];
        if (schema.type === 'integer') return _validateInteger(schema, value, path);
        else if (!editor || !editor.flatpickr) {
            /* Standard string input, without flatpickr */ if (!validatorRx[schema.format].test(value)) return [
                {
                    path,
                    property: 'format',
                    message: this.translate(`error_${schema.format.replace(/-/g, '_')}`, [
                        dateFormat
                    ], schema)
                }
            ];
        } else if (editor) /* Flatpickr validation */ return _validateFlatPicker(schema, value, path, editor);
        return [];
    }
    _validateCustomValidator(schema, value, path) {
        const errors = [];
        /* Internal validators using the custom validator format */ errors.push(...(0, _ipValidatorJs.ipValidator).call(this, schema, value, path, this.translate));
        const validate = (validator)=>{
            errors.push(...validator.call(this, schema, value, path));
        };
        /* Custom type validation (global) */ this.defaults.custom_validators.forEach(validate);
        /* Custom type validation (instance specific) */ if (this.options.custom_validators) this.options.custom_validators.forEach(validate);
        return errors;
    }
    _removeDuplicateErrors(errors) {
        return errors.reduce((err, obj)=>{
            let first = true;
            if (!err) err = [];
            err.forEach((a)=>{
                if (a.message === obj.message && a.path === obj.path && a.property === obj.property) {
                    a.errorcount++;
                    first = false;
                }
            });
            if (first) {
                obj.errorcount = 1;
                err.push(obj);
            }
            return err;
        }, []);
    }
    _checkType(type, value) {
        const types = {
            string: (value)=>typeof value === 'string',
            number: (value)=>typeof value === 'number',
            integer: (value)=>typeof value === 'number' && value === Math.floor(value),
            boolean: (value)=>typeof value === 'boolean',
            array: (value)=>Array.isArray(value),
            object: (value)=>value !== null && !Array.isArray(value) && typeof value === 'object',
            null: (value)=>value === null
        };
        /* Simple types */ if (typeof type === 'string') {
            if (types[type]) return types[type](value);
            else return true;
        /* Schema */ } else return !this._validateSchema(type, value).length;
    }
}

},{"./validators/ip-validator.js":"9gKPY","./utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9gKPY":[function(require,module,exports,__globalThis) {
/* Implements ipv4, ipv6 and hostname format validations as per https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-7.3.4 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ipValidator", ()=>ipValidator);
const validateIpv4 = (value)=>{
    const parts = value.split('.');
    if (parts.length !== 4) throw new Error('error_ipv4');
    parts.forEach((part)=>{
        if (isNaN(+part) || +part < 0 || +part > 255) throw new Error('error_ipv4');
    });
};
const validateIpv6 = (value)=>{
    if (!value.match('^(?:(?:(?:[a-fA-F0-9]{1,4}:){6}|(?=(?:[a-fA-F0-9]{0,4}:){2,6}(?:[0-9]{1,3}.){3}[0-9]{1,3}$)(([0-9a-fA-F]{1,4}:){1,5}|:)((:[0-9a-fA-F]{1,4}){1,5}:|:)|::(?:[a-fA-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]).){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])|(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|(?=(?:[a-fA-F0-9]{0,4}:){0,7}[a-fA-F0-9]{0,4}$)(([0-9a-fA-F]{1,4}:){1,7}|:)((:[0-9a-fA-F]{1,4}){1,7}|:)|(?:[a-fA-F0-9]{1,4}:){7}:|:(:[a-fA-F0-9]{1,4}){7})$')) throw new Error('error_ipv6');
};
const validateHostname = (value)=>{
    if (!value.match('(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9].)+[a-zA-Z]{2,63}$)')) throw new Error('error_hostname');
};
function ipValidator(schema, value, path, translate) {
    try {
        switch(schema.format){
            case 'ipv4':
                validateIpv4(value);
                break;
            case 'ipv6':
                validateIpv6(value);
                break;
            case 'hostname':
                validateHostname(value);
                break;
        }
        return [];
    } catch (err) {
        return [
            {
                path,
                property: 'format',
                message: translate(err.message)
            }
        ];
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJjBC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NullEditor", ()=>NullEditor);
var _editorJs = require("../editor.js");
class NullEditor extends (0, _editorJs.AbstractEditor) {
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        return null;
    }
    setValue() {
        this.onChange();
    }
    getNumColumns() {
        return 2;
    }
}

},{"../editor.js":"24x9b","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9lvjZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ObjectEditor", ()=>ObjectEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
var _objectCssJs = require("./object.css.js");
var _objectCssJsDefault = parcelHelpers.interopDefault(_objectCssJs);
class ObjectEditor extends (0, _editorJs.AbstractEditor) {
    constructor(options, defaults, depth){
        super(options, defaults);
        this.currentDepth = depth;
    }
    getChildEditors() {
        return this.editors;
    }
    register() {
        super.register();
        if (this.editors) Object.values(this.editors).forEach((e)=>e.register());
    }
    unregister() {
        super.unregister();
        if (this.editors) Object.values(this.editors).forEach((e)=>e.unregister());
    }
    getNumColumns() {
        return Math.max(Math.min(12, this.maxwidth), 3);
    }
    enable() {
        if (!this.always_disabled) {
            if (this.editjson_control) this.editjson_control.disabled = false;
            if (this.addproperty_button) this.addproperty_button.disabled = false;
            super.enable();
            if (this.editors) Object.values(this.editors).forEach((e)=>{
                if (e.isActive() || e.isUiOnly) e.enable();
                if (e.optInCheckbox) e.optInCheckbox.disabled = false;
            });
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        if (this.editjson_control) this.editjson_control.disabled = true;
        if (this.addproperty_button) this.addproperty_button.disabled = true;
        this.hideEditJSON();
        super.disable();
        if (this.editors) Object.values(this.editors).forEach((e)=>{
            if (e.isActive() || e.isUiOnly) e.disable(alwaysDisabled);
            e.optInCheckbox.disabled = true;
        });
    }
    layoutEditors() {
        let i;
        let j;
        if (!this.row_container) return;
        /* Sort editors by propertyOrder */ this.property_order = Object.keys(this.editors);
        this.property_order = this.property_order.sort((a, b)=>{
            let ordera = this.editors[a].schema.propertyOrder;
            let orderb = this.editors[b].schema.propertyOrder;
            if (typeof ordera !== 'number') ordera = 1000;
            if (typeof orderb !== 'number') orderb = 1000;
            return ordera - orderb;
        });
        let container;
        const isCategoriesFormat = this.format === 'categories';
        const rows = [];
        let key = null;
        let editor = null;
        let row;
        if (this.format === 'grid-strict') {
            let rowIndex = 0;
            row = [];
            this.property_order.forEach((key)=>{
                const editor = this.editors[key];
                if (editor.property_removed) return;
                const width = editor.options.hidden ? 0 : editor.options.grid_columns || editor.getNumColumns();
                const offset = editor.options.hidden ? 0 : editor.options.grid_offset || 0;
                const gridBreak = editor.options.hidden ? false : editor.options.grid_break || false;
                const height = editor.options.hidden ? 0 : editor.container.offsetHeight;
                const column = {
                    key,
                    width,
                    offset,
                    height
                };
                row.push(column);
                rows[rowIndex] = row;
                if (gridBreak) {
                    rowIndex++;
                    row = [];
                }
            });
            /* layout hasn't changed */ if (this.layout === JSON.stringify(rows)) return false;
            this.layout = JSON.stringify(rows);
            /* Layout the form */ container = document.createElement('div');
            for(i = 0; i < rows.length; i++){
                row = this.theme.getGridRow();
                container.appendChild(row);
                for(j = 0; j < rows[i].length; j++){
                    key = rows[i][j].key;
                    editor = this.editors[key];
                    if (editor.options.hidden) editor.container.style.display = 'none';
                    else this.theme.setGridColumnSize(editor.container, rows[i][j].width, rows[i][j].offset);
                    row.appendChild(editor.container);
                }
            }
        } else if (this.format === 'grid') {
            this.property_order.forEach((key)=>{
                const editor = this.editors[key];
                if (editor.property_removed) return;
                let found = false;
                const width = editor.options.hidden ? 0 : editor.options.grid_columns || editor.getNumColumns();
                const height = editor.options.hidden ? 0 : editor.container.offsetHeight;
                /* See if the editor will fit in any of the existing rows first */ for(let i = 0; i < rows.length; i++){
                    /* If the editor will fit in the row horizontally */ if (rows[i].width + width <= 12) /* If the editor is close to the other elements in height */ /* i.e. Don't put a really tall editor in an otherwise short row or vice versa */ {
                        if (!height || rows[i].minh * 0.5 < height && rows[i].maxh * 2 > height) found = i;
                    }
                }
                /* If there isn't a spot in any of the existing rows, start a new row */ if (found === false) {
                    rows.push({
                        width: 0,
                        minh: 999999,
                        maxh: 0,
                        editors: []
                    });
                    found = rows.length - 1;
                }
                rows[found].editors.push({
                    key,
                    /* editor: editor, */ width,
                    height
                });
                rows[found].width += width;
                rows[found].minh = Math.min(rows[found].minh, height);
                rows[found].maxh = Math.max(rows[found].maxh, height);
            });
            /* Make almost full rows width 12 */ /* Do this by increasing all editors' sizes proprotionately */ /* Any left over space goes to the biggest editor */ /* Don't touch rows with a width of 6 or less */ for(i = 0; i < rows.length; i++)if (rows[i].width < 12) {
                let biggest = false;
                let newWidth = 0;
                for(j = 0; j < rows[i].editors.length; j++){
                    if (biggest === false) biggest = j;
                    else if (rows[i].editors[j].width > rows[i].editors[biggest].width) biggest = j;
                    rows[i].editors[j].width *= 12 / rows[i].width;
                    rows[i].editors[j].width = Math.floor(rows[i].editors[j].width);
                    newWidth += rows[i].editors[j].width;
                }
                if (newWidth < 12) rows[i].editors[biggest].width += 12 - newWidth;
                rows[i].width = 12;
            }
            /* layout hasn't changed */ if (this.layout === JSON.stringify(rows)) return false;
            this.layout = JSON.stringify(rows);
            /* Layout the form */ container = document.createElement('div');
            for(i = 0; i < rows.length; i++){
                row = this.theme.getGridRow();
                container.appendChild(row);
                for(j = 0; j < rows[i].editors.length; j++){
                    key = rows[i].editors[j].key;
                    editor = this.editors[key];
                    if (editor.options.hidden) editor.container.style.display = 'none';
                    else this.theme.setGridColumnSize(editor.container, rows[i].editors[j].width);
                    row.appendChild(editor.container);
                }
            }
        /* Normal layout */ } else {
            container = document.createElement('div');
            if (isCategoriesFormat) {
                /* A container for properties not object nor arrays */ const containerSimple = document.createElement('div');
                /* This will be the place to (re)build tabs and panes */ /* tabs_holder has 2 childs, [0]: ul.nav.nav-tabs and [1]: div.tab-content */ const newTabsHolder = this.theme.getTopTabHolder(this.translateProperty(this.schema.title));
                /* child [1] of previous, stores panes */ const newTabPanesContainer = this.theme.getTopTabContentHolder(newTabsHolder);
                this.property_order.forEach((key)=>{
                    const editor = this.editors[key];
                    if (editor.property_removed) return;
                    const aPane = this.theme.getTabContent();
                    const isObjOrArray = editor.schema && (editor.schema.type === 'object' || editor.schema.type === 'array');
                    /* mark the pane */ aPane.isObjOrArray = isObjOrArray;
                    const gridRow = this.theme.getGridRow();
                    /* this happens with added properties, they don't have a tab */ if (!editor.tab) {
                        /* Pass the pane which holds the editor */ if (typeof this.basicPane === 'undefined') /* There is no basicPane yet, so aPane will be it */ this.addRow(editor, newTabsHolder, aPane);
                        else this.addRow(editor, newTabsHolder, this.basicPane);
                    }
                    aPane.id = this.getValidId(editor.tab_text.textContent);
                    /* For simple properties, add them on the same panel (Basic) */ if (!isObjOrArray) {
                        containerSimple.appendChild(gridRow);
                        /* There are already some panes */ if (newTabPanesContainer.childElementCount > 0) /* If first pane is object or array, insert before a simple pane */ {
                            if (newTabPanesContainer.firstChild.isObjOrArray) {
                                /* Append pane for simple properties */ aPane.appendChild(containerSimple);
                                newTabPanesContainer.insertBefore(aPane, newTabPanesContainer.firstChild);
                                /* Add "Basic" tab */ this.theme.insertBasicTopTab(editor.tab, newTabsHolder);
                                /* newTabs_holder.firstChild.insertBefore(editor.tab,newTabs_holder.firstChild.firstChild); */ /* Update the basicPane */ editor.basicPane = aPane;
                            }
                        /* We already have a first "Basic" pane, just add the new property to it, so */ /* do nothing; */ } else {
                            /* Append pane for simple properties */ aPane.appendChild(containerSimple);
                            newTabPanesContainer.appendChild(aPane);
                            /* Add "Basic" tab */ /* newTabs_holder.firstChild.appendChild(editor.tab); */ this.theme.addTopTab(newTabsHolder, editor.tab);
                            /* Update the basicPane */ editor.basicPane = aPane;
                        }
                    /* Objects and arrays earn their own panes */ } else {
                        aPane.appendChild(gridRow);
                        newTabPanesContainer.appendChild(aPane);
                        /* newTabs_holder.firstChild.appendChild(editor.tab); */ this.theme.addTopTab(newTabsHolder, editor.tab);
                    }
                    if (editor.options.hidden) editor.container.style.display = 'none';
                    else this.theme.setGridColumnSize(editor.container, 12);
                    /* Now, add the property editor to the row */ gridRow.appendChild(editor.container);
                    /* Update the rowPane (same as this.rows[x].rowPane) */ editor.rowPane = aPane;
                });
                /* Erase old panes */ while(this.tabPanesContainer.firstChild)this.tabPanesContainer.removeChild(this.tabPanesContainer.firstChild);
                /* Erase old tabs and set the new ones */ const parentTabsHolder = this.tabs_holder.parentNode;
                parentTabsHolder.removeChild(parentTabsHolder.firstChild);
                parentTabsHolder.appendChild(newTabsHolder);
                this.tabPanesContainer = newTabPanesContainer;
                this.tabs_holder = newTabsHolder;
                /* Activate the first tab */ const firstTab = this.theme.getFirstTab(this.tabs_holder);
                if (firstTab) (0, _utilitiesJs.trigger)(firstTab, 'click');
                return;
            /* Normal layout */ }
            this.property_order.forEach((key)=>{
                const editor = this.editors[key];
                if (editor.property_removed) return;
                row = this.theme.getGridRow();
                container.appendChild(row);
                if (editor.options.hidden) editor.container.style.display = 'none';
                else this.theme.setGridColumnSize(editor.container, 12);
                row.appendChild(editor.container);
            });
        }
        /* for grid and normal layout */ while(this.row_container.firstChild)this.row_container.removeChild(this.row_container.firstChild);
        this.row_container.appendChild(container);
    }
    getPropertySchema(key) {
        /* Schema declared directly in properties */ let schema = this.schema.properties[key] || {};
        schema = (0, _utilitiesJs.extend)({}, schema);
        let matched = !!this.schema.properties[key];
        /* Any matching patternProperties should be merged in */ if (this.schema.patternProperties) Object.keys(this.schema.patternProperties).forEach((i)=>{
            const regex = new RegExp(i);
            if (regex.test(key)) {
                schema.allOf = schema.allOf || [];
                schema.allOf.push(this.schema.patternProperties[i]);
                matched = true;
            }
        });
        /* Hasn't matched other rules, use additionalProperties schema */ if (!matched && this.schema.additionalProperties && typeof this.schema.additionalProperties === 'object') schema = (0, _utilitiesJs.extend)({}, this.schema.additionalProperties);
        return schema;
    }
    preBuild() {
        super.preBuild();
        this.editors = {};
        this.cached_editors = {};
        this.format = this.options.layout || this.options.object_layout || this.schema.format || this.jsoneditor.options.object_layout || 'normal';
        this.schema.properties = this.schema.properties || {};
        this.minwidth = 0;
        this.maxwidth = 0;
        /* If the object should be rendered as a table row */ if (this.options.table_row) {
            Object.entries(this.schema.properties).forEach(([key, schema])=>{
                const editor = this.jsoneditor.getEditorClass(schema);
                this.editors[key] = this.jsoneditor.createEditor(editor, {
                    jsoneditor: this.jsoneditor,
                    schema,
                    path: `${this.path}.${key}`,
                    parent: this,
                    compact: true,
                    required: true
                }, this.currentDepth + 1);
                this.editors[key].preBuild();
                const width = this.editors[key].options.hidden ? 0 : this.editors[key].options.grid_columns || this.editors[key].getNumColumns();
                this.minwidth += width;
                this.maxwidth += width;
            });
            this.no_link_holder = true;
        /* If the object should be rendered as a table */ } else if (this.options.table) /* TODO: table display format */ throw new Error('Not supported yet');
        else {
            if (!this.schema.defaultProperties) {
                if (this.jsoneditor.options.display_required_only || this.options.display_required_only) this.schema.defaultProperties = Object.keys(this.schema.properties).filter((k)=>this.isRequiredObject({
                        key: k,
                        schema: this.schema.properties[k]
                    }));
                else this.schema.defaultProperties = Object.keys(this.schema.properties);
            }
            /* Increase the grid width to account for padding */ this.maxwidth += 1;
            /* Check for array (eg. meta-schema options is an object) */ if (Array.isArray(this.schema.defaultProperties)) this.schema.defaultProperties.forEach((key)=>{
                this.addObjectProperty(key, true);
                if (this.editors[key]) {
                    this.minwidth = Math.max(this.minwidth, this.editors[key].options.grid_columns || this.editors[key].getNumColumns());
                    this.maxwidth += this.editors[key].options.grid_columns || this.editors[key].getNumColumns();
                }
            });
        }
        /* Sort editors by propertyOrder */ this.property_order = Object.keys(this.editors);
        this.property_order = this.property_order.sort((a, b)=>{
            let ordera = this.editors[a].schema.propertyOrder;
            let orderb = this.editors[b].schema.propertyOrder;
            if (typeof ordera !== 'number') ordera = 1000;
            if (typeof orderb !== 'number') orderb = 1000;
            return ordera - orderb;
        });
    }
    /* "Borrow" from arrays code */ addTab(idx) {
        const isObjOrArray = this.rows[idx].schema && (this.rows[idx].schema.type === 'object' || this.rows[idx].schema.type === 'array');
        if (this.tabs_holder) {
            this.rows[idx].tab_text = document.createElement('span');
            if (!isObjOrArray) this.rows[idx].tab_text.textContent = typeof this.schema.basicCategoryTitle === 'undefined' ? 'Basic' : this.schema.basicCategoryTitle;
            else this.rows[idx].tab_text.textContent = this.rows[idx].getHeaderText();
            this.rows[idx].tab = this.theme.getTopTab(this.rows[idx].tab_text, this.getValidId(this.rows[idx].tab_text.textContent));
            this.rows[idx].tab.addEventListener('click', (e)=>{
                this.active_tab = this.rows[idx].tab;
                this.refreshTabs();
                e.preventDefault();
                e.stopPropagation();
            });
        }
    }
    addRow(editor, tabHolder, aPane) {
        const rowsLen = this.rows.length;
        const isObjOrArray = editor.schema.type === 'object' || editor.schema.type === 'array';
        /* Add a row */ this.rows[rowsLen] = editor;
        /* rowPane stores the editor corresponding pane to set the display style when refreshing Tabs */ this.rows[rowsLen].rowPane = aPane;
        if (!isObjOrArray) {
            /* This is the first simple property to be added, */ /* add a ("Basic") tab for it and save it's row number */ if (typeof this.basicTab === 'undefined') {
                this.addTab(rowsLen);
                /* Store the index row of the first simple property added */ this.basicTab = rowsLen;
                this.basicPane = aPane;
                this.theme.addTopTab(tabHolder, this.rows[rowsLen].tab);
            } else {
                /* Any other simple property gets the same tab (and the same pane) as the first one, */ /* so, when 'click' event is fired from a row, it gets the correct ("Basic") tab */ this.rows[rowsLen].tab = this.rows[this.basicTab].tab;
                this.rows[rowsLen].tab_text = this.rows[this.basicTab].tab_text;
                this.rows[rowsLen].rowPane = this.rows[this.basicTab].rowPane;
            }
        } else {
            this.addTab(rowsLen);
            this.theme.addTopTab(tabHolder, this.rows[rowsLen].tab);
        }
    }
    /* Mark the active tab and make visible the corresponding pane, hide others */ refreshTabs(refreshHeaders) {
        const basicTabPresent = typeof this.basicTab !== 'undefined';
        let basicTabRefreshed = false;
        this.rows.forEach((row)=>{
            /* If it's an orphan row (some property which has been deleted), return */ if (!row.tab || !row.rowPane || !row.rowPane.parentNode) return;
            if (basicTabPresent && row.tab === this.rows[this.basicTab].tab && basicTabRefreshed) return;
            if (refreshHeaders) row.tab_text.textContent = row.getHeaderText();
            else {
                /* All rows of simple properties point to the same tab, so refresh just once */ if (basicTabPresent && row.tab === this.rows[this.basicTab].tab) basicTabRefreshed = true;
                if (row.tab === this.active_tab) this.theme.markTabActive(row);
                else this.theme.markTabInactive(row);
            }
        });
    }
    build() {
        const isCategoriesFormat = this.format === 'categories';
        this.rows = [];
        this.active_tab = null;
        /* If the object should be rendered as a table row */ if (this.options.table_row) {
            this.editor_holder = this.container;
            Object.entries(this.editors).forEach(([key, editor])=>{
                const holder = this.theme.getTableCell();
                this.editor_holder.appendChild(holder);
                editor.setContainer(holder);
                editor.build();
                editor.postBuild();
                editor.setOptInCheckbox(editor.header);
                editor.setValue(editor.getDefault(), true);
                if (this.editors[key].options.hidden) holder.style.display = 'none';
                if (this.editors[key].options.input_width) holder.style.width = this.editors[key].options.input_width;
            });
        /* If the object should be rendered as a table */ } else if (this.options.table) /* TODO: table display format */ throw new Error('Not supported yet');
        else {
            this.header = '';
            if (!this.options.compact) {
                this.header = document.createElement('span');
                this.header.textContent = this.getTitle();
            }
            this.title = this.theme.getHeader(this.header, this.getPathDepth());
            this.title.classList.add('je-object__title');
            this.controls = this.theme.getButtonHolder();
            this.controls.classList.add('je-object__controls');
            this.container.appendChild(this.title);
            this.container.appendChild(this.controls);
            this.container.classList.add('je-object__container');
            /* Edit JSON modal */ this.editjson_holder = this.theme.getModal();
            this.editjson_textarea_label = this.theme.getHiddenLabel(this.translate('button_edit_json'));
            this.editjson_textarea_label.setAttribute('for', this.path + '-' + 'edit-json-textarea');
            this.editjson_textarea = this.theme.getTextareaInput();
            this.editjson_textarea.setAttribute('id', this.path + '-' + 'edit-json-textarea');
            this.editjson_textarea.setAttribute('aria-labelledby', this.path + '-' + 'edit-json-textarea');
            this.editjson_textarea.classList.add('je-edit-json--textarea');
            this.editjson_save = this.getButton('button_save', 'save', 'button_save');
            this.editjson_save.classList.add('json-editor-btntype-save');
            this.editjson_save.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.saveJSON();
            });
            this.editjson_copy = this.getButton('button_copy', 'copy', 'button_copy');
            this.editjson_copy.classList.add('json-editor-btntype-copy');
            this.editjson_copy.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.copyJSON();
            });
            this.editjson_cancel = this.getButton('button_cancel', 'cancel', 'button_cancel');
            this.editjson_cancel.classList.add('json-editor-btntype-cancel');
            this.editjson_cancel.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.hideEditJSON();
            });
            this.editjson_holder.appendChild(this.editjson_textarea_label);
            this.editjson_holder.appendChild(this.editjson_textarea);
            this.editjson_holder.appendChild(this.editjson_save);
            this.editjson_holder.appendChild(this.editjson_copy);
            this.editjson_holder.appendChild(this.editjson_cancel);
            /* Manage Properties modal */ this.addproperty_holder = this.theme.getModal();
            this.addproperty_list = document.createElement('div');
            this.addproperty_list.classList.add('property-selector');
            this.addproperty_add = this.getButton('button_add', 'add', 'button_add');
            this.addproperty_add.classList.add('json-editor-btntype-add');
            this.addproperty_input = this.theme.getFormInputField('text');
            this.addproperty_input.setAttribute('placeholder', 'Property name...');
            this.addproperty_input_label = this.theme.getHiddenLabel(this.translate('button_properties'));
            this.addproperty_input_label.setAttribute('for', this.path + '-' + 'property-selector');
            this.addproperty_input.classList.add('property-selector-input');
            this.addproperty_input.setAttribute('id', this.path + '-' + 'property-selector');
            this.addproperty_input.setAttribute('aria-labelledby', this.path + '-' + 'property-selector');
            this.addproperty_add.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                if (this.addproperty_input.value) {
                    if (this.editors[this.addproperty_input.value]) {
                        window.alert('there is already a property with that name');
                        return;
                    }
                    this.addObjectProperty(this.addproperty_input.value);
                    if (this.editors[this.addproperty_input.value]) this.editors[this.addproperty_input.value].disable();
                    const key = this.editors[this.addproperty_input.value].key;
                    const type = this.editors[this.addproperty_input.value].type;
                    const path = this.editors[this.addproperty_input.value].path;
                    this.onChange(true, false, {
                        event: 'add',
                        data: {
                            key,
                            type,
                            path
                        }
                    });
                }
            });
            this.addproperty_input.addEventListener('input', (e)=>{
                e.target.previousSibling.previousSibling.childNodes.forEach((value)=>{
                    let searchTerm = value.innerText;
                    let propertyTitle = e.target.value;
                    const caseSensitivePropertySearch = this.options.case_sensitive_property_search || this.jsoneditor.options.case_sensitive_property_search;
                    if (!caseSensitivePropertySearch) {
                        searchTerm = searchTerm.toLowerCase();
                        propertyTitle = propertyTitle.toLowerCase();
                    }
                    if (searchTerm.includes(propertyTitle)) value.style.display = '';
                    else value.style.display = 'none';
                });
            });
            this.addproperty_holder.appendChild(this.addproperty_list);
            this.addproperty_holder.appendChild(this.addproperty_input_label);
            this.addproperty_holder.appendChild(this.addproperty_input);
            this.addproperty_holder.appendChild(this.addproperty_add);
            const spacer = document.createElement('div');
            spacer.style.clear = 'both';
            this.addproperty_holder.appendChild(spacer);
            /* Close properties modal if clicked outside modal */ this.onOutsideModalClickListener = this.onOutsideModalClick.bind(this);
            document.addEventListener('click', this.onOutsideModalClickListener, true);
            /* Description */ if (this.schema.description) {
                this.description = this.theme.getDescription(this.translateProperty(this.schema.description));
                this.container.appendChild(this.description);
            }
            /* Validation error placeholder area */ this.error_holder = document.createElement('div');
            this.container.appendChild(this.error_holder);
            /* Container for child editor area */ this.editor_holder = this.theme.getIndentedPanel();
            this.container.appendChild(this.editor_holder);
            /* Container for rows of child editors */ this.row_container = this.theme.getGridContainer();
            if (isCategoriesFormat) {
                this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.translateProperty(this.schema.title)));
                this.tabPanesContainer = this.theme.getTopTabContentHolder(this.tabs_holder);
                this.editor_holder.appendChild(this.tabs_holder);
            } else {
                this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.translateProperty(this.schema.title)));
                this.tabPanesContainer = this.theme.getTabContentHolder(this.tabs_holder);
                this.editor_holder.appendChild(this.row_container);
            }
            Object.values(this.editors).forEach((editor)=>{
                const aPane = this.theme.getTabContent();
                const holder = this.theme.getGridColumn();
                const isObjOrArray = !!(editor.schema && (editor.schema.type === 'object' || editor.schema.type === 'array'));
                aPane.isObjOrArray = isObjOrArray;
                if (isCategoriesFormat) {
                    if (isObjOrArray) {
                        const singleRowContainer = this.theme.getGridContainer();
                        singleRowContainer.appendChild(holder);
                        aPane.appendChild(singleRowContainer);
                        this.tabPanesContainer.appendChild(aPane);
                        this.row_container = singleRowContainer;
                    } else {
                        if (typeof this.row_container_basic === 'undefined') {
                            this.row_container_basic = this.theme.getGridContainer();
                            aPane.appendChild(this.row_container_basic);
                            if (this.tabPanesContainer.childElementCount === 0) this.tabPanesContainer.appendChild(aPane);
                            else this.tabPanesContainer.insertBefore(aPane, this.tabPanesContainer.childNodes[1]);
                        }
                        this.row_container_basic.appendChild(holder);
                    }
                    this.addRow(editor, this.tabs_holder, aPane);
                    aPane.id = this.getValidId(editor.schema.title);
                /* editor.schema.path//tab_text.textContent */ } else this.row_container.appendChild(holder);
                editor.setContainer(holder);
                editor.build();
                editor.postBuild();
                editor.setOptInCheckbox(editor.header);
            });
            if (this.rows[0]) (0, _utilitiesJs.trigger)(this.rows[0].tab, 'click');
            /* Show/Hide button */ this.collapsed = false;
            this.collapse_control = this.getButton('', 'collapse', 'button_collapse');
            this.collapse_control.classList.add('json-editor-btntype-toggle');
            this.title.insertBefore(this.collapse_control, this.title.childNodes[0]);
            this.collapse_control.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                if (this.collapsed) {
                    this.editor_holder.style.display = '';
                    this.collapsed = false;
                    this.setButtonText(this.collapse_control, '', 'collapse', 'button_collapse');
                } else {
                    this.editor_holder.style.display = 'none';
                    this.collapsed = true;
                    this.setButtonText(this.collapse_control, '', 'expand', 'button_expand');
                }
            });
            /* If it should start collapsed */ if (this.options.collapsed) (0, _utilitiesJs.trigger)(this.collapse_control, 'click');
            /* Collapse button disabled */ if (this.schema.options && typeof this.schema.options.disable_collapse !== 'undefined') {
                if (this.schema.options.disable_collapse) this.collapse_control.style.display = 'none';
            } else if (this.jsoneditor.options.disable_collapse) this.collapse_control.style.display = 'none';
            /* Edit JSON Button */ this.editjson_control = this.getButton('JSON', 'edit', 'button_edit_json');
            this.editjson_control.classList.add('json-editor-btntype-editjson');
            this.editjson_control.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.toggleEditJSON();
            });
            this.controls.appendChild(this.editjson_control);
            this.controls.insertBefore(this.editjson_holder, this.controls.childNodes[0]);
            /* Edit JSON Buttton disabled */ if (this.schema.options && typeof this.schema.options.disable_edit_json !== 'undefined') {
                if (this.schema.options.disable_edit_json) this.editjson_control.style.display = 'none';
            } else if (this.jsoneditor.options.disable_edit_json) this.editjson_control.style.display = 'none';
            /* Object Properties Button */ this.addproperty_button = this.getButton('properties', 'edit_properties', 'button_object_properties');
            this.addproperty_button.classList.add('json-editor-btntype-properties');
            this.addproperty_button.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.toggleAddProperty();
            });
            this.controls.appendChild(this.addproperty_button);
            this.controls.insertBefore(this.addproperty_holder, this.controls.childNodes[1]);
            this.refreshAddProperties();
            /* non required properties start deactivated */ this.deactivateNonRequiredProperties(false);
        }
        /* Fix table cell ordering */ if (this.options.table_row) {
            this.editor_holder = this.container;
            this.property_order.forEach((key)=>{
                this.editor_holder.appendChild(this.editors[key].container);
            });
        /* Layout object editors in grid if needed */ } else {
            /* Initial layout */ this.layoutEditors();
            /* Do it again now that we know the approximate heights of elements */ this.layoutEditors();
        }
        if (this.schema.readOnly || this.schema.readonly) this.disable();
    }
    deactivateNonRequiredProperties(recursive) {
        /* the show_opt_in editor option is for backward compatibility */ const globalOptIn = this.jsoneditor.options.show_opt_in;
        const editorOptInDefined = typeof this.options.show_opt_in !== 'undefined';
        const editorOptInEnabled = editorOptInDefined && this.options.show_opt_in === true;
        const editorOptInDisabled = editorOptInDefined && this.options.show_opt_in === false;
        if (editorOptInEnabled || !editorOptInDisabled && globalOptIn || !editorOptInDefined && globalOptIn) Object.entries(this.editors).forEach(([key, editor])=>{
            if (!this.isRequiredObject(editor)) this.editors[key].deactivate();
            if (recursive && typeof this.editors[key].deactivateNonRequiredProperties === 'function') this.editors[key].deactivateNonRequiredProperties(recursive);
        });
    }
    showEditJSON() {
        if (!this.editjson_holder) return;
        this.hideAddProperty();
        /* Position the form directly beneath the button */ /* TODO: edge detection */ this.editjson_holder.style.left = `${this.editjson_control.offsetLeft}px`;
        this.editjson_holder.style.top = `${this.editjson_control.offsetTop + this.editjson_control.offsetHeight}px`;
        /* Start the textarea with the current value */ this.editjson_textarea.value = JSON.stringify(this.getValue(), null, 2);
        /* Disable the rest of the form while editing JSON */ this.disable();
        this.editjson_holder.style.display = '';
        this.editjson_control.disabled = false;
        this.editing_json = true;
    }
    hideEditJSON() {
        if (!this.editjson_holder) return;
        if (!this.editing_json) return;
        this.editjson_holder.style.display = 'none';
        this.enable();
        this.editing_json = false;
    }
    copyJSON() {
        if (!this.editjson_holder) return;
        navigator.clipboard.writeText(this.editjson_textarea.value).catch((e)=>window.alert(e));
    }
    saveJSON() {
        if (!this.editjson_holder) return;
        try {
            const json = JSON.parse(this.editjson_textarea.value);
            this.setValue(json);
            this.hideEditJSON();
            this.onChange(true);
        } catch (e) {
            window.alert('invalid JSON');
            throw e;
        }
    }
    toggleEditJSON() {
        if (this.editing_json) this.hideEditJSON();
        else this.showEditJSON();
    }
    insertPropertyControlUsingPropertyOrder(property, control, container) {
        let propertyOrder;
        if (this.schema.properties[property]) propertyOrder = this.schema.properties[property].propertyOrder;
        if (typeof propertyOrder !== 'number') propertyOrder = 1000;
        control.propertyOrder = propertyOrder;
        for(let i = 0; i < container.childNodes.length; i++){
            const child = container.childNodes[i];
            if (control.propertyOrder < child.propertyOrder) {
                this.addproperty_list.insertBefore(control, child);
                control = null;
                break;
            }
        }
        if (control) this.addproperty_list.appendChild(control);
    }
    addPropertyCheckbox(key) {
        let labelText;
        const checkbox = this.theme.getCheckbox();
        if (this.schema.properties[key] && this.schema.properties[key].title) labelText = this.schema.properties[key].title;
        else labelText = key;
        const label = this.theme.getCheckboxLabel(labelText);
        const control = this.theme.getFormControl(label, checkbox, null, null, this.path + '-' + key);
        control.style.paddingBottom = control.style.marginBottom = control.style.paddingTop = control.style.marginTop = 0;
        control.style.height = 'auto';
        /* control.style.overflowY = 'hidden'; */ this.insertPropertyControlUsingPropertyOrder(key, control, this.addproperty_list);
        checkbox.checked = key in this.editors;
        checkbox.addEventListener('change', ()=>{
            if (checkbox.checked) this.addObjectProperty(key);
            else this.removeObjectProperty(key);
            this.onChange(true);
        });
        this.addproperty_checkboxes[key] = checkbox;
        return checkbox;
    }
    showAddProperty() {
        if (!this.addproperty_holder) return;
        this.hideEditJSON();
        /* Position the form directly beneath the button */ /* TODO: edge detection */ this.addproperty_holder.style.left = `${this.addproperty_button.offsetLeft}px`;
        this.addproperty_holder.style.top = `${this.addproperty_button.offsetTop + this.addproperty_button.offsetHeight}px`;
        /* Disable the rest of the form while editing JSON */ this.disable();
        this.adding_property = true;
        this.addproperty_button.disabled = false;
        this.addproperty_holder.style.display = '';
        this.refreshAddProperties();
    }
    hideAddProperty() {
        if (!this.addproperty_holder) return;
        if (!this.adding_property) return;
        this.addproperty_holder.style.display = 'none';
        this.enable();
        this.adding_property = false;
    }
    toggleAddProperty() {
        if (this.adding_property) this.hideAddProperty();
        else this.showAddProperty();
    }
    removeObjectProperty(property) {
        if (this.editors[property]) {
            // do not destroy dependent editors
            if (this.editors[property].schema?.options?.dependencies) return;
            this.editors[property].unregister();
            delete this.editors[property];
            this.refreshValue();
            this.layoutEditors();
        }
    }
    getSchemaOnMaxDepth(schema) {
        return Object.keys(schema).reduce((acc, key)=>{
            switch(key){
                case '$ref':
                    return acc;
                case 'properties':
                case 'items':
                    return {
                        ...acc,
                        [key]: {}
                    };
                case 'additionalProperties':
                case 'propertyNames':
                    return {
                        ...acc,
                        [key]: true
                    };
                default:
                    return {
                        ...acc,
                        [key]: schema[key]
                    };
            }
        }, {});
    }
    addObjectProperty(name, prebuildOnly) {
        /* Property is already added */ if (this.editors[name]) return;
        /* Property was added before and is cached */ if (this.cached_editors[name]) {
            this.editors[name] = this.cached_editors[name];
            if (prebuildOnly) return;
            this.editors[name].register();
        /* New property */ } else {
            if (!this.canHaveAdditionalProperties() && (!this.schema.properties || !this.schema.properties[name]) && (!this.schema.patternProperties || !Object.keys(this.schema.patternProperties).find((i)=>new RegExp(i).test(name)))) return;
            const schema = this.getPropertySchema(name);
            if (typeof schema.propertyOrder !== 'number') /* if the propertyOrder undefined, then set a smart default value. */ schema.propertyOrder = Object.keys(this.editors).length + 1000;
            /* Add the property */ const editor = this.jsoneditor.getEditorClass(schema);
            const { max_depth: maxDepth } = this.jsoneditor.options;
            this.editors[name] = this.jsoneditor.createEditor(editor, {
                jsoneditor: this.jsoneditor,
                schema: !!maxDepth && this.currentDepth >= maxDepth ? this.getSchemaOnMaxDepth(schema) : schema,
                path: `${this.path}.${name}`,
                parent: this
            }, this.currentDepth + 1);
            this.editors[name].preBuild();
            if (!prebuildOnly) {
                const holder = this.theme.getChildEditorHolder();
                this.editor_holder.appendChild(holder);
                this.editors[name].setContainer(holder);
                this.editors[name].build();
                this.editors[name].postBuild();
                this.editors[name].setOptInCheckbox(editor.header);
                this.editors[name].activate();
            }
            this.cached_editors[name] = this.editors[name];
        }
        /* If we're only prebuilding the editors, don't refresh values */ if (!prebuildOnly) {
            this.refreshValue();
            this.layoutEditors();
        }
    }
    onOutsideModalClick(e) {
        const path = e.path || e.composedPath && e.composedPath();
        if (this.addproperty_holder && !this.addproperty_holder.contains(path[0]) && this.adding_property) {
            e.preventDefault();
            e.stopPropagation();
            this.toggleAddProperty();
        }
    }
    onChildEditorChange(editor, eventData) {
        this.refreshValue();
        super.onChildEditorChange(editor, eventData);
    }
    canHaveAdditionalProperties() {
        // schemas have priority over options
        // local options have priority over global options
        // lastly global options are evaluated
        // If the schema additionalProperties keyword is a boolean let the keyword decide
        if (typeof this.schema.additionalProperties === 'boolean') return this.schema.additionalProperties;
        // If the schema additionalProperties keyword is a schema then additional properties are allowed and limited by such schema
        if (typeof this.schema.additionalProperties === 'object' && this.schema.additionalProperties !== null) return true;
        // If the schema options no_additional_properties is a boolean let the option decide
        if (typeof this.options.no_additional_properties === 'boolean') return !this.options.no_additional_properties;
        // If the global options no_additional_properties is a boolean let the option decide
        if (typeof this.jsoneditor.options.no_additional_properties === 'boolean') return !this.jsoneditor.options.no_additional_properties;
        return true;
    }
    destroy() {
        Object.values(this.cached_editors).forEach((el)=>el.destroy());
        if (this.editor_holder) this.editor_holder.innerHTML = '';
        if (this.title && this.title.parentNode) this.title.parentNode.removeChild(this.title);
        if (this.error_holder && this.error_holder.parentNode) this.error_holder.parentNode.removeChild(this.error_holder);
        this.editors = null;
        this.cached_editors = null;
        if (this.editor_holder && this.editor_holder.parentNode) this.editor_holder.parentNode.removeChild(this.editor_holder);
        this.editor_holder = null;
        document.removeEventListener('click', this.onOutsideModalClickListener, true);
        super.destroy();
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        const result = super.getValue();
        const isEmpty = (obj)=>typeof obj === 'undefined' || obj === '' || obj === Object(obj) && Object.keys(obj).length === 0 && obj.constructor === Object;
        if (result && (this.jsoneditor.options.remove_empty_properties || this.options.remove_empty_properties)) Object.keys(result).forEach((key)=>{
            if (isEmpty(result[key])) delete result[key];
        });
        if (result && (this.jsoneditor.options.remove_false_properties || this.options.remove_false_properties)) Object.keys(result).forEach((key)=>{
            if (result[key] === false) delete result[key];
        });
        return result;
    }
    refreshValue() {
        this.value = {};
        if (!this.editors) return;
        Object.keys(this.editors).forEach((i)=>{
            if (this.editors[i].isActive()) {
                this.editors[i].refreshValue();
                this.value[i] = this.editors[i].getValue();
            }
        });
        Object.keys(this.editors).forEach((i)=>{
            if (this.editors[i].isActive()) this.activateDependentRequired(this.editors[i].key);
        });
        if (this.adding_property) this.refreshAddProperties();
    }
    activateDependentRequired(key) {
        const dependentRequired = this.getDependentRequired(key);
        dependentRequired.forEach((requiredProperty)=>{
            let dependentRequiredEditor;
            Object.entries(this.cached_editors).forEach(([i, cachedEditor])=>{
                if (cachedEditor.key === requiredProperty) dependentRequiredEditor = cachedEditor;
            });
            if (dependentRequiredEditor && !dependentRequiredEditor.isActive()) dependentRequiredEditor.activate();
        });
    }
    getDependentRequired(property) {
        if (this.schema.dependentRequired) {
            if ((0, _utilitiesJs.hasOwnProperty)(this.schema.dependentRequired, property)) return this.schema.dependentRequired[property];
        }
        return [];
    }
    refreshAddProperties() {
        if (this.options.disable_properties || this.options.disable_properties !== false && this.jsoneditor.options.disable_properties) {
            this.addproperty_button.style.display = 'none';
            return;
        }
        let canAdd = false;
        let numProps = 0;
        let showModal = false;
        /* Get number of editors */ Object.keys(this.editors).forEach((i)=>numProps++);
        /* Determine if we can add back removed properties */ canAdd = this.canHaveAdditionalProperties() && !(typeof this.schema.maxProperties !== 'undefined' && numProps >= this.schema.maxProperties);
        if (this.addproperty_checkboxes) this.addproperty_list.innerHTML = '';
        this.addproperty_checkboxes = {};
        /* Check for which editors can't be removed or added back */ Object.keys(this.cached_editors).forEach((i)=>{
            this.addPropertyCheckbox(i);
            if (this.isRequiredObject(this.cached_editors[i]) && i in this.editors) this.addproperty_checkboxes[i].disabled = true;
            if (typeof this.schema.minProperties !== 'undefined' && numProps <= this.schema.minProperties) {
                this.addproperty_checkboxes[i].disabled = this.addproperty_checkboxes[i].checked;
                if (!this.addproperty_checkboxes[i].checked) showModal = true;
            } else if (!(i in this.editors)) {
                if (!canAdd && !(0, _utilitiesJs.hasOwnProperty)(this.schema.properties, i)) this.addproperty_checkboxes[i].disabled = true;
                else {
                    this.addproperty_checkboxes[i].disabled = false;
                    showModal = true;
                }
            } else showModal = true;
        });
        if (this.canHaveAdditionalProperties()) showModal = true;
        /* Additional addproperty checkboxes not tied to a current editor */ Object.keys(this.schema.properties).forEach((i)=>{
            if (this.cached_editors[i]) return;
            showModal = true;
            this.addPropertyCheckbox(i);
        });
        /* If no editors can be added or removed, hide the modal button */ if (!showModal) {
            this.hideAddProperty();
            this.addproperty_button.style.display = 'none';
        /* If additional properties are disabled */ } else if (!this.canHaveAdditionalProperties()) {
            this.addproperty_add.style.display = 'none';
            this.addproperty_input.style.display = 'none';
        /* If no new properties can be added */ } else if (!canAdd) this.addproperty_add.disabled = true;
        else this.addproperty_add.disabled = false;
    }
    isRequiredObject(editor) {
        if (!editor) return;
        if (typeof editor.schema.required === 'boolean') return editor.schema.required;
        else if (Array.isArray(this.schema.required)) return this.schema.required.includes(editor.key);
        else if (this.jsoneditor.options.required_by_default) return true;
        return false;
    }
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        value = value || {};
        if (typeof value !== 'object' || Array.isArray(value)) value = {};
        /* First, set the values for all of the defined properties */ Object.entries(this.cached_editors).forEach(([i, editor])=>{
            /* Value explicitly set */ if (typeof value[i] !== 'undefined') {
                this.addObjectProperty(i);
                editor.setValue(value[i], initial);
                editor.activate();
                if (this.disabled) editor.disable();
            /* Otherwise, remove value unless this is the initial set or it's required */ } else if (!initial && !this.isRequiredObject(editor)) {
                if (this.jsoneditor.options.show_opt_in || this.options.show_opt_in) editor.deactivate();
                else this.removeObjectProperty(i);
            } else editor.setValue(editor.getDefault(), initial);
        });
        Object.entries(value).forEach(([i, val])=>{
            if (!this.cached_editors[i]) {
                this.addObjectProperty(i);
                if (this.editors[i]) this.editors[i].setValue(val, initial, !!this.editors[i].template);
            }
        });
        this.refreshValue();
        this.layoutEditors();
        this.onChange();
    }
    showValidationErrors(errors) {
        /* Get all the errors that pertain to this editor */ const myErrors = [];
        const otherErrors = [];
        errors.forEach((error)=>{
            if (error.path === this.path) myErrors.push(error);
            else otherErrors.push(error);
        });
        /* Show errors for this editor */ if (this.error_holder) {
            if (myErrors.length) {
                this.error_holder.innerHTML = '';
                this.error_holder.style.display = '';
                myErrors.forEach((error)=>{
                    if (error.errorcount && error.errorcount > 1) error.message += ` (${error.errorcount} errors)`;
                    this.error_holder.appendChild(this.theme.getErrorMessage(error.message));
                });
            /* Hide error area */ } else this.error_holder.style.display = 'none';
        }
        /* Show error for the table row if this is inside a table */ if (this.options.table_row) {
            if (myErrors.length) this.theme.addTableRowError(this.container);
            else this.theme.removeTableRowError(this.container);
        }
        /* Show errors for child editors */ Object.values(this.editors).forEach((editor)=>{
            editor.showValidationErrors(otherErrors);
        });
    }
}
ObjectEditor.rules = (0, _objectCssJsDefault.default);

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","./object.css.js":"7I1mh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7I1mh":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".je-object__title": "display:inline-block",
    ".je-object__controls": "margin:0%200%200%2010px",
    ".je-object__container": "position:relative",
    ".je-object__property-checkbox": "margin:0;height:auto",
    ".property-selector": "width:295px;max-height:160px;padding:5px%200;overflow-y:auto;overflow-x:hidden;padding-left:5px",
    ".property-selector-input": "width:220px;margin-bottom:0;display:inline-block",
    ".json-editor-btntype-toggle": "margin:0%2010px%200%200",
    ".je-edit-json--textarea": "height:170px;width:300px;display:block"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Ti52":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RadioEditor", ()=>RadioEditor);
var _selectJs = require("./select.js");
class RadioEditor extends (0, _selectJs.SelectEditor) {
    preBuild() {
        super.preBuild();
    }
    build() {
        this.label = '';
        if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.compact) this.container.classList.add('compact');
        this.radioContainer = document.createElement('div');
        this.radioGroup = [];
        const radioInputEventhandler = (e)=>{
            this.setValue(e.currentTarget.value);
            this.onChange(true);
            this.radioGroup.forEach((radio)=>{
                radio.checked = radio.value === this.getValue();
            });
        };
        for(let i = 0; i < this.enum_values.length; i++){
            /* form radio elements */ const attributes = {
                id: `${this.formname}[${i}]`,
                value: this.enum_values[i]
            };
            if (this.jsoneditor.options.use_name_attributes) attributes.name = this.formname;
            this.input = this.theme.getFormRadio(attributes);
            /* Set custom attributes on input element. Parameter is array of protected keys. Empty array if none. */ this.setInputAttributes([
                'id',
                'value',
                'name'
            ]);
            this.input.addEventListener('change', radioInputEventhandler, false);
            this.radioGroup.push(this.input);
            /* form-label for radio elements */ const radioLabel = this.theme.getFormRadioLabel(this.enum_display[i]);
            radioLabel.htmlFor = this.input.id;
            const control = this.theme.getFormRadioControl(radioLabel, this.input, !!(this.options.layout === 'horizontal' || this.options.compact));
            this.radioContainer.appendChild(control);
        }
        if (this.schema.readOnly || this.schema.readonly) {
            this.disable(true);
            for(let j = 0; j < this.radioGroup.length; j++)this.radioGroup[j].disabled = true;
            this.radioContainer.classList.add('readonly');
        }
        const radioContainerWrapper = this.theme.getContainer();
        radioContainerWrapper.appendChild(this.radioContainer);
        radioContainerWrapper.dataset.containerFor = 'radio';
        this.input = radioContainerWrapper;
        this.control = this.theme.getFormControl(this.label, radioContainerWrapper, this.description, this.infoButton);
        this.container.appendChild(this.control);
        /* Any special formatting that needs to happen after the input is added to the dom */ window.requestAnimationFrame(()=>{
            if (this.input.parentNode) this.afterInputReady();
        });
    }
    enable() {
        if (!this.always_disabled) {
            for(let i = 0; i < this.radioGroup.length; i++)this.radioGroup[i].disabled = false;
            this.radioContainer.classList.remove('readonly');
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        for(let i = 0; i < this.radioGroup.length; i++)this.radioGroup[i].disabled = true;
        this.radioContainer.classList.add('readonly');
        super.disable();
    }
    destroy() {
        if (this.radioContainer.parentNode && this.radioContainer.parentNode.parentNode) this.radioContainer.parentNode.parentNode.removeChild(this.radioContainer.parentNode);
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        super.destroy();
    }
    getNumColumns() {
        return 2;
    }
    setValue(val) {
        val = this.applyConstFilter(val);
        if (typeof val !== 'string') val = String(val);
        for(let i = 0; i < this.radioGroup.length; i++)if (this.radioGroup[i].value === val) {
            this.radioGroup[i].checked = true;
            break;
        } else this.radioGroup[i].checked = false;
        this.value = val;
        this.onChange();
    }
}

},{"./select.js":"de0Lu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2h0LE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScEditor", ()=>ScEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class ScEditor extends (0, _stringJs.StringEditor) {
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        const res = super.setValue(value, initial, fromTemplate);
        if (res !== undefined && res.changed && this.sceditor_instance) this.sceditor_instance.val(res.value);
    }
    build() {
        this.options.format = 'textarea' /* Force format into "textarea" */ ;
        super.build();
        this.input_type = this.schema.format /* Restore original format */ ;
        this.input.setAttribute('data-schemaformat', this.input_type);
    }
    afterInputReady() {
        if (window.sceditor) {
            /* Get options, either global options from "this.defaults.options.sceditor" or */ /* single property options from schema "options.sceditor" */ const options = this.expandCallbacks('sceditor', (0, _utilitiesJs.extend)({}, {
                format: this.input_type,
                emoticonsEnabled: false,
                width: '100%',
                height: 300,
                readOnly: this.schema.readOnly || this.schema.readonly || this.schema.template
            }, this.defaults.options.sceditor || {}, this.options.sceditor || {}, {
                element: this.input
            }));
            const instance = window.sceditor.instance(this.input);
            if (instance === undefined) window.sceditor.create(this.input, options);
            this.sceditor_instance = instance || window.sceditor.instance(this.input);
            /* Listen for changes */ this.sceditor_instance.blur(()=>{
                this.value = this.sceditor_instance.val();
                this.sceditor_instance.updateOriginal();
                this.is_dirty = true;
                this.onChange(true);
            });
            this.theme.afterInputReady(this.input);
        } else super.afterInputReady();
    /* Library not loaded, so just treat this as a string */ }
    getNumColumns() {
        return 6;
    }
    enable() {
        if (!this.always_disabled && this.sceditor_instance) this.sceditor_instance.readOnly(false);
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.sceditor_instance) this.sceditor_instance.readOnly(true);
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.sceditor_instance) {
            this.sceditor_instance.destroy();
            this.sceditor_instance = null;
        }
        super.destroy();
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anGO3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Select2Editor", ()=>Select2Editor);
var _selectJs = require("./select.js");
var _utilitiesJs = require("../utilities.js");
class Select2Editor extends (0, _selectJs.SelectEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        if (this.select2_instance) {
            if (initial) this.is_dirty = false;
            else if (this.jsoneditor.options.show_errors === 'change') this.is_dirty = true;
            const sanitized = this.updateValue(value);
            /* Sets this.value to sanitized value */ this.input.value = sanitized;
            if (this.select2v4) this.select2_instance.val(sanitized).trigger('change');
            else this.select2_instance.select2('val', sanitized);
            this.onChange(true);
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        if (window.jQuery && window.jQuery.fn && window.jQuery.fn.select2 && !this.select2_instance) {
            /* Get options, either global options from "this.defaults.options.select2" or */ /* single property options from schema "options.select2" */ const options = this.expandCallbacks('select2', (0, _utilitiesJs.extend)({}, this.defaults.options.select2 || {}, this.options.select2 || {}));
            /* New items are allowed if option "tags" is true and type is "string" */ this.newEnumAllowed = options.tags = !!options.tags && this.schema.type === 'string';
            this.select2_instance = window.jQuery(this.input).select2(options);
            this.select2v4 = (0, _utilitiesJs.hasOwnProperty)(this.select2_instance.select2, 'amd');
            /* Create change handler */ this.selectChangeHandler = ()=>{
                const value = this.select2v4 ? this.select2_instance.val() : this.select2_instance.select2('val');
                this.updateValue(value);
                this.onChange(true);
            };
            /* Add event handler. */ /* Note: Must use the "on()" method and not addEventListener() */ this.select2_instance.on('change', this.selectChangeHandler);
            this.select2_instance.on('select2-blur', this.selectChangeHandler);
        }
        super.afterInputReady();
    }
    updateValue(value) {
        let sanitized = this.enum_values[0];
        value = this.typecast(value || '');
        if (!this.enum_values.includes(value)) {
            if (this.newEnumAllowed) sanitized = this.addNewOption(value) ? value : sanitized;
        } else sanitized = value;
        this.value = sanitized;
        return sanitized;
    }
    addNewOption(value) {
        const sanitized = this.typecast(value);
        let res = false;
        let optionTag;
        if (!this.enum_values.includes(sanitized) && sanitized !== '') {
            /* Add to list of valid enum values */ this.enum_options.push(`${sanitized}`);
            this.enum_display.push(`${sanitized}`);
            this.enum_values.push(sanitized);
            /* Update Schema enum to prevent triggering error */ /* "Value must be one of the enumerated values" */ this.schema.enum.push(sanitized);
            optionTag = this.input.querySelector(`option[value="${sanitized}"]`);
            if (optionTag) /* Remove data attribute to make option tag permanent. */ optionTag.removeAttribute('data-select2-tag');
            else this.select2_instance.append(new Option(sanitized, sanitized, false, false)).trigger('change');
            res = true;
        }
        return res;
    }
    enable() {
        if (!this.always_disabled) {
            if (this.select2_instance) {
                if (this.select2v4) this.select2_instance.prop('disabled', false);
                else this.select2_instance.select2('enable', true);
            }
        }
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.select2_instance) {
            if (this.select2v4) this.select2_instance.prop('disabled', true);
            else this.select2_instance.select2('enable', false);
        }
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.select2_instance) {
            this.select2_instance.select2('destroy');
            this.select2_instance = null;
        }
        super.destroy();
    }
}

},{"./select.js":"de0Lu","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lQZhM":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectizeEditor", ()=>SelectizeEditor);
var _selectJs = require("./select.js");
var _utilitiesJs = require("../utilities.js");
class SelectizeEditor extends (0, _selectJs.SelectEditor) {
    setValue(value, initial) {
        value = this.applyConstFilter(value);
        if (this.selectize_instance) {
            if (initial) this.is_dirty = false;
            else if (this.jsoneditor.options.show_errors === 'change') this.is_dirty = true;
            const sanitized = this.updateValue(value);
            /* Sets this.value to sanitized value */ this.input.value = sanitized;
            this.selectize_instance.clear(true);
            this.selectize_instance.setValue(sanitized);
            this.onChange(true);
        } else super.setValue(value, initial);
    }
    afterInputReady() {
        if (window.jQuery && window.jQuery.fn && window.jQuery.fn.selectize && !this.selectize_instance) {
            /* Get options, either global options from "this.defaults.options.selectize" or */ /* single property options from schema "options.selectize" */ const options = this.expandCallbacks('selectize', (0, _utilitiesJs.extend)({}, this.defaults.options.selectize || {}, this.options.selectize || {}));
            /* New items are allowed if option "create" is true and type is "string" */ this.newEnumAllowed = options.create = !!options.create && this.schema.type === 'string';
            this.selectize_instance = window.jQuery(this.input).selectize(options)[0].selectize;
            /* Remove change handler set in parent class (src/multiselect.js) */ this.control.removeEventListener('change', this.multiselectChangeHandler);
            /* Create a new change handler */ this.multiselectChangeHandler = (value)=>{
                /* var value = this.selectize_instance.getValue(true); */ /* this.value = value; */ this.updateValue(value);
                this.onChange(true);
            };
            /* Add new event handler. */ /* Note: Must use the "on()" method and not addEventListener() */ this.selectize_instance.on('change', this.multiselectChangeHandler);
        }
        super.afterInputReady();
    }
    updateValue(value) {
        let sanitized = this.enum_values[0];
        value = this.typecast(value || '');
        if (!this.enum_values.includes(value)) {
            if (this.newEnumAllowed) sanitized = this.addNewOption(value) ? value : sanitized;
        } else sanitized = value;
        this.value = sanitized;
        return sanitized;
    }
    addNewOption(value) {
        const sanitized = this.typecast(value);
        let res = false;
        if (!this.enum_values.includes(sanitized) && sanitized !== '') {
            /* Add to list of valid enum values */ this.enum_options.push(`${sanitized}`);
            this.enum_display.push(`${sanitized}`);
            this.enum_values.push(sanitized);
            /* Update Schema enum to prevent triggering error */ /* "Value must be one of the enumerated values" */ this.schema.enum.push(sanitized);
            /* Add selectize item */ this.selectize_instance.addItem(sanitized);
            this.selectize_instance.refreshOptions(false);
            res = true;
        }
        return res;
    }
    onWatchedFieldChange() {
        super.onWatchedFieldChange();
        if (this.selectize_instance) {
            this.selectize_instance.clear(true);
            /* Clear selection */ this.selectize_instance.clearOptions(true);
            /* Remove all options */ this.enum_options.forEach((value, i)=>{
                this.selectize_instance.addOption({
                    value,
                    text: this.enum_display[i]
                });
            });
            this.selectize_instance.addItem(`${this.value}`, true);
        /* Set new selection */ }
    }
    enable() {
        if (!this.always_disabled && this.selectize_instance) this.selectize_instance.unlock();
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.selectize_instance) this.selectize_instance.lock();
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.selectize_instance) {
            this.selectize_instance.destroy();
            this.selectize_instance = null;
        }
        super.destroy();
    }
}

},{"./select.js":"de0Lu","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5LYck":[function(require,module,exports,__globalThis) {
/* This editor is using the signature pad editor from https://github.com/szimek/signature_pad */ /* Credits for the pad itself go to https://github.com/szimek */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureEditor", ()=>SignatureEditor);
var _stringJs = require("./string.js");
class SignatureEditor extends (0, _stringJs.StringEditor) {
    build() {
        if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        const formname = this.formname.replace(/\W/g, '');
        if (typeof SignaturePad === 'function') {
            /* Dynamically add the required CSS the first time this editor is used */ this.input = this.theme.getFormInputField('hidden');
            this.container.appendChild(this.input);
            /* Required to keep height */ const signatureContainer = document.createElement('div');
            signatureContainer.classList.add('signature-container');
            /* Create canvas for signature pad */ const canvas = document.createElement('canvas');
            if (this.jsoneditor.options.use_name_attributes) canvas.setAttribute('name', formname);
            canvas.classList.add('signature');
            signatureContainer.appendChild(canvas);
            this.signaturePad = new window.SignaturePad(canvas);
            this.signaturePad.onEnd = ()=>{
                /* check if the signature is not empty before setting a value */ if (!this.signaturePad.isEmpty()) this.input.value = this.signaturePad.toDataURL();
                else this.input.value = '';
                this.is_dirty = true;
                this.refreshValue();
                this.watch_listener();
                this.jsoneditor.notifyWatchers(this.path);
                if (this.parent) this.parent.onChildEditorChange(this);
                else this.jsoneditor.onChange();
            };
            /* create button containers and add clear signature button */ const buttons = document.createElement('div');
            const clearButton = document.createElement('button');
            clearButton.classList.add('tiny', 'button');
            clearButton.innerHTML = 'Clear signature';
            buttons.appendChild(clearButton);
            signatureContainer.appendChild(buttons);
            if (this.options.compact) this.container.setAttribute('class', `${this.container.getAttribute('class')} compact`);
            if (this.schema.readOnly || this.schema.readonly) {
                this.disable(true);
                Array.from(this.inputs).forEach((input)=>{
                    canvas.setAttribute('readOnly', 'readOnly');
                    input.disabled = true;
                });
            }
            /* add listener to the clear button. when clicked, trigger a canvas change after emptying the canvas */ clearButton.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.signaturePad.clear();
                /* trigger stroke end to let signaturePad update the dataURL */ this.signaturePad.strokeEnd();
            });
            this.control = this.theme.getFormControl(this.label, signatureContainer, this.description);
            this.container.appendChild(this.control);
            this.refreshValue();
            /* signature canvas will stretch to signatureContainer width */ canvas.width = signatureContainer.offsetWidth;
            if (this.options && this.options.canvas_height) canvas.height = this.options.canvas_height;
            else canvas.height = '300' /* Set to default height of 300px; */ ;
        } else {
            const message = document.createElement('p');
            message.innerHTML = 'Signature pad is not available, please include SignaturePad from https://github.com/szimek/signature_pad';
            this.container.appendChild(message);
        }
    }
    setValue(val) {
        val = this.applyConstFilter(val);
        if (typeof SignaturePad === 'function') {
            const sanitized = this.sanitize(val);
            if (this.value === sanitized) return;
            this.value = sanitized;
            this.input.value = this.value;
            this.signaturePad.clear();
            /* only set contents if value != '' */ if (val && val !== '') this.signaturePad.fromDataURL(val);
            this.watch_listener();
            this.jsoneditor.notifyWatchers(this.path);
            return false;
        }
    }
    destroy() {
        this.signaturePad.off();
        delete this.signaturePad;
    }
}

},{"./string.js":"cT5YY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lWwGR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SimplemdeEditor", ()=>SimplemdeEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class SimplemdeEditor extends (0, _stringJs.StringEditor) {
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        const res = super.setValue(value, initial, fromTemplate);
        if (res !== undefined && res.changed && this.simplemde_instance) this.simplemde_instance.value(res.value);
    }
    build() {
        this.options.format = 'textarea' /* Force format into "textarea" */ ;
        super.build();
        this.input_type = this.schema.format /* Restore original format */ ;
        this.input.setAttribute('data-schemaformat', this.input_type);
    }
    afterInputReady() {
        let options;
        if (window.SimpleMDE) {
            /* Get options, either global options from "this.defaults.options.simplemde" or */ /* single property options from schema "options.simplemde" */ options = this.expandCallbacks('simplemde', (0, _utilitiesJs.extend)({}, {
                height: 300
            }, this.defaults.options.simplemde || {}, this.options.simplemde || {}, {
                element: this.input,
                forceSync: true
            }));
            this.simplemde_instance = new window.SimpleMDE(options);
            if (this.schema.readOnly || this.schema.readonly || this.schema.template) this.simplemde_instance.codemirror.options.readOnly = true;
            /* Listen for changes */ this.simplemde_instance.codemirror.on('change', ()=>{
                this.value = this.simplemde_instance.value();
                this.is_dirty = true;
                this.onChange(true);
            });
            /* This will prevent SimpleMDE content from being hidden until focus in Chrome */ /* if SimpleMDE is not visible (Like when placed inside Tabs) */ if (options.autorefresh) this.startListening(this.simplemde_instance.codemirror, this.simplemde_instance.codemirror.state.autoRefresh = {
                delay: 250
            });
            this.theme.afterInputReady(this.input);
        } else super.afterInputReady();
    /* Library not loaded, so just treat this as a string */ }
    getNumColumns() {
        return 6;
    }
    enable() {
        if (!this.always_disabled && this.simplemde_instance) this.simplemde_instance.codemirror.options.readOnly = false;
        super.enable();
    }
    disable(alwaysDisabled) {
        if (this.simplemde_instance) this.simplemde_instance.codemirror.options.readOnly = true;
        super.disable(alwaysDisabled);
    }
    destroy() {
        if (this.simplemde_instance) {
            this.simplemde_instance.toTextArea();
            this.simplemde_instance = null;
        }
        super.destroy();
    }
    /* Ported from https://codemirror.net/addon/display/autorefresh.js */ startListening(cm, state) {
        const check = ()=>{
            if (cm.display.wrapper.offsetHeight) {
                this.stopListening(cm, state);
                if (cm.display.lastWrapHeight !== cm.display.wrapper.clientHeight) cm.refresh();
            } else state.timeout = window.setTimeout(check, state.delay);
        };
        state.timeout = window.setTimeout(check, state.delay);
        state.hurry = ()=>{
            window.clearTimeout(state.timeout);
            state.timeout = window.setTimeout(check, 50);
        };
        cm.on(window, 'mouseup', state.hurry);
        cm.on(window, 'keyup', state.hurry);
    }
    stopListening(cm, state) {
        window.clearTimeout(state.timeout);
        cm.off(window, 'mouseup', state.hurry);
        cm.off(window, 'keyup', state.hurry);
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kzdFq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StarratingEditor", ()=>StarratingEditor);
var _stringJs = require("./string.js");
var _starratingCssJs = require("./starrating.css.js");
var _starratingCssJsDefault = parcelHelpers.interopDefault(_starratingCssJs);
class StarratingEditor extends (0, _stringJs.StringEditor) {
    build() {
        if (!this.options.compact) this.header = this.label = this.theme.getLabelLike(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.compact) this.container.classList.add('compact');
        this.ratingContainer = document.createElement('div');
        this.ratingContainer.classList.add('starrating');
        /* Emulate the old "rating" editor parameters */ if (this.schema.enum === undefined) {
            let max = this.schema.maximum ? this.schema.maximum : 5;
            if (this.schema.exclusiveMaximum) max--;
            this.enum_values = [];
            for(let k = 0; k < max; k++)this.enum_values.push(k + 1);
        } else this.enum_values = this.schema.enum;
        this.radioGroup = [];
        const radioInputEventhandler = (e)=>{
            e.preventDefault();
            e.stopPropagation();
            this.setValue(e.currentTarget.value);
            this.onChange(true);
        };
        for(let i = this.enum_values.length - 1; i > -1; i--){
            const id = this.formname + (i + 1);
            /* form radio elements */ const radioInput = this.theme.getFormInputField('radio');
            radioInput.name = `${this.formname}[starrating]`;
            radioInput.value = this.enum_values[i];
            radioInput.id = id;
            radioInput.addEventListener('change', radioInputEventhandler, false);
            this.radioGroup.push(radioInput);
            /* form-label for radio elements */ const radioLabel = document.createElement('label');
            radioLabel.htmlFor = id;
            radioLabel.title = this.enum_values[i];
            if (this.options.displayValue) radioLabel.classList.add('starrating-display-enabled');
            const radioText = this.theme.getHiddenText('label');
            radioText.textContent = i;
            radioLabel.appendChild(radioText);
            this.ratingContainer.appendChild(radioInput);
            this.ratingContainer.appendChild(radioLabel);
        }
        if (this.options.displayValue) {
            this.displayRating = document.createElement('div');
            this.displayRating.classList.add('starrating-display');
            this.displayRating.innerText = this.enum_values[0];
            this.ratingContainer.appendChild(this.displayRating);
        }
        if (this.schema.readOnly || this.schema.readonly) {
            this.disable(true);
            for(let j = 0; j < this.radioGroup.length; j++)this.radioGroup[j].disabled = true;
            this.ratingContainer.classList.add('readonly');
        }
        const ratingsContainerWrapper = this.theme.getContainer();
        ratingsContainerWrapper.appendChild(this.ratingContainer);
        this.input = ratingsContainerWrapper;
        this.control = this.theme.getFormControl(this.label, ratingsContainerWrapper, this.description, this.infoButton);
        this.container.appendChild(this.control);
        this.refreshValue();
    }
    enable() {
        if (!this.always_disabled) {
            for(let i = 0; i < this.radioGroup.length; i++)this.radioGroup[i].disabled = false;
            this.ratingContainer.classList.remove('readonly');
            this.disabled = false;
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        for(let i = 0; i < this.radioGroup.length; i++)this.radioGroup[i].disabled = true;
        this.ratingContainer.classList.add('readonly');
        this.disabled = true;
    }
    destroy() {
        if (this.ratingContainer.parentNode && this.ratingContainer.parentNode.parentNode) this.ratingContainer.parentNode.parentNode.removeChild(this.ratingContainer.parentNode);
        if (this.label && this.label.parentNode) this.label.parentNode.removeChild(this.label);
        if (this.description && this.description.parentNode) this.description.parentNode.removeChild(this.description);
        super.destroy();
    }
    getNumColumns() {
        return 2;
    }
    getValue() {
        if (!this.dependenciesFulfilled) return undefined;
        if (this.schema.type === 'integer') return this.value === '' ? 0 : parseInt(this.value);
        return this.value;
    }
    setValue(value) {
        value = this.applyConstFilter(value);
        this.value = value;
        for(let i = 0; i < this.radioGroup.length; i++)if (this.radioGroup[i].value === `${value}`) {
            this.radioGroup[i].checked = true;
            this.value = value;
            if (this.options.displayValue) this.displayRating.innerHTML = this.value;
            break;
        }
        super.setValue(this.value);
    }
}
StarratingEditor.rules = (0, _starratingCssJsDefault.default);

},{"./string.js":"cT5YY","./starrating.css.js":"4STVB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4STVB":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".starrating": "direction:rtl;display:inline-block;white-space:nowrap",
    ".starrating > input": "display:none",
    ".starrating > label:before": "content:'%5C2606';margin:1px;font-size:18px;font-style:normal;font-weight:400;line-height:1;font-family:'Arial';display:inline-block",
    ".starrating > label": "color:%23888;cursor:pointer;margin:8px%200%202px%200",
    ".starrating > label.starrating-display-enabled": "margin:1px%200%200%200",
    ".starrating > input:checked ~ label": "color:%23ffca08",
    ".starrating:not(.readonly) > input:hover ~ label": "color:%23ffca08",
    ".starrating > input:checked ~ label:before": "content:'%5C2605';text-shadow:0%200%201px%20rgba(0%2C20%2C20%2C1)",
    ".starrating:not(.readonly) > input:hover ~ label:before": "content:'%5C2605';text-shadow:0%200%201px%20rgba(0%2C20%2C20%2C1)",
    ".starrating .starrating-display": "position:relative;direction:rtl;text-align:center;font-size:10px;line-height:0px"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7fnGC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StepperEditor", ()=>StepperEditor);
var _integerJs = require("./integer.js");
class StepperEditor extends (0, _integerJs.IntegerEditor) {
    build() {
        super.build();
        this.input.setAttribute('type', 'number');
        if (!this.input.getAttribute('step')) this.input.setAttribute('step', '1');
        const stepperButtons = this.theme.getStepperButtons(this.input);
        this.control.appendChild(stepperButtons);
        this.stepperDown = this.control.querySelector('.stepper-down');
        this.stepperUp = this.control.querySelector('.stepper-up');
    }
    enable() {
        super.enable();
        this.stepperDown.removeAttribute('disabled');
        this.stepperUp.removeAttribute('disabled');
    }
    disable() {
        super.disable();
        this.stepperDown.setAttribute('disabled', true);
        this.stepperUp.setAttribute('disabled', true);
    }
}

},{"./integer.js":"4sii0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c5nbP":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TableEditor", ()=>TableEditor);
var _arrayJs = require("./array.js");
var _utilitiesJs = require("../utilities.js");
class TableEditor extends (0, _arrayJs.ArrayEditor) {
    register() {
        super.register();
        if (this.rows) for(let i = 0; i < this.rows.length; i++)this.rows[i].register();
    }
    unregister() {
        super.unregister();
        if (this.rows) for(let i = 0; i < this.rows.length; i++)this.rows[i].unregister();
    }
    getNumColumns() {
        return Math.max(Math.min(12, this.width), 3);
    }
    preBuild() {
        const itemSchema = this.jsoneditor.expandRefs(this.schema.items || {});
        this.item_title = itemSchema.title || 'row';
        this.item_default = itemSchema.default || null;
        this.item_has_child_editors = itemSchema.properties || itemSchema.items;
        this.width = 12;
        this.array_controls_top = this.options.array_controls_top || this.jsoneditor.options.array_controls_top;
        super.preBuild();
    }
    build() {
        this.tableContainer = this.theme.getTableContainer();
        this.table = this.theme.getTable();
        this.tableContainer.appendChild(this.table);
        this.container.appendChild(this.tableContainer);
        this.thead = this.theme.getTableHead();
        this.table.appendChild(this.thead);
        this.header_row = this.theme.getTableRow();
        this.thead.appendChild(this.header_row);
        this.row_holder = this.theme.getTableBody();
        this.table.appendChild(this.row_holder);
        /* Determine the default value of array element */ const tmp = this.getElementEditor(0, true);
        this.item_default = tmp.getDefault();
        this.width = tmp.getNumColumns() + 2;
        if (!this.options.compact) {
            this.header = document.createElement('span');
            this.header.textContent = this.getTitle();
            this.title = this.theme.getHeader(this.header, this.getPathDepth());
            this.container.appendChild(this.title);
            if (this.options.infoText) {
                this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
                this.container.appendChild(this.infoButton);
            }
            this.title_controls = this.theme.getHeaderButtonHolder();
            this.title.appendChild(this.title_controls);
            if (this.schema.description) {
                this.description = this.theme.getDescription(this.translateProperty(this.schema.description));
                this.container.appendChild(this.description);
            }
            this.panel = this.theme.getIndentedPanel();
            this.container.appendChild(this.panel);
            this.error_holder = document.createElement('div');
            this.panel.appendChild(this.error_holder);
        } else {
            this.panel = document.createElement('div');
            this.container.appendChild(this.panel);
        }
        this.panel.appendChild(this.tableContainer);
        this.controls = this.theme.getButtonHolder();
        if (this.array_controls_top) this.title.appendChild(this.controls);
        else this.panel.appendChild(this.controls);
        if (this.item_has_child_editors) {
            const ce = tmp.getChildEditors();
            const order = tmp.property_order || Object.keys(ce);
            for(let i = 0; i < order.length; i++){
                const th = this.theme.getTableHeaderCell(ce[order[i]].getTitle());
                if (ce[order[i]].options.hidden) th.style.display = 'none';
                this.header_row.appendChild(th);
            }
        } else this.header_row.appendChild(this.theme.getTableHeaderCell(this.item_title));
        tmp.destroy();
        this.row_holder.innerHTML = '';
        /* Row Controls column */ this.controls_header_cell = this.theme.getTableHeaderCell(this.translate('table_controls'));
        this.controls_header_cell.setAttribute('aria-hidden', 'true');
        this.controls_header_cell.style.visibility = 'hidden';
        this.header_row.appendChild(this.controls_header_cell);
        /* Add controls */ this.addControls();
    }
    onChildEditorChange(editor, eventData) {
        this.refreshValue();
        super.onChildEditorChange(editor, eventData);
    }
    getItemDefault() {
        return (0, _utilitiesJs.extend)({}, {
            default: this.item_default
        }).default;
    }
    getItemTitle() {
        return this.item_title;
    }
    getElementEditor(i, ignore) {
        const schemaCopy = (0, _utilitiesJs.extend)({}, this.schema.items);
        const editor = this.jsoneditor.getEditorClass(schemaCopy, this.jsoneditor);
        const row = this.row_holder.appendChild(this.theme.getTableRow());
        let holder = row;
        if (!this.item_has_child_editors) {
            holder = this.theme.getTableCell();
            row.appendChild(holder);
        }
        const ret = this.jsoneditor.createEditor(editor, {
            jsoneditor: this.jsoneditor,
            schema: schemaCopy,
            container: holder,
            path: `${this.path}.${i}`,
            parent: this,
            compact: true,
            table_row: true
        });
        ret.preBuild();
        if (!ignore) {
            ret.build();
            ret.postBuild();
            ret.controls_cell = row.appendChild(this.theme.getTableCell());
            ret.row = row;
            ret.table_controls = this.theme.getButtonHolder();
            ret.controls_cell.appendChild(ret.table_controls);
            ret.table_controls.style.margin = 0;
            ret.table_controls.style.padding = 0;
        }
        return ret;
    }
    destroy() {
        this.innerHTML = '';
        if (this.checkParent(this.title)) this.title.parentNode.removeChild(this.title);
        if (this.checkParent(this.description)) this.description.parentNode.removeChild(this.description);
        if (this.checkParent(this.row_holder)) this.row_holder.parentNode.removeChild(this.row_holder);
        if (this.checkParent(this.table)) this.table.parentNode.removeChild(this.table);
        if (this.checkParent(this.panel)) this.panel.parentNode.removeChild(this.panel);
        this.rows = this.title = this.description = this.row_holder = this.table = this.panel = null;
        super.destroy();
    }
    ensureArraySize(value) {
        if (!Array.isArray(value)) value = [
            value
        ];
        if (this.schema.minItems) while(value.length < this.schema.minItems)value.push(this.getItemDefault());
        if (this.schema.maxItems && value.length > this.schema.maxItems) value = value.slice(0, this.schema.maxItems);
        return value;
    }
    setValue(value = [], initial) {
        value = this.applyConstFilter(value);
        /* Make sure value has between minItems and maxItems items in it */ value = this.ensureArraySize(value);
        const serialized = JSON.stringify(value);
        if (serialized === this.serialized) return;
        let numrowsChanged = false;
        value.forEach((val, i)=>{
            if (this.rows[i]) /* TODO: don't set the row's value if it hasn't changed */ this.rows[i].setValue(val);
            else {
                this.addRow(val);
                numrowsChanged = true;
            }
        });
        for(let j = value.length; j < this.rows.length; j++){
            const holder = this.rows[j].container;
            if (!this.item_has_child_editors) this.rows[j].row.parentNode.removeChild(this.rows[j].row);
            this.rows[j].destroy();
            if (holder.parentNode) holder.parentNode.removeChild(holder);
            this.rows[j] = null;
            numrowsChanged = true;
        }
        this.rows = this.rows.slice(0, value.length);
        this.refreshValue();
        if (numrowsChanged || initial) this.refreshRowButtons();
        this.onChange();
    /* TODO: sortable */ }
    refreshRowButtons() {
        /* If we currently have minItems items in the array */ const minItems = this.schema.minItems && this.schema.minItems >= this.rows.length;
        /* If we currently have maxItems items in the array */ const maxItems = this.schema.maxItems && this.schema.maxItems <= this.rows.length;
        const needRowButtons = [];
        this.rows.forEach((editor, i)=>{
            if (editor.delete_button) {
                /* Hide the delete button if we have minItems items */ const display = !minItems;
                this.setButtonState(editor.delete_button, display);
                needRowButtons.push(display);
            }
            if (editor.copy_button) {
                /* Hide the copy button if we have maxItems items */ const display = !maxItems;
                this.setButtonState(editor.copy_button, display);
                needRowButtons.push(display);
            }
            if (editor.moveup_button) {
                /* Hide the moveup button for the first row */ const display = i !== 0;
                this.setButtonState(editor.moveup_button, display);
                needRowButtons.push(display);
            }
            if (editor.movedown_button) {
                /* Hide the movedown button for the last row */ const display = i !== this.rows.length - 1;
                this.setButtonState(editor.movedown_button, display);
                needRowButtons.push(display);
            }
        });
        const need = needRowButtons.some((e)=>e);
        /* Show/hide controls column in table */ this.rows.forEach((editor)=>this.setButtonState(editor.controls_cell, need));
        this.setButtonState(this.controls_header_cell, need);
        this.setButtonState(this.table, this.value.length);
        /* If there are maxItems items in the array, or configured to hide the add_row_button button, hide the button beneath the rows */ const display1 = !(maxItems || this.hide_add_button);
        this.setButtonState(this.add_row_button, display1);
        /* If there are minItems items in the array, or configured to hide the delete_last_row button, hide the button beneath the rows */ const display2 = !(!this.value.length || minItems || this.hide_delete_last_row_buttons);
        this.setButtonState(this.delete_last_row_button, display2);
        /* If there are minItems items in the array, or configured to hide the remove_all_rows_button button, hide the button beneath the rows */ const display3 = !(this.value.length <= 1 || minItems || this.hide_delete_all_rows_buttons);
        this.setButtonState(this.remove_all_rows_button, display3);
        const controlsNeeded = display1 || display2 || display3;
        this.setButtonState(this.controls, controlsNeeded);
    }
    refreshValue() {
        this.value = [];
        this.rows.forEach((editor, i)=>{
            /* Get the value for this editor */ this.value[i] = editor.getValue();
        });
        this.serialized = JSON.stringify(this.value);
    }
    addRow(value) {
        const i = this.rows.length;
        this.rows[i] = this.getElementEditor(i);
        const controlsHolder = this.rows[i].table_controls;
        /* Buttons to delete row, copy row, move row up, and move row down */ if (!this.hide_delete_buttons) this.rows[i].delete_button = this._createDeleteButton(i, controlsHolder);
        if (this.show_copy_button) this.rows[i].copy_button = this._createCopyButton(i, controlsHolder);
        if (!this.hide_move_buttons) this.rows[i].moveup_button = this._createMoveUpButton(i, controlsHolder);
        if (!this.hide_move_buttons) this.rows[i].movedown_button = this._createMoveDownButton(i, controlsHolder);
        this._supportDragDrop(this.rows[i].row);
        if (typeof value !== 'undefined') this.rows[i].setValue(value);
        return this.rows[i];
    }
    _createDeleteButton(i, holder) {
        const button = this.getButton('', 'delete', 'button_delete_row_title_short');
        button.classList.add('delete', 'json-editor-btntype-delete');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const j = e.currentTarget.getAttribute('data-i') * 1;
            const value = this.getValue();
            const rows = this.getValue();
            const editorValue = rows[j];
            value.splice(j, 1);
            this.setValue(value);
            this.onChange(true);
            this.jsoneditor.trigger('deleteRow', editorValue);
        });
        holder.appendChild(button);
        return button;
    }
    _createCopyButton(i, holder) {
        const button = this.getButton('', 'copy', 'button_copy_row_title_short');
        const schema = this.schema;
        button.classList.add('copy', 'json-editor-btntype-copy');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const j = e.currentTarget.getAttribute('data-i') * 1;
            const value = this.getValue();
            let newValue = value[j];
            /* On copy, recreate uuid if needed. */ if (schema.items.type === 'string' && schema.items.format === 'uuid') newValue = (0, _utilitiesJs.generateUUID)();
            else if (schema.items.type === 'object' && schema.items.properties) value.forEach((row, i)=>{
                if (j === i) {
                    for (const key of Object.keys(row))if (schema.items.properties && schema.items.properties[key] && schema.items.properties[key].format === 'uuid') {
                        newValue = Object.assign({}, value[j]);
                        newValue[key] = (0, _utilitiesJs.generateUUID)();
                    }
                }
            });
            value.splice(j + 1, 0, newValue);
            this.setValue(value);
            this.onChange(true);
            this.jsoneditor.trigger('copyRow', this.rows[j + 1]);
        });
        holder.appendChild(button);
        return button;
    }
    _createMoveUpButton(i, holder) {
        const button = this.getButton('', 'moveup', 'button_move_up_title');
        button.classList.add('moveup', 'json-editor-btntype-move');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const j = e.currentTarget.getAttribute('data-i') * 1;
            const value = this.getValue();
            value.splice(j - 1, 0, value.splice(j, 1)[0]);
            this.setValue(value);
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[j - 1]);
        });
        holder.appendChild(button);
        return button;
    }
    _createMoveDownButton(i, holder) {
        const button = this.getButton('', 'movedown', 'button_move_down_title');
        button.classList.add('movedown', 'json-editor-btntype-move');
        button.setAttribute('data-i', i);
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const j = e.currentTarget.getAttribute('data-i') * 1;
            const value = this.getValue();
            value.splice(j + 1, 0, value.splice(j, 1)[0]);
            this.setValue(value);
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[j + 1]);
        });
        holder.appendChild(button);
        return button;
    }
    _supportDragDrop(tab) {
        (0, _arrayJs.supportDragDrop)(tab, (i, j)=>{
            const rows = this.getValue();
            const tmp = rows[i];
            rows.splice(i, 1);
            rows.splice(j, 0, tmp);
            this.setValue(rows);
            this.onChange(true);
            this.jsoneditor.trigger('moveRow', this.rows[j]);
        }, {
            useTrigger: true
        });
    }
    addControls() {
        this.collapsed = false;
        this.toggle_button = this._createToggleButton();
        if (this.title_controls) {
            this.title.insertBefore(this.toggle_button, this.title.childNodes[0]);
            this.toggle_button.addEventListener('click', (e)=>{
                e.preventDefault();
                e.stopPropagation();
                this.setButtonState(this.panel, this.collapsed);
                if (this.collapsed) {
                    this.collapsed = false;
                    this.setButtonText(e.currentTarget, '', 'collapse', 'button_collapse');
                } else {
                    this.collapsed = true;
                    this.setButtonText(e.currentTarget, '', 'expand', 'button_expand');
                }
            });
            /* If it should start collapsed */ if (this.options.collapsed) (0, _utilitiesJs.trigger)(this.toggle_button, 'click');
            /* Collapse button disabled */ if (this.schema.options && typeof this.schema.options.disable_collapse !== 'undefined') {
                if (this.schema.options.disable_collapse) this.toggle_button.style.display = 'none';
            } else if (this.jsoneditor.options.disable_collapse) this.toggle_button.style.display = 'none';
        }
        /* Add "new row" and "delete last" buttons below editor */ this.add_row_button = this._createAddRowButton();
        this.delete_last_row_button = this._createDeleteLastRowButton();
        this.remove_all_rows_button = this._createRemoveAllRowsButton();
    }
    _createToggleButton() {
        const button = this.getButton('', 'collapse', 'button_collapse');
        button.classList.add('json-editor-btntype-toggle');
        return button;
    }
    _createAddRowButton() {
        const button = this.getButton(this.getItemTitle(), 'add', 'button_add_row_title', [
            this.getItemTitle()
        ]);
        button.classList.add('json-editor-btntype-add');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            const editor = this.addRow();
            this.refreshValue();
            this.refreshRowButtons();
            this.onChange(true);
            this.jsoneditor.trigger('addRow', editor);
        });
        this.controls.appendChild(button);
        return button;
    }
    _createDeleteLastRowButton() {
        const button = this.getButton('button_delete_last', 'subtract', 'button_delete_last_title', [
            this.getItemTitle()
        ]);
        button.classList.add('json-editor-btntype-deletelast');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const rows = this.getValue();
            const editorValue = rows.pop();
            this.setValue(rows);
            this.onChange(true);
            this.jsoneditor.trigger('deleteRow', editorValue);
        });
        this.controls.appendChild(button);
        return button;
    }
    _createRemoveAllRowsButton() {
        const button = this.getButton('button_delete_all', 'delete', 'button_delete_all_title');
        button.classList.add('json-editor-btntype-deleteall');
        button.addEventListener('click', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            if (!this.askConfirmation()) return false;
            const values = this.getValue();
            this.setValue([]);
            this.onChange(true);
            this.jsoneditor.trigger('deleteAllRows', values);
        });
        this.controls.appendChild(button);
        return button;
    }
}

},{"./array.js":"hBzPE","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23EYi":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UploadEditor", ()=>UploadEditor);
var _editorJs = require("../editor.js");
var _utilitiesJs = require("../utilities.js");
class UploadEditor extends (0, _editorJs.AbstractEditor) {
    getNumColumns() {
        return 4;
    }
    build() {
        if (!this.options.compact) this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());
        if (this.schema.description) this.description = this.theme.getFormInputDescription(this.translateProperty(this.schema.description));
        if (this.options.infoText) this.infoButton = this.theme.getInfoButton(this.translateProperty(this.options.infoText));
        if (this.options.hidden) this.container.style.display = 'none';
        /* Editor options */ this.options = this.expandCallbacks('upload', (0, _utilitiesJs.extend)({}, {
            title: 'Browse',
            icon: '',
            auto_upload: false,
            /* Trigger file upload button automatically */ hide_input: false,
            /* Hide the Browse button and name display (Only works if 'enable_drag_drop' is true) */ enable_drag_drop: false,
            /* Enable Drag&Drop uploading */ drop_zone_text: 'Drag & Drop file here',
            /* Text displayed in dropzone box */ drop_zone_top: false,
            /* Position of dropzone. true=before button input, false=after button input */ alt_drop_zone: '',
            /* Alternate DropZone DOM selector (Can be created inside another property) */ mime_type: '',
            /* If set, restricts to mime type(s). Can be either a string or an array */ max_upload_size: 0,
            /* Maximum file size allowed. 0 = no limit */ upload_handler: (jseditor, type, file, cbs)=>{
                /* Default dummy test upload handler */ window.alert(`No upload_handler defined for "${jseditor.path}". You must create your own handler to enable upload to server`);
            }
        }, this.defaults.options.upload || {}, this.options.upload || {}));
        this.options.mime_type = this.options.mime_type ? [].concat(this.options.mime_type) : [];
        /* Input that holds the base64 string */ this.input = this.theme.getFormInputField('hidden');
        this.container.appendChild(this.input);
        /* Don't show uploader if this is readonly */ if (!this.schema.readOnly && !this.schema.readonly) {
            if (typeof this.options.upload_handler !== 'function') throw new Error('Upload handler required for upload editor');
            /* File uploader */ this.uploader = this.theme.getFormInputField('file');
            this.uploader.style.display = 'none';
            if (this.options.mime_type.length) this.uploader.setAttribute('accept', this.options.mime_type);
            if (!(this.options.enable_drag_drop === true && this.options.hide_input === true)) {
                /* Pass click to this.uploader element */ this.clickHandler = (e)=>{
                    this.uploader.dispatchEvent(new window.MouseEvent('click', {
                        view: window,
                        bubbles: true,
                        cancelable: false
                    }));
                };
                /* Browse button */ this.browseButton = this.getButton(this.options.title, this.options.icon, this.options.title);
                this.browseButton.addEventListener('click', this.clickHandler);
                /* Display field */ this.fileDisplay = this.theme.getFormInputField('input');
                this.fileDisplay.setAttribute('readonly', true);
                this.fileDisplay.value = 'No file selected.';
                this.fileDisplay.addEventListener('dblclick', this.clickHandler);
                this.fileUploadGroup = this.theme.getInputGroup(this.fileDisplay, [
                    this.browseButton
                ]);
                if (!this.fileUploadGroup) {
                    /* Themes that doesn't support input grouping */ this.fileUploadGroup = document.createElement('div');
                    this.fileUploadGroup.appendChild(this.fileDisplay);
                    this.fileUploadGroup.appendChild(this.browseButton);
                }
            }
            /* Drag&Drop upload enabled */ if (this.options.enable_drag_drop === true) {
                /* Alternate DropZone defined */ if (this.options.alt_drop_zone !== '') {
                    this.altDropZone = document.querySelector(this.options.alt_drop_zone);
                    if (this.altDropZone) this.dropZone = this.altDropZone;
                    else throw new Error(`Error: alt_drop_zone selector "${this.options.alt_drop_zone}" not found!`);
                } else this.dropZone = this.theme.getDropZone(this.options.drop_zone_text);
                if (this.dropZone) {
                    this.dropZone.classList.add('upload-dropzone');
                    this.dropZone.addEventListener('dblclick', this.clickHandler);
                }
            }
            /* Triggered after file have been selected */ this.uploadHandler = (e)=>{
                e.preventDefault();
                e.stopPropagation();
                const files = e.target.files || e.dataTransfer.files;
                if (files && files.length) {
                    if (this.options.max_upload_size !== 0 && files[0].size > this.options.max_upload_size) this.theme.addInputError(this.uploader, `${this.translate('upload_max_size')} ${this.options.max_upload_size}`);
                    else if (this.options.mime_type.length !== 0 && !this.isValidMimeType(files[0].type, this.options.mime_type)) this.theme.addInputError(this.uploader, `${this.translate('upload_wrong_file_format')} ${this.options.mime_type.toString()}`);
                    else {
                        if (this.fileDisplay) this.fileDisplay.value = files[0].name;
                        let fr = new window.FileReader();
                        fr.onload = (evt)=>{
                            this.preview_value = evt.target.result;
                            this.refreshPreview(files);
                            this.onChange(true);
                            fr = null;
                        };
                        fr.readAsDataURL(files[0]);
                    }
                }
            };
            this.uploader.addEventListener('change', this.uploadHandler);
            /* Drag&Drop Event Handler */ this.dragHandler = (e)=>{
                const files = e.dataTransfer.items || e.dataTransfer.files;
                const validType = files && files.length && (this.options.mime_type.length === 0 || this.isValidMimeType(files[0].type, this.options.mime_type));
                const validZone = e.currentTarget.classList && e.currentTarget.classList.contains('upload-dropzone') && validType;
                switch((e.currentTarget === window ? 'w_' : 'e_') + e.type){
                    case 'w_drop':
                    case 'w_dragover':
                        /* prevent default browser action if dropped outside dropzone */ if (!validZone) e.dataTransfer.dropEffect = 'none';
                        break;
                    case 'e_dragenter':
                        if (validZone) {
                            this.dropZone.classList.add('valid-dropzone');
                            e.dataTransfer.dropEffect = 'copy';
                        } else this.dropZone.classList.add('invalid-dropzone');
                        break;
                    case 'e_dragover':
                        if (validZone) e.dataTransfer.dropEffect = 'copy';
                        break;
                    case 'e_dragleave':
                        this.dropZone.classList.remove('valid-dropzone', 'invalid-dropzone');
                        break;
                    case 'e_drop':
                        this.dropZone.classList.remove('valid-dropzone', 'invalid-dropzone');
                        if (validZone) this.uploadHandler(e);
                        break;
                }
                if (!validZone) e.preventDefault();
            };
            /* Set Drag'n'Drop handlers */ if (this.options.enable_drag_drop === true) {
                [
                    'dragover',
                    'drop'
                ].forEach((ev)=>{
                    window.addEventListener(ev, this.dragHandler, true);
                });
                [
                    'dragenter',
                    'dragover',
                    'dragleave',
                    'drop'
                ].forEach((ev)=>{
                    this.dropZone.addEventListener(ev, this.dragHandler, true);
                });
            }
        }
        this.preview = document.createElement('div');
        this.control = this.input.controlgroup = this.theme.getFormControl(this.label, this.uploader || this.input, this.description, this.infoButton);
        if (this.uploader) this.uploader.controlgroup = this.control;
        const inputNode = this.uploader || this.input;
        const elements = document.createElement('div');
        if (this.dropZone && !this.altDropZone && this.options.drop_zone_top === true) elements.appendChild(this.dropZone);
        if (this.fileUploadGroup) elements.appendChild(this.fileUploadGroup);
        if (this.dropZone && !this.altDropZone && this.options.drop_zone_top !== true) elements.appendChild(this.dropZone);
        elements.appendChild(this.preview);
        inputNode.parentNode.insertBefore(elements, inputNode.nextSibling);
        this.container.appendChild(this.control);
        /* Any special formatting that needs to happen after the input is added to the dom */ window.requestAnimationFrame(()=>{
            this.afterInputReady();
        });
    }
    afterInputReady() {
        if (this.value) {
            const img = document.createElement('img');
            img.style.maxWidth = '100%';
            img.style.maxHeight = '100px';
            img.onload = (event)=>{
                this.preview.appendChild(img);
            };
            img.onerror = (error)=>{
                // eslint-disable-next-line no-console
                console.error('upload error', error, error.currentTarget);
            };
            img.src = this.container.querySelector('a').href;
        }
        this.theme.afterInputReady(this.input);
    }
    refreshPreview(files) {
        if (this.last_preview === this.preview_value) return;
        this.last_preview = this.preview_value;
        this.preview.innerHTML = '';
        if (!this.preview_value) return;
        const file = files[0];
        /* mime type extracted from file data. More exact than the one in the file object */ const mime = this.preview_value.match(/^data:([^;,]+)[;,]/);
        file.mimeType = mime ? mime[1] : 'unknown';
        if (file.size > 0) {
            /* Format bytes as KB/MB etc. with 2 decimals */ const i = Math.floor(Math.log(file.size) / Math.log(1024));
            file.formattedSize = `${parseFloat((file.size / 1024 ** i).toFixed(2))} ${[
                'Bytes',
                'KB',
                'MB',
                'GB',
                'TB',
                'PB',
                'EB',
                'ZB',
                'YB'
            ][i]}`;
        } else file.formattedSize = '0 Bytes';
        const uploadButton = this.getButton('button_upload', 'upload', 'button_upload');
        uploadButton.addEventListener('click', (event)=>{
            event.preventDefault();
            uploadButton.setAttribute('disabled', 'disabled');
            this.theme.removeInputError(this.uploader);
            if (this.theme.getProgressBar) {
                this.progressBar = this.theme.getProgressBar();
                this.preview.appendChild(this.progressBar);
            }
            this.options.upload_handler(this.path, file, {
                success: (url)=>{
                    this.setValue(url);
                    if (this.parent) this.parent.onChildEditorChange(this);
                    else this.jsoneditor.onChange();
                    if (this.progressBar) this.preview.removeChild(this.progressBar);
                    uploadButton.removeAttribute('disabled');
                },
                failure: (error)=>{
                    this.theme.addInputError(this.uploader, error);
                    if (this.progressBar) this.preview.removeChild(this.progressBar);
                    uploadButton.removeAttribute('disabled');
                },
                updateProgress: (progress)=>{
                    if (this.progressBar) {
                        if (progress) this.theme.updateProgressBar(this.progressBar, progress);
                        else this.theme.updateProgressBarUnknown(this.progressBar);
                    }
                }
            });
        });
        this.preview.appendChild(this.theme.getUploadPreview(file, uploadButton, this.preview_value));
        if (this.options.auto_upload) {
            uploadButton.dispatchEvent(new window.MouseEvent('click'));
            uploadButton.parentNode.removeChild(uploadButton);
        }
    }
    enable() {
        if (!this.always_disabled) {
            if (this.uploader) this.uploader.disabled = false;
            super.enable();
        }
    }
    disable(alwaysDisabled) {
        if (alwaysDisabled) this.always_disabled = true;
        if (this.uploader) this.uploader.disabled = true;
        super.disable();
    }
    setValue(val) {
        val = this.applyConstFilter(val);
        if (this.value !== val) {
            this.value = val;
            this.input.value = this.value;
            this.onChange();
        }
    }
    destroy() {
        /* Remove Drag'n'Drop handlers */ if (this.options.enable_drag_drop === true) {
            [
                'dragover',
                'drop'
            ].forEach((ev)=>{
                window.removeEventListener(ev, this.dragHandler, true);
            });
            [
                'dragenter',
                'dragover',
                'dragleave',
                'drop'
            ].forEach((ev)=>{
                this.dropZone.removeEventListener(ev, this.dragHandler, true);
            });
            this.dropZone.removeEventListener('dblclick', this.clickHandler);
            if (this.dropZone && this.dropZone.parentNode) this.dropZone.parentNode.removeChild(this.dropZone);
        }
        if (this.uploader && this.uploader.parentNode) {
            this.uploader.removeEventListener('change', this.uploadHandler);
            this.uploader.parentNode.removeChild(this.uploader);
        }
        if (this.browseButton && this.browseButton.parentNode) {
            this.browseButton.removeEventListener('click', this.clickHandler);
            this.browseButton.parentNode.removeChild(this.browseButton);
        }
        if (this.fileDisplay && this.fileDisplay.parentNode) {
            this.fileDisplay.removeEventListener('dblclick', this.clickHandler);
            this.fileDisplay.parentNode.removeChild(this.fileDisplay);
        }
        if (this.fileUploadGroup && this.fileUploadGroup.parentNode) this.fileUploadGroup.parentNode.removeChild(this.fileUploadGroup);
        if (this.preview && this.preview.parentNode) this.preview.parentNode.removeChild(this.preview);
        if (this.header && this.header.parentNode) this.header.parentNode.removeChild(this.header);
        if (this.input && this.input.parentNode) this.input.parentNode.removeChild(this.input);
        super.destroy();
    }
    isValidMimeType(mimeType, mimeTypesList) {
        return mimeTypesList.reduce((a, v)=>a || new RegExp(v.replace(/\*/g, '.*'), 'gi').test(mimeType), false);
    }
}

},{"../editor.js":"24x9b","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"T14rf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UuidEditor", ()=>UuidEditor);
var _utilitiesJs = require("../utilities.js");
var _stringJs = require("./string.js");
class UuidEditor extends (0, _stringJs.StringEditor) {
    preBuild() {
        super.preBuild();
        /* Use Schema "default" for setting autogenerated uuid */ this.schema.default = this.uuid = this.getUuid();
        /* Set cleave options if no existing options is present */ if (!this.schema.options) this.schema.options = {};
        if (!this.schema.options.cleave) this.schema.options.cleave = {
            delimiters: [
                '-'
            ],
            blocks: [
                8,
                4,
                4,
                4,
                12
            ]
        };
    }
    build() {
        super.build();
        /* Set field to readonly */ this.disable(true);
        this.input.setAttribute('readonly', 'true');
    }
    sanitize(value) {
        if (!this.testUuid(value)) value = this.uuid;
        return value;
    }
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        if (!this.testUuid(value)) value = this.uuid;
        this.uuid = value;
        super.setValue(value, initial, fromTemplate);
    }
    getUuid() {
        return (0, _utilitiesJs.generateUUID)();
    }
    testUuid(value) {
        return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(value);
    }
}

},{"../utilities.js":"fV5Qc","./string.js":"cT5YY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8eYoW":[function(require,module,exports,__globalThis) {
/*

Edtended handling of  oolor type fields.

Has optional support for using https://github.com/Sphinxxxx/vanilla-picker.

*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ColorEditor", ()=>ColorEditor);
var _stringJs = require("./string.js");
var _utilitiesJs = require("../utilities.js");
class ColorEditor extends (0, _stringJs.StringEditor) {
    postBuild() {
        if (window.Picker) this.input.type = 'text';
        this.input.style.padding = '3px';
    }
    setValue(value, initial, fromTemplate) {
        value = this.applyConstFilter(value);
        const res = super.setValue(value, initial, fromTemplate);
        if (this.picker_instance && this.picker_instance.domElement && res && res.changed) this.picker_instance.setColor(res.value, true);
        return res;
    }
    getNumColumns() {
        return 2;
    }
    afterInputReady() {
        super.afterInputReady();
        this.createPicker(true);
    }
    disable() {
        super.disable();
        if (this.picker_instance && this.picker_instance.domElement) {
            /* Disable picker cursor dragging */ this.picker_instance.domElement.style.pointerEvents = 'none';
            /* Disable picker buttons */ const buttons = this.picker_instance.domElement.querySelectorAll('button');
            for(let i = 0; i < buttons.length; i++)buttons[i].disabled = true;
        }
    }
    enable() {
        super.enable();
        if (this.picker_instance && this.picker_instance.domElement) {
            /* Enable picker cursor dragging */ this.picker_instance.domElement.style.pointerEvents = 'auto';
            /* Enable picker buttons */ const buttons = this.picker_instance.domElement.querySelectorAll('button');
            for(let i = 0; i < buttons.length; i++)buttons[i].disabled = false;
        }
    }
    destroy() {
        this.createPicker(false);
        super.destroy();
    }
    /* helper functions */ createPicker(create) {
        if (create) {
            if (window.Picker && !this.picker_instance) {
                const options = this.expandCallbacks('colorpicker', (0, _utilitiesJs.extend)({}, {
                    editor: false,
                    /* default no editor */ alpha: false,
                    /* default no alpha */ color: this.value,
                    popup: 'bottom' /* show in the bottom */ 
                }, this.defaults.options.colorpicker || {}, this.options.colorpicker || {}, {
                    parent: this.container
                }));
                const updateHandler = (color)=>{
                    const format = this.picker_instance.settings.editorFormat;
                    const isAlpha = this.picker_instance.settings.alpha;
                    this.setValue(format === 'hex' ? isAlpha ? color.hex : color.hex.slice(0, 7) : color[`${format + (isAlpha ? 'a' : '')}String`]);
                };
                if (!options.popup && typeof options.onChange !== 'function') options.onChange = updateHandler;
                else if (options.popup && typeof options.onDone !== 'function') options.onDone = updateHandler;
                this.picker_instance = new window.Picker(options);
                /* this.picker_instance.openHandler() */ if (!options.popup) {
                    this.input.style.display = 'none';
                    this.theme.afterInputReady(this.picker_instance.domElement);
                }
            }
        } else if (this.picker_instance) {
            this.picker_instance.destroy();
            this.picker_instance = null;
            this.input.style.display = '';
        }
    }
}

},{"./string.js":"cT5YY","../utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqTEn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Handles loading Schema and tracking references.
 */ parcelHelpers.export(exports, "SchemaLoader", ()=>SchemaLoader);
var _utilitiesJs = require("./utilities.js");
class SchemaLoader {
    constructor(options){
        /**
     * @prop {object}
     *  Options of the schema. @see readme.
     */ this.options = options || {};
        /**
     * @prop {object}
     *  The orginial schema to load
     */ this.schema = {};
        /**
     * @prop {object}
     *  Storage of External ref. Exemple :
     *  refs = {
     *    "fully/realized/path/to/schema.json": { ... }
     *    "mylocalschema.json": { ... }
     *  }
     */ this.refs = this.options.refs || {};
        /**
     * @prop {object}
     *  Mapping between the schema and ref. Exemple:
     *  refs_with_info = {
     *   "#/counter/1": "fully/realized/path/to/schema.json"
     *   "#/counter/2": "mylocalschema.json"
     *  }
     */ this.refs_with_info = {};
        /**
     * @prop {string}
     *  String to eewrite external ref with.
     */ this.refs_prefix = '#/counter/';
        /**
     * @prop {int}
     *  Counter of ref
     */ this.refs_counter = 1;
        this._subSchema1 = {
            /* Version 3 `type` */ type (schema) {
                if (typeof schema.type === 'object') schema.type = this._expandSubSchema(schema.type);
            },
            /* Version 3 `disallow` */ disallow (schema) {
                if (typeof schema.disallow === 'object') schema.disallow = this._expandSubSchema(schema.disallow);
            },
            /* Version 4 `anyOf` */ anyOf (schema) {
                Object.entries(schema.anyOf).forEach(([key, value])=>{
                    schema.anyOf[key] = this.expandSchema(value);
                });
            },
            /* Version 4 `dependencies` (schema dependencies) */ dependencies (schema) {
                Object.entries(schema.dependencies).forEach(([key, value])=>{
                    if (typeof value === 'object' && !Array.isArray(value)) schema.dependencies[key] = this.expandSchema(value);
                });
            },
            /* Version 4 `not` */ not (schema) {
                schema.not = this.expandSchema(schema.not);
            }
        };
        this._subSchema2 = {
            /* allOf schemas should be merged into the parent */ allOf (schema, extended) {
                let _extended = (0, _utilitiesJs.extend)({}, extended);
                Object.entries(schema.allOf).forEach(([key, value])=>{
                    schema.allOf[key] = this.expandRefs(value, true);
                    _extended = this.extendSchemas(_extended, this.expandSchema(value));
                });
                delete _extended.allOf;
                return _extended;
            },
            /* extends schemas should be merged into parent */ extends (schema, extended) {
                let _extended;
                /* If extends is a schema */ if (!Array.isArray(schema.extends)) _extended = this.extendSchemas(extended, this.expandSchema(schema.extends));
                else /* If extends is an array of schemas */ _extended = schema.extends.reduce((e, s, i)=>{
                    return this.extendSchemas(e, this.expandSchema(s));
                }, extended);
                delete _extended.extends;
                return _extended;
            },
            /* parent should be merged into oneOf schemas */ oneOf (schema, extended) {
                const tmp = (0, _utilitiesJs.extend)({}, extended);
                delete tmp.oneOf;
                schema.oneOf.reduce((e, s, i)=>{
                    e.oneOf[i] = this.extendSchemas(this.expandSchema(s), tmp);
                    return e;
                }, extended);
                return extended;
            }
        };
    }
    /**
   * Fully loads and expands JSON schema for a provided schema object and URL.
   *
   * The callback receives a expanded JSON Schema object with references
   * replaced with loaded schemas.
   *
   * @param {object} schema - A JSON Schema.
   * @param {string} fetchUrl - Base path from which to store the definitions.
   *   Typically the URI of the schema.
   * @param {*} location - The base URL from which to load relative paths.
   * @returns {object} A JSON Schema with references expanded.
   */ async load(schema, fetchUrl, location) {
        this.schema = schema;
        await this._asyncloadExternalRefs(schema, fetchUrl, this._getFileBase(location), true);
        return this.expandRefs(schema);
    }
    /**
   * Recursively expands loaded references in a provided schema.
   *
   * @param {object} schema - A JSON Schema with references already loaded.
   * @param {boolean} recurseAllOf - Set true to recurse allOf properties.
   * @returns {object} A JSON Schema with references expanded.
   */ expandRefs(schema, recurseAllOf) {
        const _schema = (0, _utilitiesJs.extend)({}, schema);
        if (!_schema.$ref) return _schema;
        // This split the ref to get the Json point if it exists
        // exemple #/counter/1#/definition/address +
        // [1] -> /counter/1
        // [2] -> /definition/address
        const refWithPointerSplit = _schema.$ref.split('#');
        // If local ref
        if (refWithPointerSplit.length === 2 && !this.refs_with_info[_schema.$ref]) {
            const sub = this.expandRecursivePointer(this.schema, refWithPointerSplit[1]);
            const expandedSchema = this.extendSchemas(_schema, this.expandSchema(sub));
            delete expandedSchema.$ref;
            return expandedSchema;
        }
        const refObj = refWithPointerSplit.length > 2 ? this.refs_with_info['#' + refWithPointerSplit[1]] : this.refs_with_info[_schema.$ref];
        delete _schema.$ref;
        const fetchUrl = refObj.$ref.startsWith('#') ? refObj.fetchUrl : '';
        const ref = this._getRef(fetchUrl, refObj);
        if (!this.refs[ref]) // eslint-disable-next-line no-console
        console.warn(`reference:'${ref}' not found!`);
        else if (recurseAllOf && (0, _utilitiesJs.hasOwnProperty)(this.refs[ref], 'allOf')) {
            const allOf = this.refs[ref].allOf;
            Object.keys(allOf).forEach((key)=>{
                allOf[key] = this.expandRefs(allOf[key], true);
            });
        }
        if (refWithPointerSplit.length > 2) return this.extendSchemas(_schema, this.expandSchema(this.expandRecursivePointer(this.refs[ref], refWithPointerSplit[2])));
        else return this.extendSchemas(_schema, this.expandSchema(this.refs[ref]));
    }
    /**
  * Returns a subschema based on a JSON Pointer path.
  * @param {object} schema - Schema too into
  * @param {string} pointer - path to look for
  * @param {object} original_schema - the Original schema
  * @returns the subschema pointed to by the path
  */ expandRecursivePointer(schema, pointer) {
        let subschema = schema;
        pointer.split('/').slice(1).forEach((i)=>{
            if (subschema[i]) subschema = subschema[i];
        });
        // If the result is a pointer, let's go for another turn
        if (subschema.$refs && subschema.$refs.startsWith('#')) return this.expandRecursivePointer(schema, subschema.$refs);
        return subschema;
    }
    /**
   * Expands a JSON schema and its references.
   *
   * @param {object} schema - A JSON Schema with references already loaded.
   * @returns {object} A JSON Schema with references expanded.
   */ expandSchema(schema) {
        Object.entries(this._subSchema1).forEach(([key, func])=>{
            if (schema[key]) func.call(this, schema);
        });
        let extended = (0, _utilitiesJs.extend)({}, schema);
        Object.entries(this._subSchema2).forEach(([key, func])=>{
            if (schema[key]) extended = func.call(this, schema, extended);
        });
        return this.expandRefs(extended);
    }
    _getRef(fetchUrl, refObj) {
        const ref = fetchUrl + refObj;
        return this.refs[ref] ? ref : fetchUrl + decodeURIComponent(refObj.$ref);
    }
    _expandSubSchema(subschema) {
        /* Array of types */ if (Array.isArray(subschema)) return subschema.map((m)=>typeof m === 'object' ? this.expandSchema(m) : m);
        /* Schema */ return this.expandSchema(subschema);
    }
    /**
   * Rewrite the passed schema's JSON pointers to prepend with the current reference's path, so that it will be converted to a reference "counter".
   *
   * @example
   * In file "../otherreferencedfile.json", referenced from "schema.json":
   *
   * "$ref": "#/definitions/myschema" => "$ref": "../path/to/my/referenced/schemafile.json#/definitions/myschema"
   *   ...which will then be parsed later in loadExternalReferences() to "$ref": "#/counter/1#/definitions/myschema"
   *
   * @param {object} schema - A JSON Schema with the definitions key present.
   * @param {string} path - Base path from which to store the definitions in refs. (exemple ../path/to/my/referenced/schemafile.json)
   *   Typically the URI of the schema.
   */ _manageRecursivePointer(schema, path) {
        Object.keys(schema).forEach((i)=>{
            if (schema[i] !== null && schema[i].$ref && schema[i].$ref.indexOf('#') === 0) schema[i].$ref = path + schema[i].$ref;
        });
    }
    /**
   * Recursively parse a (sub)schema to populate loader reference info.
   *
   * @param {object} schema - A JSON Schema
   * @param {string} fetchUrl - Base path from which to store the definitions.
   * @param {boolean} firstIteration - Is it the first time we load this function? Help making difference between external ref vs internal pointer
   * @returns {array} Refs in the format of uri => true if external.
   */ _getExternalRefs(schema, fetchUrl, firstIteration = false) {
        if (!firstIteration) this._manageRecursivePointer(schema, fetchUrl);
        const refs = {};
        const mergeRefs = (newrefs)=>Object.keys(newrefs).forEach((i)=>{
                refs[i] = true;
            });
        if (schema.$ref && typeof schema.$ref !== 'object' && !(schema.$ref.indexOf('#') === 0 && firstIteration)) {
            let refBase = schema.$ref;
            let pointer = '';
            // Strip any JSON pointers found for external refs.
            if (refBase.indexOf('#') > 0) refBase = refBase.substr(0, refBase.indexOf('#'));
            if (refBase !== schema.$ref) pointer = schema.$ref.substr(schema.$ref.indexOf('#'));
            // We use a fragment idenfier to track json pointer in top of our pointer
            const refCounter = this.refs_prefix + this.refs_counter++;
            const refPointer = refCounter + pointer;
            if (schema.$ref.substr(0, 1) !== '#' && !this.refs[schema.$ref]) refs[refBase] = true;
            this.refs_with_info[refCounter] = {
                fetchUrl,
                $ref: refBase
            };
            schema.$ref = refPointer;
        }
        Object.values(schema).forEach((value)=>{
            if (!value || typeof value !== 'object') return;
            if (Array.isArray(value)) Object.values(value).forEach((e)=>{
                if (e && typeof e === 'object') mergeRefs(this._getExternalRefs(e, fetchUrl, firstIteration));
            });
            else // Merge Ref if it's not a Pointer
            if (!value.$ref || !(typeof value.$ref === 'string' && value.$ref.startsWith('#'))) mergeRefs(this._getExternalRefs(value, fetchUrl, firstIteration));
        });
        if (schema.id && typeof schema.id === 'string' && schema.id.substr(0, 4) === 'urn:') this.refs[schema.id] = schema;
        else if (schema.$id && typeof schema.$id === 'string' && schema.$id.substr(0, 4) === 'urn:') this.refs[schema.$id] = schema;
        return refs;
    }
    _getFileBase(location) {
        if (!location) return '/';
        const { ajaxBase } = this.options;
        return typeof ajaxBase === 'undefined' ? this._getFileBaseFromFileLocation(location) : ajaxBase;
    }
    _getFileBaseFromFileLocation(fileLocationString) {
        const pathItems = fileLocationString.split('/');
        pathItems.pop();
        return `${pathItems.join('/')}/`;
    }
    _joinUrl(url, fileBase) {
        let fetchUrl = url;
        if (url.substr(0, 7) !== 'http://' && url.substr(0, 8) !== 'https://' && url.substr(0, 5) !== 'blob:' && url.substr(0, 5) !== 'data:' && url.substr(0, 1) !== '#' && url.substr(0, 1) !== '/') fetchUrl = fileBase + url;
        // strip #fragment from URI, so json pointers resolve correctly #928
        if (fetchUrl.indexOf('#') > 0) fetchUrl = fetchUrl.substr(0, fetchUrl.indexOf('#'));
        return fetchUrl;
    }
    _isUniformResourceName(uri) {
        return uri.substr(0, 4) === 'urn:';
    }
    /**
   * Loads external references via AJAX.
   *
   * Will fail if this.options.ajax is not set to true.
   *
   * @param {object} schema - JSON Schema with external references.
   * @param {string} fetchUrl - Base path from which to store the definitions.
   *   Typically the URI of the schema.
   * @param {string} fileBase - The base URL from which to load relative paths.
   *   Typically the URI of the schema minus filename, with trailing slash.
   * @param {boolean} firstIteration - Is it the first time we load this function? Help making difference between external ref vs internal pointer
   *
   * @return {boolean}
   * @throws Error
   */ async _asyncloadExternalRefs(schema, fetchUrl, fileBase, firstIteration = false) {
        const refs = this._getExternalRefs(schema, fetchUrl, firstIteration);
        let waiting = 0;
        // Loop into all schema references
        for (const uri of Object.keys(refs)){
            if (typeof uri === 'undefined') continue;
            if (this.refs[uri]) continue;
            if (this._isUniformResourceName(uri)) {
                this.refs[uri] = 'loading';
                waiting++;
                const urnResolver = this.options.urn_resolver;
                let urn = uri;
                if (typeof urnResolver !== 'function') {
                    // eslint-disable-next-line no-console
                    console.log(`No "urn_resolver" callback defined to resolve "${urn}"`);
                    throw new Error(`Must set urn_resolver option to a callback to resolve ${urn}`);
                }
                // theoretically a URN can contain a JSON pointer
                if (urn.indexOf('#') > 0) urn = urn.substr(0, urn.indexOf('#'));
                let response;
                try {
                    let externalSchema;
                    response = await urnResolver(urn);
                    try {
                        externalSchema = JSON.parse(response);
                    } catch (e) {
                        // eslint-disable-next-line no-console
                        console.log(e);
                        throw new Error(`Failed to parse external ref ${urn}`);
                    }
                    if (!(typeof externalSchema === 'boolean' || typeof externalSchema === 'object') || externalSchema === null || Array.isArray(externalSchema)) throw new Error(`External ref does not contain a valid schema - ${urn}`);
                    this.refs[uri] = externalSchema;
                    await this._asyncloadExternalRefs(externalSchema, uri, fileBase);
                } catch (e) {
                    // eslint-disable-next-line no-console
                    console.log(e);
                    throw new Error(`Failed to parse external ref ${urn}`);
                }
                if (typeof response === 'boolean') throw new Error(`External ref does not contain a valid schema - ${urn}`);
                continue;
            }
            if (!this.options.ajax) throw new Error(`Must set ajax option to true to load external ref ${uri}`);
            waiting++;
            let url = this._joinUrl(uri, fileBase);
            let externalSchema;
            if (this.options.ajax_cache_responses) {
                const schemaFromCache = this.cacheGet(url);
                if (schemaFromCache) externalSchema = schemaFromCache;
            }
            if (!externalSchema) {
                const response = await new Promise((resolve)=>{
                    const r = new XMLHttpRequest();
                    if (this.options.ajaxCredentials) r.withCredentials = this.options.ajaxCredentials;
                    r.overrideMimeType('application/json');
                    r.open('GET', url, true);
                    r.onload = ()=>{
                        resolve(r);
                    };
                    r.onerror = (e)=>{
                        resolve(undefined);
                    };
                    r.send();
                });
                if (typeof response === 'undefined') throw new Error(`Failed to fetch ref via ajax - ${uri}`);
                try {
                    externalSchema = JSON.parse(response.responseText);
                    this.onSchemaLoaded({
                        schema: externalSchema,
                        schemaUrl: url
                    });
                    if (this.options.ajax_cache_responses) this.cacheSet(url, externalSchema);
                } catch (e) {
                    // eslint-disable-next-line no-console
                    console.log(e);
                    throw new Error(`Failed to parse external ref ${url}`);
                }
            }
            if (!(typeof externalSchema === 'boolean' || typeof externalSchema === 'object') || externalSchema === null || Array.isArray(externalSchema)) throw new Error(`External ref does not contain a valid schema - ${url}`);
            this.refs[uri] = externalSchema;
            const newfileBase = this._getFileBaseFromFileLocation(url);
            // Add leading slash.
            if (url !== uri) {
                const pathItems = url.split('/');
                url = (uri.substr(0, 1) === '/' ? '/' : '') + pathItems.pop();
            }
            await this._asyncloadExternalRefs(externalSchema, url, newfileBase);
        }
        if (!waiting) return true;
        this.onAllSchemasLoaded();
    }
    onSchemaLoaded(payload) {}
    onAllSchemasLoaded() {}
    extendSchemas(obj1, obj2) {
        obj1 = (0, _utilitiesJs.extend)({}, obj1);
        obj2 = (0, _utilitiesJs.extend)({}, obj2);
        const extended = {};
        const isRequiredOrDefaultProperties = (prop, val)=>(prop === 'required' || prop === 'defaultProperties') && typeof val === 'object' && Array.isArray(val);
        const merge = (prop, val)=>{
            /* Required and defaultProperties arrays should be unioned together */ if (isRequiredOrDefaultProperties(prop, val)) /* Union arrays and unique */ extended[prop] = val.concat(obj2[prop]).reduce((p, c)=>{
                if (!p.includes(c)) p.push(c);
                return p;
            }, []);
            else if (prop === 'type' && (typeof val === 'string' || Array.isArray(val))) mergeType(val);
            else if (typeof val === 'object' && !Array.isArray(val) && val !== null) /* Objects should be recursively merged */ extended[prop] = this.extendSchemas(val, obj2[prop]);
            else /* Otherwise, use the first value */ extended[prop] = val;
        };
        const mergeType = (val)=>{
            /* Type should be intersected and is either an array or string */ /* Make sure we're dealing with arrays */ if (typeof val === 'string') val = [
                val
            ];
            if (typeof obj2.type === 'string') obj2.type = [
                obj2.type
            ];
            /* If type is only defined in the first schema, keep it */ if (!obj2.type || !obj2.type.length) extended.type = val;
            else /* If type is defined in both schemas, do an intersect */ extended.type = val.filter((n)=>obj2.type.includes(n));
            /* If there's only 1 type and it's a primitive, use a string instead of array */ if (extended.type.length === 1 && typeof extended.type[0] === 'string') extended.type = extended.type[0];
            else if (extended.type.length === 0) /* Remove the type property if it's empty */ delete extended.type;
        };
        Object.entries(obj1).forEach(([prop, val])=>{
            /* If this key is also defined in obj2, merge them */ if (typeof obj2[prop] !== 'undefined') merge(prop, val);
            else /* Otherwise, just use the one in obj1 */ extended[prop] = val;
        });
        /* Properties in obj2 that aren't in obj1 */ Object.entries(obj2).forEach(([prop, val])=>{
            if (typeof obj1[prop] === 'undefined') extended[prop] = val;
        });
        return extended;
    }
    /**
   * Gets a cache key namespaced for JSON Editor.
   *
   * @param {*} key
   *   The schema's key, e.g., URL.
   * @returns {string}
   *   A namespaced cache key, by prefixing "je-cache::".
   */ getCacheKey(key) {
        return [
            'je-cache',
            key
        ].join('::');
    }
    /**
   * Returns the schema cache buster from JSON Editor settings.
   *
   * @returns {string}
   *   The configured cache buster, if any. Otherwise, returns the current date
   *   in ISO 8601 simplified format (e.g., 2011-10-05 for October 5, 2011).
   */ getCacheBuster() {
        return this.options.ajax_cache_buster || new Date().toISOString().slice(0, 10);
    }
    /**
   * Sets a schema into localStorage cache.
   *
   * @param {string} key
   *   The schema's key, e.g., URL.
   * @param {mixed} data
   *   The schema to store. Can be any data type.
   */ cacheSet(key, data) {
        try {
            window.localStorage.setItem(this.getCacheKey(key), JSON.stringify({
                cacheBuster: this.getCacheBuster(),
                schema: data
            }));
        } catch (e) {
            // eslint-disable-next-line no-console
            console.error(e);
        }
    }
    /**
   * Fetches a schema from localStorage cache.
   *
   * @param {string} key
   *   The schema's key, e.g., URL.
   *
   * @returns {mixed}
   *   If found, returns the schema.
   */ cacheGet(key) {
        try {
            const resultRaw = window.localStorage.getItem(this.getCacheKey(key));
            if (resultRaw) {
                const resultDecoded = JSON.parse(resultRaw);
                if (resultDecoded.cacheBuster && resultDecoded.schema) {
                    if (resultDecoded.cacheBuster === this.getCacheBuster()) return resultDecoded.schema;
                }
                this.cacheDelete(key);
            }
        } catch (e) {
            // eslint-disable-next-line no-console
            console.error(e);
        }
    }
    /**
   * Deletes a schema from localStorage cache.
   *
   * @param {string} key
   *   The schema's key, e.g., URL.
   */ cacheDelete(key) {
        window.localStorage.removeItem(this.getCacheKey(key));
    }
}

},{"./utilities.js":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dYnN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "templates", ()=>templates);
var _defaultJs = require("./default.js");
var _ejsJs = require("./ejs.js");
var _handlebarsJs = require("./handlebars.js");
var _hoganJs = require("./hogan.js");
var _lodashJs = require("./lodash.js");
var _markupJs = require("./markup.js");
var _mustacheJs = require("./mustache.js");
var _swigJs = require("./swig.js");
var _underscoreJs = require("./underscore.js");
const templates = {
    default: (0, _defaultJs.defaultTemplate),
    ejs: (0, _ejsJs.ejsTemplate),
    handlebars: (0, _handlebarsJs.handlebarsTemplate),
    hogan: (0, _hoganJs.hoganTemplate),
    lodash: (0, _lodashJs.lodashTemplate),
    markup: (0, _markupJs.markupTemplate),
    mustache: (0, _mustacheJs.mustacheTemplate),
    swig: (0, _swigJs.swigTemplate),
    underscore: (0, _underscoreJs.underscoreTemplate)
};

},{"./default.js":"1WkhZ","./ejs.js":"juqXj","./handlebars.js":"1UXEa","./hogan.js":"7xENc","./lodash.js":"b84Cv","./markup.js":"3YcQR","./mustache.js":"jqUJO","./swig.js":"czQwr","./underscore.js":"l0YPu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1WkhZ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultTemplate", ()=>defaultTemplate);
const defaultTemplate = ()=>({
        compile (template) {
            const matches = template.match(/{{\s*([a-zA-Z0-9\-_ .]+)\s*}}/g);
            const l = matches && matches.length;
            /* Shortcut if the template contains no variables */ if (!l) return ()=>template;
            /* Pre-compute the search/replace functions */ /* This drastically speeds up template execution */ const replacements = [];
            const getReplacement = (i)=>{
                let p = matches[i].replace(/[{}]+/g, '').trim().split('.');
                const n = p.length;
                let func;
                if (n > 1) {
                    let cur;
                    func = (vars)=>{
                        cur = vars;
                        for(i = 0; i < n; i++){
                            cur = cur[p[i]];
                            if (!cur) break;
                        }
                        return cur;
                    };
                } else {
                    p = p[0];
                    func = (vars)=>vars[p];
                }
                replacements.push({
                    s: matches[i],
                    r: func
                });
            };
            for(let i = 0; i < l; i++)getReplacement(i);
            /* The compiled function */ return (vars)=>{
                let ret = `${template}`;
                let r;
                for(let i = 0; i < l; i++){
                    r = replacements[i];
                    ret = ret.replace(r.s, r.r(vars));
                }
                return ret;
            };
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juqXj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ejsTemplate", ()=>ejsTemplate);
const ejsTemplate = ()=>{
    if (!window.EJS) return false;
    return {
        compile (template) {
            const compiled = new window.EJS({
                text: template
            });
            return (context)=>compiled.render(context);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UXEa":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "handlebarsTemplate", ()=>handlebarsTemplate);
const handlebarsTemplate = ()=>window.Handlebars;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xENc":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hoganTemplate", ()=>hoganTemplate);
const hoganTemplate = ()=>{
    if (!window.Hogan) return false;
    return {
        compile (template) {
            const compiled = window.Hogan.compile(template);
            return (context)=>compiled.render(context);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b84Cv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "lodashTemplate", ()=>lodashTemplate);
const lodashTemplate = ()=>{
    if (!window._) return false;
    return {
        compile (template) {
            return (context)=>window._.template(template)(context);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3YcQR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "markupTemplate", ()=>markupTemplate);
const markupTemplate = ()=>{
    if (!window.Mark || !window.Mark.up) return false;
    return {
        compile (template) {
            return (context)=>window.Mark.up(template, context);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqUJO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mustacheTemplate", ()=>mustacheTemplate);
const mustacheTemplate = ()=>{
    if (!window.Mustache) return false;
    return {
        compile (template) {
            return (view)=>window.Mustache.render(template, view);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czQwr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "swigTemplate", ()=>swigTemplate);
const swigTemplate = ()=>window.swig;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l0YPu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "underscoreTemplate", ()=>underscoreTemplate);
const underscoreTemplate = ()=>{
    if (!window._) return false;
    return {
        compile (template) {
            return (context)=>window._.template(template)(context);
        }
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l4JZ8":[function(require,module,exports,__globalThis) {
// import  { bootstrap2Iconlib } from  './bootstrap2.js'
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iconlibs", ()=>iconlibs);
var _bootstrap3Js = require("./bootstrap3.js");
var _fontawesome3Js = require("./fontawesome3.js");
var _fontawesome4Js = require("./fontawesome4.js");
var _fontawesome5Js = require("./fontawesome5.js");
// import  { foundation2Iconlib } from  './foundation2.js'
// import  { foundation3Iconlib } from  './foundation3.js'
var _jqueryuiJs = require("./jqueryui.js");
// import  { materialiconsIconlib } from  './materialicons.js'
var _openiconicJs = require("./openiconic.js");
var _spectreJs = require("./spectre.js");
var _bootstrap = require("./bootstrap");
const iconlibs = {
    // bootstrap2: bootstrap2Iconlib,
    bootstrap: (0, _bootstrap.bootstrapIconlib),
    bootstrap3: (0, _bootstrap3Js.bootstrap3Iconlib),
    fontawesome3: (0, _fontawesome3Js.fontawesome3Iconlib),
    fontawesome4: (0, _fontawesome4Js.fontawesome4Iconlib),
    fontawesome5: (0, _fontawesome5Js.fontawesome5Iconlib),
    // foundation2: foundation2Iconlib,
    // foundation3: foundation3Iconlib,
    jqueryui: (0, _jqueryuiJs.jqueryuiIconlib),
    // materialicons: materialiconsIconlib,
    openiconic: (0, _openiconicJs.openiconicIconlib),
    spectre: (0, _spectreJs.spectreIconlib)
};

},{"./bootstrap3.js":"5a6dT","./fontawesome3.js":"eKaRS","./fontawesome4.js":"3js2P","./fontawesome5.js":"hZZZF","./jqueryui.js":"8xuGO","./openiconic.js":"5aQJH","./spectre.js":"i96L1","./bootstrap":"8yTTp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5a6dT":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bootstrap3Iconlib", ()=>bootstrap3Iconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'glyphicon glyphicon-';
const mapping = {
    collapse: 'chevron-down',
    expand: 'chevron-right',
    delete: 'trash',
    edit: 'pencil',
    add: 'plus',
    subtract: 'minus',
    cancel: 'floppy-remove',
    save: 'floppy-saved',
    moveup: 'arrow-up',
    moveright: 'arrow-right',
    movedown: 'arrow-down',
    moveleft: 'arrow-left',
    copy: 'copy',
    clear: 'remove-circle',
    time: 'time',
    calendar: 'calendar',
    edit_properties: 'list'
};
class bootstrap3Iconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"664HJ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractIconLib", ()=>AbstractIconLib);
const defaultMapping = {
    collapse: '',
    expand: '',
    delete: '',
    edit: '',
    add: '',
    cancel: '',
    save: '',
    moveup: '',
    movedown: ''
};
class AbstractIconLib {
    constructor(iconPrefix = '', mapping = defaultMapping){
        this.mapping = mapping;
        this.icon_prefix = iconPrefix;
    }
    getIconClass(key) {
        return this.mapping[key] ? this.icon_prefix + this.mapping[key] : this.icon_prefix + key;
    }
    getIcon(key) {
        const iconclass = this.getIconClass(key);
        if (!iconclass) return null;
        const i = document.createElement('i');
        i.classList.add(...iconclass.split(' '));
        return i;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKaRS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fontawesome3Iconlib", ()=>fontawesome3Iconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'icon-';
const mapping = {
    collapse: 'chevron-down',
    expand: 'chevron-right',
    delete: 'trash',
    edit: 'pencil',
    add: 'plus',
    subtract: 'minus',
    cancel: 'ban-circle',
    save: 'save',
    moveup: 'arrow-up',
    moveright: 'arrow-right',
    movedown: 'arrow-down',
    moveleft: 'arrow-left',
    copy: 'copy',
    clear: 'remove-circle',
    time: 'time',
    calendar: 'calendar',
    edit_properties: 'list'
};
class fontawesome3Iconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3js2P":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fontawesome4Iconlib", ()=>fontawesome4Iconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'fa fa-';
const mapping = {
    collapse: 'caret-square-o-down',
    expand: 'caret-square-o-right',
    delete: 'times',
    edit: 'pencil',
    add: 'plus',
    subtract: 'minus',
    cancel: 'ban',
    save: 'save',
    moveup: 'arrow-up',
    moveright: 'arrow-right',
    movedown: 'arrow-down',
    moveleft: 'arrow-left',
    copy: 'files-o',
    clear: 'times-circle-o',
    time: 'clock-o',
    calendar: 'calendar',
    edit_properties: 'list'
};
class fontawesome4Iconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZZZF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fontawesome5Iconlib", ()=>fontawesome5Iconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'fas fa-';
const mapping = {
    collapse: 'caret-down',
    expand: 'caret-right',
    delete: 'trash',
    edit: 'pen',
    add: 'plus',
    subtract: 'minus',
    cancel: 'ban',
    save: 'save',
    moveup: 'arrow-up',
    moveright: 'arrow-right',
    movedown: 'arrow-down',
    moveleft: 'arrow-left',
    copy: 'copy',
    clear: 'times-circle',
    time: 'clock',
    calendar: 'calendar',
    edit_properties: 'list'
};
class fontawesome5Iconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8xuGO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jqueryuiIconlib", ()=>jqueryuiIconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'ui-icon ui-icon-';
const mapping = {
    collapse: 'triangle-1-s',
    expand: 'triangle-1-e',
    delete: 'trash',
    edit: 'pencil',
    add: 'plusthick',
    subtract: 'minusthick',
    cancel: 'closethick',
    save: 'disk',
    moveup: 'arrowthick-1-n',
    moveright: 'arrowthick-1-e',
    movedown: 'arrowthick-1-s',
    moveleft: 'arrowthick-1-w',
    copy: 'copy',
    clear: 'circle-close',
    time: 'time',
    calendar: 'calendar',
    edit_properties: 'note'
};
class jqueryuiIconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5aQJH":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "openiconicIconlib", ()=>openiconicIconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'oi oi-';
const mapping = {
    collapse: 'collapse-down',
    expand: 'expand-right',
    delete: 'trash',
    edit: 'pencil',
    add: 'plus',
    subtract: 'minus',
    cancel: 'ban',
    save: 'file',
    moveup: 'arrow-thick-top',
    moveright: 'arrow-thick-right',
    movedown: 'arrow-thick-bottom',
    moveleft: 'arrow-thick-left',
    copy: 'clipboard',
    clear: 'circle-x',
    time: 'clock',
    calendar: 'calendar',
    edit_properties: 'list'
};
class openiconicIconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i96L1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spectreIconlib", ()=>spectreIconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'icon icon-';
const mapping = {
    collapse: 'arrow-down',
    expand: 'arrow-right',
    delete: 'delete',
    edit: 'edit',
    add: 'plus',
    subtract: 'minus',
    cancel: 'cross',
    save: 'check',
    moveup: 'upward',
    moveright: 'forward',
    movedown: 'downward',
    moveleft: 'back',
    copy: 'copy',
    clear: 'close',
    time: 'time',
    calendar: 'bookmark',
    edit_properties: 'menu'
};
class spectreIconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8yTTp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bootstrapIconlib", ()=>bootstrapIconlib);
var _iconlibJs = require("../iconlib.js");
const iconPrefix = 'bi bi-';
const mapping = {
    collapse: 'chevron-down',
    expand: 'chevron-right',
    delete: 'trash',
    edit: 'pencil',
    add: 'plus',
    subtract: 'dash',
    cancel: 'x-circle',
    save: 'save',
    moveup: 'arrow-up',
    moveright: 'arrow-right',
    movedown: 'arrow-down',
    moveleft: 'arrow-left',
    copy: 'clipboard',
    clear: 'x-circle',
    time: 'clock',
    calendar: 'calendar',
    edit_properties: 'list-ul'
};
class bootstrapIconlib extends (0, _iconlibJs.AbstractIconLib) {
    constructor(){
        super(iconPrefix, mapping);
    }
}

},{"../iconlib.js":"664HJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"asH8U":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "themes", ()=>themes);
var _htmlJs = require("./html.js");
// import  { bootstrap2Theme } from  './bootstrap2'
var _bootstrap3Js = require("./bootstrap3.js");
var _bootstrap4Js = require("./bootstrap4.js");
var _bootstrap5Js = require("./bootstrap5.js");
// import  { foundationTheme, foundation3Theme, foundation4Theme, foundation5Theme, foundation6Theme } from  './foundation.js'
var _jqueryuiJs = require("./jqueryui.js");
var _barebonesJs = require("./barebones.js");
// import  { materializeTheme } from  './materialize'
var _spectreJs = require("./spectre.js");
var _tailwindJs = require("./tailwind.js");
const themes = {
    html: (0, _htmlJs.htmlTheme),
    // bootstrap2: bootstrap2Theme,
    bootstrap3: (0, _bootstrap3Js.bootstrap3Theme),
    bootstrap4: (0, _bootstrap4Js.bootstrap4Theme),
    bootstrap5: (0, _bootstrap5Js.bootstrap5Theme),
    // foundation: foundationTheme,
    // foundation3: foundation3Theme,
    // foundation4: foundation4Theme,
    // foundation5: foundation5Theme,
    // foundation6: foundation6Theme,
    jqueryui: (0, _jqueryuiJs.jqueryuiTheme),
    barebones: (0, _barebonesJs.barebonesTheme),
    // materialize: materializeTheme,
    spectre: (0, _spectreJs.spectreTheme),
    tailwind: (0, _tailwindJs.tailwindTheme)
};

},{"./html.js":"8NiIh","./bootstrap3.js":"fnc0z","./bootstrap4.js":"jip4l","./bootstrap5.js":"jH4Gx","./jqueryui.js":"itICn","./barebones.js":"lFReX","./spectre.js":"a5nJ7","./tailwind.js":"7dTRu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8NiIh":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "htmlTheme", ()=>htmlTheme);
var _themeJs = require("../theme.js");
var _htmlCssJs = require("./html.css.js");
var _htmlCssJsDefault = parcelHelpers.interopDefault(_htmlCssJs);
class htmlTheme extends (0, _themeJs.AbstractTheme) {
    getFormInputLabel(text, req) {
        const el = super.getFormInputLabel(text, req);
        el.classList.add('je-form-input-label');
        return el;
    }
    getFormInputDescription(text) {
        const el = super.getFormInputDescription(text);
        el.classList.add('je-form-input-label');
        return el;
    }
    getIndentedPanel() {
        const el = super.getIndentedPanel();
        el.classList.add('je-indented-panel');
        return el;
    }
    getTopIndentedPanel() {
        return this.getIndentedPanel();
    }
    getChildEditorHolder() {
        const el = super.getChildEditorHolder();
        el.classList.add('je-child-editor-holder');
        return el;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        el.classList.add('je-header-button-holder');
        return el;
    }
    getTable() {
        const el = super.getTable();
        el.classList.add('je-table');
        return el;
    }
    addInputError(input, text) {
        const group = this.closest(input, '.form-control') || input.controlgroup;
        if (!input.errmsg) {
            input.errmsg = document.createElement('div');
            input.errmsg.setAttribute('class', 'errmsg');
            input.errmsg.style = input.errmsg.style || {};
            input.errmsg.style.color = 'red';
            group.appendChild(input.errmsg);
        } else input.errmsg.style.display = 'block';
        input.errmsg.innerHTML = '';
        input.errmsg.appendChild(document.createTextNode(text));
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (input.style) input.style.borderColor = '';
        if (input.errmsg) input.errmsg.style.display = 'none';
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ htmlTheme.rules = (0, _htmlCssJsDefault.default);

},{"../theme.js":"c9MhY","./html.css.js":"kyyld","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c9MhY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractTheme", ()=>AbstractTheme);
var _utilities = require("./utilities");
const matchKey = [
    'matches',
    'webkitMatchesSelector',
    'mozMatchesSelector',
    'msMatchesSelector',
    'oMatchesSelector'
].find((key)=>key in document.documentElement);
class AbstractTheme {
    constructor(jsoneditor, options = {
        disable_theme_rules: false
    }){
        this.jsoneditor = jsoneditor;
        Object.keys(options).forEach((key)=>{
            if (typeof jsoneditor.options[key] !== 'undefined') options[key] = jsoneditor.options[key];
        });
        /* Theme config options that allows changing various aspects of the output */ this.options = options;
    }
    getContainer() {
        return document.createElement('div');
    }
    getOptInCheckbox(formname) {
        const container = document.createElement('span');
        const label = this.getHiddenLabel(formname + ' opt-in');
        label.setAttribute('for', formname + '-opt-in');
        label.textContent = formname + '-opt-in';
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('style', 'margin: 0 10px 0 0;');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('json-editor-opt-in');
        container.appendChild(checkbox);
        container.appendChild(label);
        return {
            label,
            checkbox,
            container
        };
    }
    getOptInSwitch(formname) {
        return this.getOptInCheckbox();
    }
    getFloatRightLinkHolder() {
        const el = document.createElement('div');
        el.classList.add('je-float-right-linkholder');
        return el;
    }
    getModal() {
        const el = document.createElement('div');
        el.style.display = 'none';
        el.classList.add('je-modal');
        return el;
    }
    getGridContainer() {
        const el = document.createElement('div');
        return el;
    }
    getGridRow() {
        const el = document.createElement('div');
        el.classList.add('row');
        return el;
    }
    getGridColumn() {
        const el = document.createElement('div');
        return el;
    }
    setGridColumnSize(el, size) {}
    getLink(text) {
        const el = document.createElement('a');
        el.setAttribute('href', '#');
        el.appendChild(document.createTextNode(text));
        return el;
    }
    disableHeader(header) {
        header.style.color = '#ccc';
    }
    disableLabel(label) {
        label.style.color = '#ccc';
    }
    enableHeader(header) {
        header.style.color = '';
    }
    enableLabel(label) {
        label.style.color = '';
    }
    getInfoButton(text) {
        const icon = document.createElement('span');
        icon.innerText = "\u24D8";
        icon.classList.add('je-infobutton-icon');
        const tooltip = document.createElement('span');
        tooltip.classList.add('je-infobutton-tooltip');
        tooltip.innerText = text;
        icon.onmouseover = ()=>{
            tooltip.style.visibility = 'visible';
        };
        icon.onmouseleave = ()=>{
            tooltip.style.visibility = 'hidden';
        };
        icon.appendChild(tooltip);
        return icon;
    }
    getFormInputLabel(text, req) {
        const el = document.createElement('label');
        el.appendChild(document.createTextNode(text));
        if (req) el.classList.add('required');
        return el;
    }
    getLabelLike(text, req) {
        const el = document.createElement('b');
        el.appendChild(document.createTextNode(text));
        if (req) el.classList.add('required');
        return el;
    }
    getHeader(text, pathDepth) {
        const el = document.createElement('span');
        if (typeof text === 'string') el.textContent = text;
        else el.appendChild(text);
        el.classList.add('je-header');
        return el;
    }
    getCheckbox() {
        const el = this.getFormInputField('checkbox');
        el.classList.add('je-checkbox');
        return el;
    }
    getCheckboxLabel(text, req) {
        const el = document.createElement('label');
        el.appendChild(document.createTextNode(`\u00A0${text}`));
        if (req) el.classList.add('required');
        return el;
    }
    getMultiCheckboxHolder(controls, label, description, infoText) {
        const el = document.createElement('div');
        el.classList.add('control-group');
        if (label) {
            label.style.display = 'block';
            el.appendChild(label);
            if (infoText) label.appendChild(infoText);
        }
        Object.values(controls).forEach((control)=>{
            control.style.display = 'inline-block';
            control.style.marginRight = '20px';
            el.appendChild(control);
        });
        if (description) el.appendChild(description);
        return el;
    }
    getFormCheckboxControl(label, input, compact) {
        const el = document.createElement('div');
        el.appendChild(label);
        input.style.width = 'auto';
        label.insertBefore(input, label.firstChild);
        if (compact) el.classList.add('je-checkbox-control--compact');
        return el;
    }
    getFormRadio(attributes) {
        const el = this.getFormInputField('radio');
        Object.keys(attributes).forEach((key)=>el.setAttribute(key, attributes[key]));
        el.classList.add('je-radio');
        return el;
    }
    getFormRadioLabel(text, req) {
        const el = document.createElement('label');
        el.appendChild(document.createTextNode(`\u00A0${text}`));
        if (req) el.classList.add('required');
        return el;
    }
    getFormRadioControl(label, input, compact, formName) {
        const el = document.createElement('div');
        el.appendChild(label);
        input.style.width = 'auto';
        label.insertBefore(input, label.firstChild);
        if (compact) el.classList.add('je-radio-control--compact');
        if (input.tagName.toLowerCase() !== 'div' && formName && label && input) {
            input.setAttribute('id', formName);
            input.setAttribute('aria-labelledby', formName);
            label.setAttribute('for', formName);
        }
        return el;
    }
    getSelectInput(options, multiple, hasPlaceholderOption = false) {
        const select = document.createElement('select');
        if (options) this.setSelectOptions(select, options, [], hasPlaceholderOption);
        return select;
    }
    getSwitcher(options) {
        const switcher = this.getSelectInput(options, false);
        switcher.classList.add('je-switcher');
        return switcher;
    }
    getSwitcherOptions(switcher) {
        return switcher.getElementsByTagName('option');
    }
    setSwitcherOptions(switcher, options, titles) {
        this.setSelectOptions(switcher, options, titles);
    }
    setSelectOptions(select, options, titles = [], hasPlaceholderOption = false, placeholderOptionText = ' ') {
        select.innerHTML = '';
        if (hasPlaceholderOption) {
            const option = document.createElement('option');
            option.setAttribute('value', '_placeholder_');
            option.textContent = placeholderOptionText;
            option.setAttribute('disabled', '');
            option.setAttribute('hidden', '');
            select.appendChild(option);
        }
        for(let i = 0; i < options.length; i++){
            const option = document.createElement('option');
            option.setAttribute('value', options[i]);
            option.textContent = titles[i] || options[i];
            select.appendChild(option);
        }
    }
    getTextareaInput() {
        const el = document.createElement('textarea');
        el.classList.add('je-textarea');
        return el;
    }
    getHiddenLabel(text) {
        const el = document.createElement('label');
        el.textContent = text;
        el.setAttribute('style', 'position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0,0,0,0);border: 0;');
        return el;
    }
    visuallyHidden(element) {
        if (!element) return;
        element.setAttribute('style', 'position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0,0,0,0);border: 0;');
    }
    getHiddenText(text) {
        const el = document.createElement('span');
        el.textContent = text;
        el.setAttribute('style', 'position: absolute;width: 1px;height: 1px;padding: 0;margin: -1px;overflow: hidden;clip: rect(0,0,0,0);border: 0;');
        return el;
    }
    getRangeInput(min, max, step, description, formName) {
        const el = this.getFormInputField('range');
        el.setAttribute('min', min);
        el.setAttribute('max', max);
        el.setAttribute('step', step);
        if (description) {
            description.setAttribute('id', formName + '-description');
            el.setAttribute('aria-describedby', formName + '-description');
        }
        return el;
    }
    getStepperButtons(input) {
        const div = document.createElement('div');
        const minusBtn = document.createElement('button');
        minusBtn.setAttribute('type', 'button');
        minusBtn.classList.add('stepper-down');
        const plusBtn = document.createElement('button');
        plusBtn.setAttribute('type', 'button');
        plusBtn.classList.add('stepper-up');
        const readonly = input.getAttribute('readonly');
        if (readonly) {
            minusBtn.setAttribute('disabled', true);
            plusBtn.setAttribute('disabled', true);
        }
        minusBtn.textContent = '-';
        plusBtn.textContent = '+';
        const initialize = (input, min)=>{
            if (min) input.value = Number(min);
            else input.value = Number(input.value);
            input.setAttribute('initialized', '1');
        };
        const min = input.getAttribute('min');
        const max = input.getAttribute('max');
        minusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (min) {
                if (Number(input.value) > Number(min)) input.stepDown();
            } else input.stepDown();
            (0, _utilities.trigger)(input, 'change');
        });
        plusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (max) {
                if (Number(input.value) < Number(max)) input.stepUp();
            } else input.stepUp();
            (0, _utilities.trigger)(input, 'change');
        });
        div.appendChild(minusBtn);
        div.appendChild(plusBtn);
        return div;
    }
    getRangeOutput(input) {
        const output = document.createElement('output');
        const updateOutput = (e)=>{
            output.value = e.currentTarget.value;
        };
        input.addEventListener('change', updateOutput, false);
        input.addEventListener('input', updateOutput, false);
        return output;
    }
    getRangeControl(input, output) {
        const el = document.createElement('div');
        el.classList.add('je-range-control');
        if (output) el.appendChild(output);
        el.appendChild(input);
        return el;
    }
    getFormInputField(type) {
        const el = document.createElement('input');
        el.setAttribute('type', type);
        return el;
    }
    afterInputReady(input) {}
    getFormControl(label, input, description, infoText, formName) {
        const el = document.createElement('div');
        el.classList.add('form-control');
        if (label) {
            el.appendChild(label);
            if (formName) label.setAttribute('for', formName);
        }
        if ((input.type === 'checkbox' || input.type === 'radio') && label) {
            input.style.width = 'auto';
            label.insertBefore(input, label.firstChild);
            if (infoText) label.appendChild(infoText);
        } else {
            if (infoText && label) label.appendChild(infoText);
            el.appendChild(input);
        }
        if (input.tagName.toLowerCase() !== 'div' && input && label && formName) {
            label.setAttribute('for', formName);
            input.setAttribute('id', formName);
        }
        if (input.tagName.toLowerCase() !== 'div' && input && description) {
            description.setAttribute('id', formName + '-description');
            input.setAttribute('aria-describedby', formName + '-description');
        }
        if (description) el.appendChild(description);
        return el;
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('je-indented-panel');
        return el;
    }
    getTopIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('je-indented-panel--top');
        return el;
    }
    getChildEditorHolder() {
        return document.createElement('div');
    }
    getDescription(text) {
        const el = document.createElement('p');
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getCheckboxDescription(text) {
        return this.getDescription(text);
    }
    getFormInputDescription(text) {
        return this.getDescription(text);
    }
    getButtonHolder() {
        return document.createElement('span');
    }
    getHeaderButtonHolder() {
        return this.getButtonHolder();
    }
    getFormButtonHolder(buttonAlign) {
        return this.getButtonHolder();
    }
    getButton(text, icon, title) {
        const el = document.createElement('button');
        el.type = 'button';
        this.setButtonText(el, text, icon, title);
        return el;
    }
    getFormButton(text, icon, title) {
        return this.getButton(text, icon, title);
    }
    setButtonText(button, text, icon, title) {
        /* Clear previous contents. https://jsperf.com/innerhtml-vs-removechild/37 */ while(button.firstChild)button.removeChild(button.firstChild);
        if (icon) {
            button.appendChild(icon);
            text = ` ${text}`;
        }
        if (!this.jsoneditor.options.iconlib || !this.jsoneditor.options.remove_button_labels || !icon) {
            const spanEl = document.createElement('span');
            spanEl.appendChild(document.createTextNode(text));
            button.appendChild(spanEl);
        }
        if (title) button.setAttribute('title', title);
    }
    getTableContainer() {
        return document.createElement('div');
    }
    /* Table functions */ getTable() {
        return document.createElement('table');
    }
    getTableRow() {
        return document.createElement('tr');
    }
    getTableHead() {
        return document.createElement('thead');
    }
    getTableBody() {
        return document.createElement('tbody');
    }
    getTableHeaderCell(text) {
        const el = document.createElement('th');
        el.textContent = text;
        return el;
    }
    getTableCell() {
        const el = document.createElement('td');
        return el;
    }
    getErrorMessage(text) {
        const el = document.createElement('p');
        el.style = el.style || {};
        el.style.color = 'red';
        el.appendChild(document.createTextNode(text));
        return el;
    }
    addInputError(input, text) {
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {}
    addTableRowError(row) {}
    removeTableRowError(row) {}
    getTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<div class='je-tabholder tabs'></div><div class='content' id='${pName}'></div><div class='je-tabholder--clear'></div>`;
        return el;
    }
    getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<div class='tabs je-tabholder--top'></div><div class='je-tabholder--clear'></div><div class='content' id='${pName}'></div>`;
        return el;
    }
    applyStyles(el, styles) {
        Object.keys(styles).forEach((i)=>el.style[i] = styles[i]);
    }
    closest(elem, selector) {
        while(elem && elem !== document){
            if (elem[matchKey]) {
                if (elem[matchKey](selector)) return elem;
                else elem = elem.parentNode;
            } else return false;
        }
        return false;
    }
    insertBasicTopTab(tab, newTabsHolder) {
        newTabsHolder.firstChild.insertBefore(tab, newTabsHolder.firstChild.firstChild);
    }
    getTab(span, tabId) {
        const el = document.createElement('div');
        el.appendChild(span);
        el.id = tabId;
        el.classList.add('je-tab');
        return el;
    }
    getTopTab(span, tabId) {
        const el = document.createElement('div');
        el.appendChild(span);
        el.id = tabId;
        el.classList.add('je-tab--top');
        return el;
    }
    getTabContentHolder(tabHolder) {
        return tabHolder.children[1];
    }
    getTopTabContentHolder(tabHolder) {
        return tabHolder.children[1];
    }
    getTabContent() {
        return this.getIndentedPanel();
    }
    getTopTabContent() {
        return this.getTopIndentedPanel();
    }
    markTabActive(row) {
        this.applyStyles(row.tab, {
            opacity: 1,
            background: 'white'
        });
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = '';
        else row.container.style.display = '';
    }
    markTabInactive(row) {
        this.applyStyles(row.tab, {
            opacity: 0.5,
            background: ''
        });
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = 'none';
        else row.container.style.display = 'none';
    }
    addTab(holder, tab) {
        holder.children[0].appendChild(tab);
    }
    addTopTab(holder, tab) {
        holder.children[0].appendChild(tab);
    }
    getBlockLink() {
        const link = document.createElement('a');
        link.classList.add('je-block-link');
        return link;
    }
    getBlockLinkHolder() {
        const el = document.createElement('div');
        return el;
    }
    getLinksHolder() {
        const el = document.createElement('div');
        return el;
    }
    createMediaLink(holder, link, media) {
        holder.appendChild(link);
        media.classList.add('je-media');
        holder.appendChild(media);
    }
    createImageLink(holder, link, image) {
        holder.appendChild(link);
        link.appendChild(image);
    }
    getFirstTab(holder) {
        return holder.firstChild.firstChild;
    }
    getInputGroup(input, buttons) {
        return undefined;
    }
    cleanText(txt) {
        /* Clean out HTML tags from txt */ const tmp = document.createElement('div');
        tmp.innerHTML = txt;
        return tmp.textContent || tmp.innerText;
    }
    getDropZone(text) {
        const el = document.createElement('div');
        el.setAttribute('data-text', text);
        el.classList.add('je-dropzone');
        return el;
    }
    /* file is an object with properties: name, type, mimeType, size amd formattedSize */ getUploadPreview(file, uploadButton, data) {
        const preview = document.createElement('div');
        preview.classList.add('je-upload-preview');
        if (file.mimeType.substr(0, 5) === 'image') {
            const img = document.createElement('img');
            img.src = data;
            preview.appendChild(img);
        }
        const info = document.createElement('div');
        info.innerHTML += `<strong>Name:</strong> ${file.name}<br><strong>Type:</strong> ${file.type}<br><strong>Size:</strong> ${file.formattedSize}`;
        preview.appendChild(info);
        preview.appendChild(uploadButton);
        const clear = document.createElement('div');
        clear.style.clear = 'left';
        preview.appendChild(clear);
        return preview;
    }
    getProgressBar() {
        const max = 100;
        const start = 0;
        const progressBar = document.createElement('progress');
        progressBar.setAttribute('max', max);
        progressBar.setAttribute('value', start);
        return progressBar;
    }
    updateProgressBar(progressBar, progress) {
        if (!progressBar) return;
        progressBar.setAttribute('value', progress);
    }
    updateProgressBarUnknown(progressBar) {
        if (!progressBar) return;
        progressBar.removeAttribute('value');
    }
}

},{"./utilities":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyyld":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".je-form-input-label": "display:block;margin-bottom:3px;font-weight:bold",
    ".je-form-input-description": "display:inline-block;margin:0;font-size:0.8em;font-style:italic",
    ".je-indented-panel": "padding:5px;margin:10px;border-radius:3px;border:1px%20solid%20%23ddd",
    ".je-child-editor-holder": "margin-bottom:8px",
    ".je-header-button-holder": "display:inline-block;margin-left:10px;font-size:0.8em;vertical-align:middle",
    ".je-table": "margin-bottom:5px;border-bottom:1px%20solid%20%23ccc",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnc0z":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bootstrap3Theme", ()=>bootstrap3Theme);
var _themeJs = require("../theme.js");
var _bootstrap3CssJs = require("./bootstrap3.css.js");
var _bootstrap3CssJsDefault = parcelHelpers.interopDefault(_bootstrap3CssJs);
class bootstrap3Theme extends (0, _themeJs.AbstractTheme) {
    getOptInSwitch(formname) {
        const label = this.getHiddenLabel(formname + ' opt-in');
        label.setAttribute('for', formname + '-opt-in');
        const container = document.createElement('label');
        container.classList.add('switch');
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('json-editor-opt-in');
        const slider = document.createElement('span');
        slider.classList.add('switch-slider');
        const switchLabelText = document.createElement('span');
        switchLabelText.classList.add('sr-only');
        switchLabelText.textContent = formname + '-opt-in';
        container.appendChild(switchLabelText);
        container.appendChild(checkbox);
        container.appendChild(slider);
        return {
            label,
            checkbox,
            container
        };
    }
    getSelectInput(options, multiple) {
        const el = super.getSelectInput(options);
        el.classList.add('form-control');
        /* el.style.width = 'auto'; */ return el;
    }
    setGridColumnSize(el, size, offset) {
        el.classList.add(`col-md-${size}`);
        if (offset) el.classList.add(`col-md-offset-${offset}`);
    }
    afterInputReady(input) {
        if (input.controlgroup) return;
        input.controlgroup = this.closest(input, '.form-group');
        if (this.closest(input, '.compact')) input.controlgroup.style.marginBottom = 0;
    /* TODO: use bootstrap slider */ }
    getTextareaInput() {
        const el = document.createElement('textarea');
        el.classList.add('form-control');
        return el;
    }
    getRangeInput(min, max, step, description, formName) {
        /* TODO: use better slider */ return super.getRangeInput(min, max, step, description, formName);
    }
    getFormInputField(type) {
        const el = super.getFormInputField(type);
        if (type !== 'checkbox' && type !== 'radio') el.classList.add('form-control');
        return el;
    }
    getHiddenLabel(text) {
        const el = document.createElement('label');
        el.textContent = text;
        el.classList.add('sr-only');
        return el;
    }
    visuallyHidden(element) {
        if (!element) return;
        element.classList.add('sr-only');
    }
    getHiddenText(text) {
        const el = document.createElement('span');
        el.textContent = text;
        el.classList.add('sr-only');
        return el;
    }
    getFormControl(label, input, description, infoText, formName) {
        const group = document.createElement('div');
        if (label && (input.type === 'checkbox' || input.type === 'radio')) {
            group.classList.add(input.type);
            if (infoText) label.appendChild(infoText);
            label.insertBefore(input, label.firstChild);
            group.appendChild(label);
        } else {
            group.classList.add('form-group');
            if (label) {
                label.classList.add('control-label');
                group.appendChild(label);
                if (infoText) label.appendChild(infoText);
            }
            group.appendChild(input);
        }
        if (description) group.appendChild(description);
        if (input.tagName.toLowerCase() !== 'div' && input && label && formName) {
            label.setAttribute('for', formName);
            input.setAttribute('id', formName);
        }
        if (input.tagName.toLowerCase() !== 'div' && input && description) {
            description.setAttribute('id', formName + '-description');
            input.setAttribute('aria-describedby', formName + '-description');
        }
        return group;
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('well', 'well-sm');
        el.style.paddingBottom = 0;
        return el;
    }
    getInfoButton(text) {
        const icon = document.createElement('span');
        icon.classList.add('glyphicon', 'glyphicon-info-sign', 'pull-right');
        icon.style.padding = '.25rem';
        icon.style.position = 'relative';
        icon.style.display = 'inline-block';
        const tooltip = document.createElement('span');
        tooltip.style['font-family'] = 'sans-serif';
        tooltip.style.visibility = 'hidden';
        tooltip.style['background-color'] = 'rgba(50, 50, 50, .75)';
        tooltip.style.margin = '0 .25rem';
        tooltip.style.color = '#FAFAFA';
        tooltip.style.padding = '.5rem 1rem';
        tooltip.style['border-radius'] = '.25rem';
        tooltip.style.width = '25rem';
        tooltip.style.position = 'absolute';
        tooltip.innerText = text;
        icon.onmouseover = ()=>{
            tooltip.style.visibility = 'visible';
        };
        icon.onmouseleave = ()=>{
            tooltip.style.visibility = 'hidden';
        };
        icon.appendChild(tooltip);
        return icon;
    }
    getFormInputDescription(text) {
        const el = document.createElement('p');
        el.classList.add('help-block');
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getHeaderContainer() {
        return document.createElement('div');
    }
    getHeader(text, pathDepth) {
        const el = document.createElement('span');
        el.classList.add('h3');
        if (typeof text === 'string') el.textContent = text;
        else el.appendChild(text);
        return el;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        el.style.marginLeft = '10px';
        return el;
    }
    getButtonHolder() {
        const el = document.createElement('span');
        el.classList.add('btn-group');
        return el;
    }
    getButton(text, icon, title) {
        const el = super.getButton(text, icon, title);
        el.classList.add('btn', 'btn-default');
        return el;
    }
    getTableContainer() {
        const el = super.getTableContainer();
        el.classList.add('table-responsive');
        return el;
    }
    getTable() {
        const el = document.createElement('table');
        el.classList.add('table', 'table-bordered');
        el.style.width = 'auto';
        el.style.maxWidth = 'none';
        return el;
    }
    addInputError(input, text) {
        if (!input.controlgroup) return;
        input.controlgroup.classList.add('has-error');
        if (!input.errmsg) {
            input.errmsg = document.createElement('p');
            input.errmsg.classList.add('help-block', 'errormsg');
            input.controlgroup.appendChild(input.errmsg);
        } else input.errmsg.style.display = '';
        input.errmsg.textContent = text;
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (!input.errmsg) return;
        input.errmsg.style.display = 'none';
        input.controlgroup.classList.remove('has-error');
    }
    getTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<ul class='col-md-2 nav nav-pills nav-stacked' id='${pName}' role='tablist'></ul><div class='col-md-10 tab-content active well well-small'  id='${pName}'></div>`;
        return el;
    }
    getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<ul class='nav nav-tabs' id='${pName}' role='tablist'></ul><div class='tab-content active well well-small'  id='${pName}'></div>`;
        return el;
    }
    getTab(text, tabId) {
        const li = document.createElement('li');
        li.setAttribute('role', 'presentation');
        const a = document.createElement('a');
        a.setAttribute('href', `#${tabId}`);
        a.appendChild(text);
        a.setAttribute('aria-controls', tabId);
        a.setAttribute('role', 'tab');
        a.setAttribute('data-toggle', 'tab');
        li.appendChild(a);
        return li;
    }
    getTopTab(text, tabId) {
        const li = document.createElement('li');
        li.setAttribute('role', 'presentation');
        const a = document.createElement('a');
        a.setAttribute('href', `#${tabId}`);
        a.appendChild(text);
        a.setAttribute('aria-controls', tabId);
        a.setAttribute('role', 'tab');
        a.setAttribute('data-toggle', 'tab');
        li.appendChild(a);
        return li;
    }
    getTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    getTopTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    markTabActive(row) {
        row.tab.classList.add('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.add('active');
        else row.container.classList.add('active');
    }
    markTabInactive(row) {
        row.tab.classList.remove('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.remove('active');
        else row.container.classList.remove('active');
    }
    getProgressBar() {
        const min = 0;
        const max = 100;
        const start = 0;
        const container = document.createElement('div');
        container.classList.add('progress');
        const bar = document.createElement('div');
        bar.classList.add('progress-bar');
        bar.setAttribute('role', 'progressbar');
        bar.setAttribute('aria-valuenow', start);
        bar.setAttribute('aria-valuemin', min);
        bar.setAttribute('aria-valuenax', max);
        bar.innerHTML = `${start}%`;
        container.appendChild(bar);
        return container;
    }
    updateProgressBar(progressBar, progress) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        const percentage = `${progress}%`;
        bar.setAttribute('aria-valuenow', progress);
        bar.style.width = percentage;
        bar.innerHTML = percentage;
    }
    updateProgressBarUnknown(progressBar) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        progressBar.classList.add('progress', 'progress-striped', 'active');
        bar.removeAttribute('aria-valuenow');
        bar.style.width = '100%';
        bar.innerHTML = '';
    }
    getInputGroup(input, buttons) {
        if (!input) return;
        const inputGroupContainer = document.createElement('div');
        inputGroupContainer.classList.add('input-group');
        inputGroupContainer.appendChild(input);
        const inputGroup = document.createElement('div');
        inputGroup.classList.add('input-group-btn');
        inputGroupContainer.appendChild(inputGroup);
        for(let i = 0; i < buttons.length; i++)inputGroup.appendChild(buttons[i]);
        return inputGroupContainer;
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ bootstrap3Theme.rules = (0, _bootstrap3CssJsDefault.default);

},{"../theme.js":"c9MhY","./bootstrap3.css.js":"cgNZf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cgNZf":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".switch": "position:relative;display:inline-block;width:28px;height:16px;margin-right:10px",
    ".switch input": "opacity:0;width:0;height:0",
    ".switch-slider": "position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:%23ccc;transition:.1s;border-radius:34px",
    ".switch-slider:before": "position:absolute;content:%22%22;height:12px;width:12px;left:1px;top:2px;background-color:white;transition:.1s;border-radius:50%25",
    "input:checked + .switch-slider": "background-color:%232196F3",
    "input:focus + .switch-slider": "box-shadow:0%200%201px%20%232196F3",
    "input:checked + .switch-slider:before": "transform:translateX(12px)",
    "input:disabled + .switch-slider": "opacity:0.5"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jip4l":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bootstrap4Theme", ()=>bootstrap4Theme);
var _themeJs = require("../theme.js");
var _bootstrap4CssJs = require("./bootstrap4.css.js");
var _bootstrap4CssJsDefault = parcelHelpers.interopDefault(_bootstrap4CssJs);
var _utilities = require("../utilities");
/* Theme config options that allows changing various aspects of the output */ const options = {
    disable_theme_rules: false,
    input_size: 'normal',
    /* Size of input and select elements. "small", "normal", "large" */ custom_forms: false,
    /* use twbs custom form stylings */ object_indent: true,
    /* Indent nested object elements (use nested .card layout) */ object_background: 'bg-light',
    /* Bootstrap 4 card background modifier class (https://getbootstrap.com/docs/4.1/getting-started/introduction/) */ object_text: '',
    /* Bootstrap 4 card tect color modifier class (https://getbootstrap.com/docs/4.1/getting-started/introduction/) */ table_border: false,
    /* Add border to array "table" row and cells */ table_zebrastyle: false,
    /* Add "zebra style" to array "table" rows */ tooltip: 'bootstrap' /* how to display tooltips (infoText). Can be `browser` for native `title`, `css` for simple CSS Styling, or `bootstrap` for TWBS/Popper.js handling */ 
};
class bootstrap4Theme extends (0, _themeJs.AbstractTheme) {
    constructor(jsoneditor){
        super(jsoneditor, options);
    }
    getSelectInput(options, multiple) {
        const el = super.getSelectInput(options);
        el.classList.add('form-control');
        if (this.options.custom_forms === false) {
            if (this.options.input_size === 'small') el.classList.add('form-control-sm');
            if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        } else {
            el.classList.remove('form-control');
            el.classList.add('custom-select');
            if (this.options.input_size === 'small') el.classList.add('custom-select-sm');
            if (this.options.input_size === 'large') el.classList.add('custom-select-lg');
        }
        return el;
    }
    getContainer() {
        const el = document.createElement('div');
        if (!this.options.object_indent) el.classList.add('je-noindent');
        return el;
    }
    getOptInSwitch(formname) {
        const label = this.getHiddenLabel(formname + ' opt-in');
        label.setAttribute('for', formname + '-opt-in');
        const container = document.createElement('div');
        container.classList.add('custom-control', 'custom-switch', 'd-inline-block', 'fs-6');
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('custom-control-input', 'json-editor-opt-in');
        const switchLabel = document.createElement('label');
        switchLabel.setAttribute('for', formname + '-opt-in');
        switchLabel.classList.add('custom-control-label');
        const switchLabelText = document.createElement('span');
        switchLabelText.classList.add('sr-only');
        switchLabelText.textContent = formname + '-opt-in';
        switchLabel.appendChild(switchLabelText);
        container.appendChild(checkbox);
        container.appendChild(switchLabel);
        return {
            label,
            checkbox,
            container
        };
    }
    setGridColumnSize(el, size, offset) {
        el.classList.add(`col-md-${size}`);
        if (offset) el.classList.add(`offset-md-${offset}`);
    }
    afterInputReady(input) {
        if (input.controlgroup) return;
        /* set id/for */ /* is not working for: [type=file], [type=checkbox] */ const id = input.name;
        input.id = id;
        /* 2x parentNode, b/c range input has an <div> wrapper */ const label = input.parentNode.parentNode.getElementsByTagName('label')[0];
        if (label) label.htmlFor = id;
        input.controlgroup = this.closest(input, '.form-group');
    }
    getTextareaInput() {
        const el = document.createElement('textarea');
        el.classList.add('form-control');
        if (this.options.input_size === 'small') el.classList.add('form-control-sm');
        if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        return el;
    }
    getRangeInput(min, max, step, description, formName) {
        const el = super.getRangeInput(min, max, step, description, formName);
        if (this.options.custom_forms === true) {
            el.classList.remove('form-control');
            el.classList.add('custom-range');
        }
        return el;
    }
    getStepperButtons(input) {
        const inputGroup = document.createElement('div');
        const prepend = document.createElement('div');
        const append = document.createElement('div');
        const minusBtn = document.createElement('button');
        minusBtn.setAttribute('type', 'button');
        const plusBtn = document.createElement('button');
        plusBtn.setAttribute('type', 'button');
        inputGroup.appendChild(prepend);
        inputGroup.appendChild(input);
        inputGroup.appendChild(append);
        prepend.appendChild(minusBtn);
        append.appendChild(plusBtn);
        inputGroup.classList.add('input-group');
        prepend.classList.add('input-group-prepend');
        append.classList.add('input-group-append');
        minusBtn.classList.add('btn');
        minusBtn.classList.add('btn-secondary');
        minusBtn.classList.add('stepper-down');
        plusBtn.classList.add('btn');
        plusBtn.classList.add('btn-secondary');
        plusBtn.classList.add('stepper-up');
        const readonly = input.getAttribute('readonly');
        if (readonly) {
            minusBtn.setAttribute('disabled', true);
            plusBtn.setAttribute('disabled', true);
        }
        minusBtn.textContent = '-';
        plusBtn.textContent = '+';
        const initialize = (input, min)=>{
            if (min) input.value = Number(min);
            else input.value = Number(input.value);
            input.setAttribute('initialized', '1');
        };
        const min = input.getAttribute('min');
        const max = input.getAttribute('max');
        input.addEventListener('change', ()=>{
            if (!input.getAttribute('initialized')) input.setAttribute('initialized', '1');
        });
        minusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (min) {
                if (Number(input.value) > Number(min)) input.stepDown();
            } else input.stepDown();
            (0, _utilities.trigger)(input, 'change');
        });
        plusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (max) {
                if (Number(input.value) < Number(max)) input.stepUp();
            } else input.stepUp();
            (0, _utilities.trigger)(input, 'change');
        });
        return inputGroup;
    }
    getFormInputField(type) {
        const el = super.getFormInputField(type);
        if (type !== 'checkbox' && type !== 'radio' && type !== 'file') {
            el.classList.add('form-control');
            if (this.options.input_size === 'small') el.classList.add('form-control-sm');
            if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        }
        if (type === 'file') /* custom_form is not used on files, would be a bit ticky since we need more */ /* markup. Also it contains language strings which would need be translateable? */ /* and most of all, w/o JavaScript teh name of the file can't be displayed. */ el.classList.add('form-control-file');
        return el;
    }
    getHiddenLabel(text) {
        const el = document.createElement('label');
        el.textContent = text;
        el.classList.add('sr-only');
        return el;
    }
    visuallyHidden(element) {
        if (!element) return;
        element.classList.add('sr-only');
    }
    getHiddenText(text) {
        const el = document.createElement('span');
        el.textContent = text;
        el.classList.add('sr-only');
        return el;
    }
    getFormControl(label, input, description, infoText, formName) {
        const group = document.createElement('div');
        group.classList.add('form-group');
        if (label && (input.type === 'checkbox' || input.type === 'radio')) {
            const check = document.createElement('div');
            if (this.options.custom_forms === false) {
                check.classList.add('form-check');
                input.classList.add('form-check-input');
                label.classList.add('form-check-label');
            } else {
                check.classList.add('custom-control');
                input.classList.add('custom-control-input');
                label.classList.add('custom-control-label');
                if (input.type === 'checkbox') check.classList.add('custom-checkbox');
                else check.classList.add('custom-radio');
            }
            check.appendChild(input);
            check.appendChild(label);
            if (infoText) check.appendChild(infoText);
            group.appendChild(check);
        } else {
            if (label) {
                group.appendChild(label);
                if (infoText) group.appendChild(infoText);
            }
            group.appendChild(input);
        }
        if (description) group.appendChild(description);
        if (input.tagName.toLowerCase() !== 'div' && input && label && formName) {
            label.setAttribute('for', formName);
            input.setAttribute('id', formName);
        }
        if (input.tagName.toLowerCase() !== 'div' && input && description) {
            description.setAttribute('id', formName + '-description');
            input.setAttribute('aria-describedby', formName + '-description');
        }
        return group;
    }
    getInfoButton(text) {
        const button = document.createElement('button');
        /* shoud be a <button> but no fitting tbws style... */ button.type = 'button';
        button.classList.add('ml-3', 'jsoneditor-twbs4-text-button');
        button.setAttribute('data-toggle', 'tooltip');
        button.setAttribute('data-placement', 'auto');
        button.title = text;
        const icon = document.createTextNode("\u24D8");
        button.appendChild(icon);
        if (this.options.tooltip === 'bootstrap') {
            if (window.jQuery && window.jQuery().tooltip) window.jQuery(button).tooltip();
            else // eslint-disable-next-line no-console
            console.warn('Could not find popper jQuery plugin of Bootstrap.');
        } else if (this.options.tooltip === 'css') button.classList.add('je-tooltip');
         /* else -> nothing todo for native [title] handling */ 
        return button;
    }
    /**
   * Generates a checkbox...
   *
   * Overwriten from master theme to get rid of inline styles.
   */ getCheckbox() {
        const el = this.getFormInputField('checkbox');
        return el;
    }
    /**
   * Multiple checkboxes in a row.
   *
   */ getMultiCheckboxHolder(controls, label, description, infoText) {
        const el = document.createElement('div');
        el.classList.add('form-group');
        if (label) {
            el.appendChild(label);
            if (infoText) label.appendChild(infoText);
        }
        /* for inline view we need an container so it doesnt wrap in the "row" of the <label> */ const container = document.createElement('div');
        Object.values(controls).forEach((c)=>{
            /* controls are already parsed by getFormControl() so they have an .form-group */ /* wrapper we need to get rid of... */ const ctrl = c.firstChild;
            /* we don't know if this should be an normal / compact view */ /* if (this.options.custom_forms === false) {
        ctrl.classList.add('form-check-inline')
      } else {
        ctrl.classList.add('custom-control-inline')
      } */ container.appendChild(ctrl);
        });
        el.appendChild(container);
        if (description) el.appendChild(description);
        return el;
    }
    /**
   * Single radio element
   */ getFormRadio(attributes) {
        const el = this.getFormInputField('radio');
        for(const key in attributes)el.setAttribute(key, attributes[key]);
        if (this.options.custom_forms === false) el.classList.add('form-check-input');
        else el.classList.add('custom-control-input');
        return el;
    }
    /**
   * Add the <label> for the single radio from getFormRadio()
   *
   */ getFormRadioLabel(text, req) {
        const el = document.createElement('label');
        if (this.options.custom_forms === false) el.classList.add('form-check-label');
        else el.classList.add('custom-control-label');
        el.appendChild(document.createTextNode(text));
        return el;
    }
    /**
   * Stack the radios from getFormRadio()/getFormRadioLabel()
   *
   */ getFormRadioControl(label, input, compact) {
        const el = document.createElement('div');
        if (this.options.custom_forms === false) el.classList.add('form-check');
        else el.classList.add('custom-control', 'custom-radio');
        el.appendChild(input);
        el.appendChild(label);
        if (compact) {
            if (this.options.custom_forms === false) el.classList.add('form-check-inline');
            else el.classList.add('custom-control-inline');
        }
        return el;
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('card', 'card-body', 'mb-3');
        if (this.options.object_background) el.classList.add(this.options.object_background);
        if (this.options.object_text) el.classList.add(this.options.object_text);
        /* for better twbs card styling we should be able to return a nested div */ return el;
    }
    getFormInputDescription(text) {
        const el = document.createElement('small');
        el.classList.add('form-text');
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getHeader(text, pathDepth) {
        const el = document.createElement('span');
        el.classList.add('h3');
        el.classList.add('card-title');
        el.classList.add('level-' + pathDepth);
        if (typeof text === 'string') el.textContent = text;
        else el.appendChild(text);
        el.style.display = 'inline-block';
        return el;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        return el;
    }
    getButtonHolder() {
        const el = document.createElement('span');
        el.classList.add('btn-group');
        return el;
    }
    getFormButtonHolder(buttonAlign) {
        const el = this.getButtonHolder();
        el.classList.add('d-block');
        if (buttonAlign === 'center') el.classList.add('text-center');
        else if (buttonAlign === 'right') el.classList.add('text-right');
        return el;
    }
    getButton(text, icon, title) {
        const el = super.getButton(text, icon, title);
        el.classList.add('btn', 'btn-secondary', 'btn-sm');
        return el;
    }
    getTableContainer() {
        const el = super.getTableContainer();
        el.classList.add('table-responsive');
        return el;
    }
    getTable() {
        const el = document.createElement('table');
        el.classList.add('table', 'table-sm');
        if (this.options.table_border) el.classList.add('table-bordered');
        if (this.options.table_zebrastyle) el.classList.add('table-striped');
        return el;
    }
    getErrorMessage(text) {
        const el = document.createElement('div');
        el.classList.add('alert', 'alert-danger');
        el.setAttribute('role', 'alert');
        el.appendChild(document.createTextNode(text));
        return el;
    }
    /**
   * input validation on <input>
   */ addInputError(input, text) {
        if (!input.controlgroup) return;
        input.controlgroup.classList.add('is-invalid');
        if (!input.errmsg) {
            input.errmsg = document.createElement('p');
            input.errmsg.classList.add('invalid-feedback');
            input.controlgroup.appendChild(input.errmsg);
            input.errmsg.style.display = 'block';
        }
        input.errmsg.style.display = 'block';
        input.errmsg.textContent = text;
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (!input.errmsg) return;
        input.errmsg.style.display = 'none';
        input.controlgroup.classList.remove('is-invalid');
    }
    getTabHolder(propertyName) {
        const el = document.createElement('div');
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        el.innerHTML = `<div class='col-md-2' id='${pName}'><ul class='nav flex-column nav-pills'></ul></div><div class='col-md-10'><div class='tab-content' id='${pName}'></div></div>`;
        el.classList.add('row');
        return el;
    }
    addTab(holder, tab) {
        holder.children[0].children[0].appendChild(tab);
    }
    getTabContentHolder(tabHolder) {
        return tabHolder.children[1].children[0];
    }
    getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.classList.add('card');
        el.innerHTML = `<div class='card-header'><ul class='nav nav-tabs card-header-tabs' id='${pName}'></ul></div><div class='card-body'><div class='tab-content' id='${pName}'></div></div>`;
        return el;
    }
    getTab(text, tabId) {
        const liel = document.createElement('li');
        liel.classList.add('nav-item');
        const ael = document.createElement('a');
        ael.classList.add('nav-link');
        ael.setAttribute('href', `#${tabId}`);
        ael.setAttribute('data-toggle', 'tab');
        ael.appendChild(text);
        liel.appendChild(ael);
        return liel;
    }
    getTopTab(text, tabId) {
        const el = document.createElement('li');
        el.classList.add('nav-item');
        const a = document.createElement('a');
        a.classList.add('nav-link');
        a.setAttribute('href', `#${tabId}`);
        a.setAttribute('data-toggle', 'tab');
        a.appendChild(text);
        el.appendChild(a);
        return el;
    }
    getTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    getTopTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    markTabActive(row) {
        row.tab.firstChild.classList.add('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.add('active');
        else row.container.classList.add('active');
    }
    markTabInactive(row) {
        row.tab.firstChild.classList.remove('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.remove('active');
        else row.container.classList.remove('active');
    }
    insertBasicTopTab(tab, newTabsHolder) {
        newTabsHolder.children[0].children[0].insertBefore(tab, newTabsHolder.children[0].children[0].firstChild);
    }
    addTopTab(holder, tab) {
        holder.children[0].children[0].appendChild(tab);
    }
    getTopTabContentHolder(tabHolder) {
        return tabHolder.children[1].children[0];
    }
    getFirstTab(holder) {
        return holder.firstChild.firstChild.firstChild;
    }
    getProgressBar() {
        const min = 0;
        const max = 100;
        const start = 0;
        const container = document.createElement('div');
        container.classList.add('progress');
        const bar = document.createElement('div');
        bar.classList.add('progress-bar');
        bar.setAttribute('role', 'progressbar');
        bar.setAttribute('aria-valuenow', start);
        bar.setAttribute('aria-valuemin', min);
        bar.setAttribute('aria-valuenax', max);
        bar.innerHTML = `${start}%`;
        container.appendChild(bar);
        return container;
    }
    updateProgressBar(progressBar, progress) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        const percentage = `${progress}%`;
        bar.setAttribute('aria-valuenow', progress);
        bar.style.width = percentage;
        bar.innerHTML = percentage;
    }
    updateProgressBarUnknown(progressBar) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        progressBar.classList.add('progress', 'progress-striped', 'active');
        bar.removeAttribute('aria-valuenow');
        bar.style.width = '100%';
        bar.innerHTML = '';
    }
    getBlockLink() {
        const link = document.createElement('a');
        link.classList.add('mb-3', 'd-inline-block');
        return link;
    }
    /**
   * Link after successfull upload
   */ getLinksHolder() {
        const el = document.createElement('div');
        return el;
    }
    getInputGroup(input, buttons) {
        if (!input) return;
        const inputGroupContainer = document.createElement('div');
        inputGroupContainer.classList.add('input-group');
        inputGroupContainer.appendChild(input);
        const inputGroup = document.createElement('div');
        inputGroup.classList.add('input-group-append');
        inputGroupContainer.appendChild(inputGroup);
        for(let i = 0; i < buttons.length; i++){
            /* this uses the getButton() wrapper, so we have to remove the panel/ctrl spacing for this case */ buttons[i].classList.remove('mr-2', 'btn-secondary');
            buttons[i].classList.add('btn-outline-secondary');
            inputGroup.appendChild(buttons[i]);
        }
        return inputGroupContainer;
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ bootstrap4Theme.rules = (0, _bootstrap4CssJsDefault.default);

},{"../theme.js":"c9MhY","./bootstrap4.css.js":"gX2jv","../utilities":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gX2jv":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".jsoneditor-twbs4-text-button": "background:none;padding:0;border:0;color:currentColor",
    "td > .form-group": "margin-bottom:0",
    ".json-editor-btn-upload": "margin-top:1rem",
    ".je-noindent .card": "padding:0;border:0",
    ".je-tooltip:hover::before": "display:block;position:absolute;font-size:0.8em;color:%23fff;border-radius:0.2em;content:attr(title);background-color:%23000;margin-top:-2.5em;padding:0.3em",
    ".je-tooltip:hover::after": "display:block;position:absolute;font-size:0.8em;color:%23fff",
    ".select2-container--default .select2-selection--single": "height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".select2-container--default   .select2-selection--single   .select2-selection__arrow": "height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".select2-container--default   .select2-selection--single   .select2-selection__rendered": "line-height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".selectize-control.form-control": "padding:0",
    ".selectize-dropdown.form-control": "padding:0;height:auto",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jH4Gx":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bootstrap5Theme", ()=>bootstrap5Theme);
var _themeJs = require("../theme.js");
var _bootstrap5CssJs = require("./bootstrap5.css.js");
var _bootstrap5CssJsDefault = parcelHelpers.interopDefault(_bootstrap5CssJs);
var _utilities = require("../utilities");
/* Theme config options that allows changing various aspects of the output */ const options = {
    disable_theme_rules: false,
    input_size: 'normal',
    /* Size of input and select elements. "small", "normal", "large" */ object_indent: true,
    /* Indent nested object elements (use nested .card layout) */ object_background: 'bg-light',
    /* Bootstrap 4 card background modifier class */ object_text: '',
    /* Bootstrap 5 card text color modifier class */ table_border: false,
    /* Add border to array "table" row and cells */ table_zebrastyle: false,
    /* Add "zebra style" to array "table" rows */ tooltip: 'bootstrap' /* how to display tooltips (infoText). Can be `browser` for native `title`, `css` for simple CSS Styling, or `bootstrap` for TWBS/Popper.js handling */ 
};
class bootstrap5Theme extends (0, _themeJs.AbstractTheme) {
    constructor(jsoneditor){
        super(jsoneditor, options);
    }
    getSelectInput(options, multiple) {
        const el = super.getSelectInput(options);
        el.classList.add('form-control');
        el.classList.add('form-select');
        if (this.options.input_size === 'small') el.classList.add('form-control-sm');
        if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        return el;
    }
    getContainer() {
        const el = document.createElement('div');
        if (!this.options.object_indent) el.classList.add('je-noindent');
        return el;
    }
    getOptInSwitch(formname) {
        const label = this.getHiddenLabel(formname + ' opt-in');
        label.setAttribute('for', formname + '-opt-in');
        const container = document.createElement('div');
        container.classList.add('form-check', 'form-switch', 'd-inline-block', 'fs-6');
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('role', 'switch');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('form-check-input', 'json-editor-opt-in');
        const switchLabel = document.createElement('label');
        switchLabel.setAttribute('for', formname + '-opt-in');
        switchLabel.classList.add('form-check-label');
        const switchLabelText = document.createElement('span');
        switchLabelText.classList.add('visually-hidden');
        switchLabelText.textContent = formname + '-opt-in';
        switchLabel.appendChild(switchLabelText);
        container.appendChild(checkbox);
        container.appendChild(switchLabel);
        return {
            label,
            checkbox,
            container
        };
    }
    setGridColumnSize(el, size, offset) {
        el.classList.add(`col-md-${size}`);
        if (offset) el.classList.add(`offset-md-${offset}`);
    }
    afterInputReady(input) {
        if (input.controlgroup) return;
        /* set id/for */ /* is not working for: [type=file], [type=checkbox] */ const id = input.name;
        input.id = id;
        /* 2x parentNode, b/c range input has an <div> wrapper */ const label = input.parentNode.parentNode.getElementsByTagName('label')[0];
        if (label) {
            label.classList.add('form-label');
            label.htmlFor = id;
        }
        input.controlgroup = this.closest(input, '.form-group');
    }
    getTextareaInput() {
        const el = document.createElement('textarea');
        el.classList.add('form-control');
        if (this.options.input_size === 'small') el.classList.add('form-control-sm');
        if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        return el;
    }
    getRangeInput(min, max, step, description, formName) {
        const el = super.getRangeInput(min, max, step, description, formName);
        el.classList.remove('form-control');
        el.classList.add('form-range');
        return el;
    }
    getStepperButtons(input) {
        const inputGroup = document.createElement('div');
        const minusBtn = document.createElement('button');
        minusBtn.setAttribute('type', 'button');
        const plusBtn = document.createElement('button');
        plusBtn.setAttribute('type', 'button');
        inputGroup.appendChild(minusBtn);
        inputGroup.appendChild(input);
        inputGroup.appendChild(plusBtn);
        inputGroup.classList.add('input-group');
        minusBtn.classList.add('btn');
        minusBtn.classList.add('btn-secondary');
        minusBtn.classList.add('stepper-down');
        plusBtn.classList.add('btn');
        plusBtn.classList.add('btn-secondary');
        plusBtn.classList.add('stepper-up');
        const readonly = input.getAttribute('readonly');
        if (readonly) {
            minusBtn.setAttribute('disabled', true);
            plusBtn.setAttribute('disabled', true);
        }
        minusBtn.textContent = '-';
        plusBtn.textContent = '+';
        const initialize = (input, min)=>{
            if (min) input.value = Number(min);
            else input.value = Number(input.value);
            input.setAttribute('initialized', '1');
        };
        const min = input.getAttribute('min');
        const max = input.getAttribute('max');
        input.addEventListener('change', ()=>{
            if (!input.getAttribute('initialized')) input.setAttribute('initialized', '1');
        });
        minusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (min) {
                if (Number(input.value) > Number(min)) input.stepDown();
            } else input.stepDown();
            (0, _utilities.trigger)(input, 'change');
        });
        plusBtn.addEventListener('click', ()=>{
            if (!input.getAttribute('initialized')) initialize(input, min);
            else if (max) {
                if (Number(input.value) < Number(max)) input.stepUp();
            } else input.stepUp();
            (0, _utilities.trigger)(input, 'change');
        });
        return inputGroup;
    }
    getFormInputField(type) {
        const el = super.getFormInputField(type);
        if (type !== 'checkbox' && type !== 'radio') {
            el.classList.add('form-control');
            if (this.options.input_size === 'small') el.classList.add('form-control-sm');
            if (this.options.input_size === 'large') el.classList.add('form-control-lg');
        }
        return el;
    }
    getFormControl(label, input, description, infoText, formName) {
        const group = document.createElement('div');
        group.classList.add('form-group');
        if (label && (input.type === 'checkbox' || input.type === 'radio')) {
            const check = document.createElement('div');
            check.classList.add('form-check');
            input.classList.add('form-check-input');
            label.classList.add('form-check-label');
            if (input.tagName.toLowerCase() !== 'div' && input && label && formName) {
                label.setAttribute('for', formName);
                input.setAttribute('id', formName);
            }
            if (input.tagName.toLowerCase() !== 'div' && input && description) {
                description.setAttribute('id', formName + '-description');
                input.setAttribute('aria-describedby', formName + '-description');
            }
            check.appendChild(input);
            check.appendChild(label);
            if (infoText) check.appendChild(infoText);
            group.appendChild(check);
        } else {
            if (label) {
                label.classList.add('form-label');
                group.appendChild(label);
                if (infoText) group.appendChild(infoText);
            }
            group.appendChild(input);
        }
        if (description) group.appendChild(description);
        return group;
    }
    getHiddenLabel(text) {
        const el = document.createElement('label');
        el.textContent = text;
        el.classList.add('visually-hidden');
        return el;
    }
    visuallyHidden(element) {
        if (!element) return;
        element.classList.add('visually-hidden');
    }
    getHiddenText(text) {
        const el = document.createElement('span');
        el.textContent = text;
        el.classList.add('sr-only');
        return el;
    }
    getInfoButton(text) {
        const button = document.createElement('button');
        /* shoud be a <button> but no fitting tbws style... */ button.type = 'button';
        button.classList.add('ms-3', 'jsoneditor-twbs5-text-button');
        button.setAttribute('data-toggle', 'tooltip');
        button.setAttribute('data-placement', 'auto');
        button.title = text;
        const icon = document.createTextNode("\u24D8");
        button.appendChild(icon);
        if (this.options.tooltip === 'bootstrap') {
            if (window.jQuery && window.jQuery().tooltip) window.jQuery(button).tooltip();
            else // eslint-disable-next-line no-console
            console.warn('Could not find popper jQuery plugin of Bootstrap.');
        } else if (this.options.tooltip === 'css') button.classList.add('je-tooltip');
         /* else -> nothing todo for native [title] handling */ 
        return button;
    }
    /**
   * Generates a checkbox...
   *
   * Overwriten from master theme to get rid of inline styles.
   */ getCheckbox() {
        const el = this.getFormInputField('checkbox');
        return el;
    }
    /**
   * Multiple checkboxes in a row.
   *
   */ getMultiCheckboxHolder(controls, label, description, infoText) {
        const el = document.createElement('div');
        el.classList.add('form-group');
        if (label) {
            el.appendChild(label);
            if (infoText) label.appendChild(infoText);
        }
        /* for inline view we need an container so it doesnt wrap in the "row" of the <label> */ const container = document.createElement('div');
        Object.values(controls).forEach((c)=>{
            /* controls are already parsed by getFormControl() so they have an .form-group */ /* wrapper we need to get rid of... */ const ctrl = c.firstChild;
            container.appendChild(ctrl);
        });
        el.appendChild(container);
        if (description) el.appendChild(description);
        return el;
    }
    /**
   * Single radio element
   */ getFormRadio(attributes) {
        const el = this.getFormInputField('radio');
        for(const key in attributes)el.setAttribute(key, attributes[key]);
        el.classList.add('form-check-input');
        return el;
    }
    /**
   * Add the <label> for the single radio from getFormRadio()
   *
   */ getFormRadioLabel(text, req) {
        const el = document.createElement('label');
        el.classList.add('form-check-label');
        el.appendChild(document.createTextNode(text));
        return el;
    }
    /**
   * Stack the radios from getFormRadio()/getFormRadioLabel()
   *
   */ getFormRadioControl(label, input, compact) {
        const el = document.createElement('div');
        el.classList.add('form-check');
        el.appendChild(input);
        el.appendChild(label);
        if (compact) el.classList.add('form-check-inline');
        return el;
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('card', 'card-body', 'my-3');
        if (this.options.object_background) el.classList.add(this.options.object_background);
        if (this.options.object_text) el.classList.add(this.options.object_text);
        /* for better twbs card styling we should be able to return a nested div */ return el;
    }
    getFormInputDescription(text) {
        const el = document.createElement('small');
        el.classList.add('form-text');
        el.classList.add('d-block');
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getHeader(text, pathDepth) {
        const el = document.createElement('span');
        el.classList.add('h3');
        el.classList.add('card-title');
        el.classList.add('level-' + pathDepth);
        if (typeof text === 'string') el.textContent = text;
        else el.appendChild(text);
        el.style.display = 'inline-block';
        return el;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        return el;
    }
    getButtonHolder() {
        const el = document.createElement('span');
        el.classList.add('btn-group');
        return el;
    }
    getFormButtonHolder(buttonAlign) {
        const el = this.getButtonHolder();
        el.classList.add('d-block');
        if (buttonAlign === 'center') el.classList.add('text-center');
        else if (buttonAlign === 'right') el.classList.add('text-end');
        return el;
    }
    getButton(text, icon, title) {
        const el = super.getButton(text, icon, title);
        el.classList.add('btn', 'btn-secondary', 'btn-sm');
        return el;
    }
    getTableContainer() {
        const el = super.getTableContainer();
        el.classList.add('table-responsive');
        return el;
    }
    getTable() {
        const el = document.createElement('table');
        el.classList.add('table', 'table-sm');
        if (this.options.table_border) el.classList.add('table-bordered');
        if (this.options.table_zebrastyle) el.classList.add('table-striped');
        return el;
    }
    getErrorMessage(text) {
        const el = document.createElement('div');
        el.classList.add('alert', 'alert-danger');
        el.setAttribute('role', 'alert');
        el.appendChild(document.createTextNode(text));
        return el;
    }
    /**
   * input validation on <input>
   */ addInputError(input, text) {
        if (!input.controlgroup) return;
        input.controlgroup.classList.add('is-invalid');
        if (!input.errmsg) {
            input.errmsg = document.createElement('p');
            input.errmsg.classList.add('invalid-feedback');
            input.controlgroup.appendChild(input.errmsg);
            input.errmsg.style.display = 'block';
        }
        input.errmsg.style.display = 'block';
        input.errmsg.textContent = text;
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (!input.errmsg) return;
        input.errmsg.style.display = 'none';
        input.controlgroup.classList.remove('is-invalid');
    }
    getTabHolder(propertyName) {
        const el = document.createElement('div');
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        el.innerHTML = `<div class='col-md-2' id='${pName}'><ul class='nav flex-column nav-pills'></ul></div><div class='col-md-10'><div class='tab-content' id='${pName}'></div></div>`;
        el.classList.add('row');
        return el;
    }
    addTab(holder, tab) {
        holder.children[0].children[0].appendChild(tab);
    }
    getTabContentHolder(tabHolder) {
        return tabHolder.children[1].children[0];
    }
    getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.classList.add('card');
        el.innerHTML = `<div class='card-header'><ul class='nav nav-tabs card-header-tabs' id='${pName}'></ul></div><div class='card-body'><div class='tab-content' id='${pName}'></div></div>`;
        return el;
    }
    getTab(text, tabId) {
        const liel = document.createElement('li');
        liel.classList.add('nav-item');
        const ael = document.createElement('a');
        ael.classList.add('nav-link');
        ael.setAttribute('href', `#${tabId}`);
        ael.setAttribute('data-toggle', 'tab');
        ael.appendChild(text);
        liel.appendChild(ael);
        return liel;
    }
    getTopTab(text, tabId) {
        const el = document.createElement('li');
        el.classList.add('nav-item');
        const a = document.createElement('a');
        a.classList.add('nav-link');
        a.setAttribute('href', `#${tabId}`);
        a.setAttribute('data-toggle', 'tab');
        a.appendChild(text);
        el.appendChild(a);
        return el;
    }
    getTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    getTopTabContent() {
        const el = document.createElement('div');
        el.classList.add('tab-pane');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    markTabActive(row) {
        row.tab.firstChild.classList.add('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.add('active');
        else row.container.classList.add('active');
    }
    markTabInactive(row) {
        row.tab.firstChild.classList.remove('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.classList.remove('active');
        else row.container.classList.remove('active');
    }
    insertBasicTopTab(tab, newTabsHolder) {
        newTabsHolder.children[0].children[0].insertBefore(tab, newTabsHolder.children[0].children[0].firstChild);
    }
    addTopTab(holder, tab) {
        holder.children[0].children[0].appendChild(tab);
    }
    getTopTabContentHolder(tabHolder) {
        return tabHolder.children[1].children[0];
    }
    getFirstTab(holder) {
        return holder.firstChild.firstChild.firstChild;
    }
    getProgressBar() {
        const min = 0;
        const max = 100;
        const start = 0;
        const container = document.createElement('div');
        container.classList.add('progress');
        const bar = document.createElement('div');
        bar.classList.add('progress-bar');
        bar.setAttribute('role', 'progressbar');
        bar.setAttribute('aria-valuenow', start);
        bar.setAttribute('aria-valuemin', min);
        bar.setAttribute('aria-valuenax', max);
        bar.innerHTML = `${start}%`;
        container.appendChild(bar);
        return container;
    }
    updateProgressBar(progressBar, progress) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        const percentage = `${progress}%`;
        bar.setAttribute('aria-valuenow', progress);
        bar.style.width = percentage;
        bar.innerHTML = percentage;
    }
    updateProgressBarUnknown(progressBar) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        progressBar.classList.add('progress', 'progress-striped', 'active');
        bar.removeAttribute('aria-valuenow');
        bar.style.width = '100%';
        bar.innerHTML = '';
    }
    getBlockLink() {
        const link = document.createElement('a');
        link.classList.add('mb-3', 'd-inline-block');
        return link;
    }
    /**
   * Link after successfull upload
   */ getLinksHolder() {
        const el = document.createElement('div');
        return el;
    }
    getInputGroup(input, buttons) {
        if (!input) return;
        const inputGroupContainer = document.createElement('div');
        inputGroupContainer.classList.add('input-group');
        inputGroupContainer.appendChild(input);
        for(let i = 0; i < buttons.length; i++){
            /* this uses the getButton() wrapper, so we have to remove the panel/ctrl spacing for this case */ buttons[i].classList.remove('me-2', 'btn-secondary');
            buttons[i].classList.add('btn-outline-secondary');
            inputGroupContainer.appendChild(buttons[i]);
        }
        return inputGroupContainer;
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ bootstrap5Theme.rules = (0, _bootstrap5CssJsDefault.default);

},{"../theme.js":"c9MhY","./bootstrap5.css.js":"1yAsh","../utilities":"fV5Qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yAsh":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".form-group": "margin-bottom:1rem",
    ".form-text": "display:block",
    ".jsoneditor-twbs5-text-button": "background:none;padding:0;border:0;color:currentColor",
    "td > .form-group": "margin-bottom:0",
    ".json-editor-btn-upload": "margin-top:1rem",
    ".je-noindent .card": "padding:0;border:0",
    ".je-tooltip:hover::before": "display:block;position:absolute;font-size:0.8em;color:%23fff;border-radius:0.2em;content:attr(title);background-color:%23000;margin-top:-2.5em;padding:0.3em",
    ".je-tooltip:hover::after": "display:block;position:absolute;font-size:0.8em;color:%23fff",
    ".select2-container--default .select2-selection--single": "height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".select2-container--default   .select2-selection--single   .select2-selection__arrow": "height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".select2-container--default   .select2-selection--single   .select2-selection__rendered": "line-height:calc(1.5em%20%2B%200.75rem%20%2B%202px)",
    ".selectize-control.form-control": "padding:0",
    ".selectize-dropdown.form-control": "padding:0;height:auto",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"itICn":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "jqueryuiTheme", ()=>jqueryuiTheme);
var _themeJs = require("../theme.js");
class jqueryuiTheme extends (0, _themeJs.AbstractTheme) {
    getTable() {
        const el = super.getTable();
        el.setAttribute('cellpadding', 5);
        el.setAttribute('cellspacing', 0);
        return el;
    }
    getTableHeaderCell(text) {
        const el = super.getTableHeaderCell(text);
        el.classList.add('ui-state-active');
        el.style.fontWeight = 'bold';
        return el;
    }
    getTableCell() {
        const el = super.getTableCell();
        el.classList.add('ui-widget-content');
        return el;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        el.style.marginLeft = '10px';
        el.style.fontSize = '.6em';
        el.style.display = 'inline-block';
        return el;
    }
    getFormInputDescription(text) {
        const el = this.getDescription(text);
        el.style.marginLeft = '10px';
        el.style.display = 'inline-block';
        return el;
    }
    getFormControl(label, input, description, infoText) {
        const el = super.getFormControl(label, input, description, infoText);
        if (input.type === 'checkbox') {
            el.style.lineHeight = '25px';
            el.style.padding = '3px 0';
        } else el.style.padding = '4px 0 8px 0';
        return el;
    }
    getDescription(text) {
        const el = document.createElement('span');
        el.style.fontSize = '.8em';
        el.style.fontStyle = 'italic';
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getButtonHolder() {
        const el = document.createElement('div');
        el.classList.add('ui-buttonset');
        el.style.fontSize = '.7em';
        return el;
    }
    getFormInputLabel(text, req) {
        const el = document.createElement('label');
        el.style.fontWeight = 'bold';
        el.style.display = 'block';
        el.textContent = text;
        if (req) el.classList.add('required');
        return el;
    }
    getButton(text, icon, title) {
        const button = document.createElement('button');
        button.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all');
        /* Icon only */ if (icon && !text) {
            button.classList.add('ui-button-icon-only');
            icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');
            button.appendChild(icon);
        /* Icon and Text */ } else if (icon) {
            button.classList.add('ui-button-text-icon-primary');
            icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');
            button.appendChild(icon);
        /* Text only */ } else button.classList.add('ui-button-text-only');
        const el = document.createElement('span');
        el.classList.add('ui-button-text');
        el.textContent = text || title || '.';
        button.appendChild(el);
        button.setAttribute('title', title);
        return button;
    }
    setButtonText(button, text, icon, title) {
        button.innerHTML = '';
        button.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all');
        /* Icon only */ if (icon && !text) {
            button.classList.add('ui-button-icon-only');
            icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');
            button.appendChild(icon);
        /* Icon and Text */ } else if (icon) {
            button.classList.add('ui-button-text-icon-primary');
            icon.classList.add('ui-button-icon-primary', 'ui-icon-primary');
            button.appendChild(icon);
        /* Text only */ } else button.classList.add('ui-button-text-only');
        const el = document.createElement('span');
        el.classList.add('ui-button-text');
        el.textContent = text || title || '.';
        button.appendChild(el);
        button.setAttribute('title', title);
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('ui-widget-content', 'ui-corner-all');
        el.style.padding = '1em 1.4em';
        el.style.marginBottom = '20px';
        return el;
    }
    afterInputReady(input) {
        if (input.controls) return;
        input.controls = this.closest(input, '.form-control');
        if (this.queuedInputErrorText) {
            const text = this.queuedInputErrorText;
            delete this.queuedInputErrorText;
            this.addInputError(input, text);
        }
    }
    addInputError(input, text) {
        if (!input.controls) {
            this.queuedInputErrorText = text;
            return;
        }
        if (!input.errmsg) {
            input.errmsg = document.createElement('div');
            input.errmsg.classList.add('ui-state-error');
            input.controls.appendChild(input.errmsg);
        } else input.errmsg.style.display = '';
        input.errmsg.textContent = text;
    }
    removeInputError(input) {
        if (!input.controls) delete this.queuedInputErrorText;
        if (!input.errmsg) return;
        input.errmsg.style.display = 'none';
    }
    markTabActive(row) {
        row.tab.classList.remove('ui-widget-header');
        row.tab.classList.add('ui-state-active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = '';
        else row.container.style.display = '';
    }
    markTabInactive(row) {
        row.tab.classList.add('ui-widget-header');
        row.tab.classList.remove('ui-state-active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = 'none';
        else row.container.style.display = 'none';
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ jqueryuiTheme.rules = {
    'div[data-schemaid="root"]:after': 'position:relative;color:red;margin:10px 0;font-weight:600;display:block;width:100%;text-align:center;content:"This is an old JSON-Editor 1.x Theme and might not display elements correctly when used with the 2.x version"'
};

},{"../theme.js":"c9MhY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFReX":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "barebonesTheme", ()=>barebonesTheme);
var _themeJs = require("../theme.js");
var _barebonesCssJs = require("./barebones.css.js");
var _barebonesCssJsDefault = parcelHelpers.interopDefault(_barebonesCssJs);
class barebonesTheme extends (0, _themeJs.AbstractTheme) {
    addInputError(input, text) {
        if (!input.errmsg) {
            const group = this.closest(input, '.form-control');
            input.errmsg = document.createElement('div');
            input.errmsg.setAttribute('class', 'errmsg');
            if (group.nodeName) group.appendChild(input.errmsg);
        } else input.errmsg.style.display = 'block';
        input.errmsg.innerHTML = '';
        input.errmsg.appendChild(document.createTextNode(text));
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (input.style) input.style.borderColor = '';
        if (input.errmsg) input.errmsg.style.display = 'none';
    }
}
/* Custom stylesheet rules. format: "selector" : "CSS rules" */ barebonesTheme.rules = (0, _barebonesCssJsDefault.default);

},{"../theme.js":"c9MhY","./barebones.css.js":"9I3Fz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9I3Fz":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a5nJ7":[function(require,module,exports,__globalThis) {
/* Spectre Theme using Spectre CSS framework. <https://picturepan2.github.io/spectre/index.html> */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spectreTheme", ()=>spectreTheme);
var _themeJs = require("../theme.js");
var _spectreCssJs = require("./spectre.css.js");
var _spectreCssJsDefault = parcelHelpers.interopDefault(_spectreCssJs);
/* Config options that allows changing various aspects of the output */ const options = {
    disable_theme_rules: false,
    /* Disable creation of Inline Style Rules */ label_bold: true,
    /* Element labels bold */ align_bottom: false,
    /* Align elements to bottom of flex container */ object_indent: false,
    /* Indent nested object elements */ object_border: false,
    /* Add border around object elements */ table_border: false,
    /* Add border to array "table" row and cells */ table_zebrastyle: false,
    /* Add "zebra style" to array "table" rows */ input_size: 'normal' /* Size of input and select elements. "small", "normal", "large" */ 
};
class spectreTheme extends (0, _themeJs.AbstractTheme) {
    constructor(jsoneditor){
        super(jsoneditor, options);
    }
    getOptInSwitch(formname) {
        const container = document.createElement('span');
        container.classList.add('form-group');
        const label = document.createElement('label');
        label.classList.add('form-switch', 'd-inline-block');
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('json-editor-opt-in');
        const icon = document.createElement('i');
        icon.classList.add('form-icon');
        const switchLabelText = document.createElement('span');
        switchLabelText.classList.add('sr-only');
        switchLabelText.textContent = formname + '-opt-in';
        label.appendChild(switchLabelText);
        label.appendChild(checkbox);
        label.appendChild(icon);
        container.appendChild(label);
        return {
            label,
            checkbox,
            container
        };
    }
    /* Functions for setting up the grid container, row and columns */ setGridColumnSize(el, size, offset) {
        el.classList.add(`col-${size}`);
        if (offset) el.classList.add('col-mx-auto');
    }
    getGridContainer() {
        const el = document.createElement('div');
        el.classList.add('container');
        if (!this.options.object_indent) el.classList.add('je-noindent');
        return el;
    }
    getGridRow() {
        const el = document.createElement('div');
        el.classList.add('columns');
        return el;
    }
    getGridColumn() {
        const el = document.createElement('div');
        el.classList.add('column');
        if (this.options.align_bottom) el.classList.add('je-align-bottom');
        return el;
    }
    /* Used for "type: object" or "type: array" (except if "format: tabs-top") */ getIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('je-panel');
        if (this.options.object_border) el.classList.add('je-border');
        return el;
    }
    /* Used for "type: array" with "format: tabs-top" */ getTopIndentedPanel() {
        const el = document.createElement('div');
        el.classList.add('je-panel-top');
        if (this.options.object_border) el.classList.add('je-border');
        return el;
    }
    /* Button functions */ getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        return el;
    }
    /* Button holder for the buttons */ getButtonHolder() {
        const el = super.getButtonHolder();
        el.classList.add('btn-group');
        return el;
    }
    getFormButtonHolder(buttonAlign) {
        const el = super.getFormButtonHolder();
        el.classList.remove('btn-group');
        el.classList.add('d-block');
        if (buttonAlign === 'center') el.classList.add('text-center');
        else if (buttonAlign === 'right') el.classList.add('text-right');
        else el.classList.add('text-left');
        return el;
    }
    getFormButton(text, icon, title) {
        const el = super.getFormButton(text, icon, title);
        el.classList.add('btn', 'btn-primary', 'mx-2', 'my-1');
        if (this.options.input_size !== 'small') el.classList.remove('btn-sm');
        if (this.options.input_size === 'large') el.classList.add('btn-lg');
        return el;
    }
    getButton(text, icon, title) {
        const el = super.getButton(text, icon, title);
        el.classList.add('btn', 'btn-sm', 'btn-primary', 'mr-2', 'my-1');
        return el;
    }
    getHeader(text, pathDepth) {
        const el = document.createElement('span');
        if (typeof text === 'string') el.textContent = text;
        else el.appendChild(text);
        el.style.display = 'inline-block';
        return el;
    }
    getFormInputDescription(text) {
        const el = super.getFormInputDescription(text);
        el.classList.add('je-desc', 'hide-sm');
        return el;
    }
    /* Label for all elements except checkbox and radio */ getFormInputLabel(text, req) {
        const el = super.getFormInputLabel(text, req);
        if (this.options.label_bold) el.classList.add('je-label');
        return el;
    }
    /* Checkbox elements */ /* ToDo: Rename function names for consistency */ getCheckbox() {
        const el = this.getFormInputField('checkbox');
        return el;
    }
    getCheckboxLabel(text, req) {
        const el = super.getCheckboxLabel(text, req);
        const icon = document.createElement('i');
        icon.classList.add('form-icon');
        el.classList.add('form-checkbox', 'pr-0');
        el.insertBefore(icon, el.firstChild);
        return el;
    }
    getFormCheckboxControl(label, input, compact) {
        label.insertBefore(input, label.firstChild);
        /* Move input into label element */ if (compact) label.classList.add('form-inline');
        return label;
    }
    getMultiCheckboxHolder(controls, label, description, infoText) {
        return super.getMultiCheckboxHolder(controls, label, description, infoText);
    }
    /* Radio elements */ getFormRadio(attributes) {
        const el = this.getFormInputField('radio');
        for(const key in attributes)el.setAttribute(key, attributes[key]);
        return el;
    }
    getFormRadioLabel(text, req) {
        const el = super.getFormRadioLabel(text, req);
        const icon = document.createElement('i');
        icon.classList.add('form-icon');
        el.classList.add('form-radio');
        el.insertBefore(icon, el.firstChild);
        return el;
    }
    getFormRadioControl(label, input, compact) {
        label.insertBefore(input, label.firstChild);
        /* Move input into label element */ if (compact) label.classList.add('form-inline');
        return label;
    }
    /* Create input field */ getFormInputField(type) {
        const el = super.getFormInputField(type);
        if (![
            'checkbox',
            'radio'
        ].includes(type)) el.classList.add('form-input');
        return el;
    }
    /* Create input field for type="range" */ getRangeInput(min, max, step, description, formName) {
        const el = super.getRangeInput(min, max, step, description, formName);
        el.classList.add('slider');
        el.classList.remove('form-input');
        el.setAttribute('oninput', 'this.setAttribute("value", this.value)');
        return el;
    }
    getRangeControl(input, output) {
        const el = super.getRangeControl(input, output);
        el.classList.add('text-center');
        return el;
    }
    /* Create select box field */ getSelectInput(options, multiple) {
        const el = super.getSelectInput(options);
        el.classList.add('form-select');
        return el;
    }
    /* Create textarea field */ getTextareaInput() {
        const el = document.createElement('textarea');
        el.classList.add('form-input');
        return el;
    }
    getFormControl(label, input, description, infoText, formName) {
        const group = document.createElement('div');
        group.classList.add('form-group');
        if (label && (input.type === 'checkbox' || input.type === 'radio')) {
            group.classList.add(input.type);
            if (infoText) label.appendChild(infoText);
            label.insertBefore(input, label.firstChild);
            group.appendChild(label);
        } else {
            if (label) {
                label.classList.add('form-label');
                group.appendChild(label);
                if (infoText) label.appendChild(infoText);
            }
            group.appendChild(input);
        }
        if (this.options.input_size === 'small') input.classList.add('input-sm', 'select-sm');
        else if (this.options.input_size === 'large') input.classList.add('input-lg', 'select-lg');
        if (input.type !== 'checkbox') group.appendChild(input);
        if (description) group.appendChild(description);
        if (input.tagName.toLowerCase() !== 'div' && input && label && formName) {
            label.setAttribute('for', formName);
            input.setAttribute('id', formName);
        }
        if (input.tagName.toLowerCase() !== 'div' && input && description) {
            description.setAttribute('id', formName + '-description');
            input.setAttribute('aria-describedby', formName + '-description');
        }
        return group;
    }
    /* Create input group (input field with buttons) */ getInputGroup(input, buttons) {
        if (!input) return;
        const inputGroup = document.createElement('div');
        inputGroup.classList.add('input-group');
        inputGroup.appendChild(input);
        for(let i = 0; i < buttons.length; i++){
            buttons[i].classList.add('input-group-btn');
            buttons[i].classList.remove('btn-sm', 'mr-2', 'my-1');
            inputGroup.appendChild(buttons[i]);
        }
        return inputGroup;
    }
    /* Create button for displaying infotext tooltip */ getInfoButton(text) {
        const popover = document.createElement('div');
        popover.classList.add('popover', 'popover-left', 'float-right');
        const button = document.createElement('button');
        button.classList.add('btn', 'btn-secondary', 'btn-info', 'btn-action', 's-circle');
        button.setAttribute('tabindex', '-1');
        /* exclude element from tab order */ popover.appendChild(button);
        const icon = document.createTextNode('I');
        button.appendChild(icon);
        const container = document.createElement('div');
        container.classList.add('popover-container');
        popover.appendChild(container);
        const card = document.createElement('div');
        card.classList.add('card');
        container.appendChild(card);
        const cardbody = document.createElement('div');
        cardbody.classList.add('card-body');
        cardbody.innerHTML = text;
        card.appendChild(cardbody);
        return popover;
    }
    /* Functions for rendering array with format: "table" */ getTable() {
        const el = super.getTable();
        el.classList.add('table', 'table-scroll');
        if (this.options.table_border) el.classList.add('je-table-border');
        if (this.options.table_zebrastyle) el.classList.add('table-striped');
        return el;
    }
    /* Function for rendering progressbar */ getProgressBar() {
        const progressBar = super.getProgressBar();
        progressBar.classList.add('progress');
        return progressBar;
    }
    /* Containers for array with format: "tab" */ getTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.classList.add('columns');
        el.innerHTML = `<div class="column col-2"></div><div class="column col-10 content" id="${pName}"></div>`;
        return el;
    }
    /* Containers for array with format: "tab-top" */ getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<ul class="tab"></ul><div class="content" id="${pName}"></div>`;
        return el;
    }
    /* Tab button for array with format: "tab" */ getTab(span, tabId) {
        const el = document.createElement('a');
        el.classList.add('btn', 'btn-secondary', 'btn-block');
        el.setAttribute('href', `#${tabId}`);
        el.appendChild(span);
        return el;
    }
    /* Tab button for array with format: "tab-top" */ getTopTab(span, tabId) {
        const el = document.createElement('li');
        el.id = tabId;
        el.classList.add('tab-item');
        /* Spectre needs an a tag inside the tab item, not a span */ const a = document.createElement('a');
        a.setAttribute('href', `#${tabId}`);
        a.appendChild(span);
        el.appendChild(a);
        return el;
    }
    markTabActive(row) {
        row.tab.classList.add('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = '';
        else row.container.style.display = '';
    }
    markTabInactive(row) {
        row.tab.classList.remove('active');
        if (typeof row.rowPane !== 'undefined') row.rowPane.style.display = 'none';
        else row.container.style.display = 'none';
    }
    afterInputReady(input) {
        if (input.localName === 'select') {
            /* Selectize adjustments */ if (input.classList.contains('selectized')) {
                const selectized = input.nextSibling;
                if (selectized) {
                    /* Remove Spectre class 'form-select' as this conflicts with Selectize styling */ selectized.classList.remove('form-select');
                    Array.from(selectized.querySelectorAll('.form-select')).forEach((el)=>{
                        el.classList.remove('form-select');
                    });
                }
            /* Select2 ajustments */ } else if (input.classList.contains('select2-hidden-accessible')) {
                const select2 = input.nextSibling;
                const single = select2 && select2.querySelector('.select2-selection--single');
                /* Add Spectre 'form-select' to single-select2 elements */ if (single) select2.classList.add('form-select');
            }
        }
        if (input.controlgroup) return;
        input.controlgroup = this.closest(input, '.form-group');
        if (this.closest(input, '.compact')) input.controlgroup.style.marginBottom = 0;
    }
    /* Controls output of errormessages displayed in form */ addInputError(input, text) {
        if (!input.controlgroup) return;
        input.controlgroup.classList.add('has-error');
        if (!input.errmsg) {
            input.errmsg = document.createElement('p');
            input.errmsg.classList.add('form-input-hint');
            input.controlgroup.appendChild(input.errmsg);
        }
        input.errmsg.classList.remove('d-hide');
        input.errmsg.textContent = text;
        input.errmsg.setAttribute('role', 'alert');
    }
    removeInputError(input) {
        if (!input.errmsg) return;
        input.errmsg.classList.add('d-hide');
        input.controlgroup.classList.remove('has-error');
    }
}
/* Custom stylesheet rules. (Does not support comma separated selectors) */ /*  Will create a stylesheet in document head with the id "theme-spectre" if not exists. */ spectreTheme.rules = (0, _spectreCssJsDefault.default);

},{"../theme.js":"c9MhY","./spectre.css.js":"bMkLL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bMkLL":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    "*": "--primary-color:%235755d9;--gray-color:%23bcc3ce;--light-color:%23fff",
    ".slider:focus": "box-shadow:none",
    "h4 > label + .btn-group": "margin-left:1rem",
    ".text-right > button": "margin-right:0%20!important",
    ".text-left > button": "margin-left:0%20!important",
    ".property-selector": "font-size:0.7rem;font-weight:normal;max-height:260px%20!important;width:395px%20!important",
    ".property-selector .form-checkbox": "margin:0",
    "textarea": "width:100%25;min-height:2rem;resize:vertical",
    "table": "border-collapse:collapse",
    ".table td": "padding:0.4rem%200.4rem",
    ".mr-5": "margin-right:1rem%20!important",
    "div[data-schematype]:not([data-schematype='object'])": "transition:0.5s",
    "div[data-schematype]:not([data-schematype='object']):hover": "background-color:%23eee",
    ".je-table-border td": "border:0.05rem%20solid%20%23dadee4%20!important",
    ".btn-info": "font-size:0.5rem;font-weight:bold;height:0.8rem;padding:0.15rem%200;line-height:0.8;margin:0.3rem%200%200.3rem%200.1rem",
    ".je-label + select": "min-width:5rem",
    ".je-label": "font-weight:600",
    ".btn-action.btn-info": "width:0.8rem",
    ".je-border": "border:0.05rem%20solid%20%23dadee4",
    ".je-panel": "padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",
    ".je-panel-top": "padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",
    ".required:after": "content:%22%20*%22;color:red;font:inherit",
    ".je-align-bottom": "margin-top:auto",
    ".je-desc": "font-size:smaller;margin:0.2rem%200",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem;border:3px%20solid%20white;box-shadow:0px%200px%208px%20rgba(0%2C%200%2C%200%2C%200.3);box-sizing:border-box",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red",
    ".columns .container.je-noindent": "padding-left:0;padding-right:0",
    ".selectize-control.multi .item": "background:var(--primary-color)%20!important",
    ".select2-container--default   .select2-selection--single   .select2-selection__arrow": "display:none",
    ".select2-container--default .select2-selection--single": "border:none",
    ".select2-container .select2-selection--single .select2-selection__rendered": "padding:0",
    ".select2-container .select2-search--inline .select2-search__field": "margin-top:0",
    ".select2-container--default.select2-container--focus   .select2-selection--multiple": "border:0.05rem%20solid%20var(--gray-color)",
    ".select2-container--default   .select2-selection--multiple   .select2-selection__choice": "margin:0.4rem%200.2rem%200.2rem%200;padding:2px%205px;background-color:var(--primary-color);color:var(--light-color)",
    ".select2-container--default .select2-search--inline .select2-search__field": "line-height:normal",
    ".choices": "margin-bottom:auto",
    ".choices__list--multiple .choices__item": "border:none;background-color:var(--primary-color);color:var(--light-color)",
    ".choices[data-type*='select-multiple'] .choices__button": "border-left:0.05rem%20solid%20%232826a6",
    ".choices__inner": "font-size:inherit;min-height:20px;padding:4px%207.5px%204px%203.75px",
    ".choices[data-type*='select-one'] .choices__inner": "padding-bottom:4px",
    ".choices__list--dropdown .choices__item": "font-size:inherit"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dTRu":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tailwindTheme", ()=>tailwindTheme);
var _themeJs = require("../theme.js");
var _tailwindCssJs = require("./tailwind.css.js");
var _tailwindCssJsDefault = parcelHelpers.interopDefault(_tailwindCssJs);
const options = {
    disable_theme_rules: false,
    /* Disable creation of Inline Style Rules */ label_bold: false,
    /* Element labels bold */ object_panel_default: true,
    /* Indicates whether to use rules as default or alternate style */ object_indent: true,
    /* Indent nested object elements */ object_border: false,
    /* Add border around object elements */ table_border: false,
    /* Add border to array "table" row and cells */ table_hdiv: false,
    /* Add bottom-border to array "table" cells */ table_zebrastyle: false,
    /* Add "zebra style" to array "table" rows */ input_size: 'small',
    /* Size of input and select elements. "small", "normal", "large" */ enable_compact: false
};
class tailwindTheme extends (0, _themeJs.AbstractTheme) {
    constructor(jsoneditor){
        super(jsoneditor, options);
    }
    getOptInSwitch(formname) {
        const label = this.getHiddenLabel(formname + ' opt-in');
        label.setAttribute('for', formname + '-opt-in');
        const container = document.createElement('label');
        container.classList.add('switch');
        const checkbox = document.createElement('input');
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('id', formname + '-opt-in');
        checkbox.classList.add('json-editor-opt-in');
        const slider = document.createElement('span');
        slider.classList.add('switch-slider', 'round');
        const switchLabelText = document.createElement('span');
        switchLabelText.classList.add('sr-only');
        switchLabelText.textContent = formname + '-opt-in';
        container.appendChild(switchLabelText);
        container.appendChild(checkbox);
        container.appendChild(slider);
        return {
            label,
            checkbox,
            container
        };
    }
    getGridContainer() {
        const el = document.createElement('div');
        el.classList.add('flex', 'flex-col', 'w-full');
        if (!this.options.object_indent) el.classList.add('je-noindent');
        return el;
    }
    getGridRow() {
        const el = document.createElement('div');
        el.classList.add('flex', 'flex-wrap', 'w-full');
        return el;
    }
    getGridColumn() {
        const el = document.createElement('div');
        el.classList.add('flex', 'flex-col');
        return el;
    }
    setGridColumnSize(el, size, offset) {
        if (size > 0 && size < 12) el.classList.add(`w-${size}/12`, 'px-1');
        else el.classList.add('w-full', 'px-1');
        if (offset) el.style.marginLeft = `${100 / 12 * offset}%`;
    }
    getIndentedPanel() {
        const el = document.createElement('div');
        if (this.options.object_panel_default) el.classList.add('w-full', 'p-1');
        else el.classList.add('relative', 'flex', 'flex-col', 'rounded', 'break-words', 'border', 'bg-white', 'border-0', 'border-blue-400', 'p-1', 'shadow-md');
        if (this.options.object_border) el.classList.add('je-border');
        return el;
    }
    /* Used for "type: array" with "format: tabs-top" */ getTopIndentedPanel() {
        const el = document.createElement('div');
        if (this.options.object_panel_default) el.classList.add('w-full', 'm-2');
        else el.classList.add('relative', 'flex', 'flex-col', 'rounded', 'break-words', 'border', 'bg-white', 'border-0', 'border-blue-400', 'p-1', 'shadow-md');
        if (this.options.object_border) el.classList.add('je-border');
        return el;
    }
    getTitle() {
        return this.translateProperty(this.schema.title);
    }
    getSelectInput(options, multiple) {
        const el = super.getSelectInput(options);
        if (multiple) el.classList.add('form-multiselect', 'block', 'py-0', 'h-auto', 'w-full', 'px-1', 'text-sm', 'text-black', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded');
        else el.classList.add('form-select', 'block', 'py-0', 'h-6', 'w-full', 'px-1', 'text-sm', 'text-black', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded');
        if (this.options.enable_compact) el.classList.add('compact');
        return el;
    }
    afterInputReady(input) {
        if (input.controlgroup) return;
        input.controlgroup = this.closest(input, '.form-group');
        if (this.closest(input, '.compact')) input.controlgroup.style.marginBottom = 0;
    }
    getTextareaInput() {
        const el = super.getTextareaInput();
        el.classList.add('block', 'w-full', 'px-1', 'text-sm', 'leading-normal', 'bg-white', 'text-black', 'border', 'border-grey', 'rounded');
        if (this.options.enable_compact) el.classList.add('compact');
        el.style.height = 0;
        return el;
    }
    /* Create input field for type="range" */ getRangeInput(min, max, step) {
        const el = this.getFormInputField('range');
        el.classList.add('slider');
        if (this.options.enable_compact) el.classList.add('compact');
        el.setAttribute('oninput', 'this.setAttribute("value", this.value)');
        el.setAttribute('min', min);
        el.setAttribute('max', max);
        el.setAttribute('step', step);
        return el;
    }
    getRangeControl(input, output) {
        const el = super.getRangeControl(input, output);
        el.classList.add('text-center', 'text-black');
        return el;
    }
    /* Checkbox elements */ getCheckbox() {
        const el = this.getFormInputField('checkbox');
        el.classList.add('form-checkbox', 'text-red-600');
        return el;
    }
    getCheckboxLabel(text, req) {
        const el = super.getCheckboxLabel(text, req);
        el.classList.add('inline-flex', 'items-center');
        return el;
    }
    getFormCheckboxControl(label, input, compact) {
        label.insertBefore(input, label.firstChild);
        /* Move input into label element */ if (compact) label.classList.add('inline-flex flex-row');
        return label;
    }
    getMultiCheckboxHolder(controls, label, description, infoText) {
        const el = super.getMultiCheckboxHolder(controls, label, description, infoText);
        el.classList.add('inline-flex', 'flex-col');
        return el;
    }
    /* Radio elements */ getFormRadio(attributes) {
        const el = this.getFormInputField('radio');
        el.classList.add('form-radio', 'text-red-600');
        for(const key in attributes)el.setAttribute(key, attributes[key]);
        return el;
    }
    getFormRadioLabel(text, req) {
        const el = super.getFormRadioLabel(text, req);
        el.classList.add('inline-flex', 'items-center', 'mr-2');
        return el;
    }
    getFormRadioControl(label, input, compact) {
        label.insertBefore(input, label.firstChild);
        /* Move input into label element */ if (compact) label.classList.add('form-radio');
        return label;
    }
    getRadioHolder(schema, controls, label, description, infoText) {
        const el = super.getRadioHolder(controls, label, description, infoText);
        if (schema.options.layout === 'h') el.classList.add('inline-flex', 'flex-row');
        else el.classList.add('inline-flex', 'flex-col');
        return el;
    }
    getFormInputLabel(text, req) {
        const el = super.getFormInputLabel(text, req);
        if (this.options.label_bold) el.classList.add('font-bold');
        else el.classList.add('required');
        return el;
    }
    getFormInputField(type) {
        const el = super.getFormInputField(type);
        if (![
            'checkbox',
            'radio'
        ].includes(type)) el.classList.add('block', 'w-full', 'px-1', 'text-black', 'text-sm', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded');
        if (this.options.enable_compact) el.classList.add('compact');
        return el;
    }
    getFormInputDescription(text) {
        const el = document.createElement('p');
        el.classList.add('block', 'mt-1', 'text-xs');
        if (window.DOMPurify) el.innerHTML = window.DOMPurify.sanitize(text);
        else el.textContent = this.cleanText(text);
        return el;
    }
    getFormControl(label, input, description, infoText) {
        const group = document.createElement('div');
        group.classList.add('form-group', 'mb-1', 'w-full');
        if (label) {
            label.classList.add('text-xs');
            if (input.type === 'checkbox') {
                input.classList.add('form-checkbox', 'text-xs', 'text-red-600', 'mr-1');
                label.classList.add('items-center', 'flex');
                label = this.getFormCheckboxControl(label, input, false, infoText);
            }
            if (input.type === 'radio') {
                input.classList.add('form-radio', 'text-red-600', 'mr-1');
                label.classList.add('items-center', 'flex');
                label = this.getFormRadioControl(label, input, false, infoText);
            }
            group.appendChild(label);
            if (![
                'checkbox',
                'radio'
            ].includes(input.type) && infoText) group.appendChild(infoText);
        }
        if (![
            'checkbox',
            'radio'
        ].includes(input.type)) {
            if (this.options.input_size === 'small') input.classList.add('text-xs');
            else if (this.options.input_size === 'normal') input.classList.add('text-base');
            else if (this.options.input_size === 'large') input.classList.add('text-xl');
            group.appendChild(input);
        }
        if (description) group.appendChild(description);
        return group;
    }
    getHeaderButtonHolder() {
        const el = this.getButtonHolder();
        el.classList.add('text-sm');
        return el;
    }
    getButtonHolder() {
        const el = document.createElement('div');
        el.classList.add('flex', 'relative', 'inline-flex', 'align-middle');
        return el;
    }
    getButton(text, icon, title) {
        const el = super.getButton(text, icon, title);
        el.classList.add('inline-block', 'align-middle', 'text-center', 'text-sm', 'bg-blue-700', 'text-white', 'py-1', 'pr-1', 'm-2', 'shadow', 'select-none', 'whitespace-no-wrap', 'rounded');
        return el;
    }
    /* Button for displaying infotext tooltip */ getInfoButton(text) {
        const tooltip = document.createElement('a');
        tooltip.classList.add('tooltips', 'float-right');
        tooltip.innerHTML = "\u24D8";
        const span = document.createElement('span');
        span.innerHTML = text;
        tooltip.appendChild(span);
        return tooltip;
    }
    getTable() {
        const el = super.getTable();
        if (this.options.table_border) el.classList.add('je-table-border');
        else el.classList.add('table', 'border', 'p-0');
        return el;
    }
    getTableRow() {
        const el = super.getTableRow();
        if (this.options.table_border) el.classList.add('je-table-border');
        if (this.options.table_zebrastyle) el.classList.add('je-table-zebra');
        return el;
    }
    getTableHeaderCell(text) {
        const el = super.getTableHeaderCell(text);
        if (this.options.table_border) el.classList.add('je-table-border');
        else if (this.options.table_hdiv) el.classList.add('je-table-hdiv');
        else el.classList.add('text-xs', 'border', 'p-0', 'm-0');
        return el;
    }
    getTableCell() {
        const el = super.getTableCell();
        if (this.options.table_border) el.classList.add('je-table-border');
        else if (this.options.table_hdiv) el.classList.add('je-table-hdiv');
        else el.classList.add('border-0', 'p-0', 'm-0');
        return el;
    }
    addInputError(input, text) {
        if (!input.controlgroup) return;
        input.controlgroup.classList.add('has-error');
        input.controlgroup.classList.add('text-red-600');
        if (!input.errmsg) {
            input.errmsg = document.createElement('p');
            input.errmsg.classList.add('block', 'mt-1', 'text-xs', 'text-red');
            input.controlgroup.appendChild(input.errmsg);
        } else input.errmsg.style.display = '';
        input.errmsg.textContent = text;
    }
    removeInputError(input) {
        if (!input.errmsg) return;
        input.errmsg.style.display = 'none';
        input.controlgroup.classList.remove('text-red-600');
        input.controlgroup.classList.remove('has-error');
    }
    getTabHolder(propertyName) {
        const el = document.createElement('div');
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        el.innerHTML = `<div class='w-2/12' id='${pName}'><ul class='list-reset pl-0 mb-0'></ul></div><div class='w-10/12' id='${pName}'></div>`;
        el.classList.add('flex');
        return el;
    }
    addTab(holder, tab) {
        holder.children[0].children[0].appendChild(tab);
    }
    getTopTabHolder(propertyName) {
        const pName = typeof propertyName === 'undefined' ? '' : propertyName;
        const el = document.createElement('div');
        el.innerHTML = `<ul class='nav-tabs flex list-reset pl-0 mb-0 border-b border-grey-light' id='${pName}'></ul><div class='p-6 block' id='${pName}'></div>`;
        return el;
    }
    getTab(text, tabId) {
        const liel = document.createElement('li');
        liel.classList.add('nav-item', 'flex-col', 'text-center', 'text-white', 'bg-blue-500', 'shadow-md', 'border', 'p-2', 'mb-2', 'mr-2', 'hover:bg-blue-400', 'rounded');
        const ael = document.createElement('a');
        ael.classList.add('nav-link', 'text-center');
        ael.setAttribute('href', `#${tabId}`);
        ael.setAttribute('data-toggle', 'tab');
        ael.appendChild(text);
        liel.appendChild(ael);
        return liel;
    }
    getTopTab(text, tabId) {
        const el = document.createElement('li');
        el.classList.add('nav-item', 'flex', 'border-l', 'border-t', 'border-r');
        const a = document.createElement('a');
        a.classList.add('nav-link', '-mb-px', 'flex-row', 'text-center', 'bg-white', 'p-2', 'hover:bg-blue-400', 'rounded-t');
        a.setAttribute('href', `#${tabId}`);
        a.setAttribute('data-toggle', 'tab');
        a.appendChild(text);
        el.appendChild(a);
        return el;
    }
    getTabContent() {
        const el = document.createElement('div');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    getTopTabContent() {
        const el = document.createElement('div');
        el.setAttribute('role', 'tabpanel');
        return el;
    }
    markTabActive(row) {
        row.tab.firstChild.classList.add('block');
        if (row.tab.firstChild.classList.contains('border-b') === true) {
            row.tab.firstChild.classList.add('border-b-0');
            row.tab.firstChild.classList.remove('border-b');
        } else row.tab.firstChild.classList.add('border-b-0');
        if (row.container.classList.contains('hidden') === true) {
            row.container.classList.remove('hidden');
            row.container.classList.add('block');
        } else row.container.classList.add('block');
    }
    markTabInactive(row) {
        if (row.tab.firstChild.classList.contains('border-b-0') === true) {
            row.tab.firstChild.classList.add('border-b');
            row.tab.firstChild.classList.remove('border-b-0');
        } else row.tab.firstChild.classList.add('border-b');
        if (row.container.classList.contains('block') === true) {
            row.container.classList.remove('block');
            row.container.classList.add('hidden');
        }
    }
    getProgressBar() {
        const min = 0;
        const max = 100;
        const start = 0;
        const container = document.createElement('div');
        container.classList.add('progress');
        const bar = document.createElement('div');
        bar.classList.add('bg-blue', 'leading-none', 'py-1', 'text-xs', 'text-center', 'text-white');
        bar.setAttribute('role', 'progressbar');
        bar.setAttribute('aria-valuenow', start);
        bar.setAttribute('aria-valuemin', min);
        bar.setAttribute('aria-valuenax', max);
        bar.innerHTML = `${start}%`;
        container.appendChild(bar);
        return container;
    }
    updateProgressBar(progressBar, progress) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        const percentage = `${progress}%`;
        bar.setAttribute('aria-valuenow', progress);
        bar.style.width = percentage;
        bar.innerHTML = percentage;
    }
    updateProgressBarUnknown(progressBar) {
        if (!progressBar) return;
        const bar = progressBar.firstChild;
        progressBar.classList.add('progress', 'bg-blue', 'leading-none', 'py-1', 'text-xs', 'text-center', 'text-white', 'block');
        bar.removeAttribute('aria-valuenow');
        bar.classList.add('w-full');
        bar.innerHTML = '';
    }
    getInputGroup(input, buttons) {
        if (!input) return;
        const inputGroupContainer = document.createElement('div');
        inputGroupContainer.classList.add('relative', 'items-stretch', 'w-full');
        inputGroupContainer.appendChild(input);
        const inputGroup = document.createElement('div');
        inputGroup.classList.add('-mr-1');
        inputGroupContainer.appendChild(inputGroup);
        for(let i = 0; i < buttons.length; i++)inputGroup.appendChild(buttons[i]);
        return inputGroupContainer;
    }
}
/* Custom stylesheet rules. (Does not support comma separated selectors) */ /*  Will create a stylesheet in document head with the id "theme-spectre" if not exists. */ tailwindTheme.rules = (0, _tailwindCssJsDefault.default);

},{"../theme.js":"c9MhY","./tailwind.css.js":"03VJs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03VJs":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".slider": "-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent;display:block;border:none;height:1.2rem;width:100%25",
    ".slider:focus": "box-shadow:0%200%200%200%20rgba(87%2C%2085%2C%20217%2C%200.2);outline:none",
    ".slider.tooltip:not([data-tooltip])::after": "content:attr(value)",
    ".slider::-webkit-slider-thumb": "-webkit-appearance:none;background:%23f17405;border-radius:100%25;height:0.6rem;margin-top:-0.25rem;transition:transform%200.2s;width:0.6rem",
    ".slider:active::-webkit-slider-thumb": "transform:scale(1.25);outline:none",
    ".slider::-webkit-slider-runnable-track": "background:%23b2b4b6;border-radius:0.1rem;height:0.1rem;width:100%25",
    "a.tooltips": "position:relative;display:inline",
    "a.tooltips span": "position:absolute;white-space:nowrap;width:auto;padding-left:1rem;padding-right:1rem;color:%23ffffff;background:rgba(56%2C%2056%2C%2056%2C%200.85);height:1.5rem;line-height:1.5rem;text-align:center;visibility:hidden;border-radius:3px",
    "a.tooltips span:after": "content:%22%22;position:absolute;top:50%25;left:100%25;margin-top:-5px;width:0;height:0;border-left:5px%20solid%20rgba(56%2C%2056%2C%2056%2C%200.85);border-top:5px%20solid%20transparent;border-bottom:5px%20solid%20transparent",
    "a:hover.tooltips span": "visibility:visible;opacity:0.9;font-size:0.8rem;right:100%25;top:50%25;margin-top:-12px;margin-right:10px;z-index:999",
    ".json-editor-btntype-properties + div": "font-size:0.8rem;font-weight:normal",
    "textarea": "width:100%25;min-height:2rem;resize:vertical",
    "table": "width:100%25;border-collapse:collapse",
    ".table td": "padding:0rem%200rem",
    "div[data-schematype]:not([data-schematype='object'])": "transition:0.5s",
    "div[data-schematype]:not([data-schematype='object']):hover": "background-color:%23e6f4fe",
    "div[data-schemaid='root']": "position:relative;width:inherit;display:inherit;overflow-x:hidden;z-index:10",
    "select[multiple]": "height:auto",
    "select[multiple].from-select": "height:auto",
    ".je-table-zebra:nth-child(even)": "background-color:%23f2f2f2",
    ".je-table-border": "border:0.5px%20solid%20black",
    ".je-table-hdiv": "border-bottom:1px%20solid%20black",
    ".je-border": "border:0.05rem%20solid%20%233182ce",
    ".je-panel": "width:inherit;padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",
    ".je-panel-top": "width:100%25;padding:0.2rem;margin:0.2rem;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",
    ".required:after": "content:%22%20*%22;color:red;font:inherit;font-weight:bold",
    ".je-desc": "font-size:smaller;margin:0.2rem%200",
    ".container-xl.je-noindent": "padding-left:0;padding-right:0",
    ".json-editor-btntype-add": "color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%234299e1;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",
    ".json-editor-btntype-deletelast": "color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%23e53e3e;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",
    ".json-editor-btntype-deleteall": "color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%23000000;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",
    ".json-editor-btn-save": "float:right;color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%232b6cb0;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",
    ".json-editor-btn-back": "color:white;margin:0.3rem;padding:0.3rem%200.8rem;background-color:%232b6cb0;box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-webkit-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2);-moz-box-shadow:3px%203px%205px%201px%20rgba(4%2C%204%2C%204%2C%200.2)",
    ".json-editor-btntype-delete": "color:%23e53e3e;background-color:rgba(218%2C%20222%2C%20228%2C%200.1);margin:0.03rem;padding:0.1rem",
    ".json-editor-btntype-move": "color:%23000000;background-color:rgba(218%2C%20222%2C%20228%2C%200.1);margin:0.03rem;padding:0.1rem",
    ".json-editor-btn-collapse": "padding:0em%200.8rem;font-size:1.3rem;color:%23e53e3e;background-color:rgba(218%2C%20222%2C%20228%2C%200.1)",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-dropzone": "position:relative;margin:0.5rem%200;border:2px%20dashed%20black;width:100%25;height:60px;background:teal;transition:all%200.5s",
    ".je-dropzone:before": "position:absolute;content:attr(data-text);color:rgba(0%2C%200%2C%200%2C%200.6);left:50%25;top:50%25;transform:translate(-50%25%2C%20-50%25)",
    ".je-dropzone.valid-dropzone": "background:green",
    ".je-dropzone.invalid-dropzone": "background:red",
    ".switch": "position:relative;display:inline-block;width:28px;height:16px;margin-right:10px",
    ".switch input": "opacity:0;width:0;height:0",
    ".switch-slider": "position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:%23ccc;transition:.1s;border-radius:34px",
    ".switch-slider:before": "position:absolute;content:%22%22;height:12px;width:12px;left:1px;top:2px;background-color:white;transition:.1s;border-radius:50%25",
    "input:checked + .switch-slider": "background-color:%232196F3",
    "input:focus + .switch-slider": "box-shadow:0%200%201px%20%232196F3",
    "input:checked + .switch-slider:before": "transform:translateX(12px)",
    "input:disabled + .switch-slider": "opacity:0.5"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bVcOu":[function(require,module,exports,__globalThis) {
/* eslint-disable */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    ".table-responsive .autocomplete-result-list": "position:relative%20!important",
    ".je-float-right-linkholder": "float:right;margin-left:10px",
    ".je-modal": "background-color:white;border:1px%20solid%20black;box-shadow:3px%203px%20black;position:absolute;z-index:10",
    ".je-infobutton-icon": "font-size:16px;font-weight:bold;padding:0.25rem;position:relative;display:inline-block",
    ".je-infobutton-tooltip": "font-size:12px;font-weight:normal;font-family:sans-serif;visibility:hidden;background-color:rgba(50%2C%2050%2C%2050%2C%200.75);margin:0%200.25rem;color:%23fafafa;padding:0.5rem%201rem;border-radius:0.25rem;width:20rem;position:absolute",
    ".je-not-loaded": "pointer-events:none",
    ".je-header": "display:inline-block",
    ".je-upload-preview img": "float:left;margin:0%200.5rem%200.5rem%200;max-width:100%25;max-height:5rem",
    ".je-checkbox": "display:inline-block;width:auto",
    ".je-checkbox-control--compact": "display:inline-block;margin-right:1rem",
    ".je-radio": "display:inline-block;width:auto",
    ".je-radio-control--compact": "display:inline-block;margin-right:1rem",
    ".je-switcher": "background-color:transparent;display:inline-block;font-style:italic;font-weight:normal;height:auto;width:auto;margin-bottom:0;margin-left:5px;padding:0%200%200%203px",
    ".je-textarea": "width:100%25;height:300px;box-sizing:border-box",
    ".je-range-control": "text-align:center",
    ".je-indented-panel": "padding-left:10px;margin-left:10px;border-left:1px%20solid%20%23ccc",
    ".je-indented-panel--top": "padding-left:10px;margin-left:10px",
    ".je-tabholder": "float:left;width:130px",
    ".je-tabholder .content": "margin-left:120px",
    ".je-tabholder--top": "margin-left:10px",
    ".je-tabholder--clear": "clear:both",
    ".je-tab": "border:1px%20solid%20%23ccc;border-width:1px%200%201px%201px;text-align:center;line-height:30px;border-radius:5px;border-bottom-right-radius:0;border-top-right-radius:0;font-weight:bold;cursor:pointer",
    ".je-tab--top": "float:left;border:1px%20solid%20%23ccc;border-width:1px%201px%200px%201px;text-align:center;line-height:30px;border-radius:5px;padding-left:5px;padding-right:5px;border-bottom-right-radius:0;border-bottom-left-radius:0;font-weight:bold;cursor:pointer",
    ".je-block-link": "display:block",
    ".je-media": "width:100%25"
} /* eslint-enable */ ;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AgZ9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Gutter", ()=>Gutter);
var _eventListeners = require("./eventListeners");
var _util = require("./util");
const localStorage = window.localStorage;
class Gutter {
    element = document.getElementById('gutter');
    horizontal;
    panes;
    #eventListener = new (0, _eventListeners.EventListeners)({
        context: this
    });
    #isPointerDown = false;
    #previousPaneSizes = [];
    constructor(pane0, pane1){
        this.panes = [
            pane0,
            pane1
        ];
        this.horizontal = localStorage.getItem(Gutter.#key(Gutter.CacheKeys.Horizontal)) === 'true';
        this.#eventListener.add([
            {
                type: 'pointercancel',
                handler: this.#onPointerUp
            },
            {
                type: 'pointerdown',
                element: this.element,
                handler: this.#onPointerDown
            },
            {
                type: 'pointermove',
                handler: this.#onPointerMove
            },
            {
                type: 'pointerup',
                handler: this.#onPointerUp
            }
        ]);
        this.reset();
    }
    reset() {
        this.panes.forEach((pane)=>pane.removeAttribute('style'));
        document.body.classList.toggle(Gutter.ClassNames.Horizontal, this.horizontal);
        this.#updatePane({
            width: localStorage.getItem(Gutter.#key(Gutter.CacheKeys.Width)),
            height: localStorage.getItem(Gutter.#key(Gutter.CacheKeys.Height))
        });
    }
    teardown() {
        this.#eventListener.remove();
    }
    toggleOrientation() {
        this.horizontal = !this.horizontal;
        localStorage.setItem(Gutter.#key(Gutter.CacheKeys.Horizontal), this.horizontal.toString());
        this.reset();
        return this.horizontal;
    }
    #getPaneSizes() {
        return this.panes.map((pane)=>{
            const bounds = pane.getBoundingClientRect();
            return [
                bounds.width,
                bounds.height
            ];
        });
    }
    #onPointerDown() {
        this.#isPointerDown = true;
        this.#previousPaneSizes = this.#getPaneSizes();
    }
    #onPointerMove(event) {
        if (!this.#isPointerDown) return;
        this.#updatePane({
            width: event.clientX,
            height: event.clientY
        });
    }
    #onPointerUp() {
        if (!this.#isPointerDown) return;
        this.#isPointerDown = false;
        if (this.#getPaneSizes().some((size, index)=>!(0, _util.deepEqual)(size, this.#previousPaneSizes[index]))) {
            // The size of the panes have changed
            const [pane] = this.panes;
            const bounds = pane.getBoundingClientRect();
            if (this.horizontal) localStorage.setItem(Gutter.#key(Gutter.CacheKeys.Height), bounds.height.toString());
            else localStorage.setItem(Gutter.#key(Gutter.CacheKeys.Width), bounds.width.toString());
            (0, _util.emitEvent)(Gutter.Events.Moved, {
                gutter: this
            });
        }
    }
    #updatePane({ width, height }) {
        if (this.horizontal && !height || !width) return;
        const [pane] = this.panes;
        if (this.horizontal) pane.style.height = `${height}px`;
        else pane.style.width = `${width}px`;
        // Prevent pane from growing
        pane.style.flex = '0 auto';
    }
    static #key = (0, _util.getKeyFactory)('gutter');
    static CacheKeys = Object.freeze({
        Height: 'height',
        Horizontal: 'horizontal',
        Width: 'width'
    });
    static ClassNames = Object.freeze({
        Horizontal: 'gutter-horizontal'
    });
    static Events = Object.freeze({
        Moved: 'gutter-moved'
    });
}

},{"./eventListeners":"8T0Qv","./util":"92uDI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ccpCS":[function(require,module,exports,__globalThis) {
/**!
* tippy.js v6.3.7
* (c) 2017-2021 atomiks
* MIT License
*/ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "animateFill", ()=>animateFill);
parcelHelpers.export(exports, "createSingleton", ()=>createSingleton);
parcelHelpers.export(exports, "delegate", ()=>delegate);
parcelHelpers.export(exports, "followCursor", ()=>followCursor);
parcelHelpers.export(exports, "hideAll", ()=>hideAll);
parcelHelpers.export(exports, "inlinePositioning", ()=>inlinePositioning);
parcelHelpers.export(exports, "roundArrow", ()=>ROUND_ARROW);
parcelHelpers.export(exports, "sticky", ()=>sticky);
var _core = require("@popperjs/core");
var ROUND_ARROW = '<svg width="16" height="6" xmlns="http://www.w3.org/2000/svg"><path d="M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z"></svg>';
var BOX_CLASS = "tippy-box";
var CONTENT_CLASS = "tippy-content";
var BACKDROP_CLASS = "tippy-backdrop";
var ARROW_CLASS = "tippy-arrow";
var SVG_ARROW_CLASS = "tippy-svg-arrow";
var TOUCH_OPTIONS = {
    passive: true,
    capture: true
};
var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
    return document.body;
};
function hasOwnProperty(obj, key) {
    return ({}).hasOwnProperty.call(obj, key);
}
function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
        var v = value[index];
        return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }
    return value;
}
function isType(value, type) {
    var str = ({}).toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
}
function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
}
function debounce(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) return fn;
    var timeout;
    return function(arg) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            fn(arg);
        }, ms);
    };
}
function removeProperties(obj, keys) {
    var clone = Object.assign({}, obj);
    keys.forEach(function(key) {
        delete clone[key];
    });
    return clone;
}
function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
}
function normalizeToArray(value) {
    return [].concat(value);
}
function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) arr.push(value);
}
function unique(arr) {
    return arr.filter(function(item, index) {
        return arr.indexOf(item) === index;
    });
}
function getBasePlacement(placement) {
    return placement.split('-')[0];
}
function arrayFrom(value) {
    return [].slice.call(value);
}
function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function(acc, key) {
        if (obj[key] !== undefined) acc[key] = obj[key];
        return acc;
    }, {});
}
function div() {
    return document.createElement('div');
}
function isElement(value) {
    return [
        'Element',
        'Fragment'
    ].some(function(type) {
        return isType(value, type);
    });
}
function isNodeList(value) {
    return isType(value, 'NodeList');
}
function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
}
function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
}
function getArrayOfElements(value) {
    if (isElement(value)) return [
        value
    ];
    if (isNodeList(value)) return arrayFrom(value);
    if (Array.isArray(value)) return value;
    return arrayFrom(document.querySelectorAll(value));
}
function setTransitionDuration(els, value) {
    els.forEach(function(el) {
        if (el) el.style.transitionDuration = value + "ms";
    });
}
function setVisibilityState(els, state) {
    els.forEach(function(el) {
        if (el) el.setAttribute('data-state', state);
    });
}
function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;
    var _normalizeToArray = normalizeToArray(elementOrElements), element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body
    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
}
function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX, clientY = event.clientY;
    return popperTreeData.every(function(_ref) {
        var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;
        var interactiveBorder = props.interactiveBorder;
        var basePlacement = getBasePlacement(popperState.placement);
        var offsetData = popperState.modifiersData.offset;
        if (!offsetData) return true;
        var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
        var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
        var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
        var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
        var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
        var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
        var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
        var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
        return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
}
function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...
    [
        'transitionend',
        'webkitTransitionEnd'
    ].forEach(function(event) {
        box[method](event, listener);
    });
}
/**
 * Compared to xxx.contains, this function works for dom structures with shadow
 * dom
 */ function actualContains(parent, child) {
    var target = child;
    while(target){
        var _target$getRootNode;
        if (parent.contains(target)) return true;
        target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }
    return false;
}
var currentInput = {
    isTouch: false
};
var lastMouseMoveTime = 0;
/**
 * When a `touchstart` event is fired, it's assumed the user is using touch
 * input. We'll bind a `mousemove` event listener to listen for mouse input in
 * the future. This way, the `isTouch` property is fully dynamic and will handle
 * hybrid devices that use a mix of touch + mouse input.
 */ function onDocumentTouchStart() {
    if (currentInput.isTouch) return;
    currentInput.isTouch = true;
    if (window.performance) document.addEventListener('mousemove', onDocumentMouseMove);
}
/**
 * When two `mousemove` event are fired consecutively within 20ms, it's assumed
 * the user is using mouse input again. `mousemove` can fire on touch devices as
 * well, but very rarely that quickly.
 */ function onDocumentMouseMove() {
    var now = performance.now();
    if (now - lastMouseMoveTime < 20) {
        currentInput.isTouch = false;
        document.removeEventListener('mousemove', onDocumentMouseMove);
    }
    lastMouseMoveTime = now;
}
/**
 * When an element is in focus and has a tippy, leaving the tab/window and
 * returning causes it to show again. For mouse users this is unexpected, but
 * for keyboard use it makes sense.
 * TODO: find a better technique to solve this problem
 */ function onWindowBlur() {
    var activeElement = document.activeElement;
    if (isReferenceElement(activeElement)) {
        var instance = activeElement._tippy;
        if (activeElement.blur && !instance.state.isVisible) activeElement.blur();
    }
}
function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
}
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var isIE11 = isBrowser ? !!window.msCrypto : false;
function createMemoryLeakWarning(method) {
    var txt = method === 'destroy' ? 'n already-' : ' ';
    return [
        method + "() was called on a" + txt + "destroyed instance. This is a no-op but",
        'indicates a potential memory leak.'
    ].join(' ');
}
function clean(value) {
    var spacesAndTabs = /[ \t]{2,}/g;
    var lineStartWithSpaces = /^[ \t]*/gm;
    return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();
}
function getDevMessage(message) {
    return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c\uD83D\uDC77\u200D This is a development-only message. It will be removed in production.\n  ");
}
function getFormattedMessage(message) {
    return [
        getDevMessage(message),
        'color: #00C584; font-size: 1.3em; font-weight: bold;',
        'line-height: 1.5',
        'color: #a6a095;'
    ];
} // Assume warnings and errors never have the same message
var visitedMessages;
resetVisitedMessages();
function resetVisitedMessages() {
    visitedMessages = new Set();
}
function warnWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
        var _console;
        visitedMessages.add(message);
        (_console = console).warn.apply(_console, getFormattedMessage(message));
    }
}
function errorWhen(condition, message) {
    if (condition && !visitedMessages.has(message)) {
        var _console2;
        visitedMessages.add(message);
        (_console2 = console).error.apply(_console2, getFormattedMessage(message));
    }
}
function validateTargets(targets) {
    var didPassFalsyValue = !targets;
    var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;
    errorWhen(didPassFalsyValue, [
        'tippy() was passed',
        '`' + String(targets) + '`',
        'as its targets (first) argument. Valid types are: String, Element,',
        'Element[], or NodeList.'
    ].join(' '));
    errorWhen(didPassPlainObject, [
        'tippy() was passed a plain object which is not supported as an argument',
        'for virtual positioning. Use props.getReferenceClientRect instead.'
    ].join(' '));
}
var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
};
var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
};
var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
        content: 'auto',
        expanded: 'auto'
    },
    delay: 0,
    duration: [
        300,
        250
    ],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [
        0,
        10
    ],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
}, pluginProps, renderProps);
var defaultKeys = Object.keys(defaultProps);
var setDefaultProps = function setDefaultProps(partialProps) {
    validateProps(partialProps, []);
    var keys = Object.keys(partialProps);
    keys.forEach(function(key) {
        defaultProps[key] = partialProps[key];
    });
};
function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function(acc, plugin) {
        var name = plugin.name, defaultValue = plugin.defaultValue;
        if (name) {
            var _name;
            acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
        }
        return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps);
}
function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
        plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function(acc, key) {
        var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();
        if (!valueAsString) return acc;
        if (key === 'content') acc[key] = valueAsString;
        else try {
            acc[key] = JSON.parse(valueAsString);
        } catch (e) {
            acc[key] = valueAsString;
        }
        return acc;
    }, {});
    return props;
}
function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
        content: invokeWithArgsOrReturn(props.content, [
            reference
        ])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
        expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
        content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
}
function validateProps(partialProps, plugins) {
    if (partialProps === void 0) partialProps = {};
    if (plugins === void 0) plugins = [];
    var keys = Object.keys(partialProps);
    keys.forEach(function(prop) {
        var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
        var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`
        if (didPassUnknownProp) didPassUnknownProp = plugins.filter(function(plugin) {
            return plugin.name === prop;
        }).length === 0;
        warnWhen(didPassUnknownProp, [
            "`" + prop + "`",
            "is not a valid prop. You may have spelled it incorrectly, or if it's",
            'a plugin, forgot to pass it in an array as props.plugins.',
            '\n\n',
            'All props: https://atomiks.github.io/tippyjs/v6/all-props/\n',
            'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'
        ].join(' '));
    });
}
var innerHTML = function innerHTML() {
    return 'innerHTML';
};
function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
}
function createArrowElement(value) {
    var arrow = div();
    if (value === true) arrow.className = ARROW_CLASS;
    else {
        arrow.className = SVG_ARROW_CLASS;
        if (isElement(value)) arrow.appendChild(value);
        else dangerouslySetInnerHTML(arrow, value);
    }
    return arrow;
}
function setContent(content, props) {
    if (isElement(props.content)) {
        dangerouslySetInnerHTML(content, '');
        content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
        if (props.allowHTML) dangerouslySetInnerHTML(content, props.content);
        else content.textContent = props.content;
    }
}
function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
        box: box,
        content: boxChildren.find(function(node) {
            return node.classList.contains(CONTENT_CLASS);
        }),
        arrow: boxChildren.find(function(node) {
            return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
        }),
        backdrop: boxChildren.find(function(node) {
            return node.classList.contains(BACKDROP_CLASS);
        })
    };
}
function render(instance) {
    var popper = div();
    var box = div();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);
    function onUpdate(prevProps, nextProps) {
        var _getChildren = getChildren(popper), box = _getChildren.box, content = _getChildren.content, arrow = _getChildren.arrow;
        if (nextProps.theme) box.setAttribute('data-theme', nextProps.theme);
        else box.removeAttribute('data-theme');
        if (typeof nextProps.animation === 'string') box.setAttribute('data-animation', nextProps.animation);
        else box.removeAttribute('data-animation');
        if (nextProps.inertia) box.setAttribute('data-inertia', '');
        else box.removeAttribute('data-inertia');
        box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;
        if (nextProps.role) box.setAttribute('role', nextProps.role);
        else box.removeAttribute('role');
        if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) setContent(content, instance.props);
        if (nextProps.arrow) {
            if (!arrow) box.appendChild(createArrowElement(nextProps.arrow));
            else if (prevProps.arrow !== nextProps.arrow) {
                box.removeChild(arrow);
                box.appendChild(createArrowElement(nextProps.arrow));
            }
        } else if (arrow) box.removeChild(arrow);
    }
    return {
        popper: popper,
        onUpdate: onUpdate
    };
} // Runtime check to identify if the render function is the default one; this
// way we can apply default CSS transitions logic and it can be tree-shaken away
render.$$tippy = true;
var idCounter = 1;
var mouseMoveListeners = []; // Used by `hideAll()`
var mountedInstances = [];
function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================
    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================
    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
        // Is the instance currently enabled?
        isEnabled: true,
        // Is the tippy currently showing and not transitioning out?
        isVisible: false,
        // Has the instance been destroyed?
        isDestroyed: false,
        // Is the tippy currently mounted to the DOM?
        isMounted: false,
        // Has the tippy finished transitioning in?
        isShown: false
    };
    var instance = {
        // properties
        id: id,
        reference: reference,
        popper: div(),
        popperInstance: popperInstance,
        props: props,
        state: state,
        plugins: plugins,
        // methods
        clearDelayTimeouts: clearDelayTimeouts,
        setProps: setProps,
        setContent: setContent,
        show: show,
        hide: hide,
        hideWithInteractivity: hideWithInteractivity,
        enable: enable,
        disable: disable,
        unmount: unmount,
        destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser
    /* istanbul ignore if */ if (!props.render) {
        errorWhen(true, 'render() function has not been supplied.');
        return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================
    var _props$render = props.render(instance), popper = _props$render.popper, onUpdate = _props$render.onUpdate;
    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function(plugin) {
        return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [
        instance
    ]);
    if (props.showOnCreate) scheduleShow();
     // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding
    popper.addEventListener('mouseenter', function() {
        if (instance.props.interactive && instance.state.isVisible) instance.clearDelayTimeouts();
    });
    popper.addEventListener('mouseleave', function() {
        if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) getDocument().addEventListener('mousemove', debouncedOnMouseMove);
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================
    function getNormalizedTouchSettings() {
        var touch = instance.props.touch;
        return Array.isArray(touch) ? touch : [
            touch,
            0
        ];
    }
    function getIsCustomTouchBehavior() {
        return getNormalizedTouchSettings()[0] === 'hold';
    }
    function getIsDefaultRenderFn() {
        var _instance$props$rende;
        // @ts-ignore
        return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }
    function getCurrentTarget() {
        return currentTarget || reference;
    }
    function getDocument() {
        var parent = getCurrentTarget().parentNode;
        return parent ? getOwnerDocument(parent) : document;
    }
    function getDefaultTemplateChildren() {
        return getChildren(popper);
    }
    function getDelay(isShow) {
        // For touch or keyboard input, force `0` delay for UX reasons
        // Also if the instance is mounted but not visible (transitioning out),
        // ignore delay
        if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') return 0;
        return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }
    function handleStyles(fromHide) {
        if (fromHide === void 0) fromHide = false;
        popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';
        popper.style.zIndex = "" + instance.props.zIndex;
    }
    function invokeHook(hook, args, shouldInvokePropsHook) {
        if (shouldInvokePropsHook === void 0) shouldInvokePropsHook = true;
        pluginsHooks.forEach(function(pluginHooks) {
            if (pluginHooks[hook]) pluginHooks[hook].apply(pluginHooks, args);
        });
        if (shouldInvokePropsHook) {
            var _instance$props;
            (_instance$props = instance.props)[hook].apply(_instance$props, args);
        }
    }
    function handleAriaContentAttribute() {
        var aria = instance.props.aria;
        if (!aria.content) return;
        var attr = "aria-" + aria.content;
        var id = popper.id;
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function(node) {
            var currentValue = node.getAttribute(attr);
            if (instance.state.isVisible) node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
            else {
                var nextValue = currentValue && currentValue.replace(id, '').trim();
                if (nextValue) node.setAttribute(attr, nextValue);
                else node.removeAttribute(attr);
            }
        });
    }
    function handleAriaExpandedAttribute() {
        if (hasAriaExpanded || !instance.props.aria.expanded) return;
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function(node) {
            if (instance.props.interactive) node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
            else node.removeAttribute('aria-expanded');
        });
    }
    function cleanupInteractiveMouseListeners() {
        getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
        mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
            return listener !== debouncedOnMouseMove;
        });
    }
    function onDocumentPress(event) {
        // Moved finger to scroll instead of an intentional tap outside
        if (currentInput.isTouch) {
            if (didTouchMove || event.type === 'mousedown') return;
        }
        var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper
        if (instance.props.interactive && actualContains(popper, actualTarget)) return;
         // Clicked on the event listeners target
        if (normalizeToArray(instance.props.triggerTarget || reference).some(function(el) {
            return actualContains(el, actualTarget);
        })) {
            if (currentInput.isTouch) return;
            if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) return;
        } else invokeHook('onClickOutside', [
            instance,
            event
        ]);
        if (instance.props.hideOnClick === true) {
            instance.clearDelayTimeouts();
            instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
            // currentTarget. This lets a tippy with `focus` trigger know that it
            // should not show
            didHideDueToDocumentMouseDown = true;
            setTimeout(function() {
                didHideDueToDocumentMouseDown = false;
            }); // The listener gets added in `scheduleShow()`, but this may be hiding it
            // before it shows, and hide()'s early bail-out behavior can prevent it
            // from being cleaned up
            if (!instance.state.isMounted) removeDocumentPress();
        }
    }
    function onTouchMove() {
        didTouchMove = true;
    }
    function onTouchStart() {
        didTouchMove = false;
    }
    function addDocumentPress() {
        var doc = getDocument();
        doc.addEventListener('mousedown', onDocumentPress, true);
        doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
        doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
        doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }
    function removeDocumentPress() {
        var doc = getDocument();
        doc.removeEventListener('mousedown', onDocumentPress, true);
        doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
        doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
        doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }
    function onTransitionedOut(duration, callback) {
        onTransitionEnd(duration, function() {
            if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) callback();
        });
    }
    function onTransitionedIn(duration, callback) {
        onTransitionEnd(duration, callback);
    }
    function onTransitionEnd(duration, callback) {
        var box = getDefaultTemplateChildren().box;
        function listener(event) {
            if (event.target === box) {
                updateTransitionEndListener(box, 'remove', listener);
                callback();
            }
        } // Make callback synchronous if duration is 0
        // `transitionend` won't fire otherwise
        if (duration === 0) return callback();
        updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
        updateTransitionEndListener(box, 'add', listener);
        currentTransitionEndListener = listener;
    }
    function on(eventType, handler, options) {
        if (options === void 0) options = false;
        var nodes = normalizeToArray(instance.props.triggerTarget || reference);
        nodes.forEach(function(node) {
            node.addEventListener(eventType, handler, options);
            listeners.push({
                node: node,
                eventType: eventType,
                handler: handler,
                options: options
            });
        });
    }
    function addListeners() {
        if (getIsCustomTouchBehavior()) {
            on('touchstart', onTrigger, {
                passive: true
            });
            on('touchend', onMouseLeave, {
                passive: true
            });
        }
        splitBySpaces(instance.props.trigger).forEach(function(eventType) {
            if (eventType === 'manual') return;
            on(eventType, onTrigger);
            switch(eventType){
                case 'mouseenter':
                    on('mouseleave', onMouseLeave);
                    break;
                case 'focus':
                    on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);
                    break;
                case 'focusin':
                    on('focusout', onBlurOrFocusOut);
                    break;
            }
        });
    }
    function removeListeners() {
        listeners.forEach(function(_ref) {
            var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;
            node.removeEventListener(eventType, handler, options);
        });
        listeners = [];
    }
    function onTrigger(event) {
        var _lastTriggerEvent;
        var shouldScheduleClickHide = false;
        if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) return;
        var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
        lastTriggerEvent = event;
        currentTarget = event.currentTarget;
        handleAriaExpandedAttribute();
        if (!instance.state.isVisible && isMouseEvent(event)) // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function(listener) {
            return listener(event);
        });
         // Toggle show/hide when clicking click-triggered tooltips
        if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) shouldScheduleClickHide = true;
        else scheduleShow(event);
        if (event.type === 'click') isVisibleFromClick = !shouldScheduleClickHide;
        if (shouldScheduleClickHide && !wasFocused) scheduleHide(event);
    }
    function onMouseMove(event) {
        var target = event.target;
        var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);
        if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) return;
        var popperTreeData = getNestedPopperTree().concat(popper).map(function(popper) {
            var _instance$popperInsta;
            var instance = popper._tippy;
            var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;
            if (state) return {
                popperRect: popper.getBoundingClientRect(),
                popperState: state,
                props: props
            };
            return null;
        }).filter(Boolean);
        if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
            cleanupInteractiveMouseListeners();
            scheduleHide(event);
        }
    }
    function onMouseLeave(event) {
        var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;
        if (shouldBail) return;
        if (instance.props.interactive) {
            instance.hideWithInteractivity(event);
            return;
        }
        scheduleHide(event);
    }
    function onBlurOrFocusOut(event) {
        if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) return;
         // If focus was moved to within the popper
        if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) return;
        scheduleHide(event);
    }
    function isEventListenerStopped(event) {
        return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }
    function createPopperInstance() {
        destroyPopperInstance();
        var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
        var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
        var computedReference = getReferenceClientRect ? {
            getBoundingClientRect: getReferenceClientRect,
            contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
        } : reference;
        var tippyModifier = {
            name: '$$tippy',
            enabled: true,
            phase: 'beforeWrite',
            requires: [
                'computeStyles'
            ],
            fn: function fn(_ref2) {
                var state = _ref2.state;
                if (getIsDefaultRenderFn()) {
                    var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
                    [
                        'placement',
                        'reference-hidden',
                        'escaped'
                    ].forEach(function(attr) {
                        if (attr === 'placement') box.setAttribute('data-placement', state.placement);
                        else if (state.attributes.popper["data-popper-" + attr]) box.setAttribute("data-" + attr, '');
                        else box.removeAttribute("data-" + attr);
                    });
                    state.attributes.popper = {};
                }
            }
        };
        var modifiers = [
            {
                name: 'offset',
                options: {
                    offset: offset
                }
            },
            {
                name: 'preventOverflow',
                options: {
                    padding: {
                        top: 2,
                        bottom: 2,
                        left: 5,
                        right: 5
                    }
                }
            },
            {
                name: 'flip',
                options: {
                    padding: 5
                }
            },
            {
                name: 'computeStyles',
                options: {
                    adaptive: !moveTransition
                }
            },
            tippyModifier
        ];
        if (getIsDefaultRenderFn() && arrow) modifiers.push({
            name: 'arrow',
            options: {
                element: arrow,
                padding: 3
            }
        });
        modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
        instance.popperInstance = (0, _core.createPopper)(computedReference, popper, Object.assign({}, popperOptions, {
            placement: placement,
            onFirstUpdate: onFirstUpdate,
            modifiers: modifiers
        }));
    }
    function destroyPopperInstance() {
        if (instance.popperInstance) {
            instance.popperInstance.destroy();
            instance.popperInstance = null;
        }
    }
    function mount() {
        var appendTo = instance.props.appendTo;
        var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
        // it's directly after the reference element so the elements inside the
        // tippy can be tabbed to
        // If there are clipping issues, the user can specify a different appendTo
        // and ensure focus management is handled correctly manually
        var node = getCurrentTarget();
        if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') parentNode = node.parentNode;
        else parentNode = invokeWithArgsOrReturn(appendTo, [
            node
        ]);
         // The popper element needs to exist on the DOM before its position can be
        // updated as Popper needs to read its dimensions
        if (!parentNode.contains(popper)) parentNode.appendChild(popper);
        instance.state.isMounted = true;
        createPopperInstance();
        // Accessibility check
        warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, [
            'Interactive tippy element may not be accessible via keyboard',
            'navigation because it is not directly after the reference element',
            'in the DOM source order.',
            '\n\n',
            'Using a wrapper <div> or <span> tag around the reference element',
            'solves this by creating a new parentNode context.',
            '\n\n',
            'Specifying `appendTo: document.body` silences this warning, but it',
            'assumes you are using a focus management solution to handle',
            'keyboard navigation.',
            '\n\n',
            'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'
        ].join(' '));
    }
    function getNestedPopperTree() {
        return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }
    function scheduleShow(event) {
        instance.clearDelayTimeouts();
        if (event) invokeHook('onTrigger', [
            instance,
            event
        ]);
        addDocumentPress();
        var delay = getDelay(true);
        var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
        if (currentInput.isTouch && touchValue === 'hold' && touchDelay) delay = touchDelay;
        if (delay) showTimeout = setTimeout(function() {
            instance.show();
        }, delay);
        else instance.show();
    }
    function scheduleHide(event) {
        instance.clearDelayTimeouts();
        invokeHook('onUntrigger', [
            instance,
            event
        ]);
        if (!instance.state.isVisible) {
            removeDocumentPress();
            return;
        } // For interactive tippies, scheduleHide is added to a document.body handler
        // from onMouseLeave so must intercept scheduled hides from mousemove/leave
        // events when trigger contains mouseenter and click, and the tip is
        // currently shown as a result of a click.
        if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && [
            'mouseleave',
            'mousemove'
        ].indexOf(event.type) >= 0 && isVisibleFromClick) return;
        var delay = getDelay(false);
        if (delay) hideTimeout = setTimeout(function() {
            if (instance.state.isVisible) instance.hide();
        }, delay);
        else // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function() {
            instance.hide();
        });
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================
    function enable() {
        instance.state.isEnabled = true;
    }
    function disable() {
        // Disabling the instance should also hide it
        // https://github.com/atomiks/tippy.js-react/issues/106
        instance.hide();
        instance.state.isEnabled = false;
    }
    function clearDelayTimeouts() {
        clearTimeout(showTimeout);
        clearTimeout(hideTimeout);
        cancelAnimationFrame(scheduleHideAnimationFrame);
    }
    function setProps(partialProps) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));
        if (instance.state.isDestroyed) return;
        invokeHook('onBeforeUpdate', [
            instance,
            partialProps
        ]);
        removeListeners();
        var prevProps = instance.props;
        var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
            ignoreAttributes: true
        }));
        instance.props = nextProps;
        addListeners();
        if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
            cleanupInteractiveMouseListeners();
            debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
        } // Ensure stale aria-expanded attributes are removed
        if (prevProps.triggerTarget && !nextProps.triggerTarget) normalizeToArray(prevProps.triggerTarget).forEach(function(node) {
            node.removeAttribute('aria-expanded');
        });
        else if (nextProps.triggerTarget) reference.removeAttribute('aria-expanded');
        handleAriaExpandedAttribute();
        handleStyles();
        if (onUpdate) onUpdate(prevProps, nextProps);
        if (instance.popperInstance) {
            createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
            // and the nested ones get re-rendered first.
            // https://github.com/atomiks/tippyjs-react/issues/177
            // TODO: find a cleaner / more efficient solution(!)
            getNestedPopperTree().forEach(function(nestedPopper) {
                // React (and other UI libs likely) requires a rAF wrapper as it flushes
                // its work in one
                requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
            });
        }
        invokeHook('onAfterUpdate', [
            instance,
            partialProps
        ]);
    }
    function setContent(content) {
        instance.setProps({
            content: content
        });
    }
    function show() {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));
        var isAlreadyVisible = instance.state.isVisible;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled;
        var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
        var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
        if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) return;
         // Normalize `disabled` behavior across browsers.
        // Firefox allows events on disabled elements, but Chrome doesn't.
        // Using a wrapper element (i.e. <span>) is recommended.
        if (getCurrentTarget().hasAttribute('disabled')) return;
        invokeHook('onShow', [
            instance
        ], false);
        if (instance.props.onShow(instance) === false) return;
        instance.state.isVisible = true;
        if (getIsDefaultRenderFn()) popper.style.visibility = 'visible';
        handleStyles();
        addDocumentPress();
        if (!instance.state.isMounted) popper.style.transition = 'none';
         // If flipping to the opposite side after hiding at least once, the
        // animation will use the wrong placement without resetting the duration
        if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content = _getDefaultTemplateCh2.content;
            setTransitionDuration([
                box,
                content
            ], 0);
        }
        onFirstUpdate = function onFirstUpdate() {
            var _instance$popperInsta2;
            if (!instance.state.isVisible || ignoreOnFirstUpdate) return;
            ignoreOnFirstUpdate = true; // reflow
            popper.offsetHeight;
            popper.style.transition = instance.props.moveTransition;
            if (getIsDefaultRenderFn() && instance.props.animation) {
                var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
                setTransitionDuration([
                    _box,
                    _content
                ], duration);
                setVisibilityState([
                    _box,
                    _content
                ], 'visible');
            }
            handleAriaContentAttribute();
            handleAriaExpandedAttribute();
            pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
            // popper has been positioned for the first time
            (_instance$popperInsta2 = instance.popperInstance) == null || _instance$popperInsta2.forceUpdate();
            invokeHook('onMount', [
                instance
            ]);
            if (instance.props.animation && getIsDefaultRenderFn()) onTransitionedIn(duration, function() {
                instance.state.isShown = true;
                invokeHook('onShown', [
                    instance
                ]);
            });
        };
        mount();
    }
    function hide() {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));
        var isAlreadyHidden = !instance.state.isVisible;
        var isDestroyed = instance.state.isDestroyed;
        var isDisabled = !instance.state.isEnabled;
        var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
        if (isAlreadyHidden || isDestroyed || isDisabled) return;
        invokeHook('onHide', [
            instance
        ], false);
        if (instance.props.onHide(instance) === false) return;
        instance.state.isVisible = false;
        instance.state.isShown = false;
        ignoreOnFirstUpdate = false;
        isVisibleFromClick = false;
        if (getIsDefaultRenderFn()) popper.style.visibility = 'hidden';
        cleanupInteractiveMouseListeners();
        removeDocumentPress();
        handleStyles(true);
        if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content = _getDefaultTemplateCh4.content;
            if (instance.props.animation) {
                setTransitionDuration([
                    box,
                    content
                ], duration);
                setVisibilityState([
                    box,
                    content
                ], 'hidden');
            }
        }
        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        if (instance.props.animation) {
            if (getIsDefaultRenderFn()) onTransitionedOut(duration, instance.unmount);
        } else instance.unmount();
    }
    function hideWithInteractivity(event) {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
        pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
        debouncedOnMouseMove(event);
    }
    function unmount() {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));
        if (instance.state.isVisible) instance.hide();
        if (!instance.state.isMounted) return;
        destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
        // tree by default. This seems mainly for interactive tippies, but we should
        // find a workaround if possible
        getNestedPopperTree().forEach(function(nestedPopper) {
            nestedPopper._tippy.unmount();
        });
        if (popper.parentNode) popper.parentNode.removeChild(popper);
        mountedInstances = mountedInstances.filter(function(i) {
            return i !== instance;
        });
        instance.state.isMounted = false;
        invokeHook('onHidden', [
            instance
        ]);
    }
    function destroy() {
        warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));
        if (instance.state.isDestroyed) return;
        instance.clearDelayTimeouts();
        instance.unmount();
        removeListeners();
        delete reference._tippy;
        instance.state.isDestroyed = true;
        invokeHook('onDestroy', [
            instance
        ]);
    }
}
function tippy(targets, optionalProps) {
    if (optionalProps === void 0) optionalProps = {};
    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
    validateTargets(targets);
    validateProps(optionalProps, plugins);
    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
        plugins: plugins
    });
    var elements = getArrayOfElements(targets);
    var isSingleContentElement = isElement(passedProps.content);
    var isMoreThanOneReferenceElement = elements.length > 1;
    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, [
        'tippy() was passed an Element as the `content` prop, but more than',
        'one tippy instance was created by this invocation. This means the',
        'content element will only be appended to the last tippy instance.',
        '\n\n',
        'Instead, pass the .innerHTML of the element, or use a function that',
        'returns a cloned version of the element instead.',
        '\n\n',
        '1) content: element.innerHTML\n',
        '2) content: () => element.cloneNode(true)'
    ].join(' '));
    var instances = elements.reduce(function(acc, reference) {
        var instance = reference && createTippy(reference, passedProps);
        if (instance) acc.push(instance);
        return acc;
    }, []);
    return isElement(targets) ? instances[0] : instances;
}
tippy.defaultProps = defaultProps;
tippy.setDefaultProps = setDefaultProps;
tippy.currentInput = currentInput;
var hideAll = function hideAll(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, excludedReferenceOrInstance = _ref.exclude, duration = _ref.duration;
    mountedInstances.forEach(function(instance) {
        var isExcluded = false;
        if (excludedReferenceOrInstance) isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;
        if (!isExcluded) {
            var originalDuration = instance.props.duration;
            instance.setProps({
                duration: duration
            });
            instance.hide();
            if (!instance.state.isDestroyed) instance.setProps({
                duration: originalDuration
            });
        }
    });
};
// every time the popper is destroyed (i.e. a new target), removing the styles
// and causing transitions to break for singletons when the console is open, but
// most notably for non-transform styles being used, `gpuAcceleration: false`.
var applyStylesModifier = Object.assign({}, (0, _core.applyStyles), {
    effect: function effect(_ref) {
        var state = _ref.state;
        var initialStyles = {
            popper: {
                position: state.options.strategy,
                left: '0',
                top: '0',
                margin: '0'
            },
            arrow: {
                position: 'absolute'
            },
            reference: {}
        };
        Object.assign(state.elements.popper.style, initialStyles.popper);
        state.styles = initialStyles;
        if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
         // intentionally return no cleanup function
    // return () => { ... }
    }
});
var createSingleton = function createSingleton(tippyInstances, optionalProps) {
    var _optionalProps$popper;
    if (optionalProps === void 0) optionalProps = {};
    errorWhen(!Array.isArray(tippyInstances), [
        'The first argument passed to createSingleton() must be an array of',
        'tippy instances. The passed value was',
        String(tippyInstances)
    ].join(' '));
    var individualInstances = tippyInstances;
    var references = [];
    var triggerTargets = [];
    var currentTarget;
    var overrides = optionalProps.overrides;
    var interceptSetPropsCleanups = [];
    var shownOnCreate = false;
    function setTriggerTargets() {
        triggerTargets = individualInstances.map(function(instance) {
            return normalizeToArray(instance.props.triggerTarget || instance.reference);
        }).reduce(function(acc, item) {
            return acc.concat(item);
        }, []);
    }
    function setReferences() {
        references = individualInstances.map(function(instance) {
            return instance.reference;
        });
    }
    function enableInstances(isEnabled) {
        individualInstances.forEach(function(instance) {
            if (isEnabled) instance.enable();
            else instance.disable();
        });
    }
    function interceptSetProps(singleton) {
        return individualInstances.map(function(instance) {
            var originalSetProps = instance.setProps;
            instance.setProps = function(props) {
                originalSetProps(props);
                if (instance.reference === currentTarget) singleton.setProps(props);
            };
            return function() {
                instance.setProps = originalSetProps;
            };
        });
    } // have to pass singleton, as it maybe undefined on first call
    function prepareInstance(singleton, target) {
        var index = triggerTargets.indexOf(target); // bail-out
        if (target === currentTarget) return;
        currentTarget = target;
        var overrideProps = (overrides || []).concat('content').reduce(function(acc, prop) {
            acc[prop] = individualInstances[index].props[prop];
            return acc;
        }, {});
        singleton.setProps(Object.assign({}, overrideProps, {
            getReferenceClientRect: typeof overrideProps.getReferenceClientRect === 'function' ? overrideProps.getReferenceClientRect : function() {
                var _references$index;
                return (_references$index = references[index]) == null ? void 0 : _references$index.getBoundingClientRect();
            }
        }));
    }
    enableInstances(false);
    setReferences();
    setTriggerTargets();
    var plugin = {
        fn: function fn() {
            return {
                onDestroy: function onDestroy() {
                    enableInstances(true);
                },
                onHidden: function onHidden() {
                    currentTarget = null;
                },
                onClickOutside: function onClickOutside(instance) {
                    if (instance.props.showOnCreate && !shownOnCreate) {
                        shownOnCreate = true;
                        currentTarget = null;
                    }
                },
                onShow: function onShow(instance) {
                    if (instance.props.showOnCreate && !shownOnCreate) {
                        shownOnCreate = true;
                        prepareInstance(instance, references[0]);
                    }
                },
                onTrigger: function onTrigger(instance, event) {
                    prepareInstance(instance, event.currentTarget);
                }
            };
        }
    };
    var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, [
        'overrides'
    ]), {
        plugins: [
            plugin
        ].concat(optionalProps.plugins || []),
        triggerTarget: triggerTargets,
        popperOptions: Object.assign({}, optionalProps.popperOptions, {
            modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [
                applyStylesModifier
            ])
        })
    }));
    var originalShow = singleton.show;
    singleton.show = function(target) {
        originalShow(); // first time, showOnCreate or programmatic call with no params
        // default to showing first instance
        if (!currentTarget && target == null) return prepareInstance(singleton, references[0]);
         // triggered from event (do nothing as prepareInstance already called by onTrigger)
        // programmatic call with no params when already visible (do nothing again)
        if (currentTarget && target == null) return;
         // target is index of instance
        if (typeof target === 'number') return references[target] && prepareInstance(singleton, references[target]);
         // target is a child tippy instance
        if (individualInstances.indexOf(target) >= 0) {
            var ref = target.reference;
            return prepareInstance(singleton, ref);
        } // target is a ReferenceElement
        if (references.indexOf(target) >= 0) return prepareInstance(singleton, target);
    };
    singleton.showNext = function() {
        var first = references[0];
        if (!currentTarget) return singleton.show(0);
        var index = references.indexOf(currentTarget);
        singleton.show(references[index + 1] || first);
    };
    singleton.showPrevious = function() {
        var last = references[references.length - 1];
        if (!currentTarget) return singleton.show(last);
        var index = references.indexOf(currentTarget);
        var target = references[index - 1] || last;
        singleton.show(target);
    };
    var originalSetProps = singleton.setProps;
    singleton.setProps = function(props) {
        overrides = props.overrides || overrides;
        originalSetProps(props);
    };
    singleton.setInstances = function(nextInstances) {
        enableInstances(true);
        interceptSetPropsCleanups.forEach(function(fn) {
            return fn();
        });
        individualInstances = nextInstances;
        enableInstances(false);
        setReferences();
        setTriggerTargets();
        interceptSetPropsCleanups = interceptSetProps(singleton);
        singleton.setProps({
            triggerTarget: triggerTargets
        });
    };
    interceptSetPropsCleanups = interceptSetProps(singleton);
    return singleton;
};
var BUBBLING_EVENTS_MAP = {
    mouseover: 'mouseenter',
    focusin: 'focus',
    click: 'click'
};
/**
 * Creates a delegate instance that controls the creation of tippy instances
 * for child elements (`target` CSS selector).
 */ function delegate(targets, props) {
    errorWhen(!(props && props.target), [
        'You must specity a `target` prop indicating a CSS selector string matching',
        'the target elements that should receive a tippy.'
    ].join(' '));
    var listeners = [];
    var childTippyInstances = [];
    var disabled = false;
    var target = props.target;
    var nativeProps = removeProperties(props, [
        'target'
    ]);
    var parentProps = Object.assign({}, nativeProps, {
        trigger: 'manual',
        touch: false
    });
    var childProps = Object.assign({
        touch: defaultProps.touch
    }, nativeProps, {
        showOnCreate: true
    });
    var returnValue = tippy(targets, parentProps);
    var normalizedReturnValue = normalizeToArray(returnValue);
    function onTrigger(event) {
        if (!event.target || disabled) return;
        var targetNode = event.target.closest(target);
        if (!targetNode) return;
         // Get relevant trigger with fallbacks:
        // 1. Check `data-tippy-trigger` attribute on target node
        // 2. Fallback to `trigger` passed to `delegate()`
        // 3. Fallback to `defaultProps.trigger`
        var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore
        if (targetNode._tippy) return;
        if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') return;
        if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) return;
        var instance = tippy(targetNode, childProps);
        if (instance) childTippyInstances = childTippyInstances.concat(instance);
    }
    function on(node, eventType, handler, options) {
        if (options === void 0) options = false;
        node.addEventListener(eventType, handler, options);
        listeners.push({
            node: node,
            eventType: eventType,
            handler: handler,
            options: options
        });
    }
    function addEventListeners(instance) {
        var reference = instance.reference;
        on(reference, 'touchstart', onTrigger, TOUCH_OPTIONS);
        on(reference, 'mouseover', onTrigger);
        on(reference, 'focusin', onTrigger);
        on(reference, 'click', onTrigger);
    }
    function removeEventListeners() {
        listeners.forEach(function(_ref) {
            var node = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options = _ref.options;
            node.removeEventListener(eventType, handler, options);
        });
        listeners = [];
    }
    function applyMutations(instance) {
        var originalDestroy = instance.destroy;
        var originalEnable = instance.enable;
        var originalDisable = instance.disable;
        instance.destroy = function(shouldDestroyChildInstances) {
            if (shouldDestroyChildInstances === void 0) shouldDestroyChildInstances = true;
            if (shouldDestroyChildInstances) childTippyInstances.forEach(function(instance) {
                instance.destroy();
            });
            childTippyInstances = [];
            removeEventListeners();
            originalDestroy();
        };
        instance.enable = function() {
            originalEnable();
            childTippyInstances.forEach(function(instance) {
                return instance.enable();
            });
            disabled = false;
        };
        instance.disable = function() {
            originalDisable();
            childTippyInstances.forEach(function(instance) {
                return instance.disable();
            });
            disabled = true;
        };
        addEventListeners(instance);
    }
    normalizedReturnValue.forEach(applyMutations);
    return returnValue;
}
var animateFill = {
    name: 'animateFill',
    defaultValue: false,
    fn: function fn(instance) {
        var _instance$props$rende;
        // @ts-ignore
        if (!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy)) {
            errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');
            return {};
        }
        var _getChildren = getChildren(instance.popper), box = _getChildren.box, content = _getChildren.content;
        var backdrop = instance.props.animateFill ? createBackdropElement() : null;
        return {
            onCreate: function onCreate() {
                if (backdrop) {
                    box.insertBefore(backdrop, box.firstElementChild);
                    box.setAttribute('data-animatefill', '');
                    box.style.overflow = 'hidden';
                    instance.setProps({
                        arrow: false,
                        animation: 'shift-away'
                    });
                }
            },
            onMount: function onMount() {
                if (backdrop) {
                    var transitionDuration = box.style.transitionDuration;
                    var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the
                    // tooltip element. `clip-path` is the other alternative but is not
                    // well-supported and is buggy on some devices.
                    content.style.transitionDelay = Math.round(duration / 10) + "ms";
                    backdrop.style.transitionDuration = transitionDuration;
                    setVisibilityState([
                        backdrop
                    ], 'visible');
                }
            },
            onShow: function onShow() {
                if (backdrop) backdrop.style.transitionDuration = '0ms';
            },
            onHide: function onHide() {
                if (backdrop) setVisibilityState([
                    backdrop
                ], 'hidden');
            }
        };
    }
};
function createBackdropElement() {
    var backdrop = div();
    backdrop.className = BACKDROP_CLASS;
    setVisibilityState([
        backdrop
    ], 'hidden');
    return backdrop;
}
var mouseCoords = {
    clientX: 0,
    clientY: 0
};
var activeInstances = [];
function storeMouseCoords(_ref) {
    var clientX = _ref.clientX, clientY = _ref.clientY;
    mouseCoords = {
        clientX: clientX,
        clientY: clientY
    };
}
function addMouseCoordsListener(doc) {
    doc.addEventListener('mousemove', storeMouseCoords);
}
function removeMouseCoordsListener(doc) {
    doc.removeEventListener('mousemove', storeMouseCoords);
}
var followCursor = {
    name: 'followCursor',
    defaultValue: false,
    fn: function fn(instance) {
        var reference = instance.reference;
        var doc = getOwnerDocument(instance.props.triggerTarget || reference);
        var isInternalUpdate = false;
        var wasFocusEvent = false;
        var isUnmounted = true;
        var prevProps = instance.props;
        function getIsInitialBehavior() {
            return instance.props.followCursor === 'initial' && instance.state.isVisible;
        }
        function addListener() {
            doc.addEventListener('mousemove', onMouseMove);
        }
        function removeListener() {
            doc.removeEventListener('mousemove', onMouseMove);
        }
        function unsetGetReferenceClientRect() {
            isInternalUpdate = true;
            instance.setProps({
                getReferenceClientRect: null
            });
            isInternalUpdate = false;
        }
        function onMouseMove(event) {
            // If the instance is interactive, avoid updating the position unless it's
            // over the reference element
            var isCursorOverReference = event.target ? reference.contains(event.target) : true;
            var followCursor = instance.props.followCursor;
            var clientX = event.clientX, clientY = event.clientY;
            var rect = reference.getBoundingClientRect();
            var relativeX = clientX - rect.left;
            var relativeY = clientY - rect.top;
            if (isCursorOverReference || !instance.props.interactive) instance.setProps({
                // @ts-ignore - unneeded DOMRect properties
                getReferenceClientRect: function getReferenceClientRect() {
                    var rect = reference.getBoundingClientRect();
                    var x = clientX;
                    var y = clientY;
                    if (followCursor === 'initial') {
                        x = rect.left + relativeX;
                        y = rect.top + relativeY;
                    }
                    var top = followCursor === 'horizontal' ? rect.top : y;
                    var right = followCursor === 'vertical' ? rect.right : x;
                    var bottom = followCursor === 'horizontal' ? rect.bottom : y;
                    var left = followCursor === 'vertical' ? rect.left : x;
                    return {
                        width: right - left,
                        height: bottom - top,
                        top: top,
                        right: right,
                        bottom: bottom,
                        left: left
                    };
                }
            });
        }
        function create() {
            if (instance.props.followCursor) {
                activeInstances.push({
                    instance: instance,
                    doc: doc
                });
                addMouseCoordsListener(doc);
            }
        }
        function destroy() {
            activeInstances = activeInstances.filter(function(data) {
                return data.instance !== instance;
            });
            if (activeInstances.filter(function(data) {
                return data.doc === doc;
            }).length === 0) removeMouseCoordsListener(doc);
        }
        return {
            onCreate: create,
            onDestroy: destroy,
            onBeforeUpdate: function onBeforeUpdate() {
                prevProps = instance.props;
            },
            onAfterUpdate: function onAfterUpdate(_, _ref2) {
                var followCursor = _ref2.followCursor;
                if (isInternalUpdate) return;
                if (followCursor !== undefined && prevProps.followCursor !== followCursor) {
                    destroy();
                    if (followCursor) {
                        create();
                        if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) addListener();
                    } else {
                        removeListener();
                        unsetGetReferenceClientRect();
                    }
                }
            },
            onMount: function onMount() {
                if (instance.props.followCursor && !wasFocusEvent) {
                    if (isUnmounted) {
                        onMouseMove(mouseCoords);
                        isUnmounted = false;
                    }
                    if (!getIsInitialBehavior()) addListener();
                }
            },
            onTrigger: function onTrigger(_, event) {
                if (isMouseEvent(event)) mouseCoords = {
                    clientX: event.clientX,
                    clientY: event.clientY
                };
                wasFocusEvent = event.type === 'focus';
            },
            onHidden: function onHidden() {
                if (instance.props.followCursor) {
                    unsetGetReferenceClientRect();
                    removeListener();
                    isUnmounted = true;
                }
            }
        };
    }
};
function getProps(props, modifier) {
    var _props$popperOptions;
    return {
        popperOptions: Object.assign({}, props.popperOptions, {
            modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function(_ref) {
                var name = _ref.name;
                return name !== modifier.name;
            }), [
                modifier
            ])
        })
    };
}
var inlinePositioning = {
    name: 'inlinePositioning',
    defaultValue: false,
    fn: function fn(instance) {
        var reference = instance.reference;
        function isEnabled() {
            return !!instance.props.inlinePositioning;
        }
        var placement;
        var cursorRectIndex = -1;
        var isInternalUpdate = false;
        var triedPlacements = [];
        var modifier = {
            name: 'tippyInlinePositioning',
            enabled: true,
            phase: 'afterWrite',
            fn: function fn(_ref2) {
                var state = _ref2.state;
                if (isEnabled()) {
                    if (triedPlacements.indexOf(state.placement) !== -1) triedPlacements = [];
                    if (placement !== state.placement && triedPlacements.indexOf(state.placement) === -1) {
                        triedPlacements.push(state.placement);
                        instance.setProps({
                            // @ts-ignore - unneeded DOMRect properties
                            getReferenceClientRect: function getReferenceClientRect() {
                                return _getReferenceClientRect(state.placement);
                            }
                        });
                    }
                    placement = state.placement;
                }
            }
        };
        function _getReferenceClientRect(placement) {
            return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);
        }
        function setInternalProps(partialProps) {
            isInternalUpdate = true;
            instance.setProps(partialProps);
            isInternalUpdate = false;
        }
        function addModifier() {
            if (!isInternalUpdate) setInternalProps(getProps(instance.props, modifier));
        }
        return {
            onCreate: addModifier,
            onAfterUpdate: addModifier,
            onTrigger: function onTrigger(_, event) {
                if (isMouseEvent(event)) {
                    var rects = arrayFrom(instance.reference.getClientRects());
                    var cursorRect = rects.find(function(rect) {
                        return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;
                    });
                    var index = rects.indexOf(cursorRect);
                    cursorRectIndex = index > -1 ? index : cursorRectIndex;
                }
            },
            onHidden: function onHidden() {
                cursorRectIndex = -1;
            }
        };
    }
};
function getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {
    // Not an inline element, or placement is not yet known
    if (clientRects.length < 2 || currentBasePlacement === null) return boundingRect;
     // There are two rects and they are disjoined
    if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) return clientRects[cursorRectIndex] || boundingRect;
    switch(currentBasePlacement){
        case 'top':
        case 'bottom':
            var firstRect = clientRects[0];
            var lastRect = clientRects[clientRects.length - 1];
            var isTop = currentBasePlacement === 'top';
            var top = firstRect.top;
            var bottom = lastRect.bottom;
            var left = isTop ? firstRect.left : lastRect.left;
            var right = isTop ? firstRect.right : lastRect.right;
            var width = right - left;
            var height = bottom - top;
            return {
                top: top,
                bottom: bottom,
                left: left,
                right: right,
                width: width,
                height: height
            };
        case 'left':
        case 'right':
            var minLeft = Math.min.apply(Math, clientRects.map(function(rects) {
                return rects.left;
            }));
            var maxRight = Math.max.apply(Math, clientRects.map(function(rects) {
                return rects.right;
            }));
            var measureRects = clientRects.filter(function(rect) {
                return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;
            });
            var _top = measureRects[0].top;
            var _bottom = measureRects[measureRects.length - 1].bottom;
            var _left = minLeft;
            var _right = maxRight;
            var _width = _right - _left;
            var _height = _bottom - _top;
            return {
                top: _top,
                bottom: _bottom,
                left: _left,
                right: _right,
                width: _width,
                height: _height
            };
        default:
            return boundingRect;
    }
}
var sticky = {
    name: 'sticky',
    defaultValue: false,
    fn: function fn(instance) {
        var reference = instance.reference, popper = instance.popper;
        function getReference() {
            return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;
        }
        function shouldCheck(value) {
            return instance.props.sticky === true || instance.props.sticky === value;
        }
        var prevRefRect = null;
        var prevPopRect = null;
        function updatePosition() {
            var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;
            var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;
            if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {
                if (instance.popperInstance) instance.popperInstance.update();
            }
            prevRefRect = currentRefRect;
            prevPopRect = currentPopRect;
            if (instance.state.isMounted) requestAnimationFrame(updatePosition);
        }
        return {
            onMount: function onMount() {
                if (instance.props.sticky) updatePosition();
            }
        };
    }
};
function areRectsDifferent(rectA, rectB) {
    if (rectA && rectB) return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;
    return true;
}
tippy.setDefaultProps({
    render: render
});
exports.default = tippy;

},{"@popperjs/core":"7unqC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7unqC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
parcelHelpers.export(exports, "createPopperBase", ()=>(0, _createPopperJs.createPopper));
parcelHelpers.export(exports, "createPopper", ()=>(0, _popperJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper));
var _enumsJs = require("./enums.js");
parcelHelpers.exportAll(_enumsJs, exports);
var _indexJs = require("./modifiers/index.js"); // eslint-disable-next-line import/no-unused-modules
parcelHelpers.exportAll(_indexJs, exports);
var _createPopperJs = require("./createPopper.js");
var _popperJs = require("./popper.js");
var _popperLiteJs = require("./popper-lite.js");

},{"./enums.js":false,"./modifiers/index.js":"cap3W","./createPopper.js":false,"./popper.js":"1PuRF","./popper-lite.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCAq5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "top", ()=>top);
parcelHelpers.export(exports, "bottom", ()=>bottom);
parcelHelpers.export(exports, "right", ()=>right);
parcelHelpers.export(exports, "left", ()=>left);
parcelHelpers.export(exports, "auto", ()=>auto);
parcelHelpers.export(exports, "basePlacements", ()=>basePlacements);
parcelHelpers.export(exports, "start", ()=>start);
parcelHelpers.export(exports, "end", ()=>end);
parcelHelpers.export(exports, "clippingParents", ()=>clippingParents);
parcelHelpers.export(exports, "viewport", ()=>viewport);
parcelHelpers.export(exports, "popper", ()=>popper);
parcelHelpers.export(exports, "reference", ()=>reference);
parcelHelpers.export(exports, "variationPlacements", ()=>variationPlacements);
parcelHelpers.export(exports, "placements", ()=>placements);
parcelHelpers.export(exports, "beforeRead", ()=>beforeRead);
parcelHelpers.export(exports, "read", ()=>read);
parcelHelpers.export(exports, "afterRead", ()=>afterRead);
parcelHelpers.export(exports, "beforeMain", ()=>beforeMain);
parcelHelpers.export(exports, "main", ()=>main);
parcelHelpers.export(exports, "afterMain", ()=>afterMain);
parcelHelpers.export(exports, "beforeWrite", ()=>beforeWrite);
parcelHelpers.export(exports, "write", ()=>write);
parcelHelpers.export(exports, "afterWrite", ()=>afterWrite);
parcelHelpers.export(exports, "modifierPhases", ()=>modifierPhases);
var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [
    top,
    bottom,
    right,
    left
];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {
    return acc.concat([
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []);
var placements = /*#__PURE__*/ [].concat(basePlacements, [
    auto
]).reduce(function(acc, placement) {
    return acc.concat([
        placement,
        placement + "-" + start,
        placement + "-" + end
    ]);
}, []); // modifiers that need to read the DOM
var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers
var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)
var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cap3W":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "applyStyles", ()=>(0, _applyStylesJsDefault.default));
parcelHelpers.export(exports, "arrow", ()=>(0, _arrowJsDefault.default));
parcelHelpers.export(exports, "computeStyles", ()=>(0, _computeStylesJsDefault.default));
parcelHelpers.export(exports, "eventListeners", ()=>(0, _eventListenersJsDefault.default));
parcelHelpers.export(exports, "flip", ()=>(0, _flipJsDefault.default));
parcelHelpers.export(exports, "hide", ()=>(0, _hideJsDefault.default));
parcelHelpers.export(exports, "offset", ()=>(0, _offsetJsDefault.default));
parcelHelpers.export(exports, "popperOffsets", ()=>(0, _popperOffsetsJsDefault.default));
parcelHelpers.export(exports, "preventOverflow", ()=>(0, _preventOverflowJsDefault.default));
var _applyStylesJs = require("./applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _arrowJs = require("./arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _computeStylesJs = require("./computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _eventListenersJs = require("./eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _flipJs = require("./flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _hideJs = require("./hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _offsetJs = require("./offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _popperOffsetsJs = require("./popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _preventOverflowJs = require("./preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);

},{"./applyStyles.js":"4iMn4","./arrow.js":false,"./computeStyles.js":false,"./eventListeners.js":false,"./flip.js":false,"./hide.js":false,"./offset.js":false,"./popperOffsets.js":false,"./preventOverflow.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iMn4":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getNodeNameJs = require("../dom-utils/getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("../dom-utils/instanceOf.js"); // This modifier takes the styles prepared by the `computeStyles` modifier
// and applies them to the HTMLElements such as popper and arrow
function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
        var style = state.styles[name] || {};
        var attributes = state.attributes[name] || {};
        var element = state.elements[name]; // arrow is optional + virtual elements
        if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
         // Flow doesn't support to extend this property, but it's the most
        // effective way to apply styles to an HTMLElement
        // $FlowFixMe[cannot-write]
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(name) {
            var value = attributes[name];
            if (value === false) element.removeAttribute(name);
            else element.setAttribute(name, value === true ? '' : value);
        });
    });
}
function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
        popper: {
            position: state.options.strategy,
            left: '0',
            top: '0',
            margin: '0'
        },
        arrow: {
            position: 'absolute'
        },
        reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) Object.assign(state.elements.arrow.style, initialStyles.arrow);
    return function() {
        Object.keys(state.elements).forEach(function(name) {
            var element = state.elements[name];
            var attributes = state.attributes[name] || {};
            var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them
            var style = styleProperties.reduce(function(style, property) {
                style[property] = '';
                return style;
            }, {}); // arrow is optional + virtual elements
            if (!(0, _instanceOfJs.isHTMLElement)(element) || !(0, _getNodeNameJsDefault.default)(element)) return;
            Object.assign(element.style, style);
            Object.keys(attributes).forEach(function(attribute) {
                element.removeAttribute(attribute);
            });
        });
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect,
    requires: [
        'computeStyles'
    ]
};

},{"../dom-utils/getNodeName.js":"a2Qom","../dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2Qom":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeName);
function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gYFUC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isElement", ()=>isElement);
parcelHelpers.export(exports, "isHTMLElement", ()=>isHTMLElement);
parcelHelpers.export(exports, "isShadowRoot", ()=>isShadowRoot);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function isElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).Element;
    return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
    var OwnElement = (0, _getWindowJsDefault.default)(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') return false;
    var OwnElement = (0, _getWindowJsDefault.default)(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SkOo":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindow);
function getWindow(node) {
    if (node == null) return window;
    if (node.toString() !== '[object Window]') {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
    }
    return node;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31HFW":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _containsJs = require("../dom-utils/contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _withinJs = require("../utils/within.js");
var _mergePaddingObjectJs = require("../utils/mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("../utils/expandToHashMap.js");
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
        placement: state.placement
    })) : padding;
    return (0, _mergePaddingObjectJsDefault.default)(typeof padding !== 'number' ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
};
function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var axis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var isVertical = [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';
    if (!arrowElement || !popperOffsets) return;
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = (0, _getLayoutRectJsDefault.default)(arrowElement);
    var minProp = axis === 'y' ? (0, _enumsJs.top) : (0, _enumsJs.left);
    var maxProp = axis === 'y' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = (0, _getOffsetParentJsDefault.default)(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds
    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = (0, _withinJs.within)(min, center, max); // Prevents breaking syntax highlighting...
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}
function effect(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
    if (arrowElement == null) return;
     // CSS selector
    if (typeof arrowElement === 'string') {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) return;
    }
    if (!(0, _containsJsDefault.default)(state.elements.popper, arrowElement)) return;
    state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect,
    requires: [
        'popperOffsets'
    ],
    requiresIfExists: [
        'preventOverflow'
    ]
};

},{"../utils/getBasePlacement.js":"59Wp3","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/contains.js":"4QxRR","../dom-utils/getOffsetParent.js":"laoYw","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/within.js":"3glSz","../utils/mergePaddingObject.js":"lEIf9","../utils/expandToHashMap.js":"iQlH5","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59Wp3":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBasePlacement);
var _enumsJs = require("../enums.js");
function getBasePlacement(placement) {
    return placement.split('-')[0];
}

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jvjuf":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getLayoutRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js"); // Returns the layout rect of an element relative to its offsetParent. Layout
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
function getLayoutRect(element) {
    var clientRect = (0, _getBoundingClientRectJsDefault.default)(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) width = clientRect.width;
    if (Math.abs(clientRect.height - height) <= 1) height = clientRect.height;
    return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width: width,
        height: height
    };
}

},{"./getBoundingClientRect.js":"9CFSQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9CFSQ":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getBoundingClientRect);
var _instanceOfJs = require("./instanceOf.js");
var _mathJs = require("../utils/math.js");
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) includeScale = false;
    if (isFixedStrategy === void 0) isFixedStrategy = false;
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && (0, _instanceOfJs.isHTMLElement)(element)) {
        scaleX = element.offsetWidth > 0 ? (0, _mathJs.round)(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? (0, _mathJs.round)(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = (0, _instanceOfJs.isElement)(element) ? (0, _getWindowJsDefault.default)(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !(0, _isLayoutViewportJsDefault.default)() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: y + height,
        left: x,
        x: x,
        y: y
    };
}

},{"./instanceOf.js":"gYFUC","../utils/math.js":"gQqVe","./getWindow.js":"2SkOo","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gQqVe":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "round", ()=>round);
var max = Math.max;
var min = Math.min;
var round = Math.round;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3ipHv":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isLayoutViewport);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test((0, _userAgentJsDefault.default)());
}

},{"../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hEx0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getUAString);
function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
    }).join(' ');
    return navigator.userAgent;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4QxRR":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>contains);
var _instanceOfJs = require("./instanceOf.js");
function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method
    if (parent.contains(child)) return true;
    else if (rootNode && (0, _instanceOfJs.isShadowRoot)(rootNode)) {
        var next = child;
        do {
            if (next && parent.isSameNode(next)) return true;
             // $FlowFixMe[prop-missing]: need a better way to handle this...
            next = next.parentNode || next.host;
        }while (next);
    } // Give up, the result is false
    return false;
}

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"laoYw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOffsetParent);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _isTableElementJs = require("./isTableElement.js");
var _isTableElementJsDefault = parcelHelpers.interopDefault(_isTableElementJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _userAgentJs = require("../utils/userAgent.js");
var _userAgentJsDefault = parcelHelpers.interopDefault(_userAgentJs);
function getTrueOffsetParent(element) {
    if (!(0, _instanceOfJs.isHTMLElement)(element) || // https://github.com/popperjs/popper-core/issues/837
    (0, _getComputedStyleJsDefault.default)(element).position === 'fixed') return null;
    return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block
function getContainingBlock(element) {
    var isFirefox = /firefox/i.test((0, _userAgentJsDefault.default)());
    var isIE = /Trident/i.test((0, _userAgentJsDefault.default)());
    if (isIE && (0, _instanceOfJs.isHTMLElement)(element)) {
        // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
        var elementCss = (0, _getComputedStyleJsDefault.default)(element);
        if (elementCss.position === 'fixed') return null;
    }
    var currentNode = (0, _getParentNodeJsDefault.default)(element);
    if ((0, _instanceOfJs.isShadowRoot)(currentNode)) currentNode = currentNode.host;
    while((0, _instanceOfJs.isHTMLElement)(currentNode) && [
        'html',
        'body'
    ].indexOf((0, _getNodeNameJsDefault.default)(currentNode)) < 0){
        var css = (0, _getComputedStyleJsDefault.default)(currentNode); // This is non-exhaustive but covers the most common CSS properties that
        // create a containing block.
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
        if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || [
            'transform',
            'perspective'
        ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') return currentNode;
        else currentNode = currentNode.parentNode;
    }
    return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
function getOffsetParent(element) {
    var window = (0, _getWindowJsDefault.default)(element);
    var offsetParent = getTrueOffsetParent(element);
    while(offsetParent && (0, _isTableElementJsDefault.default)(offsetParent) && (0, _getComputedStyleJsDefault.default)(offsetParent).position === 'static')offsetParent = getTrueOffsetParent(offsetParent);
    if (offsetParent && ((0, _getNodeNameJsDefault.default)(offsetParent) === 'html' || (0, _getNodeNameJsDefault.default)(offsetParent) === 'body' && (0, _getComputedStyleJsDefault.default)(offsetParent).position === 'static')) return window;
    return offsetParent || getContainingBlock(element) || window;
}

},{"./getWindow.js":"2SkOo","./getNodeName.js":"a2Qom","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./isTableElement.js":"2qBb7","./getParentNode.js":"bIHpd","../utils/userAgent.js":"1hEx0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mZjB":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getComputedStyle);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getComputedStyle(element) {
    return (0, _getWindowJsDefault.default)(element).getComputedStyle(element);
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qBb7":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isTableElement);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
function isTableElement(element) {
    return [
        'table',
        'td',
        'th'
    ].indexOf((0, _getNodeNameJsDefault.default)(element)) >= 0;
}

},{"./getNodeName.js":"a2Qom","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bIHpd":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getParentNode);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _instanceOfJs = require("./instanceOf.js");
function getParentNode(element) {
    if ((0, _getNodeNameJsDefault.default)(element) === 'html') return element;
    return(// $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ((0, _instanceOfJs.isShadowRoot)(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    (0, _getDocumentElementJsDefault.default)(element) // fallback
    );
}

},{"./getNodeName.js":"a2Qom","./getDocumentElement.js":"eJ9Y1","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJ9Y1":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentElement);
var _instanceOfJs = require("./instanceOf.js");
function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (((0, _instanceOfJs.isElement)(element) ? element.ownerDocument : element.document) || window.document).documentElement;
}

},{"./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xlom":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getMainAxisFromPlacement);
function getMainAxisFromPlacement(placement) {
    return [
        'top',
        'bottom'
    ].indexOf(placement) >= 0 ? 'x' : 'y';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3glSz":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "within", ()=>within);
parcelHelpers.export(exports, "withinMaxClamp", ()=>withinMaxClamp);
var _mathJs = require("./math.js");
function within(min, value, max) {
    return (0, _mathJs.max)(min, (0, _mathJs.min)(value, max));
}
function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
}

},{"./math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lEIf9":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergePaddingObject);
var _getFreshSideObjectJs = require("./getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
function mergePaddingObject(paddingObject) {
    return Object.assign({}, (0, _getFreshSideObjectJsDefault.default)(), paddingObject);
}

},{"./getFreshSideObject.js":"g4xOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4xOt":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getFreshSideObject);
function getFreshSideObject() {
    return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQlH5":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>expandToHashMap);
function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
        hashMap[key] = value;
        return hashMap;
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDlm2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapToStyles", ()=>mapToStyles);
var _enumsJs = require("../enums.js");
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getWindowJs = require("../dom-utils/getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("../dom-utils/getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _mathJs = require("../utils/math.js"); // eslint-disable-next-line import/no-unused-modules
var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.
function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
        x: (0, _mathJs.round)(x * dpr) / dpr || 0,
        y: (0, _mathJs.round)(y * dpr) / dpr || 0
    };
}
function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
        x: x,
        y: y
    }) : {
        x: x,
        y: y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = (0, _enumsJs.left);
    var sideY = (0, _enumsJs.top);
    var win = window;
    if (adaptive) {
        var offsetParent = (0, _getOffsetParentJsDefault.default)(popper);
        var heightProp = 'clientHeight';
        var widthProp = 'clientWidth';
        if (offsetParent === (0, _getWindowJsDefault.default)(popper)) {
            offsetParent = (0, _getDocumentElementJsDefault.default)(popper);
            if ((0, _getComputedStyleJsDefault.default)(offsetParent).position !== 'static' && position === 'absolute') {
                heightProp = 'scrollHeight';
                widthProp = 'scrollWidth';
            }
        } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it
        offsetParent;
        if (placement === (0, _enumsJs.top) || (placement === (0, _enumsJs.left) || placement === (0, _enumsJs.right)) && variation === (0, _enumsJs.end)) {
            sideY = (0, _enumsJs.bottom);
            var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
            y -= offsetY - popperRect.height;
            y *= gpuAcceleration ? 1 : -1;
        }
        if (placement === (0, _enumsJs.left) || (placement === (0, _enumsJs.top) || placement === (0, _enumsJs.bottom)) && variation === (0, _enumsJs.end)) {
            sideX = (0, _enumsJs.right);
            var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
            x -= offsetX - popperRect.width;
            x *= gpuAcceleration ? 1 : -1;
        }
    }
    var commonStyles = Object.assign({
        position: position
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x,
        y: y
    }, (0, _getWindowJsDefault.default)(popper)) : {
        x: x,
        y: y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}
function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
        placement: (0, _getBasePlacementJsDefault.default)(state.placement),
        variation: (0, _getVariationJsDefault.default)(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration: gpuAcceleration,
        isFixed: state.options.strategy === 'fixed'
    };
    if (state.modifiersData.popperOffsets != null) state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
    })));
    if (state.modifiersData.arrow != null) state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
    })));
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-placement': state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
};

},{"../enums.js":"lCAq5","../dom-utils/getOffsetParent.js":"laoYw","../dom-utils/getWindow.js":"2SkOo","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getComputedStyle.js":"3mZjB","../utils/getBasePlacement.js":"59Wp3","../utils/getVariation.js":"hIo7Y","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hIo7Y":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getVariation);
function getVariation(placement) {
    return placement.split('-')[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBKsL":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getWindowJs = require("../dom-utils/getWindow.js"); // eslint-disable-next-line import/no-unused-modules
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var passive = {
    passive: true
};
function effect(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window = (0, _getWindowJsDefault.default)(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
    });
    if (resize) window.addEventListener('resize', instance.update, passive);
    return function() {
        if (scroll) scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener('scroll', instance.update, passive);
        });
        if (resize) window.removeEventListener('resize', instance.update, passive);
    };
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
};

},{"../dom-utils/getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv5wq":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getOppositePlacementJs = require("../utils/getOppositePlacement.js");
var _getOppositePlacementJsDefault = parcelHelpers.interopDefault(_getOppositePlacementJs);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getOppositeVariationPlacementJs = require("../utils/getOppositeVariationPlacement.js");
var _getOppositeVariationPlacementJsDefault = parcelHelpers.interopDefault(_getOppositeVariationPlacementJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _computeAutoPlacementJs = require("../utils/computeAutoPlacement.js");
var _computeAutoPlacementJsDefault = parcelHelpers.interopDefault(_computeAutoPlacementJs);
var _enumsJs = require("../enums.js");
var _getVariationJs = require("../utils/getVariation.js"); // eslint-disable-next-line import/no-unused-modules
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
function getExpandedFallbackPlacements(placement) {
    if ((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto)) return [];
    var oppositePlacement = (0, _getOppositePlacementJsDefault.default)(placement);
    return [
        (0, _getOppositeVariationPlacementJsDefault.default)(placement),
        oppositePlacement,
        (0, _getOppositeVariationPlacementJsDefault.default)(oppositePlacement)
    ];
}
function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) return;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = (0, _getBasePlacementJsDefault.default)(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [
        (0, _getOppositePlacementJsDefault.default)(preferredPlacement)
    ] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [
        preferredPlacement
    ].concat(fallbackPlacements).reduce(function(acc, placement) {
        return acc.concat((0, _getBasePlacementJsDefault.default)(placement) === (0, _enumsJs.auto) ? (0, _computeAutoPlacementJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding,
            flipVariations: flipVariations,
            allowedAutoPlacements: allowedAutoPlacements
        }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];
    for(var i = 0; i < placements.length; i++){
        var placement = placements[i];
        var _basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
        var isStartVariation = (0, _getVariationJsDefault.default)(placement) === (0, _enumsJs.start);
        var isVertical = [
            (0, _enumsJs.top),
            (0, _enumsJs.bottom)
        ].indexOf(_basePlacement) >= 0;
        var len = isVertical ? 'width' : 'height';
        var overflow = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            altBoundary: altBoundary,
            padding: padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? (0, _enumsJs.right) : (0, _enumsJs.left) : isStartVariation ? (0, _enumsJs.bottom) : (0, _enumsJs.top);
        if (referenceRect[len] > popperRect[len]) mainVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var altVariationSide = (0, _getOppositePlacementJsDefault.default)(mainVariationSide);
        var checks = [];
        if (checkMainAxis) checks.push(overflow[_basePlacement] <= 0);
        if (checkAltAxis) checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        if (checks.every(function(check) {
            return check;
        })) {
            firstFittingPlacement = placement;
            makeFallbackChecks = false;
            break;
        }
        checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
        // `2` may be desired in some cases – research later
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop(_i) {
            var fittingPlacement = placements.find(function(placement) {
                var checks = checksMap.get(placement);
                if (checks) return checks.slice(0, _i).every(function(check) {
                    return check;
                });
            });
            if (fittingPlacement) {
                firstFittingPlacement = fittingPlacement;
                return "break";
            }
        };
        for(var _i = numberOfChecks; _i > 0; _i--){
            var _ret = _loop(_i);
            if (_ret === "break") break;
        }
    }
    if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
    }
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: [
        'offset'
    ],
    data: {
        _skip: false
    }
};

},{"../utils/getOppositePlacement.js":"a8CY0","../utils/getBasePlacement.js":"59Wp3","../utils/getOppositeVariationPlacement.js":"bKTLC","../utils/detectOverflow.js":"ltCuw","../utils/computeAutoPlacement.js":"gytMj","../enums.js":"lCAq5","../utils/getVariation.js":"hIo7Y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8CY0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositePlacement);
var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
};
function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bKTLC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getOppositeVariationPlacement);
var hash = {
    start: 'end',
    end: 'start'
};
function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltCuw":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>detectOverflow);
var _getClippingRectJs = require("../dom-utils/getClippingRect.js");
var _getClippingRectJsDefault = parcelHelpers.interopDefault(_getClippingRectJs);
var _getDocumentElementJs = require("../dom-utils/getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getBoundingClientRectJs = require("../dom-utils/getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _computeOffsetsJs = require("./computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
var _rectToClientRectJs = require("./rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _enumsJs = require("../enums.js");
var _instanceOfJs = require("../dom-utils/instanceOf.js");
var _mergePaddingObjectJs = require("./mergePaddingObject.js");
var _mergePaddingObjectJsDefault = parcelHelpers.interopDefault(_mergePaddingObjectJs);
var _expandToHashMapJs = require("./expandToHashMap.js"); // eslint-disable-next-line import/no-unused-modules
var _expandToHashMapJsDefault = parcelHelpers.interopDefault(_expandToHashMapJs);
function detectOverflow(state, options) {
    if (options === void 0) options = {};
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? (0, _enumsJs.clippingParents) : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? (0, _enumsJs.viewport) : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? (0, _enumsJs.popper) : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = (0, _mergePaddingObjectJsDefault.default)(typeof padding !== 'number' ? padding : (0, _expandToHashMapJsDefault.default)(padding, (0, _enumsJs.basePlacements)));
    var altContext = elementContext === (0, _enumsJs.popper) ? (0, _enumsJs.reference) : (0, _enumsJs.popper);
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = (0, _getClippingRectJsDefault.default)((0, _instanceOfJs.isElement)(element) ? element : element.contextElement || (0, _getDocumentElementJsDefault.default)(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = (0, _getBoundingClientRectJsDefault.default)(state.elements.reference);
    var popperOffsets = (0, _computeOffsetsJsDefault.default)({
        reference: referenceClientRect,
        element: popperRect,
        strategy: 'absolute',
        placement: placement
    });
    var popperClientRect = (0, _rectToClientRectJsDefault.default)(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === (0, _enumsJs.popper) ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect
    var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element
    if (elementContext === (0, _enumsJs.popper) && offsetData) {
        var offset = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key) {
            var multiply = [
                (0, _enumsJs.right),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 1 : -1;
            var axis = [
                (0, _enumsJs.top),
                (0, _enumsJs.bottom)
            ].indexOf(key) >= 0 ? 'y' : 'x';
            overflowOffsets[key] += offset[axis] * multiply;
        });
    }
    return overflowOffsets;
}

},{"../dom-utils/getClippingRect.js":"eeg2s","../dom-utils/getDocumentElement.js":"eJ9Y1","../dom-utils/getBoundingClientRect.js":"9CFSQ","./computeOffsets.js":"7jtXk","./rectToClientRect.js":"cQ3tg","../enums.js":"lCAq5","../dom-utils/instanceOf.js":"gYFUC","./mergePaddingObject.js":"lEIf9","./expandToHashMap.js":"iQlH5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eeg2s":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getClippingRect);
var _enumsJs = require("../enums.js");
var _getViewportRectJs = require("./getViewportRect.js");
var _getViewportRectJsDefault = parcelHelpers.interopDefault(_getViewportRectJs);
var _getDocumentRectJs = require("./getDocumentRect.js");
var _getDocumentRectJsDefault = parcelHelpers.interopDefault(_getDocumentRectJs);
var _listScrollParentsJs = require("./listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _instanceOfJs = require("./instanceOf.js");
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _rectToClientRectJs = require("../utils/rectToClientRect.js");
var _rectToClientRectJsDefault = parcelHelpers.interopDefault(_rectToClientRectJs);
var _mathJs = require("../utils/math.js");
function getInnerBoundingClientRect(element, strategy) {
    var rect = (0, _getBoundingClientRectJsDefault.default)(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === (0, _enumsJs.viewport) ? (0, _rectToClientRectJsDefault.default)((0, _getViewportRectJsDefault.default)(element, strategy)) : (0, _instanceOfJs.isElement)(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : (0, _rectToClientRectJsDefault.default)((0, _getDocumentRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`
function getClippingParents(element) {
    var clippingParents = (0, _listScrollParentsJsDefault.default)((0, _getParentNodeJsDefault.default)(element));
    var canEscapeClipping = [
        'absolute',
        'fixed'
    ].indexOf((0, _getComputedStyleJsDefault.default)(element).position) >= 0;
    var clipperElement = canEscapeClipping && (0, _instanceOfJs.isHTMLElement)(element) ? (0, _getOffsetParentJsDefault.default)(element) : element;
    if (!(0, _instanceOfJs.isElement)(clipperElement)) return [];
     // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414
    return clippingParents.filter(function(clippingParent) {
        return (0, _instanceOfJs.isElement)(clippingParent) && (0, _containsJsDefault.default)(clippingParent, clipperElement) && (0, _getNodeNameJsDefault.default)(clippingParent) !== 'body';
    });
} // Gets the maximum area that the element is visible in due to any number of
function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [
        rootBoundary
    ]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = (0, _mathJs.max)(rect.top, accRect.top);
        accRect.right = (0, _mathJs.min)(rect.right, accRect.right);
        accRect.bottom = (0, _mathJs.min)(rect.bottom, accRect.bottom);
        accRect.left = (0, _mathJs.max)(rect.left, accRect.left);
        return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
}

},{"../enums.js":"lCAq5","./getViewportRect.js":"cnH2G","./getDocumentRect.js":"d94SC","./listScrollParents.js":"2di3T","./getOffsetParent.js":"laoYw","./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./instanceOf.js":"gYFUC","./getBoundingClientRect.js":"9CFSQ","./getParentNode.js":"bIHpd","./contains.js":"4QxRR","./getNodeName.js":"a2Qom","../utils/rectToClientRect.js":"cQ3tg","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cnH2G":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getViewportRect);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _isLayoutViewportJs = require("./isLayoutViewport.js");
var _isLayoutViewportJsDefault = parcelHelpers.interopDefault(_isLayoutViewportJs);
function getViewportRect(element, strategy) {
    var win = (0, _getWindowJsDefault.default)(element);
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = (0, _isLayoutViewportJsDefault.default)();
        if (layoutViewport || !layoutViewport && strategy === 'fixed') {
            x = visualViewport.offsetLeft;
            y = visualViewport.offsetTop;
        }
    }
    return {
        width: width,
        height: height,
        x: x + (0, _getWindowScrollBarXJsDefault.default)(element),
        y: y
    };
}

},{"./getWindow.js":"2SkOo","./getDocumentElement.js":"eJ9Y1","./getWindowScrollBarX.js":"sz4Ld","./isLayoutViewport.js":"3ipHv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"sz4Ld":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScrollBarX);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (0, _getBoundingClientRectJsDefault.default)((0, _getDocumentElementJsDefault.default)(element)).left + (0, _getWindowScrollJsDefault.default)(element).scrollLeft;
}

},{"./getBoundingClientRect.js":"9CFSQ","./getDocumentElement.js":"eJ9Y1","./getWindowScroll.js":"1XUtN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XUtN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getWindowScroll);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
function getWindowScroll(node) {
    var win = (0, _getWindowJsDefault.default)(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
    };
}

},{"./getWindow.js":"2SkOo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d94SC":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getDocumentRect);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _mathJs = require("../utils/math.js"); // Gets the entire size of the scrollable document area, even extending outside
function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html = (0, _getDocumentElementJsDefault.default)(element);
    var winScroll = (0, _getWindowScrollJsDefault.default)(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = (0, _mathJs.max)(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = (0, _mathJs.max)(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + (0, _getWindowScrollBarXJsDefault.default)(element);
    var y = -winScroll.scrollTop;
    if ((0, _getComputedStyleJsDefault.default)(body || html).direction === 'rtl') x += (0, _mathJs.max)(html.clientWidth, body ? body.clientWidth : 0) - width;
    return {
        width: width,
        height: height,
        x: x,
        y: y
    };
}

},{"./getDocumentElement.js":"eJ9Y1","./getComputedStyle.js":"3mZjB","./getWindowScrollBarX.js":"sz4Ld","./getWindowScroll.js":"1XUtN","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2di3T":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>listScrollParents);
var _getScrollParentJs = require("./getScrollParent.js");
var _getScrollParentJsDefault = parcelHelpers.interopDefault(_getScrollParentJs);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) list = [];
    var scrollParent = (0, _getScrollParentJsDefault.default)(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = (0, _getWindowJsDefault.default)(scrollParent);
    var target = isBody ? [
        win
    ].concat(win.visualViewport || [], (0, _isScrollParentJsDefault.default)(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : updatedList.concat(listScrollParents((0, _getParentNodeJsDefault.default)(target)));
}

},{"./getScrollParent.js":"jy4ZS","./getParentNode.js":"bIHpd","./getWindow.js":"2SkOo","./isScrollParent.js":"9rLGO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jy4ZS":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getScrollParent);
var _getParentNodeJs = require("./getParentNode.js");
var _getParentNodeJsDefault = parcelHelpers.interopDefault(_getParentNodeJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
function getScrollParent(node) {
    if ([
        'html',
        'body',
        '#document'
    ].indexOf((0, _getNodeNameJsDefault.default)(node)) >= 0) // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
    if ((0, _instanceOfJs.isHTMLElement)(node) && (0, _isScrollParentJsDefault.default)(node)) return node;
    return getScrollParent((0, _getParentNodeJsDefault.default)(node));
}

},{"./getParentNode.js":"bIHpd","./isScrollParent.js":"9rLGO","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9rLGO":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>isScrollParent);
var _getComputedStyleJs = require("./getComputedStyle.js");
var _getComputedStyleJsDefault = parcelHelpers.interopDefault(_getComputedStyleJs);
function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = (0, _getComputedStyleJsDefault.default)(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

},{"./getComputedStyle.js":"3mZjB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQ3tg":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rectToClientRect);
function rectToClientRect(rect) {
    return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7jtXk":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeOffsets);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getMainAxisFromPlacementJs = require("./getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _enumsJs = require("../enums.js");
function computeOffsets(_ref) {
    var reference = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? (0, _getBasePlacementJsDefault.default)(placement) : null;
    var variation = placement ? (0, _getVariationJsDefault.default)(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;
    switch(basePlacement){
        case 0, _enumsJs.top:
            offsets = {
                x: commonX,
                y: reference.y - element.height
            };
            break;
        case 0, _enumsJs.bottom:
            offsets = {
                x: commonX,
                y: reference.y + reference.height
            };
            break;
        case 0, _enumsJs.right:
            offsets = {
                x: reference.x + reference.width,
                y: commonY
            };
            break;
        case 0, _enumsJs.left:
            offsets = {
                x: reference.x - element.width,
                y: commonY
            };
            break;
        default:
            offsets = {
                x: reference.x,
                y: reference.y
            };
    }
    var mainAxis = basePlacement ? (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement) : null;
    if (mainAxis != null) {
        var len = mainAxis === 'y' ? 'height' : 'width';
        switch(variation){
            case 0, _enumsJs.start:
                offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
                break;
            case 0, _enumsJs.end:
                offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
                break;
            default:
        }
    }
    return offsets;
}

},{"./getBasePlacement.js":"59Wp3","./getVariation.js":"hIo7Y","./getMainAxisFromPlacement.js":"1Xlom","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytMj":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>computeAutoPlacement);
var _getVariationJs = require("./getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("./detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getBasePlacementJs = require("./getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
function computeAutoPlacement(state, options) {
    if (options === void 0) options = {};
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? (0, _enumsJs.placements) : _options$allowedAutoP;
    var variation = (0, _getVariationJsDefault.default)(placement);
    var placements = variation ? flipVariations ? (0, _enumsJs.variationPlacements) : (0, _enumsJs.variationPlacements).filter(function(placement) {
        return (0, _getVariationJsDefault.default)(placement) === variation;
    }) : (0, _enumsJs.basePlacements);
    var allowedPlacements = placements.filter(function(placement) {
        return allowedAutoPlacements.indexOf(placement) >= 0;
    });
    if (allowedPlacements.length === 0) allowedPlacements = placements;
     // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...
    var overflows = allowedPlacements.reduce(function(acc, placement) {
        acc[placement] = (0, _detectOverflowJsDefault.default)(state, {
            placement: placement,
            boundary: boundary,
            rootBoundary: rootBoundary,
            padding: padding
        })[(0, _getBasePlacementJsDefault.default)(placement)];
        return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
        return overflows[a] - overflows[b];
    });
}

},{"./getVariation.js":"hIo7Y","../enums.js":"lCAq5","./detectOverflow.js":"ltCuw","./getBasePlacement.js":"59Wp3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g4OF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) preventedOffsets = {
        x: 0,
        y: 0
    };
    return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
    };
}
function isAnySideFullyClipped(overflow) {
    return [
        (0, _enumsJs.top),
        (0, _enumsJs.right),
        (0, _enumsJs.bottom),
        (0, _enumsJs.left)
    ].some(function(side) {
        return overflow[side] >= 0;
    });
}
function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = (0, _detectOverflowJsDefault.default)(state, {
        elementContext: 'reference'
    });
    var popperAltOverflow = (0, _detectOverflowJsDefault.default)(state, {
        altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
        referenceClippingOffsets: referenceClippingOffsets,
        popperEscapeOffsets: popperEscapeOffsets,
        isReferenceHidden: isReferenceHidden,
        hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
        'data-popper-reference-hidden': isReferenceHidden,
        'data-popper-escaped': hasPopperEscaped
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: [
        'preventOverflow'
    ],
    fn: hide
};

},{"../enums.js":"lCAq5","../utils/detectOverflow.js":"ltCuw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3GKVY":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "distanceAndSkiddingToXY", ()=>distanceAndSkiddingToXY);
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _enumsJs = require("../enums.js"); // eslint-disable-next-line import/no-unused-modules
function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = (0, _getBasePlacementJsDefault.default)(placement);
    var invertDistance = [
        (0, _enumsJs.left),
        (0, _enumsJs.top)
    ].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
        placement: placement
    })) : offset, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [
        (0, _enumsJs.left),
        (0, _enumsJs.right)
    ].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
    } : {
        x: skidding,
        y: distance
    };
}
function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset = _options$offset === void 0 ? [
        0,
        0
    ] : _options$offset;
    var data = (0, _enumsJs.placements).reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
        return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x;
        state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: [
        'popperOffsets'
    ],
    fn: offset
};

},{"../utils/getBasePlacement.js":"59Wp3","../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6I679":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _computeOffsetsJs = require("../utils/computeOffsets.js");
var _computeOffsetsJsDefault = parcelHelpers.interopDefault(_computeOffsetsJs);
function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = (0, _computeOffsetsJsDefault.default)({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: 'absolute',
        placement: state.placement
    });
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
};

},{"../utils/computeOffsets.js":"7jtXk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AMhb":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _enumsJs = require("../enums.js");
var _getBasePlacementJs = require("../utils/getBasePlacement.js");
var _getBasePlacementJsDefault = parcelHelpers.interopDefault(_getBasePlacementJs);
var _getMainAxisFromPlacementJs = require("../utils/getMainAxisFromPlacement.js");
var _getMainAxisFromPlacementJsDefault = parcelHelpers.interopDefault(_getMainAxisFromPlacementJs);
var _getAltAxisJs = require("../utils/getAltAxis.js");
var _getAltAxisJsDefault = parcelHelpers.interopDefault(_getAltAxisJs);
var _withinJs = require("../utils/within.js");
var _getLayoutRectJs = require("../dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _getOffsetParentJs = require("../dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _detectOverflowJs = require("../utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _getVariationJs = require("../utils/getVariation.js");
var _getVariationJsDefault = parcelHelpers.interopDefault(_getVariationJs);
var _getFreshSideObjectJs = require("../utils/getFreshSideObject.js");
var _getFreshSideObjectJsDefault = parcelHelpers.interopDefault(_getFreshSideObjectJs);
var _mathJs = require("../utils/math.js");
function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = (0, _detectOverflowJsDefault.default)(state, {
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        altBoundary: altBoundary
    });
    var basePlacement = (0, _getBasePlacementJsDefault.default)(state.placement);
    var variation = (0, _getVariationJsDefault.default)(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = (0, _getMainAxisFromPlacementJsDefault.default)(basePlacement);
    var altAxis = (0, _getAltAxisJsDefault.default)(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
    } : Object.assign({
        mainAxis: 0,
        altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
        x: 0,
        y: 0
    };
    if (!popperOffsets) return;
    if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === 'y' ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var altSide = mainAxis === 'y' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var len = mainAxis === 'y' ? 'height' : 'width';
        var offset = popperOffsets[mainAxis];
        var min = offset + overflow[mainSide];
        var max = offset - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === (0, _enumsJs.start) ? referenceRect[len] : popperRect[len];
        var maxLen = variation === (0, _enumsJs.start) ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
        // outside the reference bounds
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? (0, _getLayoutRectJsDefault.default)(arrowElement) : {
            width: 0,
            height: 0
        };
        var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : (0, _getFreshSideObjectJsDefault.default)();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
        // to include its full size in the calculation. If the reference is small
        // and near the edge of a boundary, the popper can overflow even if the
        // reference is not overflowing as well (e.g. virtual elements with no
        // width or height)
        var arrowLen = (0, _withinJs.within)(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && (0, _getOffsetParentJsDefault.default)(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset + maxOffset - offsetModifierValue;
        var preventedOffset = (0, _withinJs.within)(tether ? (0, _mathJs.min)(min, tetherMin) : min, offset, tether ? (0, _mathJs.max)(max, tetherMax) : max);
        popperOffsets[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset;
    }
    if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === 'x' ? (0, _enumsJs.top) : (0, _enumsJs.left);
        var _altSide = mainAxis === 'x' ? (0, _enumsJs.bottom) : (0, _enumsJs.right);
        var _offset = popperOffsets[altAxis];
        var _len = altAxis === 'y' ? 'height' : 'width';
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [
            (0, _enumsJs.top),
            (0, _enumsJs.left)
        ].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? (0, _withinJs.withinMaxClamp)(_tetherMin, _offset, _tetherMax) : (0, _withinJs.within)(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules
exports.default = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: [
        'offset'
    ]
};

},{"../enums.js":"lCAq5","../utils/getBasePlacement.js":"59Wp3","../utils/getMainAxisFromPlacement.js":"1Xlom","../utils/getAltAxis.js":"59FWE","../utils/within.js":"3glSz","../dom-utils/getLayoutRect.js":"jvjuf","../dom-utils/getOffsetParent.js":"laoYw","../utils/detectOverflow.js":"ltCuw","../utils/getVariation.js":"hIo7Y","../utils/getFreshSideObject.js":"g4xOt","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59FWE":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getAltAxis);
function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cHuNp":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "popperGenerator", ()=>popperGenerator);
parcelHelpers.export(exports, "createPopper", ()=>createPopper);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _detectOverflowJsDefault.default));
var _getCompositeRectJs = require("./dom-utils/getCompositeRect.js");
var _getCompositeRectJsDefault = parcelHelpers.interopDefault(_getCompositeRectJs);
var _getLayoutRectJs = require("./dom-utils/getLayoutRect.js");
var _getLayoutRectJsDefault = parcelHelpers.interopDefault(_getLayoutRectJs);
var _listScrollParentsJs = require("./dom-utils/listScrollParents.js");
var _listScrollParentsJsDefault = parcelHelpers.interopDefault(_listScrollParentsJs);
var _getOffsetParentJs = require("./dom-utils/getOffsetParent.js");
var _getOffsetParentJsDefault = parcelHelpers.interopDefault(_getOffsetParentJs);
var _orderModifiersJs = require("./utils/orderModifiers.js");
var _orderModifiersJsDefault = parcelHelpers.interopDefault(_orderModifiersJs);
var _debounceJs = require("./utils/debounce.js");
var _debounceJsDefault = parcelHelpers.interopDefault(_debounceJs);
var _mergeByNameJs = require("./utils/mergeByName.js");
var _mergeByNameJsDefault = parcelHelpers.interopDefault(_mergeByNameJs);
var _detectOverflowJs = require("./utils/detectOverflow.js");
var _detectOverflowJsDefault = parcelHelpers.interopDefault(_detectOverflowJs);
var _instanceOfJs = require("./dom-utils/instanceOf.js");
var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
};
function areValidElements() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === 'function');
    });
}
function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) generatorOptions = {};
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
        if (options === void 0) options = defaultOptions;
        var state = {
            placement: 'bottom',
            orderedModifiers: [],
            options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
            modifiersData: {},
            elements: {
                reference: reference,
                popper: popper
            },
            attributes: {},
            styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
            state: state,
            setOptions: function setOptions(setOptionsAction) {
                var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
                cleanupModifierEffects();
                state.options = Object.assign({}, defaultOptions, state.options, options);
                state.scrollParents = {
                    reference: (0, _instanceOfJs.isElement)(reference) ? (0, _listScrollParentsJsDefault.default)(reference) : reference.contextElement ? (0, _listScrollParentsJsDefault.default)(reference.contextElement) : [],
                    popper: (0, _listScrollParentsJsDefault.default)(popper)
                }; // Orders the modifiers based on their dependencies and `phase`
                // properties
                var orderedModifiers = (0, _orderModifiersJsDefault.default)((0, _mergeByNameJsDefault.default)([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers
                state.orderedModifiers = orderedModifiers.filter(function(m) {
                    return m.enabled;
                });
                runModifierEffects();
                return instance.update();
            },
            // Sync update – it will always be executed, even if not necessary. This
            // is useful for low frequency updates where sync behavior simplifies the
            // logic.
            // For high frequency updates (e.g. `resize` and `scroll` events), always
            // prefer the async Popper#update method
            forceUpdate: function forceUpdate() {
                if (isDestroyed) return;
                var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
                // anymore
                if (!areValidElements(reference, popper)) return;
                 // Store the reference and popper rects to be read by modifiers
                state.rects = {
                    reference: (0, _getCompositeRectJsDefault.default)(reference, (0, _getOffsetParentJsDefault.default)(popper), state.options.strategy === 'fixed'),
                    popper: (0, _getLayoutRectJsDefault.default)(popper)
                }; // Modifiers have the ability to reset the current update cycle. The
                // most common use case for this is the `flip` modifier changing the
                // placement, which then needs to re-run all the modifiers, because the
                // logic was previously ran for the previous placement and is therefore
                // stale/incorrect
                state.reset = false;
                state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
                // is filled with the initial data specified by the modifier. This means
                // it doesn't persist and is fresh on each update.
                // To ensure persistent data, use `${name}#persistent`
                state.orderedModifiers.forEach(function(modifier) {
                    return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
                });
                for(var index = 0; index < state.orderedModifiers.length; index++){
                    if (state.reset === true) {
                        state.reset = false;
                        index = -1;
                        continue;
                    }
                    var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
                    if (typeof fn === 'function') state = fn({
                        state: state,
                        options: _options,
                        name: name,
                        instance: instance
                    }) || state;
                }
            },
            // Async and optimistically optimized update – it will not be executed if
            // not necessary (debounced to run at most once-per-tick)
            update: (0, _debounceJsDefault.default)(function() {
                return new Promise(function(resolve) {
                    instance.forceUpdate();
                    resolve(state);
                });
            }),
            destroy: function destroy() {
                cleanupModifierEffects();
                isDestroyed = true;
            }
        };
        if (!areValidElements(reference, popper)) return instance;
        instance.setOptions(options).then(function(state) {
            if (!isDestroyed && options.onFirstUpdate) options.onFirstUpdate(state);
        }); // Modifiers have the ability to execute arbitrary code before the first
        // update cycle runs. They will be executed in the same order as the update
        // cycle. This is useful when a modifier adds some persistent data that
        // other modifiers need to use, but the modifier is run after the dependent
        // one.
        function runModifierEffects() {
            state.orderedModifiers.forEach(function(_ref) {
                var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;
                if (typeof effect === 'function') {
                    var cleanupFn = effect({
                        state: state,
                        name: name,
                        instance: instance,
                        options: options
                    });
                    var noopFn = function noopFn() {};
                    effectCleanupFns.push(cleanupFn || noopFn);
                }
            });
        }
        function cleanupModifierEffects() {
            effectCleanupFns.forEach(function(fn) {
                return fn();
            });
            effectCleanupFns = [];
        }
        return instance;
    };
}
var createPopper = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules

},{"./dom-utils/getCompositeRect.js":"ijPls","./dom-utils/getLayoutRect.js":"jvjuf","./dom-utils/listScrollParents.js":"2di3T","./dom-utils/getOffsetParent.js":"laoYw","./utils/orderModifiers.js":"N0VO0","./utils/debounce.js":"g6Chr","./utils/mergeByName.js":"2zTVN","./utils/detectOverflow.js":false,"./dom-utils/instanceOf.js":"gYFUC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ijPls":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getCompositeRect);
var _getBoundingClientRectJs = require("./getBoundingClientRect.js");
var _getBoundingClientRectJsDefault = parcelHelpers.interopDefault(_getBoundingClientRectJs);
var _getNodeScrollJs = require("./getNodeScroll.js");
var _getNodeScrollJsDefault = parcelHelpers.interopDefault(_getNodeScrollJs);
var _getNodeNameJs = require("./getNodeName.js");
var _getNodeNameJsDefault = parcelHelpers.interopDefault(_getNodeNameJs);
var _instanceOfJs = require("./instanceOf.js");
var _getWindowScrollBarXJs = require("./getWindowScrollBarX.js");
var _getWindowScrollBarXJsDefault = parcelHelpers.interopDefault(_getWindowScrollBarXJs);
var _getDocumentElementJs = require("./getDocumentElement.js");
var _getDocumentElementJsDefault = parcelHelpers.interopDefault(_getDocumentElementJs);
var _isScrollParentJs = require("./isScrollParent.js");
var _isScrollParentJsDefault = parcelHelpers.interopDefault(_isScrollParentJs);
var _mathJs = require("../utils/math.js");
function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = (0, _mathJs.round)(rect.width) / element.offsetWidth || 1;
    var scaleY = (0, _mathJs.round)(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) isFixed = false;
    var isOffsetParentAnElement = (0, _instanceOfJs.isHTMLElement)(offsetParent);
    var offsetParentIsScaled = (0, _instanceOfJs.isHTMLElement)(offsetParent) && isElementScaled(offsetParent);
    var documentElement = (0, _getDocumentElementJsDefault.default)(offsetParent);
    var rect = (0, _getBoundingClientRectJsDefault.default)(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
        scrollLeft: 0,
        scrollTop: 0
    };
    var offsets = {
        x: 0,
        y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if ((0, _getNodeNameJsDefault.default)(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        (0, _isScrollParentJsDefault.default)(documentElement)) scroll = (0, _getNodeScrollJsDefault.default)(offsetParent);
        if ((0, _instanceOfJs.isHTMLElement)(offsetParent)) {
            offsets = (0, _getBoundingClientRectJsDefault.default)(offsetParent, true);
            offsets.x += offsetParent.clientLeft;
            offsets.y += offsetParent.clientTop;
        } else if (documentElement) offsets.x = (0, _getWindowScrollBarXJsDefault.default)(documentElement);
    }
    return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
    };
}

},{"./getBoundingClientRect.js":"9CFSQ","./getNodeScroll.js":"bBjCr","./getNodeName.js":"a2Qom","./instanceOf.js":"gYFUC","./getWindowScrollBarX.js":"sz4Ld","./getDocumentElement.js":"eJ9Y1","./isScrollParent.js":"9rLGO","../utils/math.js":"gQqVe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBjCr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getNodeScroll);
var _getWindowScrollJs = require("./getWindowScroll.js");
var _getWindowScrollJsDefault = parcelHelpers.interopDefault(_getWindowScrollJs);
var _getWindowJs = require("./getWindow.js");
var _getWindowJsDefault = parcelHelpers.interopDefault(_getWindowJs);
var _instanceOfJs = require("./instanceOf.js");
var _getHTMLElementScrollJs = require("./getHTMLElementScroll.js");
var _getHTMLElementScrollJsDefault = parcelHelpers.interopDefault(_getHTMLElementScrollJs);
function getNodeScroll(node) {
    if (node === (0, _getWindowJsDefault.default)(node) || !(0, _instanceOfJs.isHTMLElement)(node)) return (0, _getWindowScrollJsDefault.default)(node);
    else return (0, _getHTMLElementScrollJsDefault.default)(node);
}

},{"./getWindowScroll.js":"1XUtN","./getWindow.js":"2SkOo","./instanceOf.js":"gYFUC","./getHTMLElementScroll.js":"6pwY2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pwY2":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>getHTMLElementScroll);
function getHTMLElementScroll(element) {
    return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"N0VO0":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>orderModifiers);
var _enumsJs = require("../enums.js"); // source: https://stackoverflow.com/questions/49875255
function order(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
        map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively
    function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
            if (!visited.has(dep)) {
                var depModifier = map.get(dep);
                if (depModifier) sort(depModifier);
            }
        });
        result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
        if (!visited.has(modifier.name)) // check for visited object
        sort(modifier);
    });
    return result;
}
function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers); // order based on phase
    return (0, _enumsJs.modifierPhases).reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
            return modifier.phase === phase;
        }));
    }, []);
}

},{"../enums.js":"lCAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6Chr":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>debounce);
function debounce(fn) {
    var pending;
    return function() {
        if (!pending) pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
                pending = undefined;
                resolve(fn());
            });
        });
        return pending;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2zTVN":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mergeByName);
function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged, current) {
        var existing = merged[current.name];
        merged[current.name] = existing ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged;
    }, {}); // IE11 does not support Object.values
    return Object.keys(merged).map(function(key) {
        return merged[key];
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1PuRF":[function(require,module,exports,__globalThis) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createPopperLite", ()=>(0, _popperLiteJs.createPopper)) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "createPopper", ()=>createPopper) // eslint-disable-next-line import/no-unused-modules
;
parcelHelpers.export(exports, "popperGenerator", ()=>(0, _createPopperJs.popperGenerator));
parcelHelpers.export(exports, "defaultModifiers", ()=>defaultModifiers);
parcelHelpers.export(exports, "detectOverflow", ()=>(0, _createPopperJs.detectOverflow));
var _createPopperJs = require("./createPopper.js");
var _eventListenersJs = require("./modifiers/eventListeners.js");
var _eventListenersJsDefault = parcelHelpers.interopDefault(_eventListenersJs);
var _popperOffsetsJs = require("./modifiers/popperOffsets.js");
var _popperOffsetsJsDefault = parcelHelpers.interopDefault(_popperOffsetsJs);
var _computeStylesJs = require("./modifiers/computeStyles.js");
var _computeStylesJsDefault = parcelHelpers.interopDefault(_computeStylesJs);
var _applyStylesJs = require("./modifiers/applyStyles.js");
var _applyStylesJsDefault = parcelHelpers.interopDefault(_applyStylesJs);
var _offsetJs = require("./modifiers/offset.js");
var _offsetJsDefault = parcelHelpers.interopDefault(_offsetJs);
var _flipJs = require("./modifiers/flip.js");
var _flipJsDefault = parcelHelpers.interopDefault(_flipJs);
var _preventOverflowJs = require("./modifiers/preventOverflow.js");
var _preventOverflowJsDefault = parcelHelpers.interopDefault(_preventOverflowJs);
var _arrowJs = require("./modifiers/arrow.js");
var _arrowJsDefault = parcelHelpers.interopDefault(_arrowJs);
var _hideJs = require("./modifiers/hide.js");
var _hideJsDefault = parcelHelpers.interopDefault(_hideJs);
var _popperLiteJs = require("./popper-lite.js");
var _indexJs = require("./modifiers/index.js");
parcelHelpers.exportAll(_indexJs, exports);
var defaultModifiers = [
    (0, _eventListenersJsDefault.default),
    (0, _popperOffsetsJsDefault.default),
    (0, _computeStylesJsDefault.default),
    (0, _applyStylesJsDefault.default),
    (0, _offsetJsDefault.default),
    (0, _flipJsDefault.default),
    (0, _preventOverflowJsDefault.default),
    (0, _arrowJsDefault.default),
    (0, _hideJsDefault.default)
];
var createPopper = /*#__PURE__*/ (0, _createPopperJs.popperGenerator)({
    defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

},{"./createPopper.js":"cHuNp","./modifiers/eventListeners.js":"hBKsL","./modifiers/popperOffsets.js":"6I679","./modifiers/computeStyles.js":"gDlm2","./modifiers/applyStyles.js":"4iMn4","./modifiers/offset.js":"3GKVY","./modifiers/flip.js":"fv5wq","./modifiers/preventOverflow.js":"1AMhb","./modifiers/arrow.js":"31HFW","./modifiers/hide.js":"2g4OF","./popper-lite.js":false,"./modifiers/index.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2hEyg":[function() {},{}]},["9mu7C","8lqZg"], "8lqZg", "parcelRequire94c2")

//# sourceMappingURL=index.975ef6c8.js.map
